
es-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074b8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08007650  08007650  00017650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007674  08007674  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  08007674  08007674  00017674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800767c  0800767c  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800767c  0800767c  0001767c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007680  08007680  00017680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08007684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006008  2000004c  080076d0  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006054  080076d0  00026054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001045e  00000000  00000000  000200bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002265  00000000  00000000  0003051d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  00032788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c68  00000000  00000000  00033750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016aac  00000000  00000000  000343b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000117f3  00000000  00000000  0004ae64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f4fb  00000000  00000000  0005c657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000442c  00000000  00000000  000ebb54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000eff80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000004c 	.word	0x2000004c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007638 	.word	0x08007638

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000050 	.word	0x20000050
 80001d4:	08007638 	.word	0x08007638

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2uiz>:
 80007a4:	004a      	lsls	r2, r1, #1
 80007a6:	d211      	bcs.n	80007cc <__aeabi_d2uiz+0x28>
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d211      	bcs.n	80007d2 <__aeabi_d2uiz+0x2e>
 80007ae:	d50d      	bpl.n	80007cc <__aeabi_d2uiz+0x28>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d40e      	bmi.n	80007d8 <__aeabi_d2uiz+0x34>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d102      	bne.n	80007de <__aeabi_d2uiz+0x3a>
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_uldivmod>:
 80007e4:	b953      	cbnz	r3, 80007fc <__aeabi_uldivmod+0x18>
 80007e6:	b94a      	cbnz	r2, 80007fc <__aeabi_uldivmod+0x18>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	bf08      	it	eq
 80007ec:	2800      	cmpeq	r0, #0
 80007ee:	bf1c      	itt	ne
 80007f0:	f04f 31ff 	movne.w	r1, #4294967295
 80007f4:	f04f 30ff 	movne.w	r0, #4294967295
 80007f8:	f000 b970 	b.w	8000adc <__aeabi_idiv0>
 80007fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000804:	f000 f806 	bl	8000814 <__udivmoddi4>
 8000808:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <__udivmoddi4>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	9e08      	ldr	r6, [sp, #32]
 800081a:	460d      	mov	r5, r1
 800081c:	4604      	mov	r4, r0
 800081e:	460f      	mov	r7, r1
 8000820:	2b00      	cmp	r3, #0
 8000822:	d14a      	bne.n	80008ba <__udivmoddi4+0xa6>
 8000824:	428a      	cmp	r2, r1
 8000826:	4694      	mov	ip, r2
 8000828:	d965      	bls.n	80008f6 <__udivmoddi4+0xe2>
 800082a:	fab2 f382 	clz	r3, r2
 800082e:	b143      	cbz	r3, 8000842 <__udivmoddi4+0x2e>
 8000830:	fa02 fc03 	lsl.w	ip, r2, r3
 8000834:	f1c3 0220 	rsb	r2, r3, #32
 8000838:	409f      	lsls	r7, r3
 800083a:	fa20 f202 	lsr.w	r2, r0, r2
 800083e:	4317      	orrs	r7, r2
 8000840:	409c      	lsls	r4, r3
 8000842:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000846:	fa1f f58c 	uxth.w	r5, ip
 800084a:	fbb7 f1fe 	udiv	r1, r7, lr
 800084e:	0c22      	lsrs	r2, r4, #16
 8000850:	fb0e 7711 	mls	r7, lr, r1, r7
 8000854:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000858:	fb01 f005 	mul.w	r0, r1, r5
 800085c:	4290      	cmp	r0, r2
 800085e:	d90a      	bls.n	8000876 <__udivmoddi4+0x62>
 8000860:	eb1c 0202 	adds.w	r2, ip, r2
 8000864:	f101 37ff 	add.w	r7, r1, #4294967295
 8000868:	f080 811c 	bcs.w	8000aa4 <__udivmoddi4+0x290>
 800086c:	4290      	cmp	r0, r2
 800086e:	f240 8119 	bls.w	8000aa4 <__udivmoddi4+0x290>
 8000872:	3902      	subs	r1, #2
 8000874:	4462      	add	r2, ip
 8000876:	1a12      	subs	r2, r2, r0
 8000878:	b2a4      	uxth	r4, r4
 800087a:	fbb2 f0fe 	udiv	r0, r2, lr
 800087e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000882:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000886:	fb00 f505 	mul.w	r5, r0, r5
 800088a:	42a5      	cmp	r5, r4
 800088c:	d90a      	bls.n	80008a4 <__udivmoddi4+0x90>
 800088e:	eb1c 0404 	adds.w	r4, ip, r4
 8000892:	f100 32ff 	add.w	r2, r0, #4294967295
 8000896:	f080 8107 	bcs.w	8000aa8 <__udivmoddi4+0x294>
 800089a:	42a5      	cmp	r5, r4
 800089c:	f240 8104 	bls.w	8000aa8 <__udivmoddi4+0x294>
 80008a0:	4464      	add	r4, ip
 80008a2:	3802      	subs	r0, #2
 80008a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008a8:	1b64      	subs	r4, r4, r5
 80008aa:	2100      	movs	r1, #0
 80008ac:	b11e      	cbz	r6, 80008b6 <__udivmoddi4+0xa2>
 80008ae:	40dc      	lsrs	r4, r3
 80008b0:	2300      	movs	r3, #0
 80008b2:	e9c6 4300 	strd	r4, r3, [r6]
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d908      	bls.n	80008d0 <__udivmoddi4+0xbc>
 80008be:	2e00      	cmp	r6, #0
 80008c0:	f000 80ed 	beq.w	8000a9e <__udivmoddi4+0x28a>
 80008c4:	2100      	movs	r1, #0
 80008c6:	e9c6 0500 	strd	r0, r5, [r6]
 80008ca:	4608      	mov	r0, r1
 80008cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d0:	fab3 f183 	clz	r1, r3
 80008d4:	2900      	cmp	r1, #0
 80008d6:	d149      	bne.n	800096c <__udivmoddi4+0x158>
 80008d8:	42ab      	cmp	r3, r5
 80008da:	d302      	bcc.n	80008e2 <__udivmoddi4+0xce>
 80008dc:	4282      	cmp	r2, r0
 80008de:	f200 80f8 	bhi.w	8000ad2 <__udivmoddi4+0x2be>
 80008e2:	1a84      	subs	r4, r0, r2
 80008e4:	eb65 0203 	sbc.w	r2, r5, r3
 80008e8:	2001      	movs	r0, #1
 80008ea:	4617      	mov	r7, r2
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d0e2      	beq.n	80008b6 <__udivmoddi4+0xa2>
 80008f0:	e9c6 4700 	strd	r4, r7, [r6]
 80008f4:	e7df      	b.n	80008b6 <__udivmoddi4+0xa2>
 80008f6:	b902      	cbnz	r2, 80008fa <__udivmoddi4+0xe6>
 80008f8:	deff      	udf	#255	; 0xff
 80008fa:	fab2 f382 	clz	r3, r2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f040 8090 	bne.w	8000a24 <__udivmoddi4+0x210>
 8000904:	1a8a      	subs	r2, r1, r2
 8000906:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800090a:	fa1f fe8c 	uxth.w	lr, ip
 800090e:	2101      	movs	r1, #1
 8000910:	fbb2 f5f7 	udiv	r5, r2, r7
 8000914:	fb07 2015 	mls	r0, r7, r5, r2
 8000918:	0c22      	lsrs	r2, r4, #16
 800091a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800091e:	fb0e f005 	mul.w	r0, lr, r5
 8000922:	4290      	cmp	r0, r2
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0x124>
 8000926:	eb1c 0202 	adds.w	r2, ip, r2
 800092a:	f105 38ff 	add.w	r8, r5, #4294967295
 800092e:	d202      	bcs.n	8000936 <__udivmoddi4+0x122>
 8000930:	4290      	cmp	r0, r2
 8000932:	f200 80cb 	bhi.w	8000acc <__udivmoddi4+0x2b8>
 8000936:	4645      	mov	r5, r8
 8000938:	1a12      	subs	r2, r2, r0
 800093a:	b2a4      	uxth	r4, r4
 800093c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000940:	fb07 2210 	mls	r2, r7, r0, r2
 8000944:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000948:	fb0e fe00 	mul.w	lr, lr, r0
 800094c:	45a6      	cmp	lr, r4
 800094e:	d908      	bls.n	8000962 <__udivmoddi4+0x14e>
 8000950:	eb1c 0404 	adds.w	r4, ip, r4
 8000954:	f100 32ff 	add.w	r2, r0, #4294967295
 8000958:	d202      	bcs.n	8000960 <__udivmoddi4+0x14c>
 800095a:	45a6      	cmp	lr, r4
 800095c:	f200 80bb 	bhi.w	8000ad6 <__udivmoddi4+0x2c2>
 8000960:	4610      	mov	r0, r2
 8000962:	eba4 040e 	sub.w	r4, r4, lr
 8000966:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800096a:	e79f      	b.n	80008ac <__udivmoddi4+0x98>
 800096c:	f1c1 0720 	rsb	r7, r1, #32
 8000970:	408b      	lsls	r3, r1
 8000972:	fa22 fc07 	lsr.w	ip, r2, r7
 8000976:	ea4c 0c03 	orr.w	ip, ip, r3
 800097a:	fa05 f401 	lsl.w	r4, r5, r1
 800097e:	fa20 f307 	lsr.w	r3, r0, r7
 8000982:	40fd      	lsrs	r5, r7
 8000984:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000988:	4323      	orrs	r3, r4
 800098a:	fbb5 f8f9 	udiv	r8, r5, r9
 800098e:	fa1f fe8c 	uxth.w	lr, ip
 8000992:	fb09 5518 	mls	r5, r9, r8, r5
 8000996:	0c1c      	lsrs	r4, r3, #16
 8000998:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800099c:	fb08 f50e 	mul.w	r5, r8, lr
 80009a0:	42a5      	cmp	r5, r4
 80009a2:	fa02 f201 	lsl.w	r2, r2, r1
 80009a6:	fa00 f001 	lsl.w	r0, r0, r1
 80009aa:	d90b      	bls.n	80009c4 <__udivmoddi4+0x1b0>
 80009ac:	eb1c 0404 	adds.w	r4, ip, r4
 80009b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009b4:	f080 8088 	bcs.w	8000ac8 <__udivmoddi4+0x2b4>
 80009b8:	42a5      	cmp	r5, r4
 80009ba:	f240 8085 	bls.w	8000ac8 <__udivmoddi4+0x2b4>
 80009be:	f1a8 0802 	sub.w	r8, r8, #2
 80009c2:	4464      	add	r4, ip
 80009c4:	1b64      	subs	r4, r4, r5
 80009c6:	b29d      	uxth	r5, r3
 80009c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80009cc:	fb09 4413 	mls	r4, r9, r3, r4
 80009d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009d4:	fb03 fe0e 	mul.w	lr, r3, lr
 80009d8:	45a6      	cmp	lr, r4
 80009da:	d908      	bls.n	80009ee <__udivmoddi4+0x1da>
 80009dc:	eb1c 0404 	adds.w	r4, ip, r4
 80009e0:	f103 35ff 	add.w	r5, r3, #4294967295
 80009e4:	d26c      	bcs.n	8000ac0 <__udivmoddi4+0x2ac>
 80009e6:	45a6      	cmp	lr, r4
 80009e8:	d96a      	bls.n	8000ac0 <__udivmoddi4+0x2ac>
 80009ea:	3b02      	subs	r3, #2
 80009ec:	4464      	add	r4, ip
 80009ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009f2:	fba3 9502 	umull	r9, r5, r3, r2
 80009f6:	eba4 040e 	sub.w	r4, r4, lr
 80009fa:	42ac      	cmp	r4, r5
 80009fc:	46c8      	mov	r8, r9
 80009fe:	46ae      	mov	lr, r5
 8000a00:	d356      	bcc.n	8000ab0 <__udivmoddi4+0x29c>
 8000a02:	d053      	beq.n	8000aac <__udivmoddi4+0x298>
 8000a04:	b156      	cbz	r6, 8000a1c <__udivmoddi4+0x208>
 8000a06:	ebb0 0208 	subs.w	r2, r0, r8
 8000a0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a12:	40ca      	lsrs	r2, r1
 8000a14:	40cc      	lsrs	r4, r1
 8000a16:	4317      	orrs	r7, r2
 8000a18:	e9c6 7400 	strd	r7, r4, [r6]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	2100      	movs	r1, #0
 8000a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a24:	f1c3 0120 	rsb	r1, r3, #32
 8000a28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a30:	fa25 f101 	lsr.w	r1, r5, r1
 8000a34:	409d      	lsls	r5, r3
 8000a36:	432a      	orrs	r2, r5
 8000a38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3c:	fa1f fe8c 	uxth.w	lr, ip
 8000a40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a44:	fb07 1510 	mls	r5, r7, r0, r1
 8000a48:	0c11      	lsrs	r1, r2, #16
 8000a4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000a52:	428d      	cmp	r5, r1
 8000a54:	fa04 f403 	lsl.w	r4, r4, r3
 8000a58:	d908      	bls.n	8000a6c <__udivmoddi4+0x258>
 8000a5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000a5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a62:	d22f      	bcs.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a64:	428d      	cmp	r5, r1
 8000a66:	d92d      	bls.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a68:	3802      	subs	r0, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	1b49      	subs	r1, r1, r5
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a74:	fb07 1115 	mls	r1, r7, r5, r1
 8000a78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000a80:	4291      	cmp	r1, r2
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x282>
 8000a84:	eb1c 0202 	adds.w	r2, ip, r2
 8000a88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a8c:	d216      	bcs.n	8000abc <__udivmoddi4+0x2a8>
 8000a8e:	4291      	cmp	r1, r2
 8000a90:	d914      	bls.n	8000abc <__udivmoddi4+0x2a8>
 8000a92:	3d02      	subs	r5, #2
 8000a94:	4462      	add	r2, ip
 8000a96:	1a52      	subs	r2, r2, r1
 8000a98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a9c:	e738      	b.n	8000910 <__udivmoddi4+0xfc>
 8000a9e:	4631      	mov	r1, r6
 8000aa0:	4630      	mov	r0, r6
 8000aa2:	e708      	b.n	80008b6 <__udivmoddi4+0xa2>
 8000aa4:	4639      	mov	r1, r7
 8000aa6:	e6e6      	b.n	8000876 <__udivmoddi4+0x62>
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	e6fb      	b.n	80008a4 <__udivmoddi4+0x90>
 8000aac:	4548      	cmp	r0, r9
 8000aae:	d2a9      	bcs.n	8000a04 <__udivmoddi4+0x1f0>
 8000ab0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ab4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	e7a3      	b.n	8000a04 <__udivmoddi4+0x1f0>
 8000abc:	4645      	mov	r5, r8
 8000abe:	e7ea      	b.n	8000a96 <__udivmoddi4+0x282>
 8000ac0:	462b      	mov	r3, r5
 8000ac2:	e794      	b.n	80009ee <__udivmoddi4+0x1da>
 8000ac4:	4640      	mov	r0, r8
 8000ac6:	e7d1      	b.n	8000a6c <__udivmoddi4+0x258>
 8000ac8:	46d0      	mov	r8, sl
 8000aca:	e77b      	b.n	80009c4 <__udivmoddi4+0x1b0>
 8000acc:	3d02      	subs	r5, #2
 8000ace:	4462      	add	r2, ip
 8000ad0:	e732      	b.n	8000938 <__udivmoddi4+0x124>
 8000ad2:	4608      	mov	r0, r1
 8000ad4:	e70a      	b.n	80008ec <__udivmoddi4+0xd8>
 8000ad6:	4464      	add	r4, ip
 8000ad8:	3802      	subs	r0, #2
 8000ada:	e742      	b.n	8000962 <__udivmoddi4+0x14e>

08000adc <__aeabi_idiv0>:
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <HAL_TIM_PWM_PulseFinishedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* LED stuff */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 8000ae8:	2108      	movs	r1, #8
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f004 fe1e 	bl	800572c <HAL_TIM_PWM_Stop_DMA>
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <writeLEDs>:

void writeLEDs(PixelRGB_t* pixel){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	int i,j;

	pBuff = dmaBuffer;
 8000b00:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <writeLEDs+0x84>)
 8000b02:	4a1f      	ldr	r2, [pc, #124]	; (8000b80 <writeLEDs+0x88>)
 8000b04:	601a      	str	r2, [r3, #0]
	  for (i = 0; i < NUM_PIXELS; i++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	e025      	b.n	8000b58 <writeLEDs+0x60>
	  {
		 for (j = 23; j >= 0; j--)
 8000b0c:	2317      	movs	r3, #23
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	e01c      	b.n	8000b4c <writeLEDs+0x54>
		 {
		   if ((pixel[i].data >> j) & 0x01)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d004      	beq.n	8000b34 <writeLEDs+0x3c>
		   {
			 *pBuff = NEOPIXEL_ONE;
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <writeLEDs+0x84>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2243      	movs	r2, #67	; 0x43
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	e003      	b.n	8000b3c <writeLEDs+0x44>
		   }
		   else
		   {
			 *pBuff = NEOPIXEL_ZERO;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <writeLEDs+0x84>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2222      	movs	r2, #34	; 0x22
 8000b3a:	601a      	str	r2, [r3, #0]
		   }
		   pBuff++;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <writeLEDs+0x84>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3304      	adds	r3, #4
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <writeLEDs+0x84>)
 8000b44:	6013      	str	r3, [r2, #0]
		 for (j = 23; j >= 0; j--)
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	dadf      	bge.n	8000b12 <writeLEDs+0x1a>
	  for (i = 0; i < NUM_PIXELS; i++)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3301      	adds	r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b07      	cmp	r3, #7
 8000b5c:	ddd6      	ble.n	8000b0c <writeLEDs+0x14>
	   }
	  }
	  dmaBuffer[DMA_BUFF_SIZE - 1] = 0; // last element must be 0!
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <writeLEDs+0x88>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

	  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, dmaBuffer, DMA_BUFF_SIZE);
 8000b66:	23c1      	movs	r3, #193	; 0xc1
 8000b68:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <writeLEDs+0x88>)
 8000b6a:	2108      	movs	r1, #8
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <writeLEDs+0x8c>)
 8000b6e:	f004 fc2d 	bl	80053cc <HAL_TIM_PWM_Start_DMA>
}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200005cc 	.word	0x200005cc
 8000b80:	200002c8 	.word	0x200002c8
 8000b84:	20000120 	.word	0x20000120

08000b88 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a05      	ldr	r2, [pc, #20]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d102      	bne.n	8000ba0 <HAL_TIM_PeriodElapsedCallback+0x18>
		timer_irq = TRUE;
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
	}
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	40000400 	.word	0x40000400
 8000bb0:	200005f0 	.word	0x200005f0

08000bb4 <stateProcessing>:
//* Packet forwarding begin *//
// DFD processes //
void stateProcessing(void){
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
	state = 0;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <stateProcessing+0x14>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	200005f1 	.word	0x200005f1

08000bcc <stateAwait>:
void stateAwait(void){
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
	state = 1;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <stateAwait+0x14>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	200005f1 	.word	0x200005f1

08000be4 <stateReceived>:
void stateReceived(void){
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
	state = 2;
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <stateReceived+0x14>)
 8000bea:	2202      	movs	r2, #2
 8000bec:	701a      	strb	r2, [r3, #0]
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	200005f1 	.word	0x200005f1

08000bfc <stateSent>:
void stateSent(void){
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
	state = 3;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <stateSent+0x14>)
 8000c02:	2203      	movs	r2, #3
 8000c04:	701a      	strb	r2, [r3, #0]
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	200005f1 	.word	0x200005f1

08000c14 <stateFailure>:
void stateFailure(void){
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
	state = 4;
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <stateFailure+0x14>)
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	701a      	strb	r2, [r3, #0]
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	200005f1 	.word	0x200005f1

08000c2c <handleStore>:
void handleStore(void){
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
	int i;

	// copy Lager to tempLager
	for(i = 0; i < LAGER_SIZE; i++){
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	e00b      	b.n	8000c50 <handleStore+0x24>
		tempLager[i] = Lager[i];
 8000c38:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <handleStore+0x6c>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	7819      	ldrb	r1, [r3, #0]
 8000c40:	4a16      	ldr	r2, [pc, #88]	; (8000c9c <handleStore+0x70>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	460a      	mov	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < LAGER_SIZE; i++){
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b05      	cmp	r3, #5
 8000c54:	ddf0      	ble.n	8000c38 <handleStore+0xc>
	}


	// put package in first free spot (0) in tempLager
	for(i = 0; i < LAGER_SIZE; i++){
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	e010      	b.n	8000c7e <handleStore+0x52>
		if(tempLager[i] == 0){
 8000c5c:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <handleStore+0x70>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d107      	bne.n	8000c78 <handleStore+0x4c>
			tempLager[i] = packageId;
 8000c68:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <handleStore+0x74>)
 8000c6a:	7819      	ldrb	r1, [r3, #0]
 8000c6c:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <handleStore+0x70>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	460a      	mov	r2, r1
 8000c74:	701a      	strb	r2, [r3, #0]
			break;
 8000c76:	e005      	b.n	8000c84 <handleStore+0x58>
	for(i = 0; i < LAGER_SIZE; i++){
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b05      	cmp	r3, #5
 8000c82:	ddeb      	ble.n	8000c5c <handleStore+0x30>
		}
	}

	finishedStore = TRUE;
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <handleStore+0x78>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	701a      	strb	r2, [r3, #0]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	200005f8 	.word	0x200005f8
 8000c9c:	20000600 	.word	0x20000600
 8000ca0:	200005f4 	.word	0x200005f4
 8000ca4:	2000060e 	.word	0x2000060e

08000ca8 <handleSend>:
void handleSend(void){
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
	int i;

	// copy Lager to tempLager
	for(i = 0; i < LAGER_SIZE; i++){
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	e00b      	b.n	8000ccc <handleSend+0x24>
		tempLager[i] = Lager[i];
 8000cb4:	4a17      	ldr	r2, [pc, #92]	; (8000d14 <handleSend+0x6c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	7819      	ldrb	r1, [r3, #0]
 8000cbc:	4a16      	ldr	r2, [pc, #88]	; (8000d18 <handleSend+0x70>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	460a      	mov	r2, r1
 8000cc4:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < LAGER_SIZE; i++){
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	ddf0      	ble.n	8000cb4 <handleSend+0xc>
	}


	// delete package out of tempLager
	for(i = 0; i < LAGER_SIZE; i++){
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	e010      	b.n	8000cfa <handleSend+0x52>
		if(tempLager[i] == packageId){
 8000cd8:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <handleSend+0x70>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	781a      	ldrb	r2, [r3, #0]
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <handleSend+0x74>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d105      	bne.n	8000cf4 <handleSend+0x4c>
			tempLager[i] = 0;
 8000ce8:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <handleSend+0x70>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
			break;
 8000cf2:	e005      	b.n	8000d00 <handleSend+0x58>
	for(i = 0; i < LAGER_SIZE; i++){
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b05      	cmp	r3, #5
 8000cfe:	ddeb      	ble.n	8000cd8 <handleSend+0x30>
		}
	}

	finishedSend = TRUE;
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <handleSend+0x78>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	200005f8 	.word	0x200005f8
 8000d18:	20000600 	.word	0x20000600
 8000d1c:	200005f4 	.word	0x200005f4
 8000d20:	2000060d 	.word	0x2000060d

08000d24 <updateLager>:
void updateLager(void){
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
	int i;

	// copy tempLager to Lager
	for(i = 0; i < LAGER_SIZE; i++){
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	e00b      	b.n	8000d48 <updateLager+0x24>
		Lager[i] = tempLager[i];
 8000d30:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <updateLager+0x38>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	7819      	ldrb	r1, [r3, #0]
 8000d38:	4a09      	ldr	r2, [pc, #36]	; (8000d60 <updateLager+0x3c>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	460a      	mov	r2, r1
 8000d40:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < LAGER_SIZE; i++){
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3301      	adds	r3, #1
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b05      	cmp	r3, #5
 8000d4c:	ddf0      	ble.n	8000d30 <updateLager+0xc>
	}
}
 8000d4e:	bf00      	nop
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	20000600 	.word	0x20000600
 8000d60:	200005f8 	.word	0x200005f8
 8000d64:	00000000 	.word	0x00000000

08000d68 <animateSend>:
void animateSend(void){
 8000d68:	b590      	push	{r4, r7, lr}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
	BOOL on = FALSE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	71fb      	strb	r3, [r7, #7]
	BOOL wait = FALSE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	717b      	strb	r3, [r7, #5]

	// find index of Lager, were packageId was stored //TODO: SA/RT Lager noch rein!!
	for(i = 0; i < LAGER_SIZE; i++){
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	717b      	strb	r3, [r7, #5]
 8000d7e:	e009      	b.n	8000d94 <animateSend+0x2c>
		if(Lager[i] == packageId){
 8000d80:	797b      	ldrb	r3, [r7, #5]
 8000d82:	4a95      	ldr	r2, [pc, #596]	; (8000fd8 <animateSend+0x270>)
 8000d84:	5cd2      	ldrb	r2, [r2, r3]
 8000d86:	4b95      	ldr	r3, [pc, #596]	; (8000fdc <animateSend+0x274>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d006      	beq.n	8000d9c <animateSend+0x34>
	for(i = 0; i < LAGER_SIZE; i++){
 8000d8e:	797b      	ldrb	r3, [r7, #5]
 8000d90:	3301      	adds	r3, #1
 8000d92:	717b      	strb	r3, [r7, #5]
 8000d94:	797b      	ldrb	r3, [r7, #5]
 8000d96:	2b05      	cmp	r3, #5
 8000d98:	d9f2      	bls.n	8000d80 <animateSend+0x18>
 8000d9a:	e000      	b.n	8000d9e <animateSend+0x36>
			break;
 8000d9c:	bf00      	nop
		}
	}

	// turn off corresponding LED
	pixels[i+1].color.g = 0; // TODO: SA/RT
 8000d9e:	797b      	ldrb	r3, [r7, #5]
 8000da0:	3301      	adds	r3, #1
 8000da2:	4a8f      	ldr	r2, [pc, #572]	; (8000fe0 <animateSend+0x278>)
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4413      	add	r3, r2
 8000da8:	2200      	movs	r2, #0
 8000daa:	709a      	strb	r2, [r3, #2]
	pixels[i+1].color.r = 0;
 8000dac:	797b      	ldrb	r3, [r7, #5]
 8000dae:	3301      	adds	r3, #1
 8000db0:	4a8b      	ldr	r2, [pc, #556]	; (8000fe0 <animateSend+0x278>)
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	2200      	movs	r2, #0
 8000db8:	705a      	strb	r2, [r3, #1]
	pixels[i+1].color.b = 0;
 8000dba:	797b      	ldrb	r3, [r7, #5]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	4a88      	ldr	r2, [pc, #544]	; (8000fe0 <animateSend+0x278>)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	writeLEDs(pixels);
 8000dc6:	4886      	ldr	r0, [pc, #536]	; (8000fe0 <animateSend+0x278>)
 8000dc8:	f7ff fe96 	bl	8000af8 <writeLEDs>


	// blink last (outgoing) LED once
	timer_irq = FALSE;
 8000dcc:	4b85      	ldr	r3, [pc, #532]	; (8000fe4 <animateSend+0x27c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
	while(1){
		if(timer_irq && !on && !wait){
 8000dd2:	4b84      	ldr	r3, [pc, #528]	; (8000fe4 <animateSend+0x27c>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d060      	beq.n	8000e9c <animateSend+0x134>
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d15d      	bne.n	8000e9c <animateSend+0x134>
 8000de0:	79bb      	ldrb	r3, [r7, #6]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d15a      	bne.n	8000e9c <animateSend+0x134>
			timer_irq = FALSE;
 8000de6:	4b7f      	ldr	r3, [pc, #508]	; (8000fe4 <animateSend+0x27c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
			on = TRUE;
 8000dec:	2301      	movs	r3, #1
 8000dee:	71fb      	strb	r3, [r7, #7]
			pixels[7].color.g = (uint8_t)LEDColors[packageId][1]*0.1; // TODO: SA/RT
 8000df0:	4b7a      	ldr	r3, [pc, #488]	; (8000fdc <animateSend+0x274>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	4a7c      	ldr	r2, [pc, #496]	; (8000fe8 <animateSend+0x280>)
 8000df8:	460b      	mov	r3, r1
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	440b      	add	r3, r1
 8000dfe:	4413      	add	r3, r2
 8000e00:	3301      	adds	r3, #1
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fc63 	bl	80006d0 <__aeabi_i2d>
 8000e0a:	a371      	add	r3, pc, #452	; (adr r3, 8000fd0 <animateSend+0x268>)
 8000e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e10:	f7ff f9e2 	bl	80001d8 <__aeabi_dmul>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4610      	mov	r0, r2
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f7ff fcc2 	bl	80007a4 <__aeabi_d2uiz>
 8000e20:	4603      	mov	r3, r0
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b6e      	ldr	r3, [pc, #440]	; (8000fe0 <animateSend+0x278>)
 8000e26:	779a      	strb	r2, [r3, #30]
			pixels[7].color.r = (uint8_t)LEDColors[packageId][0]*0.1;
 8000e28:	4b6c      	ldr	r3, [pc, #432]	; (8000fdc <animateSend+0x274>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4a6e      	ldr	r2, [pc, #440]	; (8000fe8 <animateSend+0x280>)
 8000e30:	460b      	mov	r3, r1
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	440b      	add	r3, r1
 8000e36:	4413      	add	r3, r2
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fc48 	bl	80006d0 <__aeabi_i2d>
 8000e40:	a363      	add	r3, pc, #396	; (adr r3, 8000fd0 <animateSend+0x268>)
 8000e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e46:	f7ff f9c7 	bl	80001d8 <__aeabi_dmul>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	4610      	mov	r0, r2
 8000e50:	4619      	mov	r1, r3
 8000e52:	f7ff fca7 	bl	80007a4 <__aeabi_d2uiz>
 8000e56:	4603      	mov	r3, r0
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4b61      	ldr	r3, [pc, #388]	; (8000fe0 <animateSend+0x278>)
 8000e5c:	775a      	strb	r2, [r3, #29]
			pixels[7].color.b = (uint8_t)LEDColors[packageId][2]*0.1;
 8000e5e:	4b5f      	ldr	r3, [pc, #380]	; (8000fdc <animateSend+0x274>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4619      	mov	r1, r3
 8000e64:	4a60      	ldr	r2, [pc, #384]	; (8000fe8 <animateSend+0x280>)
 8000e66:	460b      	mov	r3, r1
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	440b      	add	r3, r1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	3302      	adds	r3, #2
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc2c 	bl	80006d0 <__aeabi_i2d>
 8000e78:	a355      	add	r3, pc, #340	; (adr r3, 8000fd0 <animateSend+0x268>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	f7ff f9ab 	bl	80001d8 <__aeabi_dmul>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4610      	mov	r0, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f7ff fc8b 	bl	80007a4 <__aeabi_d2uiz>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b53      	ldr	r3, [pc, #332]	; (8000fe0 <animateSend+0x278>)
 8000e94:	771a      	strb	r2, [r3, #28]
			writeLEDs(pixels);
 8000e96:	4852      	ldr	r0, [pc, #328]	; (8000fe0 <animateSend+0x278>)
 8000e98:	f7ff fe2e 	bl	8000af8 <writeLEDs>
		}
		if(timer_irq && on && !wait){
 8000e9c:	4b51      	ldr	r3, [pc, #324]	; (8000fe4 <animateSend+0x27c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d016      	beq.n	8000ed2 <animateSend+0x16a>
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d013      	beq.n	8000ed2 <animateSend+0x16a>
 8000eaa:	79bb      	ldrb	r3, [r7, #6]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d110      	bne.n	8000ed2 <animateSend+0x16a>
			timer_irq = FALSE;
 8000eb0:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <animateSend+0x27c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
			wait = TRUE;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	71bb      	strb	r3, [r7, #6]
			pixels[7].color.g = 0; // TODO: SA/RT
 8000eba:	4b49      	ldr	r3, [pc, #292]	; (8000fe0 <animateSend+0x278>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	779a      	strb	r2, [r3, #30]
			pixels[7].color.r = 0;
 8000ec0:	4b47      	ldr	r3, [pc, #284]	; (8000fe0 <animateSend+0x278>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	775a      	strb	r2, [r3, #29]
			pixels[7].color.b = 0;
 8000ec6:	4b46      	ldr	r3, [pc, #280]	; (8000fe0 <animateSend+0x278>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	771a      	strb	r2, [r3, #28]
			writeLEDs(pixels);
 8000ecc:	4844      	ldr	r0, [pc, #272]	; (8000fe0 <animateSend+0x278>)
 8000ece:	f7ff fe13 	bl	8000af8 <writeLEDs>
		}
		if(timer_irq && wait){
 8000ed2:	4b44      	ldr	r3, [pc, #272]	; (8000fe4 <animateSend+0x27c>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f43f af7b 	beq.w	8000dd2 <animateSend+0x6a>
 8000edc:	79bb      	ldrb	r3, [r7, #6]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d100      	bne.n	8000ee4 <animateSend+0x17c>
		if(timer_irq && !on && !wait){
 8000ee2:	e776      	b.n	8000dd2 <animateSend+0x6a>
			break;
 8000ee4:	bf00      	nop
		}
	}

	// display current Lager
	for(i = 0; i < LAGER_SIZE; i++){
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	717b      	strb	r3, [r7, #5]
 8000eea:	e065      	b.n	8000fb8 <animateSend+0x250>
		pixels[i+1].color.g = (uint8_t)LEDColors[tempLager[i]][1]*0.1;
 8000eec:	797b      	ldrb	r3, [r7, #5]
 8000eee:	4a3f      	ldr	r2, [pc, #252]	; (8000fec <animateSend+0x284>)
 8000ef0:	5cd3      	ldrb	r3, [r2, r3]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4a3c      	ldr	r2, [pc, #240]	; (8000fe8 <animateSend+0x280>)
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	440b      	add	r3, r1
 8000efc:	4413      	add	r3, r2
 8000efe:	3301      	adds	r3, #1
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fbe4 	bl	80006d0 <__aeabi_i2d>
 8000f08:	a331      	add	r3, pc, #196	; (adr r3, 8000fd0 <animateSend+0x268>)
 8000f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0e:	f7ff f963 	bl	80001d8 <__aeabi_dmul>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	797b      	ldrb	r3, [r7, #5]
 8000f1c:	1c5c      	adds	r4, r3, #1
 8000f1e:	f7ff fc41 	bl	80007a4 <__aeabi_d2uiz>
 8000f22:	4603      	mov	r3, r0
 8000f24:	b2d9      	uxtb	r1, r3
 8000f26:	4a2e      	ldr	r2, [pc, #184]	; (8000fe0 <animateSend+0x278>)
 8000f28:	00a3      	lsls	r3, r4, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	460a      	mov	r2, r1
 8000f2e:	709a      	strb	r2, [r3, #2]
		pixels[i+1].color.r = (uint8_t)LEDColors[tempLager[i]][0]*0.1;
 8000f30:	797b      	ldrb	r3, [r7, #5]
 8000f32:	4a2e      	ldr	r2, [pc, #184]	; (8000fec <animateSend+0x284>)
 8000f34:	5cd3      	ldrb	r3, [r2, r3]
 8000f36:	4619      	mov	r1, r3
 8000f38:	4a2b      	ldr	r2, [pc, #172]	; (8000fe8 <animateSend+0x280>)
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	440b      	add	r3, r1
 8000f40:	4413      	add	r3, r2
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fbc3 	bl	80006d0 <__aeabi_i2d>
 8000f4a:	a321      	add	r3, pc, #132	; (adr r3, 8000fd0 <animateSend+0x268>)
 8000f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f50:	f7ff f942 	bl	80001d8 <__aeabi_dmul>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4610      	mov	r0, r2
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	797b      	ldrb	r3, [r7, #5]
 8000f5e:	1c5c      	adds	r4, r3, #1
 8000f60:	f7ff fc20 	bl	80007a4 <__aeabi_d2uiz>
 8000f64:	4603      	mov	r3, r0
 8000f66:	b2d9      	uxtb	r1, r3
 8000f68:	4a1d      	ldr	r2, [pc, #116]	; (8000fe0 <animateSend+0x278>)
 8000f6a:	00a3      	lsls	r3, r4, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	460a      	mov	r2, r1
 8000f70:	705a      	strb	r2, [r3, #1]
		pixels[i+1].color.b = (uint8_t)LEDColors[tempLager[i]][2]*0.1;
 8000f72:	797b      	ldrb	r3, [r7, #5]
 8000f74:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <animateSend+0x284>)
 8000f76:	5cd3      	ldrb	r3, [r2, r3]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <animateSend+0x280>)
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	440b      	add	r3, r1
 8000f82:	4413      	add	r3, r2
 8000f84:	3302      	adds	r3, #2
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fba1 	bl	80006d0 <__aeabi_i2d>
 8000f8e:	a310      	add	r3, pc, #64	; (adr r3, 8000fd0 <animateSend+0x268>)
 8000f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f94:	f7ff f920 	bl	80001d8 <__aeabi_dmul>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	797b      	ldrb	r3, [r7, #5]
 8000fa2:	1c5c      	adds	r4, r3, #1
 8000fa4:	f7ff fbfe 	bl	80007a4 <__aeabi_d2uiz>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <animateSend+0x278>)
 8000fae:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
	for(i = 0; i < LAGER_SIZE; i++){
 8000fb2:	797b      	ldrb	r3, [r7, #5]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	717b      	strb	r3, [r7, #5]
 8000fb8:	797b      	ldrb	r3, [r7, #5]
 8000fba:	2b05      	cmp	r3, #5
 8000fbc:	d996      	bls.n	8000eec <animateSend+0x184>

	}
	writeLEDs(pixels);
 8000fbe:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <animateSend+0x278>)
 8000fc0:	f7ff fd9a 	bl	8000af8 <writeLEDs>
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd90      	pop	{r4, r7, pc}
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	9999999a 	.word	0x9999999a
 8000fd4:	3fb99999 	.word	0x3fb99999
 8000fd8:	200005f8 	.word	0x200005f8
 8000fdc:	200005f4 	.word	0x200005f4
 8000fe0:	200005d0 	.word	0x200005d0
 8000fe4:	200005f0 	.word	0x200005f0
 8000fe8:	20000004 	.word	0x20000004
 8000fec:	20000600 	.word	0x20000600

08000ff0 <animateReceive>:

void animateReceive(void){
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
	BOOL on = FALSE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	71fb      	strb	r3, [r7, #7]
	BOOL wait = FALSE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	71bb      	strb	r3, [r7, #6]

	// blink first (incoming) LED once
	timer_irq = FALSE;
 8000ffe:	4b84      	ldr	r3, [pc, #528]	; (8001210 <animateReceive+0x220>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
	while(1){
		if(timer_irq && !on && !wait){
 8001004:	4b82      	ldr	r3, [pc, #520]	; (8001210 <animateReceive+0x220>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d060      	beq.n	80010ce <animateReceive+0xde>
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d15d      	bne.n	80010ce <animateReceive+0xde>
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d15a      	bne.n	80010ce <animateReceive+0xde>
			timer_irq = FALSE;
 8001018:	4b7d      	ldr	r3, [pc, #500]	; (8001210 <animateReceive+0x220>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
			on = TRUE;
 800101e:	2301      	movs	r3, #1
 8001020:	71fb      	strb	r3, [r7, #7]
			pixels[0].color.g = (uint8_t)LEDColors[packageId][1]*0.1; // TODO: SA/RT
 8001022:	4b7c      	ldr	r3, [pc, #496]	; (8001214 <animateReceive+0x224>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	4619      	mov	r1, r3
 8001028:	4a7b      	ldr	r2, [pc, #492]	; (8001218 <animateReceive+0x228>)
 800102a:	460b      	mov	r3, r1
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	440b      	add	r3, r1
 8001030:	4413      	add	r3, r2
 8001032:	3301      	adds	r3, #1
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fb4a 	bl	80006d0 <__aeabi_i2d>
 800103c:	a372      	add	r3, pc, #456	; (adr r3, 8001208 <animateReceive+0x218>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	f7ff f8c9 	bl	80001d8 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f7ff fba9 	bl	80007a4 <__aeabi_d2uiz>
 8001052:	4603      	mov	r3, r0
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b71      	ldr	r3, [pc, #452]	; (800121c <animateReceive+0x22c>)
 8001058:	709a      	strb	r2, [r3, #2]
			pixels[0].color.r = (uint8_t)LEDColors[packageId][0]*0.1;
 800105a:	4b6e      	ldr	r3, [pc, #440]	; (8001214 <animateReceive+0x224>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	4619      	mov	r1, r3
 8001060:	4a6d      	ldr	r2, [pc, #436]	; (8001218 <animateReceive+0x228>)
 8001062:	460b      	mov	r3, r1
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	440b      	add	r3, r1
 8001068:	4413      	add	r3, r2
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fb2f 	bl	80006d0 <__aeabi_i2d>
 8001072:	a365      	add	r3, pc, #404	; (adr r3, 8001208 <animateReceive+0x218>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f7ff f8ae 	bl	80001d8 <__aeabi_dmul>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fb8e 	bl	80007a4 <__aeabi_d2uiz>
 8001088:	4603      	mov	r3, r0
 800108a:	b2da      	uxtb	r2, r3
 800108c:	4b63      	ldr	r3, [pc, #396]	; (800121c <animateReceive+0x22c>)
 800108e:	705a      	strb	r2, [r3, #1]
			pixels[0].color.b = (uint8_t)LEDColors[packageId][2]*0.1;
 8001090:	4b60      	ldr	r3, [pc, #384]	; (8001214 <animateReceive+0x224>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	4a60      	ldr	r2, [pc, #384]	; (8001218 <animateReceive+0x228>)
 8001098:	460b      	mov	r3, r1
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	440b      	add	r3, r1
 800109e:	4413      	add	r3, r2
 80010a0:	3302      	adds	r3, #2
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fb13 	bl	80006d0 <__aeabi_i2d>
 80010aa:	a357      	add	r3, pc, #348	; (adr r3, 8001208 <animateReceive+0x218>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff f892 	bl	80001d8 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fb72 	bl	80007a4 <__aeabi_d2uiz>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b55      	ldr	r3, [pc, #340]	; (800121c <animateReceive+0x22c>)
 80010c6:	701a      	strb	r2, [r3, #0]
			writeLEDs(pixels);
 80010c8:	4854      	ldr	r0, [pc, #336]	; (800121c <animateReceive+0x22c>)
 80010ca:	f7ff fd15 	bl	8000af8 <writeLEDs>
		}
		if(timer_irq && on && !wait){
 80010ce:	4b50      	ldr	r3, [pc, #320]	; (8001210 <animateReceive+0x220>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d016      	beq.n	8001104 <animateReceive+0x114>
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d013      	beq.n	8001104 <animateReceive+0x114>
 80010dc:	79bb      	ldrb	r3, [r7, #6]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d110      	bne.n	8001104 <animateReceive+0x114>
			timer_irq = FALSE;
 80010e2:	4b4b      	ldr	r3, [pc, #300]	; (8001210 <animateReceive+0x220>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
			wait = TRUE;
 80010e8:	2301      	movs	r3, #1
 80010ea:	71bb      	strb	r3, [r7, #6]
			pixels[0].color.g = 0; // TODO: SA/RT
 80010ec:	4b4b      	ldr	r3, [pc, #300]	; (800121c <animateReceive+0x22c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	709a      	strb	r2, [r3, #2]
			pixels[0].color.r = 0;
 80010f2:	4b4a      	ldr	r3, [pc, #296]	; (800121c <animateReceive+0x22c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	705a      	strb	r2, [r3, #1]
			pixels[0].color.b = 0;
 80010f8:	4b48      	ldr	r3, [pc, #288]	; (800121c <animateReceive+0x22c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
			writeLEDs(pixels);
 80010fe:	4847      	ldr	r0, [pc, #284]	; (800121c <animateReceive+0x22c>)
 8001100:	f7ff fcfa 	bl	8000af8 <writeLEDs>
		}
		if(timer_irq && wait){
 8001104:	4b42      	ldr	r3, [pc, #264]	; (8001210 <animateReceive+0x220>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	f43f af7b 	beq.w	8001004 <animateReceive+0x14>
 800110e:	79bb      	ldrb	r3, [r7, #6]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d100      	bne.n	8001116 <animateReceive+0x126>
		if(timer_irq && !on && !wait){
 8001114:	e776      	b.n	8001004 <animateReceive+0x14>
			break;
 8001116:	bf00      	nop
		}
	}

	// display current Lager
	for(int i = 0; i < LAGER_SIZE; i++){
 8001118:	2300      	movs	r3, #0
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	e068      	b.n	80011f0 <animateReceive+0x200>
		pixels[i+1].color.g = (uint8_t)LEDColors[tempLager[i]][1]*0.1;
 800111e:	4a40      	ldr	r2, [pc, #256]	; (8001220 <animateReceive+0x230>)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	4619      	mov	r1, r3
 8001128:	4a3b      	ldr	r2, [pc, #236]	; (8001218 <animateReceive+0x228>)
 800112a:	460b      	mov	r3, r1
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	440b      	add	r3, r1
 8001130:	4413      	add	r3, r2
 8001132:	3301      	adds	r3, #1
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff faca 	bl	80006d0 <__aeabi_i2d>
 800113c:	a332      	add	r3, pc, #200	; (adr r3, 8001208 <animateReceive+0x218>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff f849 	bl	80001d8 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	1c5c      	adds	r4, r3, #1
 8001152:	f7ff fb27 	bl	80007a4 <__aeabi_d2uiz>
 8001156:	4603      	mov	r3, r0
 8001158:	b2d9      	uxtb	r1, r3
 800115a:	4a30      	ldr	r2, [pc, #192]	; (800121c <animateReceive+0x22c>)
 800115c:	00a3      	lsls	r3, r4, #2
 800115e:	4413      	add	r3, r2
 8001160:	460a      	mov	r2, r1
 8001162:	709a      	strb	r2, [r3, #2]
		pixels[i+1].color.r = (uint8_t)LEDColors[tempLager[i]][0]*0.1;
 8001164:	4a2e      	ldr	r2, [pc, #184]	; (8001220 <animateReceive+0x230>)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	4413      	add	r3, r2
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	4a2a      	ldr	r2, [pc, #168]	; (8001218 <animateReceive+0x228>)
 8001170:	460b      	mov	r3, r1
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	440b      	add	r3, r1
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff faa8 	bl	80006d0 <__aeabi_i2d>
 8001180:	a321      	add	r3, pc, #132	; (adr r3, 8001208 <animateReceive+0x218>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff f827 	bl	80001d8 <__aeabi_dmul>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	1c5c      	adds	r4, r3, #1
 8001196:	f7ff fb05 	bl	80007a4 <__aeabi_d2uiz>
 800119a:	4603      	mov	r3, r0
 800119c:	b2d9      	uxtb	r1, r3
 800119e:	4a1f      	ldr	r2, [pc, #124]	; (800121c <animateReceive+0x22c>)
 80011a0:	00a3      	lsls	r3, r4, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	460a      	mov	r2, r1
 80011a6:	705a      	strb	r2, [r3, #1]
		pixels[i+1].color.b = (uint8_t)LEDColors[tempLager[i]][2]*0.1;
 80011a8:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <animateReceive+0x230>)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	4a19      	ldr	r2, [pc, #100]	; (8001218 <animateReceive+0x228>)
 80011b4:	460b      	mov	r3, r1
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	440b      	add	r3, r1
 80011ba:	4413      	add	r3, r2
 80011bc:	3302      	adds	r3, #2
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fa85 	bl	80006d0 <__aeabi_i2d>
 80011c6:	a310      	add	r3, pc, #64	; (adr r3, 8001208 <animateReceive+0x218>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff f804 	bl	80001d8 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	1c5c      	adds	r4, r3, #1
 80011dc:	f7ff fae2 	bl	80007a4 <__aeabi_d2uiz>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <animateReceive+0x22c>)
 80011e6:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
	for(int i = 0; i < LAGER_SIZE; i++){
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	2b05      	cmp	r3, #5
 80011f4:	dd93      	ble.n	800111e <animateReceive+0x12e>

	}
	writeLEDs(pixels);
 80011f6:	4809      	ldr	r0, [pc, #36]	; (800121c <animateReceive+0x22c>)
 80011f8:	f7ff fc7e 	bl	8000af8 <writeLEDs>
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bd90      	pop	{r4, r7, pc}
 8001204:	f3af 8000 	nop.w
 8001208:	9999999a 	.word	0x9999999a
 800120c:	3fb99999 	.word	0x3fb99999
 8001210:	200005f0 	.word	0x200005f0
 8001214:	200005f4 	.word	0x200005f4
 8001218:	20000004 	.word	0x20000004
 800121c:	200005d0 	.word	0x200005d0
 8001220:	20000600 	.word	0x20000600
 8001224:	00000000 	.word	0x00000000

08001228 <animateCreate>:
void animateCreate(void){
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0

	BOOL on = FALSE;
 800122e:	2300      	movs	r3, #0
 8001230:	71fb      	strb	r3, [r7, #7]
	BOOL wait = FALSE;
 8001232:	2300      	movs	r3, #0
 8001234:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	717b      	strb	r3, [r7, #5]

	// find index of tempLager, were packageId is stored
	for(i = 0; i < LAGER_SIZE; i++){
 800123a:	2300      	movs	r3, #0
 800123c:	717b      	strb	r3, [r7, #5]
 800123e:	e009      	b.n	8001254 <animateCreate+0x2c>
		if(tempLager[i] == packageId){
 8001240:	797b      	ldrb	r3, [r7, #5]
 8001242:	4a95      	ldr	r2, [pc, #596]	; (8001498 <animateCreate+0x270>)
 8001244:	5cd2      	ldrb	r2, [r2, r3]
 8001246:	4b95      	ldr	r3, [pc, #596]	; (800149c <animateCreate+0x274>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	d006      	beq.n	800125c <animateCreate+0x34>
	for(i = 0; i < LAGER_SIZE; i++){
 800124e:	797b      	ldrb	r3, [r7, #5]
 8001250:	3301      	adds	r3, #1
 8001252:	717b      	strb	r3, [r7, #5]
 8001254:	797b      	ldrb	r3, [r7, #5]
 8001256:	2b05      	cmp	r3, #5
 8001258:	d9f2      	bls.n	8001240 <animateCreate+0x18>
 800125a:	e000      	b.n	800125e <animateCreate+0x36>
			break;
 800125c:	bf00      	nop
		}
	}

	// blink corresponding LED once
	timer_irq = FALSE;
 800125e:	4b90      	ldr	r3, [pc, #576]	; (80014a0 <animateCreate+0x278>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
	while(1){
		if(timer_irq && !on && !wait){
 8001264:	4b8e      	ldr	r3, [pc, #568]	; (80014a0 <animateCreate+0x278>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d06d      	beq.n	8001348 <animateCreate+0x120>
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d16a      	bne.n	8001348 <animateCreate+0x120>
 8001272:	79bb      	ldrb	r3, [r7, #6]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d167      	bne.n	8001348 <animateCreate+0x120>
			timer_irq = FALSE;
 8001278:	4b89      	ldr	r3, [pc, #548]	; (80014a0 <animateCreate+0x278>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
			on = TRUE;
 800127e:	2301      	movs	r3, #1
 8001280:	71fb      	strb	r3, [r7, #7]
			pixels[i+1].color.g = (uint8_t)LEDColors[packageId][1]*0.1; // TODO: SA/RT
 8001282:	4b86      	ldr	r3, [pc, #536]	; (800149c <animateCreate+0x274>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	4619      	mov	r1, r3
 8001288:	4a86      	ldr	r2, [pc, #536]	; (80014a4 <animateCreate+0x27c>)
 800128a:	460b      	mov	r3, r1
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	440b      	add	r3, r1
 8001290:	4413      	add	r3, r2
 8001292:	3301      	adds	r3, #1
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fa1a 	bl	80006d0 <__aeabi_i2d>
 800129c:	a37c      	add	r3, pc, #496	; (adr r3, 8001490 <animateCreate+0x268>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7fe ff99 	bl	80001d8 <__aeabi_dmul>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	797b      	ldrb	r3, [r7, #5]
 80012b0:	1c5c      	adds	r4, r3, #1
 80012b2:	f7ff fa77 	bl	80007a4 <__aeabi_d2uiz>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b2d9      	uxtb	r1, r3
 80012ba:	4a7b      	ldr	r2, [pc, #492]	; (80014a8 <animateCreate+0x280>)
 80012bc:	00a3      	lsls	r3, r4, #2
 80012be:	4413      	add	r3, r2
 80012c0:	460a      	mov	r2, r1
 80012c2:	709a      	strb	r2, [r3, #2]
			pixels[i+1].color.r = (uint8_t)LEDColors[packageId][0]*0.1;
 80012c4:	4b75      	ldr	r3, [pc, #468]	; (800149c <animateCreate+0x274>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	4a76      	ldr	r2, [pc, #472]	; (80014a4 <animateCreate+0x27c>)
 80012cc:	460b      	mov	r3, r1
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	440b      	add	r3, r1
 80012d2:	4413      	add	r3, r2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f9fa 	bl	80006d0 <__aeabi_i2d>
 80012dc:	a36c      	add	r3, pc, #432	; (adr r3, 8001490 <animateCreate+0x268>)
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	f7fe ff79 	bl	80001d8 <__aeabi_dmul>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	797b      	ldrb	r3, [r7, #5]
 80012f0:	1c5c      	adds	r4, r3, #1
 80012f2:	f7ff fa57 	bl	80007a4 <__aeabi_d2uiz>
 80012f6:	4603      	mov	r3, r0
 80012f8:	b2d9      	uxtb	r1, r3
 80012fa:	4a6b      	ldr	r2, [pc, #428]	; (80014a8 <animateCreate+0x280>)
 80012fc:	00a3      	lsls	r3, r4, #2
 80012fe:	4413      	add	r3, r2
 8001300:	460a      	mov	r2, r1
 8001302:	705a      	strb	r2, [r3, #1]
			pixels[i+1].color.b = (uint8_t)LEDColors[packageId][2]*0.1;
 8001304:	4b65      	ldr	r3, [pc, #404]	; (800149c <animateCreate+0x274>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	4a66      	ldr	r2, [pc, #408]	; (80014a4 <animateCreate+0x27c>)
 800130c:	460b      	mov	r3, r1
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	440b      	add	r3, r1
 8001312:	4413      	add	r3, r2
 8001314:	3302      	adds	r3, #2
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f9d9 	bl	80006d0 <__aeabi_i2d>
 800131e:	a35c      	add	r3, pc, #368	; (adr r3, 8001490 <animateCreate+0x268>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7fe ff58 	bl	80001d8 <__aeabi_dmul>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	797b      	ldrb	r3, [r7, #5]
 8001332:	1c5c      	adds	r4, r3, #1
 8001334:	f7ff fa36 	bl	80007a4 <__aeabi_d2uiz>
 8001338:	4603      	mov	r3, r0
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b5a      	ldr	r3, [pc, #360]	; (80014a8 <animateCreate+0x280>)
 800133e:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
			writeLEDs(pixels);
 8001342:	4859      	ldr	r0, [pc, #356]	; (80014a8 <animateCreate+0x280>)
 8001344:	f7ff fbd8 	bl	8000af8 <writeLEDs>
		}
		if(timer_irq && on && !wait){
 8001348:	4b55      	ldr	r3, [pc, #340]	; (80014a0 <animateCreate+0x278>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d021      	beq.n	8001394 <animateCreate+0x16c>
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d01e      	beq.n	8001394 <animateCreate+0x16c>
 8001356:	79bb      	ldrb	r3, [r7, #6]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d11b      	bne.n	8001394 <animateCreate+0x16c>
			timer_irq = FALSE;
 800135c:	4b50      	ldr	r3, [pc, #320]	; (80014a0 <animateCreate+0x278>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
			wait = TRUE;
 8001362:	2301      	movs	r3, #1
 8001364:	71bb      	strb	r3, [r7, #6]
			pixels[i+1].color.g = 0; // TODO: SA/RT
 8001366:	797b      	ldrb	r3, [r7, #5]
 8001368:	3301      	adds	r3, #1
 800136a:	4a4f      	ldr	r2, [pc, #316]	; (80014a8 <animateCreate+0x280>)
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	2200      	movs	r2, #0
 8001372:	709a      	strb	r2, [r3, #2]
			pixels[i+1].color.r = 0;
 8001374:	797b      	ldrb	r3, [r7, #5]
 8001376:	3301      	adds	r3, #1
 8001378:	4a4b      	ldr	r2, [pc, #300]	; (80014a8 <animateCreate+0x280>)
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	2200      	movs	r2, #0
 8001380:	705a      	strb	r2, [r3, #1]
			pixels[i+1].color.b = 0;
 8001382:	797b      	ldrb	r3, [r7, #5]
 8001384:	3301      	adds	r3, #1
 8001386:	4a48      	ldr	r2, [pc, #288]	; (80014a8 <animateCreate+0x280>)
 8001388:	2100      	movs	r1, #0
 800138a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
			writeLEDs(pixels);
 800138e:	4846      	ldr	r0, [pc, #280]	; (80014a8 <animateCreate+0x280>)
 8001390:	f7ff fbb2 	bl	8000af8 <writeLEDs>
		}
		if(timer_irq && wait){
 8001394:	4b42      	ldr	r3, [pc, #264]	; (80014a0 <animateCreate+0x278>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	f43f af63 	beq.w	8001264 <animateCreate+0x3c>
 800139e:	79bb      	ldrb	r3, [r7, #6]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d100      	bne.n	80013a6 <animateCreate+0x17e>
		if(timer_irq && !on && !wait){
 80013a4:	e75e      	b.n	8001264 <animateCreate+0x3c>
			break;
 80013a6:	bf00      	nop
		}

	}

	// display current Lager
	for(i = 0; i < LAGER_SIZE; i++){
 80013a8:	2300      	movs	r3, #0
 80013aa:	717b      	strb	r3, [r7, #5]
 80013ac:	e065      	b.n	800147a <animateCreate+0x252>
		pixels[i+1].color.g = (uint8_t)LEDColors[tempLager[i]][1]*0.1; //TODO: greift auch auf temp
 80013ae:	797b      	ldrb	r3, [r7, #5]
 80013b0:	4a39      	ldr	r2, [pc, #228]	; (8001498 <animateCreate+0x270>)
 80013b2:	5cd3      	ldrb	r3, [r2, r3]
 80013b4:	4619      	mov	r1, r3
 80013b6:	4a3b      	ldr	r2, [pc, #236]	; (80014a4 <animateCreate+0x27c>)
 80013b8:	460b      	mov	r3, r1
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	440b      	add	r3, r1
 80013be:	4413      	add	r3, r2
 80013c0:	3301      	adds	r3, #1
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f983 	bl	80006d0 <__aeabi_i2d>
 80013ca:	a331      	add	r3, pc, #196	; (adr r3, 8001490 <animateCreate+0x268>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	f7fe ff02 	bl	80001d8 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	797b      	ldrb	r3, [r7, #5]
 80013de:	1c5c      	adds	r4, r3, #1
 80013e0:	f7ff f9e0 	bl	80007a4 <__aeabi_d2uiz>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b2d9      	uxtb	r1, r3
 80013e8:	4a2f      	ldr	r2, [pc, #188]	; (80014a8 <animateCreate+0x280>)
 80013ea:	00a3      	lsls	r3, r4, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	460a      	mov	r2, r1
 80013f0:	709a      	strb	r2, [r3, #2]
		pixels[i+1].color.r = (uint8_t)LEDColors[tempLager[i]][0]*0.1;
 80013f2:	797b      	ldrb	r3, [r7, #5]
 80013f4:	4a28      	ldr	r2, [pc, #160]	; (8001498 <animateCreate+0x270>)
 80013f6:	5cd3      	ldrb	r3, [r2, r3]
 80013f8:	4619      	mov	r1, r3
 80013fa:	4a2a      	ldr	r2, [pc, #168]	; (80014a4 <animateCreate+0x27c>)
 80013fc:	460b      	mov	r3, r1
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	440b      	add	r3, r1
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f962 	bl	80006d0 <__aeabi_i2d>
 800140c:	a320      	add	r3, pc, #128	; (adr r3, 8001490 <animateCreate+0x268>)
 800140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001412:	f7fe fee1 	bl	80001d8 <__aeabi_dmul>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	1c5c      	adds	r4, r3, #1
 8001422:	f7ff f9bf 	bl	80007a4 <__aeabi_d2uiz>
 8001426:	4603      	mov	r3, r0
 8001428:	b2d9      	uxtb	r1, r3
 800142a:	4a1f      	ldr	r2, [pc, #124]	; (80014a8 <animateCreate+0x280>)
 800142c:	00a3      	lsls	r3, r4, #2
 800142e:	4413      	add	r3, r2
 8001430:	460a      	mov	r2, r1
 8001432:	705a      	strb	r2, [r3, #1]
		pixels[i+1].color.b = (uint8_t)LEDColors[tempLager[i]][2]*0.1;
 8001434:	797b      	ldrb	r3, [r7, #5]
 8001436:	4a18      	ldr	r2, [pc, #96]	; (8001498 <animateCreate+0x270>)
 8001438:	5cd3      	ldrb	r3, [r2, r3]
 800143a:	4619      	mov	r1, r3
 800143c:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <animateCreate+0x27c>)
 800143e:	460b      	mov	r3, r1
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	440b      	add	r3, r1
 8001444:	4413      	add	r3, r2
 8001446:	3302      	adds	r3, #2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f940 	bl	80006d0 <__aeabi_i2d>
 8001450:	a30f      	add	r3, pc, #60	; (adr r3, 8001490 <animateCreate+0x268>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7fe febf 	bl	80001d8 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	797b      	ldrb	r3, [r7, #5]
 8001464:	1c5c      	adds	r4, r3, #1
 8001466:	f7ff f99d 	bl	80007a4 <__aeabi_d2uiz>
 800146a:	4603      	mov	r3, r0
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <animateCreate+0x280>)
 8001470:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
	for(i = 0; i < LAGER_SIZE; i++){
 8001474:	797b      	ldrb	r3, [r7, #5]
 8001476:	3301      	adds	r3, #1
 8001478:	717b      	strb	r3, [r7, #5]
 800147a:	797b      	ldrb	r3, [r7, #5]
 800147c:	2b05      	cmp	r3, #5
 800147e:	d996      	bls.n	80013ae <animateCreate+0x186>

	}
	writeLEDs(pixels);
 8001480:	4809      	ldr	r0, [pc, #36]	; (80014a8 <animateCreate+0x280>)
 8001482:	f7ff fb39 	bl	8000af8 <writeLEDs>
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bd90      	pop	{r4, r7, pc}
 800148e:	bf00      	nop
 8001490:	9999999a 	.word	0x9999999a
 8001494:	3fb99999 	.word	0x3fb99999
 8001498:	20000600 	.word	0x20000600
 800149c:	200005f4 	.word	0x200005f4
 80014a0:	200005f0 	.word	0x200005f0
 80014a4:	20000004 	.word	0x20000004
 80014a8:	200005d0 	.word	0x200005d0
 80014ac:	00000000 	.word	0x00000000

080014b0 <animateDeliver>:
void animateDeliver(void){
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
	BOOL on = FALSE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	71fb      	strb	r3, [r7, #7]
	BOOL wait = FALSE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	717b      	strb	r3, [r7, #5]

	// find index of Lager, were packageId was stored //TODO: SA/RT Lager noch rein!!
	for(i = 0; i < LAGER_SIZE; i++){
 80014c2:	2300      	movs	r3, #0
 80014c4:	717b      	strb	r3, [r7, #5]
 80014c6:	e009      	b.n	80014dc <animateDeliver+0x2c>
		if(Lager[i] == packageId){
 80014c8:	797b      	ldrb	r3, [r7, #5]
 80014ca:	4a97      	ldr	r2, [pc, #604]	; (8001728 <animateDeliver+0x278>)
 80014cc:	5cd2      	ldrb	r2, [r2, r3]
 80014ce:	4b97      	ldr	r3, [pc, #604]	; (800172c <animateDeliver+0x27c>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d006      	beq.n	80014e4 <animateDeliver+0x34>
	for(i = 0; i < LAGER_SIZE; i++){
 80014d6:	797b      	ldrb	r3, [r7, #5]
 80014d8:	3301      	adds	r3, #1
 80014da:	717b      	strb	r3, [r7, #5]
 80014dc:	797b      	ldrb	r3, [r7, #5]
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d9f2      	bls.n	80014c8 <animateDeliver+0x18>
 80014e2:	e000      	b.n	80014e6 <animateDeliver+0x36>
			break;
 80014e4:	bf00      	nop
		}
	}

	// blink corresponding LED once
	timer_irq = FALSE;
 80014e6:	4b92      	ldr	r3, [pc, #584]	; (8001730 <animateDeliver+0x280>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
	while(1){
		if(timer_irq && !on && !wait){
 80014ec:	4b90      	ldr	r3, [pc, #576]	; (8001730 <animateDeliver+0x280>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d06d      	beq.n	80015d0 <animateDeliver+0x120>
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d16a      	bne.n	80015d0 <animateDeliver+0x120>
 80014fa:	79bb      	ldrb	r3, [r7, #6]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d167      	bne.n	80015d0 <animateDeliver+0x120>
			timer_irq = FALSE;
 8001500:	4b8b      	ldr	r3, [pc, #556]	; (8001730 <animateDeliver+0x280>)
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
			on = TRUE;
 8001506:	2301      	movs	r3, #1
 8001508:	71fb      	strb	r3, [r7, #7]
			pixels[i+1].color.g = (uint8_t)LEDColors[packageId][1]*0.1; // TODO: SA/RT
 800150a:	4b88      	ldr	r3, [pc, #544]	; (800172c <animateDeliver+0x27c>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4619      	mov	r1, r3
 8001510:	4a88      	ldr	r2, [pc, #544]	; (8001734 <animateDeliver+0x284>)
 8001512:	460b      	mov	r3, r1
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	440b      	add	r3, r1
 8001518:	4413      	add	r3, r2
 800151a:	3301      	adds	r3, #1
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f8d6 	bl	80006d0 <__aeabi_i2d>
 8001524:	a37e      	add	r3, pc, #504	; (adr r3, 8001720 <animateDeliver+0x270>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	f7fe fe55 	bl	80001d8 <__aeabi_dmul>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	797b      	ldrb	r3, [r7, #5]
 8001538:	1c5c      	adds	r4, r3, #1
 800153a:	f7ff f933 	bl	80007a4 <__aeabi_d2uiz>
 800153e:	4603      	mov	r3, r0
 8001540:	b2d9      	uxtb	r1, r3
 8001542:	4a7d      	ldr	r2, [pc, #500]	; (8001738 <animateDeliver+0x288>)
 8001544:	00a3      	lsls	r3, r4, #2
 8001546:	4413      	add	r3, r2
 8001548:	460a      	mov	r2, r1
 800154a:	709a      	strb	r2, [r3, #2]
			pixels[i+1].color.r = (uint8_t)LEDColors[packageId][0]*0.1;
 800154c:	4b77      	ldr	r3, [pc, #476]	; (800172c <animateDeliver+0x27c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	4a78      	ldr	r2, [pc, #480]	; (8001734 <animateDeliver+0x284>)
 8001554:	460b      	mov	r3, r1
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	440b      	add	r3, r1
 800155a:	4413      	add	r3, r2
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff f8b6 	bl	80006d0 <__aeabi_i2d>
 8001564:	a36e      	add	r3, pc, #440	; (adr r3, 8001720 <animateDeliver+0x270>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7fe fe35 	bl	80001d8 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	797b      	ldrb	r3, [r7, #5]
 8001578:	1c5c      	adds	r4, r3, #1
 800157a:	f7ff f913 	bl	80007a4 <__aeabi_d2uiz>
 800157e:	4603      	mov	r3, r0
 8001580:	b2d9      	uxtb	r1, r3
 8001582:	4a6d      	ldr	r2, [pc, #436]	; (8001738 <animateDeliver+0x288>)
 8001584:	00a3      	lsls	r3, r4, #2
 8001586:	4413      	add	r3, r2
 8001588:	460a      	mov	r2, r1
 800158a:	705a      	strb	r2, [r3, #1]
			pixels[i+1].color.b = (uint8_t)LEDColors[packageId][2]*0.1;
 800158c:	4b67      	ldr	r3, [pc, #412]	; (800172c <animateDeliver+0x27c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	4a68      	ldr	r2, [pc, #416]	; (8001734 <animateDeliver+0x284>)
 8001594:	460b      	mov	r3, r1
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	440b      	add	r3, r1
 800159a:	4413      	add	r3, r2
 800159c:	3302      	adds	r3, #2
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff f895 	bl	80006d0 <__aeabi_i2d>
 80015a6:	a35e      	add	r3, pc, #376	; (adr r3, 8001720 <animateDeliver+0x270>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7fe fe14 	bl	80001d8 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	797b      	ldrb	r3, [r7, #5]
 80015ba:	1c5c      	adds	r4, r3, #1
 80015bc:	f7ff f8f2 	bl	80007a4 <__aeabi_d2uiz>
 80015c0:	4603      	mov	r3, r0
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	4b5c      	ldr	r3, [pc, #368]	; (8001738 <animateDeliver+0x288>)
 80015c6:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
			writeLEDs(pixels);
 80015ca:	485b      	ldr	r0, [pc, #364]	; (8001738 <animateDeliver+0x288>)
 80015cc:	f7ff fa94 	bl	8000af8 <writeLEDs>
		}
		if(timer_irq && on && !wait){
 80015d0:	4b57      	ldr	r3, [pc, #348]	; (8001730 <animateDeliver+0x280>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d021      	beq.n	800161c <animateDeliver+0x16c>
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d01e      	beq.n	800161c <animateDeliver+0x16c>
 80015de:	79bb      	ldrb	r3, [r7, #6]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d11b      	bne.n	800161c <animateDeliver+0x16c>
			timer_irq = FALSE;
 80015e4:	4b52      	ldr	r3, [pc, #328]	; (8001730 <animateDeliver+0x280>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
			wait = TRUE;
 80015ea:	2301      	movs	r3, #1
 80015ec:	71bb      	strb	r3, [r7, #6]
			pixels[i+1].color.g = 0; // TODO: SA/RT
 80015ee:	797b      	ldrb	r3, [r7, #5]
 80015f0:	3301      	adds	r3, #1
 80015f2:	4a51      	ldr	r2, [pc, #324]	; (8001738 <animateDeliver+0x288>)
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	2200      	movs	r2, #0
 80015fa:	709a      	strb	r2, [r3, #2]
			pixels[i+1].color.r = 0;
 80015fc:	797b      	ldrb	r3, [r7, #5]
 80015fe:	3301      	adds	r3, #1
 8001600:	4a4d      	ldr	r2, [pc, #308]	; (8001738 <animateDeliver+0x288>)
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	2200      	movs	r2, #0
 8001608:	705a      	strb	r2, [r3, #1]
			pixels[i+1].color.b = 0;
 800160a:	797b      	ldrb	r3, [r7, #5]
 800160c:	3301      	adds	r3, #1
 800160e:	4a4a      	ldr	r2, [pc, #296]	; (8001738 <animateDeliver+0x288>)
 8001610:	2100      	movs	r1, #0
 8001612:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
			writeLEDs(pixels);
 8001616:	4848      	ldr	r0, [pc, #288]	; (8001738 <animateDeliver+0x288>)
 8001618:	f7ff fa6e 	bl	8000af8 <writeLEDs>
		}
		if(timer_irq && wait){
 800161c:	4b44      	ldr	r3, [pc, #272]	; (8001730 <animateDeliver+0x280>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	f43f af63 	beq.w	80014ec <animateDeliver+0x3c>
 8001626:	79bb      	ldrb	r3, [r7, #6]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d100      	bne.n	800162e <animateDeliver+0x17e>
		if(timer_irq && !on && !wait){
 800162c:	e75e      	b.n	80014ec <animateDeliver+0x3c>
			break;
 800162e:	bf00      	nop
		}

	}

	// display current Lager
	for(int i = 0; i < LAGER_SIZE; i++){
 8001630:	2300      	movs	r3, #0
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	e068      	b.n	8001708 <animateDeliver+0x258>
		pixels[i+1].color.g = (uint8_t)LEDColors[tempLager[i]][1]*0.1;
 8001636:	4a41      	ldr	r2, [pc, #260]	; (800173c <animateDeliver+0x28c>)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	4413      	add	r3, r2
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	4619      	mov	r1, r3
 8001640:	4a3c      	ldr	r2, [pc, #240]	; (8001734 <animateDeliver+0x284>)
 8001642:	460b      	mov	r3, r1
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	440b      	add	r3, r1
 8001648:	4413      	add	r3, r2
 800164a:	3301      	adds	r3, #1
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff f83e 	bl	80006d0 <__aeabi_i2d>
 8001654:	a332      	add	r3, pc, #200	; (adr r3, 8001720 <animateDeliver+0x270>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7fe fdbd 	bl	80001d8 <__aeabi_dmul>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	1c5c      	adds	r4, r3, #1
 800166a:	f7ff f89b 	bl	80007a4 <__aeabi_d2uiz>
 800166e:	4603      	mov	r3, r0
 8001670:	b2d9      	uxtb	r1, r3
 8001672:	4a31      	ldr	r2, [pc, #196]	; (8001738 <animateDeliver+0x288>)
 8001674:	00a3      	lsls	r3, r4, #2
 8001676:	4413      	add	r3, r2
 8001678:	460a      	mov	r2, r1
 800167a:	709a      	strb	r2, [r3, #2]
		pixels[i+1].color.r = (uint8_t)LEDColors[tempLager[i]][0]*0.1;
 800167c:	4a2f      	ldr	r2, [pc, #188]	; (800173c <animateDeliver+0x28c>)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	4413      	add	r3, r2
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	4a2b      	ldr	r2, [pc, #172]	; (8001734 <animateDeliver+0x284>)
 8001688:	460b      	mov	r3, r1
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	440b      	add	r3, r1
 800168e:	4413      	add	r3, r2
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff f81c 	bl	80006d0 <__aeabi_i2d>
 8001698:	a321      	add	r3, pc, #132	; (adr r3, 8001720 <animateDeliver+0x270>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	f7fe fd9b 	bl	80001d8 <__aeabi_dmul>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	1c5c      	adds	r4, r3, #1
 80016ae:	f7ff f879 	bl	80007a4 <__aeabi_d2uiz>
 80016b2:	4603      	mov	r3, r0
 80016b4:	b2d9      	uxtb	r1, r3
 80016b6:	4a20      	ldr	r2, [pc, #128]	; (8001738 <animateDeliver+0x288>)
 80016b8:	00a3      	lsls	r3, r4, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	460a      	mov	r2, r1
 80016be:	705a      	strb	r2, [r3, #1]
		pixels[i+1].color.b = (uint8_t)LEDColors[tempLager[i]][2]*0.1;
 80016c0:	4a1e      	ldr	r2, [pc, #120]	; (800173c <animateDeliver+0x28c>)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	4413      	add	r3, r2
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	4a1a      	ldr	r2, [pc, #104]	; (8001734 <animateDeliver+0x284>)
 80016cc:	460b      	mov	r3, r1
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	440b      	add	r3, r1
 80016d2:	4413      	add	r3, r2
 80016d4:	3302      	adds	r3, #2
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fff9 	bl	80006d0 <__aeabi_i2d>
 80016de:	a310      	add	r3, pc, #64	; (adr r3, 8001720 <animateDeliver+0x270>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe fd78 	bl	80001d8 <__aeabi_dmul>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	1c5c      	adds	r4, r3, #1
 80016f4:	f7ff f856 	bl	80007a4 <__aeabi_d2uiz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <animateDeliver+0x288>)
 80016fe:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
	for(int i = 0; i < LAGER_SIZE; i++){
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	3301      	adds	r3, #1
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	2b05      	cmp	r3, #5
 800170c:	dd93      	ble.n	8001636 <animateDeliver+0x186>

	}
	writeLEDs(pixels);
 800170e:	480a      	ldr	r0, [pc, #40]	; (8001738 <animateDeliver+0x288>)
 8001710:	f7ff f9f2 	bl	8000af8 <writeLEDs>
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bd90      	pop	{r4, r7, pc}
 800171c:	f3af 8000 	nop.w
 8001720:	9999999a 	.word	0x9999999a
 8001724:	3fb99999 	.word	0x3fb99999
 8001728:	200005f8 	.word	0x200005f8
 800172c:	200005f4 	.word	0x200005f4
 8001730:	200005f0 	.word	0x200005f0
 8001734:	20000004 	.word	0x20000004
 8001738:	200005d0 	.word	0x200005d0
 800173c:	20000600 	.word	0x20000600

08001740 <pulse>:
void pulse(void){
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
	uint8_t partnerNumber = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	71bb      	strb	r3, [r7, #6]

	// find out number of partner
	for(i = 0; i < NUM_NEIGHBOURS; i++){
 800174e:	2300      	movs	r3, #0
 8001750:	71bb      	strb	r3, [r7, #6]
 8001752:	e00c      	b.n	800176e <pulse+0x2e>
		if(neighbourIDs[i] == partnerId){
 8001754:	79bb      	ldrb	r3, [r7, #6]
 8001756:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <pulse+0x68>)
 8001758:	5cd2      	ldrb	r2, [r2, r3]
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <pulse+0x6c>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d102      	bne.n	8001768 <pulse+0x28>
			partnerNumber = i;
 8001762:	79bb      	ldrb	r3, [r7, #6]
 8001764:	71fb      	strb	r3, [r7, #7]
			break;
 8001766:	e005      	b.n	8001774 <pulse+0x34>
	for(i = 0; i < NUM_NEIGHBOURS; i++){
 8001768:	79bb      	ldrb	r3, [r7, #6]
 800176a:	3301      	adds	r3, #1
 800176c:	71bb      	strb	r3, [r7, #6]
 800176e:	79bb      	ldrb	r3, [r7, #6]
 8001770:	2b03      	cmp	r3, #3
 8001772:	d9ef      	bls.n	8001754 <pulse+0x14>
		}
	}

	// toggle corresponding pin for 1ms // TODO: actually implement pulse with a state between passOn and sent (passOnPulse or something) and a timer
	HAL_GPIO_WritePin (GPIOC, neighbourSendPins[partnerNumber], GPIO_PIN_SET);
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <pulse+0x70>)
 8001778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800177c:	2201      	movs	r2, #1
 800177e:	4619      	mov	r1, r3
 8001780:	480c      	ldr	r0, [pc, #48]	; (80017b4 <pulse+0x74>)
 8001782:	f002 fca5 	bl	80040d0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001786:	2005      	movs	r0, #5
 8001788:	f001 fdc2 	bl	8003310 <HAL_Delay>
	HAL_GPIO_WritePin (GPIOC, neighbourSendPins[partnerNumber], GPIO_PIN_RESET);
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <pulse+0x70>)
 8001790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001794:	2200      	movs	r2, #0
 8001796:	4619      	mov	r1, r3
 8001798:	4806      	ldr	r0, [pc, #24]	; (80017b4 <pulse+0x74>)
 800179a:	f002 fc99 	bl	80040d0 <HAL_GPIO_WritePin>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	08007650 	.word	0x08007650
 80017ac:	200005f3 	.word	0x200005f3
 80017b0:	20000038 	.word	0x20000038
 80017b4:	40020800 	.word	0x40020800

080017b8 <checkFailure>:
void checkFailure(void){
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
	BOOL lagerFull = TRUE;
 80017be:	2301      	movs	r3, #1
 80017c0:	73fb      	strb	r3, [r7, #15]
	BOOL packetInLager = FALSE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	73bb      	strb	r3, [r7, #14]
	BOOL packetNoExist = TRUE;
 80017c6:	2301      	movs	r3, #1
 80017c8:	737b      	strb	r3, [r7, #13]
	BOOL unknownNeighbour = TRUE;
 80017ca:	2301      	movs	r3, #1
 80017cc:	733b      	strb	r3, [r7, #12]
	BOOL unknownPacket = FALSE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	72fb      	strb	r3, [r7, #11]

	int i;

	// check if neighbour is known
	if(partnerId == 0){ //TODO: fixed with idle in processing, but that should not be there
 80017d2:	4b4e      	ldr	r3, [pc, #312]	; (800190c <checkFailure+0x154>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <checkFailure+0x26>
		unknownNeighbour = FALSE; // neighbourId is valid
 80017da:	2300      	movs	r3, #0
 80017dc:	733b      	strb	r3, [r7, #12]
	}
	for(i = 0; i < NUM_NEIGHBOURS; i++){
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	e00d      	b.n	8001800 <checkFailure+0x48>
		if(partnerId == neighbourIDs[i]){
 80017e4:	4a4a      	ldr	r2, [pc, #296]	; (8001910 <checkFailure+0x158>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	4b47      	ldr	r3, [pc, #284]	; (800190c <checkFailure+0x154>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d102      	bne.n	80017fa <checkFailure+0x42>
			unknownNeighbour = FALSE; // neighbourId is valid
 80017f4:	2300      	movs	r3, #0
 80017f6:	733b      	strb	r3, [r7, #12]
			break;
 80017f8:	e005      	b.n	8001806 <checkFailure+0x4e>
	for(i = 0; i < NUM_NEIGHBOURS; i++){
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3301      	adds	r3, #1
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b03      	cmp	r3, #3
 8001804:	ddee      	ble.n	80017e4 <checkFailure+0x2c>
		}
	}

	if(ApNr == 42){ // create or await is set
 8001806:	4b43      	ldr	r3, [pc, #268]	; (8001914 <checkFailure+0x15c>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b2a      	cmp	r3, #42	; 0x2a
 800180c:	d127      	bne.n	800185e <checkFailure+0xa6>
		// check if Lager is already completely filled
		for(i = 0; i < LAGER_SIZE; i++){
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	e00b      	b.n	800182c <checkFailure+0x74>
			if(Lager[i] == 0){
 8001814:	4a40      	ldr	r2, [pc, #256]	; (8001918 <checkFailure+0x160>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <checkFailure+0x6e>
				lagerFull = FALSE; // Lager is not completely filled
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]
				break;
 8001824:	e005      	b.n	8001832 <checkFailure+0x7a>
		for(i = 0; i < LAGER_SIZE; i++){
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3301      	adds	r3, #1
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b05      	cmp	r3, #5
 8001830:	ddf0      	ble.n	8001814 <checkFailure+0x5c>
			}
		}

		packetNoExist = FALSE;
 8001832:	2300      	movs	r3, #0
 8001834:	737b      	strb	r3, [r7, #13]
		// check if packageId is already stored in Lager
		for(i = 0; i < LAGER_SIZE; i++){
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	e00d      	b.n	8001858 <checkFailure+0xa0>
			if(Lager[i] == packageId){
 800183c:	4a36      	ldr	r2, [pc, #216]	; (8001918 <checkFailure+0x160>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	781a      	ldrb	r2, [r3, #0]
 8001844:	4b35      	ldr	r3, [pc, #212]	; (800191c <checkFailure+0x164>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d102      	bne.n	8001852 <checkFailure+0x9a>
				packetInLager = TRUE; // packageId already exists in Lager
 800184c:	2301      	movs	r3, #1
 800184e:	73bb      	strb	r3, [r7, #14]
				break;
 8001850:	e005      	b.n	800185e <checkFailure+0xa6>
		for(i = 0; i < LAGER_SIZE; i++){
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3301      	adds	r3, #1
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b05      	cmp	r3, #5
 800185c:	ddee      	ble.n	800183c <checkFailure+0x84>
			}
		}
	}

	if(ApNr == 43){ // deliver or passOn is set
 800185e:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <checkFailure+0x15c>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b2b      	cmp	r3, #43	; 0x2b
 8001864:	d114      	bne.n	8001890 <checkFailure+0xd8>
		lagerFull = FALSE;
 8001866:	2300      	movs	r3, #0
 8001868:	73fb      	strb	r3, [r7, #15]

		// Check if packageId exists in Lager
		for(i = 0; i < LAGER_SIZE; i++){
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	e00c      	b.n	800188a <checkFailure+0xd2>
			if(Lager[i] == packageId){
 8001870:	4a29      	ldr	r2, [pc, #164]	; (8001918 <checkFailure+0x160>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	781a      	ldrb	r2, [r3, #0]
 8001878:	4b28      	ldr	r3, [pc, #160]	; (800191c <checkFailure+0x164>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d101      	bne.n	8001884 <checkFailure+0xcc>
				packetNoExist = FALSE; // packageId does exist in Lager
 8001880:	2300      	movs	r3, #0
 8001882:	737b      	strb	r3, [r7, #13]
		for(i = 0; i < LAGER_SIZE; i++){
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3301      	adds	r3, #1
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b05      	cmp	r3, #5
 800188e:	ddef      	ble.n	8001870 <checkFailure+0xb8>
			}
		}
	}

	// check if package has a valid number
	if((packageId < 0) || (packageId > 16)){
 8001890:	4b22      	ldr	r3, [pc, #136]	; (800191c <checkFailure+0x164>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b10      	cmp	r3, #16
 8001896:	d901      	bls.n	800189c <checkFailure+0xe4>
		unknownPacket = TRUE;
 8001898:	2301      	movs	r3, #1
 800189a:	72fb      	strb	r3, [r7, #11]
	}


	// set errorId according to failure
	if(packetInLager){
 800189c:	7bbb      	ldrb	r3, [r7, #14]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <checkFailure+0xf8>
		failure = TRUE;
 80018a2:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <checkFailure+0x168>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
		errorId = 1;
 80018a8:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <checkFailure+0x16c>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
	}
	else if(unknownPacket){
		failure = TRUE;
		errorId = 5; //TODO: Minispezifikation
	}
}
 80018ae:	e026      	b.n	80018fe <checkFailure+0x146>
	else if(lagerFull){
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d006      	beq.n	80018c4 <checkFailure+0x10c>
		failure = TRUE;
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <checkFailure+0x168>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]
		errorId = 2;
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <checkFailure+0x16c>)
 80018be:	2202      	movs	r2, #2
 80018c0:	701a      	strb	r2, [r3, #0]
}
 80018c2:	e01c      	b.n	80018fe <checkFailure+0x146>
	else if(packetNoExist){
 80018c4:	7b7b      	ldrb	r3, [r7, #13]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d006      	beq.n	80018d8 <checkFailure+0x120>
		failure = TRUE;
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <checkFailure+0x168>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]
		errorId = 3;
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <checkFailure+0x16c>)
 80018d2:	2203      	movs	r2, #3
 80018d4:	701a      	strb	r2, [r3, #0]
}
 80018d6:	e012      	b.n	80018fe <checkFailure+0x146>
	else if(unknownNeighbour){
 80018d8:	7b3b      	ldrb	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d006      	beq.n	80018ec <checkFailure+0x134>
		failure = TRUE;
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <checkFailure+0x168>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
		errorId = 4;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <checkFailure+0x16c>)
 80018e6:	2204      	movs	r2, #4
 80018e8:	701a      	strb	r2, [r3, #0]
}
 80018ea:	e008      	b.n	80018fe <checkFailure+0x146>
	else if(unknownPacket){
 80018ec:	7afb      	ldrb	r3, [r7, #11]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <checkFailure+0x146>
		failure = TRUE;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <checkFailure+0x168>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
		errorId = 5; //TODO: Minispezifikation
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <checkFailure+0x16c>)
 80018fa:	2205      	movs	r2, #5
 80018fc:	701a      	strb	r2, [r3, #0]
}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	200005f3 	.word	0x200005f3
 8001910:	08007650 	.word	0x08007650
 8001914:	20000606 	.word	0x20000606
 8001918:	200005f8 	.word	0x200005f8
 800191c:	200005f4 	.word	0x200005f4
 8001920:	2000060f 	.word	0x2000060f
 8001924:	200005f2 	.word	0x200005f2

08001928 <resetData>:
void resetData(){
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
	packageId = 0;
 800192c:	4b18      	ldr	r3, [pc, #96]	; (8001990 <resetData+0x68>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
	partnerId = 0;
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <resetData+0x6c>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
	errorId = 0;
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <resetData+0x70>)
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
	receive = FALSE;
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <resetData+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
	passOn = FALSE;
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <resetData+0x78>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
	create = FALSE;
 800194a:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <resetData+0x7c>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
	deliver = FALSE;
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <resetData+0x80>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
	poll = FALSE;
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <resetData+0x84>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
	await = FALSE;
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <resetData+0x88>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
	ApNr = 0;
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <resetData+0x8c>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
	failure = FALSE;
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <resetData+0x90>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
	finishedStore = FALSE;
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <resetData+0x94>)
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
	finishedSend = FALSE;
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <resetData+0x98>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
	receivedSDU = FALSE;
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <resetData+0x9c>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
	GPIO_neighbour_in = FALSE;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <resetData+0xa0>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	200005f4 	.word	0x200005f4
 8001994:	200005f3 	.word	0x200005f3
 8001998:	200005f2 	.word	0x200005f2
 800199c:	20000607 	.word	0x20000607
 80019a0:	20000608 	.word	0x20000608
 80019a4:	20000609 	.word	0x20000609
 80019a8:	2000060a 	.word	0x2000060a
 80019ac:	2000060b 	.word	0x2000060b
 80019b0:	2000060c 	.word	0x2000060c
 80019b4:	20000606 	.word	0x20000606
 80019b8:	2000060f 	.word	0x2000060f
 80019bc:	2000060e 	.word	0x2000060e
 80019c0:	2000060d 	.word	0x2000060d
 80019c4:	20000610 	.word	0x20000610
 80019c8:	20000611 	.word	0x20000611

080019cc <std>:

// STD
void std(void){
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
	switch(zustand){
 80019d0:	4b9a      	ldr	r3, [pc, #616]	; (8001c3c <std+0x270>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b07      	cmp	r3, #7
 80019d6:	f200 812b 	bhi.w	8001c30 <std+0x264>
 80019da:	a201      	add	r2, pc, #4	; (adr r2, 80019e0 <std+0x14>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	08001a01 	.word	0x08001a01
 80019e4:	08001a3d 	.word	0x08001a3d
 80019e8:	08001ae1 	.word	0x08001ae1
 80019ec:	08001aff 	.word	0x08001aff
 80019f0:	08001b27 	.word	0x08001b27
 80019f4:	08001b4b 	.word	0x08001b4b
 80019f8:	08001b67 	.word	0x08001b67
 80019fc:	08001be7 	.word	0x08001be7
	case Z_idle:
		if (receivedSDU){
 8001a00:	4b8f      	ldr	r3, [pc, #572]	; (8001c40 <std+0x274>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d009      	beq.n	8001a1c <std+0x50>
			aktion = A_checkFailure;
 8001a08:	4b8e      	ldr	r3, [pc, #568]	; (8001c44 <std+0x278>)
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	701a      	strb	r2, [r3, #0]
			zustand = Z_processing;
 8001a0e:	4b8b      	ldr	r3, [pc, #556]	; (8001c3c <std+0x270>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
			receivedSDU = FALSE; //*
 8001a14:	4b8a      	ldr	r3, [pc, #552]	; (8001c40 <std+0x274>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
		}
		else if(poll || (!receivedSDU)){ //TODO: SA/RT
			aktion = A_idle;
			poll = FALSE; //*
		}
		break;
 8001a1a:	e0fa      	b.n	8001c12 <std+0x246>
		else if(poll || (!receivedSDU)){ //TODO: SA/RT
 8001a1c:	4b8a      	ldr	r3, [pc, #552]	; (8001c48 <std+0x27c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d104      	bne.n	8001a2e <std+0x62>
 8001a24:	4b86      	ldr	r3, [pc, #536]	; (8001c40 <std+0x274>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f040 80f2 	bne.w	8001c12 <std+0x246>
			aktion = A_idle;
 8001a2e:	4b85      	ldr	r3, [pc, #532]	; (8001c44 <std+0x278>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8001a34:	4b84      	ldr	r3, [pc, #528]	; (8001c48 <std+0x27c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
		break;
 8001a3a:	e0ea      	b.n	8001c12 <std+0x246>


	case Z_processing:
		if (create && (!failure)){ // no poll (transient state), because processing + packageId should only be reported in modes passOn and deliver
 8001a3c:	4b83      	ldr	r3, [pc, #524]	; (8001c4c <std+0x280>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00d      	beq.n	8001a60 <std+0x94>
 8001a44:	4b82      	ldr	r3, [pc, #520]	; (8001c50 <std+0x284>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d109      	bne.n	8001a60 <std+0x94>
			aktion = A_create;
 8001a4c:	4b7d      	ldr	r3, [pc, #500]	; (8001c44 <std+0x278>)
 8001a4e:	2208      	movs	r2, #8
 8001a50:	701a      	strb	r2, [r3, #0]
			zustand = Z_awaiting;
 8001a52:	4b7a      	ldr	r3, [pc, #488]	; (8001c3c <std+0x270>)
 8001a54:	2206      	movs	r2, #6
 8001a56:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8001a58:	4b7b      	ldr	r3, [pc, #492]	; (8001c48 <std+0x27c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
 8001a5e:	e03e      	b.n	8001ade <std+0x112>
		}
		else if (await && (!failure)){ // no poll (transient state), because processing + packageId should only be reported in modes passOn and deliver
 8001a60:	4b7c      	ldr	r3, [pc, #496]	; (8001c54 <std+0x288>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00d      	beq.n	8001a84 <std+0xb8>
 8001a68:	4b79      	ldr	r3, [pc, #484]	; (8001c50 <std+0x284>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <std+0xb8>
			aktion = A_await;
 8001a70:	4b74      	ldr	r3, [pc, #464]	; (8001c44 <std+0x278>)
 8001a72:	2207      	movs	r2, #7
 8001a74:	701a      	strb	r2, [r3, #0]
			zustand = Z_awaiting;
 8001a76:	4b71      	ldr	r3, [pc, #452]	; (8001c3c <std+0x270>)
 8001a78:	2206      	movs	r2, #6
 8001a7a:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8001a7c:	4b72      	ldr	r3, [pc, #456]	; (8001c48 <std+0x27c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
 8001a82:	e02c      	b.n	8001ade <std+0x112>
		}
		else if (deliver && (!failure)){
 8001a84:	4b74      	ldr	r3, [pc, #464]	; (8001c58 <std+0x28c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00a      	beq.n	8001aa2 <std+0xd6>
 8001a8c:	4b70      	ldr	r3, [pc, #448]	; (8001c50 <std+0x284>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d106      	bne.n	8001aa2 <std+0xd6>
			aktion = A_deliver;
 8001a94:	4b6b      	ldr	r3, [pc, #428]	; (8001c44 <std+0x278>)
 8001a96:	2202      	movs	r2, #2
 8001a98:	701a      	strb	r2, [r3, #0]
			zustand = Z_deliver;
 8001a9a:	4b68      	ldr	r3, [pc, #416]	; (8001c3c <std+0x270>)
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	e01d      	b.n	8001ade <std+0x112>
		}
		else if (passOn && (!failure)){
 8001aa2:	4b6e      	ldr	r3, [pc, #440]	; (8001c5c <std+0x290>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00a      	beq.n	8001ac0 <std+0xf4>
 8001aaa:	4b69      	ldr	r3, [pc, #420]	; (8001c50 <std+0x284>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d106      	bne.n	8001ac0 <std+0xf4>
			aktion = A_passOn;
 8001ab2:	4b64      	ldr	r3, [pc, #400]	; (8001c44 <std+0x278>)
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	701a      	strb	r2, [r3, #0]
			zustand = Z_passOn;
 8001ab8:	4b60      	ldr	r3, [pc, #384]	; (8001c3c <std+0x270>)
 8001aba:	2204      	movs	r2, #4
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	e00e      	b.n	8001ade <std+0x112>
		}
		else if (failure){
 8001ac0:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <std+0x284>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 80a6 	beq.w	8001c16 <std+0x24a>
			aktion = A_failure;
 8001aca:	4b5e      	ldr	r3, [pc, #376]	; (8001c44 <std+0x278>)
 8001acc:	2204      	movs	r2, #4
 8001ace:	701a      	strb	r2, [r3, #0]
			zustand = Z_failure;
 8001ad0:	4b5a      	ldr	r3, [pc, #360]	; (8001c3c <std+0x270>)
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8001ad6:	4b5c      	ldr	r3, [pc, #368]	; (8001c48 <std+0x27c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001adc:	e09b      	b.n	8001c16 <std+0x24a>
 8001ade:	e09a      	b.n	8001c16 <std+0x24a>

	case Z_failure:
		if(poll){
 8001ae0:	4b59      	ldr	r3, [pc, #356]	; (8001c48 <std+0x27c>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 8098 	beq.w	8001c1a <std+0x24e>
			aktion = A_setup;
 8001aea:	4b56      	ldr	r3, [pc, #344]	; (8001c44 <std+0x278>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
			zustand = Z_idle;
 8001af0:	4b52      	ldr	r3, [pc, #328]	; (8001c3c <std+0x270>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8001af6:	4b54      	ldr	r3, [pc, #336]	; (8001c48 <std+0x27c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001afc:	e08d      	b.n	8001c1a <std+0x24e>

	case Z_deliver:
		if (poll && finishedSend){
 8001afe:	4b52      	ldr	r3, [pc, #328]	; (8001c48 <std+0x27c>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 808b 	beq.w	8001c1e <std+0x252>
 8001b08:	4b55      	ldr	r3, [pc, #340]	; (8001c60 <std+0x294>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 8086 	beq.w	8001c1e <std+0x252>
			aktion = A_updateLager;
 8001b12:	4b4c      	ldr	r3, [pc, #304]	; (8001c44 <std+0x278>)
 8001b14:	2206      	movs	r2, #6
 8001b16:	701a      	strb	r2, [r3, #0]
			zustand = Z_sent;
 8001b18:	4b48      	ldr	r3, [pc, #288]	; (8001c3c <std+0x270>)
 8001b1a:	2205      	movs	r2, #5
 8001b1c:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8001b1e:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <std+0x27c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001b24:	e07b      	b.n	8001c1e <std+0x252>

	case Z_passOn:
		if (poll && finishedSend){
 8001b26:	4b48      	ldr	r3, [pc, #288]	; (8001c48 <std+0x27c>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d079      	beq.n	8001c22 <std+0x256>
 8001b2e:	4b4c      	ldr	r3, [pc, #304]	; (8001c60 <std+0x294>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d075      	beq.n	8001c22 <std+0x256>
			aktion = A_pulse;
 8001b36:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <std+0x278>)
 8001b38:	2205      	movs	r2, #5
 8001b3a:	701a      	strb	r2, [r3, #0]
			zustand = Z_sent;
 8001b3c:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <std+0x270>)
 8001b3e:	2205      	movs	r2, #5
 8001b40:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8001b42:	4b41      	ldr	r3, [pc, #260]	; (8001c48 <std+0x27c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001b48:	e06b      	b.n	8001c22 <std+0x256>

	case Z_sent:
		if (poll){
 8001b4a:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <std+0x27c>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d069      	beq.n	8001c26 <std+0x25a>
			aktion = A_setup;
 8001b52:	4b3c      	ldr	r3, [pc, #240]	; (8001c44 <std+0x278>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	701a      	strb	r2, [r3, #0]
			zustand = Z_idle;
 8001b58:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <std+0x270>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8001b5e:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <std+0x27c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001b64:	e05f      	b.n	8001c26 <std+0x25a>

	case Z_awaiting: // TODO: no GPIO needed for going from awating to send?? maybe something to do with pull up, but it used to work?
		if (GPIO_neighbour_in && await && !finishedStore){ //TODO: SA/RT finished store
 8001b66:	4b3f      	ldr	r3, [pc, #252]	; (8001c64 <std+0x298>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00e      	beq.n	8001b8c <std+0x1c0>
 8001b6e:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <std+0x288>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00a      	beq.n	8001b8c <std+0x1c0>
 8001b76:	4b3c      	ldr	r3, [pc, #240]	; (8001c68 <std+0x29c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <std+0x1c0>
			aktion = A_handleStore;
 8001b7e:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <std+0x278>)
 8001b80:	2209      	movs	r2, #9
 8001b82:	701a      	strb	r2, [r3, #0]
			GPIO_neighbour_in = FALSE; //*
 8001b84:	4b37      	ldr	r3, [pc, #220]	; (8001c64 <std+0x298>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	e02b      	b.n	8001be4 <std+0x218>
		}
		else if (poll && finishedStore && await){
 8001b8c:	4b2e      	ldr	r3, [pc, #184]	; (8001c48 <std+0x27c>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d011      	beq.n	8001bb8 <std+0x1ec>
 8001b94:	4b34      	ldr	r3, [pc, #208]	; (8001c68 <std+0x29c>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00d      	beq.n	8001bb8 <std+0x1ec>
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <std+0x288>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d009      	beq.n	8001bb8 <std+0x1ec>
			aktion = A_storeAwait;
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <std+0x278>)
 8001ba6:	220a      	movs	r2, #10
 8001ba8:	701a      	strb	r2, [r3, #0]
			zustand = Z_received;
 8001baa:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <std+0x270>)
 8001bac:	2207      	movs	r2, #7
 8001bae:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <std+0x27c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	e015      	b.n	8001be4 <std+0x218>
		}
		else if (poll && finishedStore && create){ //else if (poll && finishedStore && create && count	){
 8001bb8:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <std+0x27c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d034      	beq.n	8001c2a <std+0x25e>
 8001bc0:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <std+0x29c>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d030      	beq.n	8001c2a <std+0x25e>
 8001bc8:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <std+0x280>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d02c      	beq.n	8001c2a <std+0x25e>
			aktion = A_storeCreate;
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <std+0x278>)
 8001bd2:	220b      	movs	r2, #11
 8001bd4:	701a      	strb	r2, [r3, #0]
			zustand = Z_received;
 8001bd6:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <std+0x270>)
 8001bd8:	2207      	movs	r2, #7
 8001bda:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <std+0x27c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
			//count = FALSE;
		}
		break;
 8001be2:	e022      	b.n	8001c2a <std+0x25e>
 8001be4:	e021      	b.n	8001c2a <std+0x25e>

	case Z_received:
		if (poll){
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <std+0x27c>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d009      	beq.n	8001c02 <std+0x236>
			aktion = A_setup;
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <std+0x278>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	701a      	strb	r2, [r3, #0]
			zustand = Z_idle;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <std+0x270>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <std+0x27c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
		}
		else if(!poll){
			aktion = A_idle; //*
		}
		break;
 8001c00:	e015      	b.n	8001c2e <std+0x262>
		else if(!poll){
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <std+0x27c>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d111      	bne.n	8001c2e <std+0x262>
			aktion = A_idle; //*
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <std+0x278>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
		break;
 8001c10:	e00d      	b.n	8001c2e <std+0x262>
		break;
 8001c12:	bf00      	nop
 8001c14:	e00c      	b.n	8001c30 <std+0x264>
		break;
 8001c16:	bf00      	nop
 8001c18:	e00a      	b.n	8001c30 <std+0x264>
		break;
 8001c1a:	bf00      	nop
 8001c1c:	e008      	b.n	8001c30 <std+0x264>
		break;
 8001c1e:	bf00      	nop
 8001c20:	e006      	b.n	8001c30 <std+0x264>
		break;
 8001c22:	bf00      	nop
 8001c24:	e004      	b.n	8001c30 <std+0x264>
		break;
 8001c26:	bf00      	nop
 8001c28:	e002      	b.n	8001c30 <std+0x264>
		break;
 8001c2a:	bf00      	nop
 8001c2c:	e000      	b.n	8001c30 <std+0x264>
		break;
 8001c2e:	bf00      	nop
	}
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000612 	.word	0x20000612
 8001c40:	20000610 	.word	0x20000610
 8001c44:	20000613 	.word	0x20000613
 8001c48:	2000060b 	.word	0x2000060b
 8001c4c:	20000609 	.word	0x20000609
 8001c50:	2000060f 	.word	0x2000060f
 8001c54:	2000060c 	.word	0x2000060c
 8001c58:	2000060a 	.word	0x2000060a
 8001c5c:	20000608 	.word	0x20000608
 8001c60:	2000060d 	.word	0x2000060d
 8001c64:	20000611 	.word	0x20000611
 8001c68:	2000060e 	.word	0x2000060e

08001c6c <pat>:

//* Kontrollflüsse werden im Interrupt gesetzt und müssen deshalb hier zurückgesetzt werden

// PAT
void pat(void){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
	switch(aktion){
 8001c72:	4b3c      	ldr	r3, [pc, #240]	; (8001d64 <pat+0xf8>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	d86f      	bhi.n	8001d5a <pat+0xee>
 8001c7a:	a201      	add	r2, pc, #4	; (adr r2, 8001c80 <pat+0x14>)
 8001c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c80:	08001d59 	.word	0x08001d59
 8001c84:	08001cb5 	.word	0x08001cb5
 8001c88:	08001cbf 	.word	0x08001cbf
 8001c8c:	08001cc9 	.word	0x08001cc9
 8001c90:	08001cd3 	.word	0x08001cd3
 8001c94:	08001cd9 	.word	0x08001cd9
 8001c98:	08001d0f 	.word	0x08001d0f
 8001c9c:	08001d1d 	.word	0x08001d1d
 8001ca0:	08001d23 	.word	0x08001d23
 8001ca4:	08001d2d 	.word	0x08001d2d
 8001ca8:	08001d33 	.word	0x08001d33
 8001cac:	08001d41 	.word	0x08001d41
 8001cb0:	08001d4f 	.word	0x08001d4f
	case A_setup:
		resetData(); // TODO: SA/RT
 8001cb4:	f7ff fe38 	bl	8001928 <resetData>
		stateProcessing();
 8001cb8:	f7fe ff7c 	bl	8000bb4 <stateProcessing>
		break;
 8001cbc:	e04d      	b.n	8001d5a <pat+0xee>
	case A_deliver: // TODO: A_deliver and A_passOn are identical
		stateProcessing();
 8001cbe:	f7fe ff79 	bl	8000bb4 <stateProcessing>
		handleSend();
 8001cc2:	f7fe fff1 	bl	8000ca8 <handleSend>
		break;
 8001cc6:	e048      	b.n	8001d5a <pat+0xee>
	case A_passOn:
		stateProcessing();
 8001cc8:	f7fe ff74 	bl	8000bb4 <stateProcessing>
		handleSend();
 8001ccc:	f7fe ffec 	bl	8000ca8 <handleSend>
		break;
 8001cd0:	e043      	b.n	8001d5a <pat+0xee>
	case A_failure:
		stateFailure();
 8001cd2:	f7fe ff9f 	bl	8000c14 <stateFailure>
		break;
 8001cd6:	e040      	b.n	8001d5a <pat+0xee>
	case A_pulse:
		animateSend();
 8001cd8:	f7ff f846 	bl	8000d68 <animateSend>
		HAL_Delay(3000);
 8001cdc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001ce0:	f001 fb16 	bl	8003310 <HAL_Delay>
		PixelRGB_t pixel;
		// Access the members through the color struct
		pixel.color.r = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	717b      	strb	r3, [r7, #5]
		pixel.color.g = 20;
 8001ce8:	2314      	movs	r3, #20
 8001cea:	71bb      	strb	r3, [r7, #6]
		pixel.color.b = 20;
 8001cec:	2314      	movs	r3, #20
 8001cee:	713b      	strb	r3, [r7, #4]
		pulse();
 8001cf0:	f7ff fd26 	bl	8001740 <pulse>
		ws2812_pixel_all(&pixel);
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f001 f9f2 	bl	80030e0 <ws2812_pixel_all>
		HAL_Delay(1000);
 8001cfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d00:	f001 fb06 	bl	8003310 <HAL_Delay>
		updateLager();
 8001d04:	f7ff f80e 	bl	8000d24 <updateLager>
		stateSent();
 8001d08:	f7fe ff78 	bl	8000bfc <stateSent>
		break;
 8001d0c:	e025      	b.n	8001d5a <pat+0xee>
	case A_updateLager:
		animateDeliver();
 8001d0e:	f7ff fbcf 	bl	80014b0 <animateDeliver>
		updateLager();
 8001d12:	f7ff f807 	bl	8000d24 <updateLager>
		stateSent();
 8001d16:	f7fe ff71 	bl	8000bfc <stateSent>
		break;
 8001d1a:	e01e      	b.n	8001d5a <pat+0xee>
	case A_await:
		stateAwait();
 8001d1c:	f7fe ff56 	bl	8000bcc <stateAwait>
		break;
 8001d20:	e01b      	b.n	8001d5a <pat+0xee>
	case A_create:
		stateAwait();
 8001d22:	f7fe ff53 	bl	8000bcc <stateAwait>
		handleStore();
 8001d26:	f7fe ff81 	bl	8000c2c <handleStore>
		break;
 8001d2a:	e016      	b.n	8001d5a <pat+0xee>
	case A_handleStore:
		handleStore();
 8001d2c:	f7fe ff7e 	bl	8000c2c <handleStore>
		break;
 8001d30:	e013      	b.n	8001d5a <pat+0xee>
	case A_storeAwait:
		animateReceive();
 8001d32:	f7ff f95d 	bl	8000ff0 <animateReceive>
		updateLager();
 8001d36:	f7fe fff5 	bl	8000d24 <updateLager>
		stateReceived();
 8001d3a:	f7fe ff53 	bl	8000be4 <stateReceived>
		break;
 8001d3e:	e00c      	b.n	8001d5a <pat+0xee>
	case A_storeCreate:
		animateCreate();
 8001d40:	f7ff fa72 	bl	8001228 <animateCreate>
		updateLager();
 8001d44:	f7fe ffee 	bl	8000d24 <updateLager>
		stateReceived();
 8001d48:	f7fe ff4c 	bl	8000be4 <stateReceived>
		break;
 8001d4c:	e005      	b.n	8001d5a <pat+0xee>
	case A_checkFailure:
		checkFailure();
 8001d4e:	f7ff fd33 	bl	80017b8 <checkFailure>
		stateProcessing();
 8001d52:	f7fe ff2f 	bl	8000bb4 <stateProcessing>
		break;
 8001d56:	e000      	b.n	8001d5a <pat+0xee>

	//TODO: SA/RT
	case A_idle:
		break;
 8001d58:	bf00      	nop
	}
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000613 	.word	0x20000613

08001d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d6e:	f001 fa5d 	bl	800322c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d72:	f000 f859 	bl	8001e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d76:	f000 fa37 	bl	80021e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d7a:	f000 fa0d 	bl	8002198 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001d7e:	f000 f9e1 	bl	8002144 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001d82:	f000 f9b5 	bl	80020f0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001d86:	f000 f8f1 	bl	8001f6c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d8a:	f000 f963 	bl	8002054 <MX_TIM3_Init>
  MX_SPI2_Init();
 8001d8e:	f000 f8b7 	bl	8001f00 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, rx_buf, L1_PDU_size);
 8001d92:	2210      	movs	r2, #16
 8001d94:	491e      	ldr	r1, [pc, #120]	; (8001e10 <main+0xa8>)
 8001d96:	481f      	ldr	r0, [pc, #124]	; (8001e14 <main+0xac>)
 8001d98:	f004 fd02 	bl	80067a0 <HAL_UART_Receive_IT>
    HAL_TIM_Base_Start_IT(&htim3);
 8001d9c:	481e      	ldr	r0, [pc, #120]	; (8001e18 <main+0xb0>)
 8001d9e:	f003 fa59 	bl	8005254 <HAL_TIM_Base_Start_IT>
	// Zustandsuebergangsdiagramm reset
	zustand = Z_idle;
 8001da2:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <main+0xb4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
	aktion = A_idle;
 8001da8:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <main+0xb8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
	pat();
 8001dae:	f7ff ff5d 	bl	8001c6c <pat>

	// Reset LEDs
	for(int i = 0; i < NUM_PIXELS; i++){
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	e013      	b.n	8001de0 <main+0x78>
		pixels[i].color.g = 0;
 8001db8:	4a1a      	ldr	r2, [pc, #104]	; (8001e24 <main+0xbc>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	709a      	strb	r2, [r3, #2]
		pixels[i].color.r = 0;
 8001dc4:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <main+0xbc>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	2200      	movs	r2, #0
 8001dce:	705a      	strb	r2, [r3, #1]
		pixels[i].color.b = 0;
 8001dd0:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <main+0xbc>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUM_PIXELS; i++){
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b07      	cmp	r3, #7
 8001de4:	dde8      	ble.n	8001db8 <main+0x50>
	}
	writeLEDs(pixels);
 8001de6:	480f      	ldr	r0, [pc, #60]	; (8001e24 <main+0xbc>)
 8001de8:	f7fe fe86 	bl	8000af8 <writeLEDs>

	ws2812_init();
 8001dec:	f001 f95a 	bl	80030a4 <ws2812_init>

    /* USER CODE BEGIN 3 */

		PixelRGB_t pixel;
		// Access the members through the color struct
		pixel.color.r = 20;
 8001df0:	2314      	movs	r3, #20
 8001df2:	707b      	strb	r3, [r7, #1]
		pixel.color.g = 20;
 8001df4:	2314      	movs	r3, #20
 8001df6:	70bb      	strb	r3, [r7, #2]
		pixel.color.b = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	703b      	strb	r3, [r7, #0]

		ws2812_pixel_all(&pixel);
 8001dfc:	463b      	mov	r3, r7
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f001 f96e 	bl	80030e0 <ws2812_pixel_all>
	  std();
 8001e04:	f7ff fde2 	bl	80019cc <std>
	  pat();
 8001e08:	f7ff ff30 	bl	8001c6c <pat>
	{
 8001e0c:	e7f0      	b.n	8001df0 <main+0x88>
 8001e0e:	bf00      	nop
 8001e10:	2000029c 	.word	0x2000029c
 8001e14:	20000210 	.word	0x20000210
 8001e18:	20000168 	.word	0x20000168
 8001e1c:	20000612 	.word	0x20000612
 8001e20:	20000613 	.word	0x20000613
 8001e24:	200005d0 	.word	0x200005d0

08001e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b094      	sub	sp, #80	; 0x50
 8001e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e2e:	f107 0320 	add.w	r3, r7, #32
 8001e32:	2230      	movs	r2, #48	; 0x30
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f005 fbd2 	bl	80075e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <SystemClock_Config+0xd0>)
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	4a28      	ldr	r2, [pc, #160]	; (8001ef8 <SystemClock_Config+0xd0>)
 8001e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5c:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <SystemClock_Config+0xd0>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e68:	2300      	movs	r3, #0
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	4b23      	ldr	r3, [pc, #140]	; (8001efc <SystemClock_Config+0xd4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e74:	4a21      	ldr	r2, [pc, #132]	; (8001efc <SystemClock_Config+0xd4>)
 8001e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <SystemClock_Config+0xd4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e90:	2310      	movs	r3, #16
 8001e92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e94:	2302      	movs	r3, #2
 8001e96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e9c:	2310      	movs	r3, #16
 8001e9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ea0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ea4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001eaa:	2307      	movs	r3, #7
 8001eac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eae:	f107 0320 	add.w	r3, r7, #32
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f002 f93e 	bl	8004134 <HAL_RCC_OscConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001ebe:	f000 fe6b 	bl	8002b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec2:	230f      	movs	r3, #15
 8001ec4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ed8:	f107 030c 	add.w	r3, r7, #12
 8001edc:	2102      	movs	r1, #2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f002 fba0 	bl	8004624 <HAL_RCC_ClockConfig>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001eea:	f000 fe55 	bl	8002b98 <Error_Handler>
  }
}
 8001eee:	bf00      	nop
 8001ef0:	3750      	adds	r7, #80	; 0x50
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40007000 	.word	0x40007000

08001f00 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f04:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <MX_SPI2_Init+0x64>)
 8001f06:	4a18      	ldr	r2, [pc, #96]	; (8001f68 <MX_SPI2_Init+0x68>)
 8001f08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <MX_SPI2_Init+0x64>)
 8001f0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <MX_SPI2_Init+0x64>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <MX_SPI2_Init+0x64>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <MX_SPI2_Init+0x64>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <MX_SPI2_Init+0x64>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <MX_SPI2_Init+0x64>)
 8001f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f30:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <MX_SPI2_Init+0x64>)
 8001f34:	2218      	movs	r2, #24
 8001f36:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f38:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <MX_SPI2_Init+0x64>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <MX_SPI2_Init+0x64>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f44:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <MX_SPI2_Init+0x64>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <MX_SPI2_Init+0x64>)
 8001f4c:	220a      	movs	r2, #10
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f50:	4804      	ldr	r0, [pc, #16]	; (8001f64 <MX_SPI2_Init+0x64>)
 8001f52:	f002 fd87 	bl	8004a64 <HAL_SPI_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f5c:	f000 fe1c 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000068 	.word	0x20000068
 8001f68:	40003800 	.word	0x40003800

08001f6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08e      	sub	sp, #56	; 0x38
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f80:	f107 0320 	add.w	r3, r7, #32
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
 8001f98:	615a      	str	r2, [r3, #20]
 8001f9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f9c:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <MX_TIM2_Init+0xe4>)
 8001f9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fa2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fa4:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <MX_TIM2_Init+0xe4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001faa:	4b29      	ldr	r3, [pc, #164]	; (8002050 <MX_TIM2_Init+0xe4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001fb0:	4b27      	ldr	r3, [pc, #156]	; (8002050 <MX_TIM2_Init+0xe4>)
 8001fb2:	2264      	movs	r2, #100	; 0x64
 8001fb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <MX_TIM2_Init+0xe4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fbc:	4b24      	ldr	r3, [pc, #144]	; (8002050 <MX_TIM2_Init+0xe4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fc2:	4823      	ldr	r0, [pc, #140]	; (8002050 <MX_TIM2_Init+0xe4>)
 8001fc4:	f003 f8f6 	bl	80051b4 <HAL_TIM_Base_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001fce:	f000 fde3 	bl	8002b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fdc:	4619      	mov	r1, r3
 8001fde:	481c      	ldr	r0, [pc, #112]	; (8002050 <MX_TIM2_Init+0xe4>)
 8001fe0:	f003 fe34 	bl	8005c4c <HAL_TIM_ConfigClockSource>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001fea:	f000 fdd5 	bl	8002b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fee:	4818      	ldr	r0, [pc, #96]	; (8002050 <MX_TIM2_Init+0xe4>)
 8001ff0:	f003 f992 	bl	8005318 <HAL_TIM_PWM_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001ffa:	f000 fdcd 	bl	8002b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002006:	f107 0320 	add.w	r3, r7, #32
 800200a:	4619      	mov	r1, r3
 800200c:	4810      	ldr	r0, [pc, #64]	; (8002050 <MX_TIM2_Init+0xe4>)
 800200e:	f004 fab3 	bl	8006578 <HAL_TIMEx_MasterConfigSynchronization>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002018:	f000 fdbe 	bl	8002b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800201c:	2360      	movs	r3, #96	; 0x60
 800201e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	2208      	movs	r2, #8
 8002030:	4619      	mov	r1, r3
 8002032:	4807      	ldr	r0, [pc, #28]	; (8002050 <MX_TIM2_Init+0xe4>)
 8002034:	f003 fd48 	bl	8005ac8 <HAL_TIM_PWM_ConfigChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800203e:	f000 fdab 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002042:	4803      	ldr	r0, [pc, #12]	; (8002050 <MX_TIM2_Init+0xe4>)
 8002044:	f000 fece 	bl	8002de4 <HAL_TIM_MspPostInit>

}
 8002048:	bf00      	nop
 800204a:	3738      	adds	r7, #56	; 0x38
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000120 	.word	0x20000120

08002054 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002068:	463b      	mov	r3, r7
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002070:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <MX_TIM3_Init+0x94>)
 8002072:	4a1e      	ldr	r2, [pc, #120]	; (80020ec <MX_TIM3_Init+0x98>)
 8002074:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <MX_TIM3_Init+0x94>)
 8002078:	f242 7210 	movw	r2, #10000	; 0x2710
 800207c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <MX_TIM3_Init+0x94>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4200;
 8002084:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <MX_TIM3_Init+0x94>)
 8002086:	f241 0268 	movw	r2, #4200	; 0x1068
 800208a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208c:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <MX_TIM3_Init+0x94>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <MX_TIM3_Init+0x94>)
 8002094:	2280      	movs	r2, #128	; 0x80
 8002096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002098:	4813      	ldr	r0, [pc, #76]	; (80020e8 <MX_TIM3_Init+0x94>)
 800209a:	f003 f88b 	bl	80051b4 <HAL_TIM_Base_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80020a4:	f000 fd78 	bl	8002b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020ae:	f107 0308 	add.w	r3, r7, #8
 80020b2:	4619      	mov	r1, r3
 80020b4:	480c      	ldr	r0, [pc, #48]	; (80020e8 <MX_TIM3_Init+0x94>)
 80020b6:	f003 fdc9 	bl	8005c4c <HAL_TIM_ConfigClockSource>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80020c0:	f000 fd6a 	bl	8002b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020cc:	463b      	mov	r3, r7
 80020ce:	4619      	mov	r1, r3
 80020d0:	4805      	ldr	r0, [pc, #20]	; (80020e8 <MX_TIM3_Init+0x94>)
 80020d2:	f004 fa51 	bl	8006578 <HAL_TIMEx_MasterConfigSynchronization>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80020dc:	f000 fd5c 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020e0:	bf00      	nop
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000168 	.word	0x20000168
 80020ec:	40000400 	.word	0x40000400

080020f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <MX_USART1_UART_Init+0x4c>)
 80020f6:	4a12      	ldr	r2, [pc, #72]	; (8002140 <MX_USART1_UART_Init+0x50>)
 80020f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <MX_USART1_UART_Init+0x4c>)
 80020fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002100:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <MX_USART1_UART_Init+0x4c>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <MX_USART1_UART_Init+0x4c>)
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <MX_USART1_UART_Init+0x4c>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <MX_USART1_UART_Init+0x4c>)
 8002116:	220c      	movs	r2, #12
 8002118:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <MX_USART1_UART_Init+0x4c>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <MX_USART1_UART_Init+0x4c>)
 8002122:	2200      	movs	r2, #0
 8002124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002126:	4805      	ldr	r0, [pc, #20]	; (800213c <MX_USART1_UART_Init+0x4c>)
 8002128:	f004 faa8 	bl	800667c <HAL_UART_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002132:	f000 fd31 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000210 	.word	0x20000210
 8002140:	40011000 	.word	0x40011000

08002144 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 800214a:	4a12      	ldr	r2, [pc, #72]	; (8002194 <MX_USART2_UART_Init+0x50>)
 800214c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002150:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002154:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002156:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 800216a:	220c      	movs	r2, #12
 800216c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002176:	2200      	movs	r2, #0
 8002178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800217a:	4805      	ldr	r0, [pc, #20]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 800217c:	f004 fa7e 	bl	800667c <HAL_UART_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002186:	f000 fd07 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000254 	.word	0x20000254
 8002194:	40004400 	.word	0x40004400

08002198 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <MX_DMA_Init+0x4c>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a0f      	ldr	r2, [pc, #60]	; (80021e4 <MX_DMA_Init+0x4c>)
 80021a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <MX_DMA_Init+0x4c>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	200c      	movs	r0, #12
 80021c0:	f001 f9c9 	bl	8003556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80021c4:	200c      	movs	r0, #12
 80021c6:	f001 f9e2 	bl	800358e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	200f      	movs	r0, #15
 80021d0:	f001 f9c1 	bl	8003556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80021d4:	200f      	movs	r0, #15
 80021d6:	f001 f9da 	bl	800358e <HAL_NVIC_EnableIRQ>

}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800

080021e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
 80021fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b52      	ldr	r3, [pc, #328]	; (800234c <MX_GPIO_Init+0x164>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a51      	ldr	r2, [pc, #324]	; (800234c <MX_GPIO_Init+0x164>)
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b4f      	ldr	r3, [pc, #316]	; (800234c <MX_GPIO_Init+0x164>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b4b      	ldr	r3, [pc, #300]	; (800234c <MX_GPIO_Init+0x164>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a4a      	ldr	r2, [pc, #296]	; (800234c <MX_GPIO_Init+0x164>)
 8002224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b48      	ldr	r3, [pc, #288]	; (800234c <MX_GPIO_Init+0x164>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	4b44      	ldr	r3, [pc, #272]	; (800234c <MX_GPIO_Init+0x164>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a43      	ldr	r2, [pc, #268]	; (800234c <MX_GPIO_Init+0x164>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b41      	ldr	r3, [pc, #260]	; (800234c <MX_GPIO_Init+0x164>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	4b3d      	ldr	r3, [pc, #244]	; (800234c <MX_GPIO_Init+0x164>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a3c      	ldr	r2, [pc, #240]	; (800234c <MX_GPIO_Init+0x164>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b3a      	ldr	r3, [pc, #232]	; (800234c <MX_GPIO_Init+0x164>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	2120      	movs	r1, #32
 8002272:	4837      	ldr	r0, [pc, #220]	; (8002350 <MX_GPIO_Init+0x168>)
 8002274:	f001 ff2c 	bl	80040d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_N1_Pin|S_N2_Pin|S_N3_Pin|S_N4_Pin, GPIO_PIN_RESET);
 8002278:	2200      	movs	r2, #0
 800227a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800227e:	4835      	ldr	r0, [pc, #212]	; (8002354 <MX_GPIO_Init+0x16c>)
 8002280:	f001 ff26 	bl	80040d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800228a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800228e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4619      	mov	r1, r3
 800229a:	482e      	ldr	r0, [pc, #184]	; (8002354 <MX_GPIO_Init+0x16c>)
 800229c:	f001 fd94 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_N1_Pin R_N2_Pin R_N3_Pin R_N4_Pin */
  GPIO_InitStruct.Pin = R_N1_Pin|R_N2_Pin|R_N3_Pin|R_N4_Pin;
 80022a0:	230f      	movs	r3, #15
 80022a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022aa:	2302      	movs	r3, #2
 80022ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	4827      	ldr	r0, [pc, #156]	; (8002354 <MX_GPIO_Init+0x16c>)
 80022b6:	f001 fd87 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80022ba:	2320      	movs	r3, #32
 80022bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022be:	2301      	movs	r3, #1
 80022c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	2300      	movs	r3, #0
 80022c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4619      	mov	r1, r3
 80022d0:	481f      	ldr	r0, [pc, #124]	; (8002350 <MX_GPIO_Init+0x168>)
 80022d2:	f001 fd79 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : S_N1_Pin S_N2_Pin S_N3_Pin S_N4_Pin */
  GPIO_InitStruct.Pin = S_N1_Pin|S_N2_Pin|S_N3_Pin|S_N4_Pin;
 80022d6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80022da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022dc:	2301      	movs	r3, #1
 80022de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e4:	2300      	movs	r3, #0
 80022e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	4619      	mov	r1, r3
 80022ee:	4819      	ldr	r0, [pc, #100]	; (8002354 <MX_GPIO_Init+0x16c>)
 80022f0:	f001 fd6a 	bl	8003dc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2100      	movs	r1, #0
 80022f8:	2006      	movs	r0, #6
 80022fa:	f001 f92c 	bl	8003556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80022fe:	2006      	movs	r0, #6
 8002300:	f001 f945 	bl	800358e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002304:	2200      	movs	r2, #0
 8002306:	2100      	movs	r1, #0
 8002308:	2007      	movs	r0, #7
 800230a:	f001 f924 	bl	8003556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800230e:	2007      	movs	r0, #7
 8002310:	f001 f93d 	bl	800358e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002314:	2200      	movs	r2, #0
 8002316:	2100      	movs	r1, #0
 8002318:	2008      	movs	r0, #8
 800231a:	f001 f91c 	bl	8003556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800231e:	2008      	movs	r0, #8
 8002320:	f001 f935 	bl	800358e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002324:	2200      	movs	r2, #0
 8002326:	2100      	movs	r1, #0
 8002328:	2009      	movs	r0, #9
 800232a:	f001 f914 	bl	8003556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800232e:	2009      	movs	r0, #9
 8002330:	f001 f92d 	bl	800358e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	2100      	movs	r1, #0
 8002338:	2028      	movs	r0, #40	; 0x28
 800233a:	f001 f90c 	bl	8003556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800233e:	2028      	movs	r0, #40	; 0x28
 8002340:	f001 f925 	bl	800358e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002344:	bf00      	nop
 8002346:	3728      	adds	r7, #40	; 0x28
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40023800 	.word	0x40023800
 8002350:	40020000 	.word	0x40020000
 8002354:	40020800 	.word	0x40020800

08002358 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Rx Transfer completed callbacks.
// Gets called when HAL_UART_Receive_IT receive is completed
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){ // check if something was received on UART1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a10      	ldr	r2, [pc, #64]	; (80023a8 <HAL_UART_RxCpltCallback+0x50>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d111      	bne.n	800238e <HAL_UART_RxCpltCallback+0x36>
		for(int i = 0; i < L1_PDU_size; i++){ // copy received packet from buffer
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	e00b      	b.n	8002388 <HAL_UART_RxCpltCallback+0x30>
			L1_PDU[i] = rx_buf[i];
 8002370:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <HAL_UART_RxCpltCallback+0x54>)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4413      	add	r3, r2
 8002376:	7819      	ldrb	r1, [r3, #0]
 8002378:	4a0d      	ldr	r2, [pc, #52]	; (80023b0 <HAL_UART_RxCpltCallback+0x58>)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4413      	add	r3, r2
 800237e:	460a      	mov	r2, r1
 8002380:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < L1_PDU_size; i++){ // copy received packet from buffer
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3301      	adds	r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b0f      	cmp	r3, #15
 800238c:	ddf0      	ble.n	8002370 <HAL_UART_RxCpltCallback+0x18>
		}
	}
  HAL_UART_Receive_IT(&huart1, rx_buf, L1_PDU_size); // Attach interrupt to receive L1_PDU from USART
 800238e:	2210      	movs	r2, #16
 8002390:	4906      	ldr	r1, [pc, #24]	; (80023ac <HAL_UART_RxCpltCallback+0x54>)
 8002392:	4808      	ldr	r0, [pc, #32]	; (80023b4 <HAL_UART_RxCpltCallback+0x5c>)
 8002394:	f004 fa04 	bl	80067a0 <HAL_UART_Receive_IT>
  L1_receive(L1_PDU); // Pass L1_PDU to protocol stack
 8002398:	4805      	ldr	r0, [pc, #20]	; (80023b0 <HAL_UART_RxCpltCallback+0x58>)
 800239a:	f000 f877 	bl	800248c <L1_receive>
}
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40011000 	.word	0x40011000
 80023ac:	2000029c 	.word	0x2000029c
 80023b0:	200002ac 	.word	0x200002ac
 80023b4:	20000210 	.word	0x20000210

080023b8 <HAL_UART_TxCpltCallback>:

// Tx Transfer completed callbacks.
// Gets called when HAL_UART_Transmit_IT transmission is completed
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	tx_complete = 1; // packet received
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <HAL_UART_TxCpltCallback+0x1c>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000298 	.word	0x20000298

080023d8 <HAL_GPIO_EXTI_Callback>:

// GPIO interrupt callback
// increments button press counter
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	80fb      	strh	r3, [r7, #6]
	// rising edge at button pin was detected and DEBOUNCE_INTERVAL has elapsed since last rising edge
	if (GPIO_Pin == B1_Pin){
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023e8:	d115      	bne.n	8002416 <HAL_GPIO_EXTI_Callback+0x3e>
		millis = HAL_GetTick(); // get current elapsed time in milliseconds
 80023ea:	f000 ff85 	bl	80032f8 <HAL_GetTick>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4a21      	ldr	r2, [pc, #132]	; (8002478 <HAL_GPIO_EXTI_Callback+0xa0>)
 80023f2:	6013      	str	r3, [r2, #0]
		if((millis - lastPress) > DEBOUNCE_INTERVAL){
 80023f4:	4b20      	ldr	r3, [pc, #128]	; (8002478 <HAL_GPIO_EXTI_Callback+0xa0>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b20      	ldr	r3, [pc, #128]	; (800247c <HAL_GPIO_EXTI_Callback+0xa4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b0a      	cmp	r3, #10
 8002400:	d909      	bls.n	8002416 <HAL_GPIO_EXTI_Callback+0x3e>
			cnt++;
 8002402:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	3301      	adds	r3, #1
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_GPIO_EXTI_Callback+0xa8>)
 800240c:	701a      	strb	r2, [r3, #0]
			lastPress = millis;
 800240e:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a1a      	ldr	r2, [pc, #104]	; (800247c <HAL_GPIO_EXTI_Callback+0xa4>)
 8002414:	6013      	str	r3, [r2, #0]
		}
	}

	// rising edge at neighbour receive pin 1 was detected and packet should be received from neighbour 1
	if((GPIO_Pin == R_N1_Pin) && (neighbourIDs[0] == partnerId)){
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d107      	bne.n	800242c <HAL_GPIO_EXTI_Callback+0x54>
 800241c:	2201      	movs	r2, #1
 800241e:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_GPIO_EXTI_Callback+0xac>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d102      	bne.n	800242c <HAL_GPIO_EXTI_Callback+0x54>
		GPIO_neighbour_in = TRUE;
 8002426:	4b18      	ldr	r3, [pc, #96]	; (8002488 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
	}

	// rising edge at neighbour receive pin 1 was detected and packet should be received from neighbour 1
	if((GPIO_Pin == R_N2_Pin) && (neighbourIDs[1] == partnerId)){
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d107      	bne.n	8002442 <HAL_GPIO_EXTI_Callback+0x6a>
 8002432:	2200      	movs	r2, #0
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <HAL_GPIO_EXTI_Callback+0xac>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d102      	bne.n	8002442 <HAL_GPIO_EXTI_Callback+0x6a>
		GPIO_neighbour_in = TRUE;
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_GPIO_EXTI_Callback+0xb0>)
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
	}

	// rising edge at neighbour receive pin 1 was detected and packet should be received from neighbour 1
	if((GPIO_Pin == R_N3_Pin) && (neighbourIDs[2] == partnerId)){
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	2b04      	cmp	r3, #4
 8002446:	d107      	bne.n	8002458 <HAL_GPIO_EXTI_Callback+0x80>
 8002448:	2200      	movs	r2, #0
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <HAL_GPIO_EXTI_Callback+0xac>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d102      	bne.n	8002458 <HAL_GPIO_EXTI_Callback+0x80>
		GPIO_neighbour_in = TRUE;
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
	}

	// rising edge at neighbour receive pin 1 was detected and packet should be received from neighbour 1
	if((GPIO_Pin == R_N4_Pin) && (neighbourIDs[3] == partnerId)){
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	2b08      	cmp	r3, #8
 800245c:	d107      	bne.n	800246e <HAL_GPIO_EXTI_Callback+0x96>
 800245e:	2200      	movs	r2, #0
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <HAL_GPIO_EXTI_Callback+0xac>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d102      	bne.n	800246e <HAL_GPIO_EXTI_Callback+0x96>
		GPIO_neighbour_in = TRUE;
 8002468:	4b07      	ldr	r3, [pc, #28]	; (8002488 <HAL_GPIO_EXTI_Callback+0xb0>)
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
	}

}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200002c0 	.word	0x200002c0
 800247c:	200002c4 	.word	0x200002c4
 8002480:	200002bc 	.word	0x200002bc
 8002484:	200005f3 	.word	0x200005f3
 8002488:	20000611 	.word	0x20000611

0800248c <L1_receive>:

/* protocol stack functions begin */
void L1_receive(uint8_t L1_PDU[]){
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	// remove first (SOF) and last (EOF) byte from packet to get L1_SDU
	uint8_t L1_SDU[L1_SDU_size] = {0};
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	811a      	strh	r2, [r3, #8]

	for(int i = 0; i < L1_SDU_size; i++){
 80024a4:	2300      	movs	r3, #0
 80024a6:	61fb      	str	r3, [r7, #28]
 80024a8:	e00d      	b.n	80024c6 <L1_receive+0x3a>
		L1_SDU[i] = L1_PDU[i+1];
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3301      	adds	r3, #1
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	7819      	ldrb	r1, [r3, #0]
 80024b4:	f107 020c 	add.w	r2, r7, #12
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	4413      	add	r3, r2
 80024bc:	460a      	mov	r2, r1
 80024be:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L1_SDU_size; i++){
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	3301      	adds	r3, #1
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	2b0d      	cmp	r3, #13
 80024ca:	ddee      	ble.n	80024aa <L1_receive+0x1e>
	}
	L2_receive(L1_SDU); // L1_SDU = L2_PDU
 80024cc:	f107 030c 	add.w	r3, r7, #12
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 f805 	bl	80024e0 <L2_receive>
}
 80024d6:	bf00      	nop
 80024d8:	3720      	adds	r7, #32
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <L2_receive>:

void L2_receive(uint8_t L2_PDU[]){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	uint8_t L2_SDU[L2_SDU_size] = {0};
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	f107 0310 	add.w	r3, r7, #16
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	721a      	strb	r2, [r3, #8]
	uint8_t checksum = L2_PDU[13]; // last byte is checksum
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	7b5b      	ldrb	r3, [r3, #13]
 80024fc:	76fb      	strb	r3, [r7, #27]

	for(int i = 0; i < L2_SDU_size; i++){ // remove last byte (checksum) to get L2_SDU
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	e00c      	b.n	800251e <L2_receive+0x3e>
		L2_SDU[i] = L2_PDU[i];
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	7819      	ldrb	r1, [r3, #0]
 800250c:	f107 020c 	add.w	r2, r7, #12
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4413      	add	r3, r2
 8002514:	460a      	mov	r2, r1
 8002516:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L2_SDU_size; i++){ // remove last byte (checksum) to get L2_SDU
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	3301      	adds	r3, #1
 800251c:	61fb      	str	r3, [r7, #28]
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	2b0c      	cmp	r3, #12
 8002522:	ddef      	ble.n	8002504 <L2_receive+0x24>
	}

	if(crcSlow(L2_SDU, L2_SDU_size) == checksum){ // checksum is valid -> pass packet to next Layer
 8002524:	f107 030c 	add.w	r3, r7, #12
 8002528:	210d      	movs	r1, #13
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fafc 	bl	8002b28 <crcSlow>
 8002530:	4603      	mov	r3, r0
 8002532:	461a      	mov	r2, r3
 8002534:	7efb      	ldrb	r3, [r7, #27]
 8002536:	4293      	cmp	r3, r2
 8002538:	d105      	bne.n	8002546 <L2_receive+0x66>
		L3_receive(L2_SDU); // L2_SDU = L3_PDU
 800253a:	f107 030c 	add.w	r3, r7, #12
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f80a 	bl	8002558 <L3_receive>
	} else { // checksum is invalid -> discard packet
		tx_complete = 1;
	}
}
 8002544:	e002      	b.n	800254c <L2_receive+0x6c>
		tx_complete = 1;
 8002546:	4b03      	ldr	r3, [pc, #12]	; (8002554 <L2_receive+0x74>)
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
}
 800254c:	bf00      	nop
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000298 	.word	0x20000298

08002558 <L3_receive>:

void L3_receive(uint8_t L3_PDU[]){
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	uint8_t L3_SDU[L3_SDU_size] = {0};
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	f107 030c 	add.w	r3, r7, #12
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	711a      	strb	r2, [r3, #4]

	for(int i = 0; i < L3_SDU_size; i++){ // remove first 4 bytes (To, From, Vers, Hops) tp get L3_SDU
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	e00d      	b.n	8002590 <L3_receive+0x38>
		L3_SDU[i] = L3_PDU[i+4];
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3304      	adds	r3, #4
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	4413      	add	r3, r2
 800257c:	7819      	ldrb	r1, [r3, #0]
 800257e:	f107 0208 	add.w	r2, r7, #8
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	4413      	add	r3, r2
 8002586:	460a      	mov	r2, r1
 8002588:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L3_SDU_size; i++){ // remove first 4 bytes (To, From, Vers, Hops) tp get L3_SDU
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	3301      	adds	r3, #1
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2b08      	cmp	r3, #8
 8002594:	ddee      	ble.n	8002574 <L3_receive+0x1c>
	}
	if(L3_PDU[0] != MMCP_MASTER_ADDRESS && L3_PDU[1] == MMCP_MASTER_ADDRESS && L3_PDU[2] == MMCP_VERSION){ // packet is not addressed to master, is from master and version is correct -> packet is valid
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d014      	beq.n	80025c8 <L3_receive+0x70>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3301      	adds	r3, #1
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10f      	bne.n	80025c8 <L3_receive+0x70>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3302      	adds	r3, #2
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	d10a      	bne.n	80025c8 <L3_receive+0x70>
		if(L3_PDU[0] == myAddress){ // packet is addressed to this device -> pass packet to next Layer
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	781a      	ldrb	r2, [r3, #0]
 80025b6:	4b19      	ldr	r3, [pc, #100]	; (800261c <L3_receive+0xc4>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d104      	bne.n	80025c8 <L3_receive+0x70>
			L7_receive(L3_SDU); // L3_SDU = L7_PDU)
 80025be:	f107 0308 	add.w	r3, r7, #8
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 f82e 	bl	8002624 <L7_receive>
		}
	}
	if(L3_PDU[0] != myAddress && L3_PDU[2] == MMCP_VERSION){ // packet is addressed to different device -> forward packet
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	781a      	ldrb	r2, [r3, #0]
 80025cc:	4b13      	ldr	r3, [pc, #76]	; (800261c <L3_receive+0xc4>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d00e      	beq.n	80025f2 <L3_receive+0x9a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3302      	adds	r3, #2
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b05      	cmp	r3, #5
 80025dc:	d109      	bne.n	80025f2 <L3_receive+0x9a>
		L3_PDU[3]++; // increment hop-counter
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3303      	adds	r3, #3
 80025e2:	781a      	ldrb	r2, [r3, #0]
 80025e4:	3201      	adds	r2, #1
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]
		L2_send(L3_PDU);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f918 	bl	8002820 <L2_send>
	}
	else if(L3_PDU[0] == MMCP_MASTER_ADDRESS && L3_PDU[1] == MMCP_MASTER_ADDRESS && L3_PDU[2] == MMCP_VERSION){ // packet is addressed from master to master (invalid) -> discard packet
		tx_complete = 1;
	}
}
 80025f0:	e010      	b.n	8002614 <L3_receive+0xbc>
	else if(L3_PDU[0] == MMCP_MASTER_ADDRESS && L3_PDU[1] == MMCP_MASTER_ADDRESS && L3_PDU[2] == MMCP_VERSION){ // packet is addressed from master to master (invalid) -> discard packet
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10c      	bne.n	8002614 <L3_receive+0xbc>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3301      	adds	r3, #1
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d107      	bne.n	8002614 <L3_receive+0xbc>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3302      	adds	r3, #2
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b05      	cmp	r3, #5
 800260c:	d102      	bne.n	8002614 <L3_receive+0xbc>
		tx_complete = 1;
 800260e:	4b04      	ldr	r3, [pc, #16]	; (8002620 <L3_receive+0xc8>)
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
}
 8002614:	bf00      	nop
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000000 	.word	0x20000000
 8002620:	20000298 	.word	0x20000298

08002624 <L7_receive>:

void L7_receive(uint8_t L7_PDU[]){
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	uint8_t L7_SDU[L7_SDU_size] = {0};
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	2300      	movs	r3, #0
 8002632:	61bb      	str	r3, [r7, #24]
	uint8_t L7_SDU_send[L7_SDU_size] = {0}; // information to send back
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	2300      	movs	r3, #0
 800263a:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < L7_SDU_size; i++){ // remove first byte (ApNr) to get L7_SDU
 800263c:	2300      	movs	r3, #0
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	e00d      	b.n	800265e <L7_receive+0x3a>
		L7_SDU[i] = L7_PDU[i+1];
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3301      	adds	r3, #1
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	7819      	ldrb	r1, [r3, #0]
 800264c:	f107 0214 	add.w	r2, r7, #20
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4413      	add	r3, r2
 8002654:	460a      	mov	r2, r1
 8002656:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L7_SDU_size; i++){ // remove first byte (ApNr) to get L7_SDU
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	3301      	adds	r3, #1
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	2b07      	cmp	r3, #7
 8002662:	ddee      	ble.n	8002642 <L7_receive+0x1e>
	}

	// ApNr 42
	// await / create package
	// send back received L7_SDU
	if(L7_PDU[0] == 42){
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b2a      	cmp	r3, #42	; 0x2a
 800266a:	d10d      	bne.n	8002688 <L7_receive+0x64>
		ApNr_42(L7_SDU, L7_SDU_send);
 800266c:	f107 020c 	add.w	r2, r7, #12
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f92c 	bl	80028d4 <ApNr_42>
		L7_send(42, L7_SDU_send);
 800267c:	f107 030c 	add.w	r3, r7, #12
 8002680:	4619      	mov	r1, r3
 8002682:	202a      	movs	r0, #42	; 0x2a
 8002684:	f000 f86c 	bl	8002760 <L7_send>
	}

	// ApNr 43
	// pass on / deliver package
	// send back received L7_SDU
	if(L7_PDU[0] == 43){
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b2b      	cmp	r3, #43	; 0x2b
 800268e:	d10d      	bne.n	80026ac <L7_receive+0x88>
		ApNr_43(L7_SDU, L7_SDU_send);
 8002690:	f107 020c 	add.w	r2, r7, #12
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f95c 	bl	8002958 <ApNr_43>
		L7_send(43, L7_SDU_send);
 80026a0:	f107 030c 	add.w	r3, r7, #12
 80026a4:	4619      	mov	r1, r3
 80026a6:	202b      	movs	r0, #43	; 0x2b
 80026a8:	f000 f85a 	bl	8002760 <L7_send>
	}

	// ApNr 50
	// poll status
	if(L7_PDU[0] == 50){
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b32      	cmp	r3, #50	; 0x32
 80026b2:	d10d      	bne.n	80026d0 <L7_receive+0xac>
		ApNr_50(L7_SDU, L7_SDU_send);
 80026b4:	f107 020c 	add.w	r2, r7, #12
 80026b8:	f107 0314 	add.w	r3, r7, #20
 80026bc:	4611      	mov	r1, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f98c 	bl	80029dc <ApNr_50>
		L7_send(50, L7_SDU_send);
 80026c4:	f107 030c 	add.w	r3, r7, #12
 80026c8:	4619      	mov	r1, r3
 80026ca:	2032      	movs	r0, #50	; 0x32
 80026cc:	f000 f848 	bl	8002760 <L7_send>
	}

	// ApNr 100
	// turn on onboard LED if last byte of L7_SDU is not 0
	// send back received L7_SDU
	if(L7_PDU[0] == 100){
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b64      	cmp	r3, #100	; 0x64
 80026d6:	d10d      	bne.n	80026f4 <L7_receive+0xd0>
		ApNr_100(L7_SDU, L7_SDU_send);
 80026d8:	f107 020c 	add.w	r2, r7, #12
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	4611      	mov	r1, r2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 f9b8 	bl	8002a58 <ApNr_100>
		L7_send(100, L7_SDU_send);
 80026e8:	f107 030c 	add.w	r3, r7, #12
 80026ec:	4619      	mov	r1, r3
 80026ee:	2064      	movs	r0, #100	; 0x64
 80026f0:	f000 f836 	bl	8002760 <L7_send>
	}

	// ApNr 101
	// ignore information in L7_SDU
	// send back button presses counter in L7_SDU[7], reset counter
	if(L7_PDU[0] == 101){
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b65      	cmp	r3, #101	; 0x65
 80026fa:	d10a      	bne.n	8002712 <L7_receive+0xee>
		ApNr_101(L7_SDU_send);
 80026fc:	f107 030c 	add.w	r3, r7, #12
 8002700:	4618      	mov	r0, r3
 8002702:	f000 f9d7 	bl	8002ab4 <ApNr_101>
		L7_send(101, L7_SDU_send);
 8002706:	f107 030c 	add.w	r3, r7, #12
 800270a:	4619      	mov	r1, r3
 800270c:	2065      	movs	r0, #101	; 0x65
 800270e:	f000 f827 	bl	8002760 <L7_send>
	}

	// ApNr 102
	// ignore information in L7_SDU
	// send back lower 64 bits of device UID
	if(L7_PDU[0] == 102){
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b66      	cmp	r3, #102	; 0x66
 8002718:	d10a      	bne.n	8002730 <L7_receive+0x10c>
		ApNr_102(L7_SDU_send);
 800271a:	f107 030c 	add.w	r3, r7, #12
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f9dc 	bl	8002adc <ApNr_102>
		L7_send(102, L7_SDU_send);
 8002724:	f107 030c 	add.w	r3, r7, #12
 8002728:	4619      	mov	r1, r3
 800272a:	2066      	movs	r0, #102	; 0x66
 800272c:	f000 f818 	bl	8002760 <L7_send>
	}

	// ApNr 103
	// ignore information in L7_SDU
	// send back upper bits 64 to 95 of device UID
	if(L7_PDU[0] == 103){
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b67      	cmp	r3, #103	; 0x67
 8002736:	d10a      	bne.n	800274e <L7_receive+0x12a>
		ApNr_103(L7_SDU_send);
 8002738:	f107 030c 	add.w	r3, r7, #12
 800273c:	4618      	mov	r0, r3
 800273e:	f000 f9e4 	bl	8002b0a <ApNr_103>
		L7_send(103, L7_SDU_send);
 8002742:	f107 030c 	add.w	r3, r7, #12
 8002746:	4619      	mov	r1, r3
 8002748:	2067      	movs	r0, #103	; 0x67
 800274a:	f000 f809 	bl	8002760 <L7_send>
	}

	tx_complete = 1;  // ApNr invalid (unknown) -> discard packet
 800274e:	4b03      	ldr	r3, [pc, #12]	; (800275c <L7_receive+0x138>)
 8002750:	2201      	movs	r2, #1
 8002752:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Receive_IT(&huart1, rx_buf, L1_PDU_size); // Attach interrupt to receive L1_PDU from USART
}
 8002754:	bf00      	nop
 8002756:	3720      	adds	r7, #32
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000298 	.word	0x20000298

08002760 <L7_send>:

void L7_send(uint8_t ApNr, uint8_t L7_SDU[]){
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	71fb      	strb	r3, [r7, #7]
	uint8_t L7_PDU[L7_PDU_size] = {0};
 800276c:	2300      	movs	r3, #0
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	f107 030c 	add.w	r3, r7, #12
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	711a      	strb	r2, [r3, #4]

	// copy ApNr and L7_SDU to get L7_PDU
	L7_PDU[0] = ApNr;
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	723b      	strb	r3, [r7, #8]
	for(int i = 0; i < L7_SDU_size; i++){
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	e00c      	b.n	800279e <L7_send+0x3e>
		L7_PDU[i+1] = L7_SDU[i];
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	441a      	add	r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	3301      	adds	r3, #1
 800278e:	7812      	ldrb	r2, [r2, #0]
 8002790:	3318      	adds	r3, #24
 8002792:	443b      	add	r3, r7
 8002794:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(int i = 0; i < L7_SDU_size; i++){
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	3301      	adds	r3, #1
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2b07      	cmp	r3, #7
 80027a2:	ddef      	ble.n	8002784 <L7_send+0x24>
	}

	L3_send(L7_PDU); // L7_PDU = l3_SDU
 80027a4:	f107 0308 	add.w	r3, r7, #8
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 f805 	bl	80027b8 <L3_send>
}
 80027ae:	bf00      	nop
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <L3_send>:

void L3_send(uint8_t L3_SDU[]){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	uint8_t L3_PDU[L3_PDU_size] = {0};
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	f107 0310 	add.w	r3, r7, #16
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	721a      	strb	r2, [r3, #8]

	L3_PDU[0] = MMCP_MASTER_ADDRESS; // To: Master
 80027d0:	2300      	movs	r3, #0
 80027d2:	733b      	strb	r3, [r7, #12]
	L3_PDU[1] = myAddress; // From: device
 80027d4:	4b11      	ldr	r3, [pc, #68]	; (800281c <L3_send+0x64>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	737b      	strb	r3, [r7, #13]
	L3_PDU[2] = MMCP_VERSION; // protocol version
 80027da:	2305      	movs	r3, #5
 80027dc:	73bb      	strb	r3, [r7, #14]
	L3_PDU[3] = 0; // Hops: 0
 80027de:	2300      	movs	r3, #0
 80027e0:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < L3_SDU_size; i++){
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	e00c      	b.n	8002802 <L3_send+0x4a>
		L3_PDU[i+L3_PCI_size] = L3_SDU[i];
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	441a      	add	r2, r3
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3304      	adds	r3, #4
 80027f2:	7812      	ldrb	r2, [r2, #0]
 80027f4:	3320      	adds	r3, #32
 80027f6:	443b      	add	r3, r7
 80027f8:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(int i = 0; i < L3_SDU_size; i++){
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	3301      	adds	r3, #1
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	2b08      	cmp	r3, #8
 8002806:	ddef      	ble.n	80027e8 <L3_send+0x30>
	}

	L2_send(L3_PDU); // L3_PDU = L2_SDU
 8002808:	f107 030c 	add.w	r3, r7, #12
 800280c:	4618      	mov	r0, r3
 800280e:	f000 f807 	bl	8002820 <L2_send>
}
 8002812:	bf00      	nop
 8002814:	3720      	adds	r7, #32
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000000 	.word	0x20000000

08002820 <L2_send>:

void L2_send(uint8_t L2_SDU[]){
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	uint8_t L2_PDU[L2_PDU_size] = {0};
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	f107 0310 	add.w	r3, r7, #16
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	811a      	strh	r2, [r3, #8]
	uint8_t checksum = 42;
 8002838:	232a      	movs	r3, #42	; 0x2a
 800283a:	76fb      	strb	r3, [r7, #27]

	// copy L2_SDU to first 13 bytes of L2_PDU
	for(int i = 0; i < L2_SDU_size; i++){
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	e00c      	b.n	800285c <L2_send+0x3c>
		L2_PDU[i] = L2_SDU[i];
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	4413      	add	r3, r2
 8002848:	7819      	ldrb	r1, [r3, #0]
 800284a:	f107 020c 	add.w	r2, r7, #12
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	4413      	add	r3, r2
 8002852:	460a      	mov	r2, r1
 8002854:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L2_SDU_size; i++){
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3301      	adds	r3, #1
 800285a:	61fb      	str	r3, [r7, #28]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	2b0c      	cmp	r3, #12
 8002860:	ddef      	ble.n	8002842 <L2_send+0x22>
	}

	checksum = crcSlow(L2_SDU, L2_SDU_size); // calculate checksum
 8002862:	210d      	movs	r1, #13
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f95f 	bl	8002b28 <crcSlow>
 800286a:	4603      	mov	r3, r0
 800286c:	76fb      	strb	r3, [r7, #27]
	L2_PDU[13] = checksum; // last bit is checksum
 800286e:	7efb      	ldrb	r3, [r7, #27]
 8002870:	767b      	strb	r3, [r7, #25]

	L1_send(L2_PDU);
 8002872:	f107 030c 	add.w	r3, r7, #12
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f804 	bl	8002884 <L1_send>
}
 800287c:	bf00      	nop
 800287e:	3720      	adds	r7, #32
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <L1_send>:

void L1_send(uint8_t L1_SDU[]){
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
	L1_PDU[0] = 0; // SOF: 0
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <L1_send+0x48>)
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
	// copy L1_SDU to bytes 1...15 of L1_PDU
	for(int i = 0; i < L1_SDU_size; i++){
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	e00a      	b.n	80028ae <L1_send+0x2a>
		L1_PDU[i+1] = L1_SDU[i];
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	441a      	add	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	3301      	adds	r3, #1
 80028a2:	7811      	ldrb	r1, [r2, #0]
 80028a4:	4a09      	ldr	r2, [pc, #36]	; (80028cc <L1_send+0x48>)
 80028a6:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < L1_SDU_size; i++){
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	3301      	adds	r3, #1
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b0d      	cmp	r3, #13
 80028b2:	ddf1      	ble.n	8002898 <L1_send+0x14>
	}
	L1_PDU[15] = 0; // EOF: 0
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <L1_send+0x48>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	73da      	strb	r2, [r3, #15]

	HAL_UART_Transmit_IT(&huart1, L1_PDU, L1_PDU_size); // send L1_PDU over USART2 (non-blocking)
 80028ba:	2210      	movs	r2, #16
 80028bc:	4903      	ldr	r1, [pc, #12]	; (80028cc <L1_send+0x48>)
 80028be:	4804      	ldr	r0, [pc, #16]	; (80028d0 <L1_send+0x4c>)
 80028c0:	f003 ff29 	bl	8006716 <HAL_UART_Transmit_IT>
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	200002ac 	.word	0x200002ac
 80028d0:	20000210 	.word	0x20000210

080028d4 <ApNr_42>:
/* protocol stack functions end */
// ApNr 42
// await / create package
// send back received L7_SDU
void ApNr_42(uint8_t L7_SDU[], uint8_t L7_SDU_send[]){
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
	packageId = L7_SDU[0];
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	781a      	ldrb	r2, [r3, #0]
 80028e2:	4b17      	ldr	r3, [pc, #92]	; (8002940 <ApNr_42+0x6c>)
 80028e4:	701a      	strb	r2, [r3, #0]
	partnerId = L7_SDU[1];
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	785a      	ldrb	r2, [r3, #1]
 80028ea:	4b16      	ldr	r3, [pc, #88]	; (8002944 <ApNr_42+0x70>)
 80028ec:	701a      	strb	r2, [r3, #0]

	receivedSDU = TRUE;
 80028ee:	4b16      	ldr	r3, [pc, #88]	; (8002948 <ApNr_42+0x74>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	701a      	strb	r2, [r3, #0]
	ApNr = 42;
 80028f4:	4b15      	ldr	r3, [pc, #84]	; (800294c <ApNr_42+0x78>)
 80028f6:	222a      	movs	r2, #42	; 0x2a
 80028f8:	701a      	strb	r2, [r3, #0]

	if(partnerId != 0){ // partnerId is not 0 -> await new package
 80028fa:	4b12      	ldr	r3, [pc, #72]	; (8002944 <ApNr_42+0x70>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <ApNr_42+0x36>
		await = TRUE;
 8002902:	4b13      	ldr	r3, [pc, #76]	; (8002950 <ApNr_42+0x7c>)
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
 8002908:	e002      	b.n	8002910 <ApNr_42+0x3c>
	} else { // partnerId is 0 -> create new package
		create = TRUE;
 800290a:	4b12      	ldr	r3, [pc, #72]	; (8002954 <ApNr_42+0x80>)
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < L7_SDU_size; i++){ // copy L7_SDU to L7_SDU_send
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	e00a      	b.n	800292c <ApNr_42+0x58>
		L7_SDU_send[i] = L7_SDU[i];
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	441a      	add	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6839      	ldr	r1, [r7, #0]
 8002920:	440b      	add	r3, r1
 8002922:	7812      	ldrb	r2, [r2, #0]
 8002924:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L7_SDU_size; i++){ // copy L7_SDU to L7_SDU_send
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3301      	adds	r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b07      	cmp	r3, #7
 8002930:	ddf1      	ble.n	8002916 <ApNr_42+0x42>
	}
}
 8002932:	bf00      	nop
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	200005f4 	.word	0x200005f4
 8002944:	200005f3 	.word	0x200005f3
 8002948:	20000610 	.word	0x20000610
 800294c:	20000606 	.word	0x20000606
 8002950:	2000060c 	.word	0x2000060c
 8002954:	20000609 	.word	0x20000609

08002958 <ApNr_43>:

// ApNr 43
// pass on / deliver package
// send back received L7_SDU
void ApNr_43(uint8_t L7_SDU[], uint8_t L7_SDU_send[]){
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
	packageId = L7_SDU[0];
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	781a      	ldrb	r2, [r3, #0]
 8002966:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <ApNr_43+0x6c>)
 8002968:	701a      	strb	r2, [r3, #0]
	partnerId = L7_SDU[1];
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	785a      	ldrb	r2, [r3, #1]
 800296e:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <ApNr_43+0x70>)
 8002970:	701a      	strb	r2, [r3, #0]

	receivedSDU = TRUE;
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <ApNr_43+0x74>)
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]
	ApNr = 43;
 8002978:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <ApNr_43+0x78>)
 800297a:	222b      	movs	r2, #43	; 0x2b
 800297c:	701a      	strb	r2, [r3, #0]

	if(partnerId != 0){ // partnerId is not 0 -> passOn package
 800297e:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <ApNr_43+0x70>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <ApNr_43+0x36>
		passOn = TRUE;
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <ApNr_43+0x7c>)
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]
 800298c:	e002      	b.n	8002994 <ApNr_43+0x3c>
	} else { // partnerId is 0 -> deliver package
		deliver = TRUE;
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <ApNr_43+0x80>)
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < L7_SDU_size; i++){ // copy L7_SDU to L7_SDU_send
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	e00a      	b.n	80029b0 <ApNr_43+0x58>
		L7_SDU_send[i] = L7_SDU[i];
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	441a      	add	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6839      	ldr	r1, [r7, #0]
 80029a4:	440b      	add	r3, r1
 80029a6:	7812      	ldrb	r2, [r2, #0]
 80029a8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L7_SDU_size; i++){ // copy L7_SDU to L7_SDU_send
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3301      	adds	r3, #1
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b07      	cmp	r3, #7
 80029b4:	ddf1      	ble.n	800299a <ApNr_43+0x42>
	}
}
 80029b6:	bf00      	nop
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	200005f4 	.word	0x200005f4
 80029c8:	200005f3 	.word	0x200005f3
 80029cc:	20000610 	.word	0x20000610
 80029d0:	20000606 	.word	0x20000606
 80029d4:	20000608 	.word	0x20000608
 80029d8:	2000060a 	.word	0x2000060a

080029dc <ApNr_50>:

// ApNr 50
// poll status
void ApNr_50(uint8_t L7_SDU[], uint8_t L7_SDU_send[]){
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
	poll = TRUE;
 80029e6:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <ApNr_50+0x68>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	701a      	strb	r2, [r3, #0]

	L7_SDU_send[0] = state;
 80029ec:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <ApNr_50+0x6c>)
 80029ee:	781a      	ldrb	r2, [r3, #0]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	701a      	strb	r2, [r3, #0]
	if(state == 4){ // state is failure, send errorId instead of packageId
 80029f4:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <ApNr_50+0x6c>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d105      	bne.n	8002a08 <ApNr_50+0x2c>
		L7_SDU_send[1] = errorId;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	3301      	adds	r3, #1
 8002a00:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <ApNr_50+0x70>)
 8002a02:	7812      	ldrb	r2, [r2, #0]
 8002a04:	701a      	strb	r2, [r3, #0]
 8002a06:	e004      	b.n	8002a12 <ApNr_50+0x36>
	} else {
		L7_SDU_send[1] = packageId;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	4a10      	ldr	r2, [pc, #64]	; (8002a50 <ApNr_50+0x74>)
 8002a0e:	7812      	ldrb	r2, [r2, #0]
 8002a10:	701a      	strb	r2, [r3, #0]
	}
	for(int i = 2; i < L7_SDU_size; i++){ // copy Lager to L7_SDU_send, index 2 to 7 //TODO: adapt to Lager size constant
 8002a12:	2302      	movs	r3, #2
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	e00a      	b.n	8002a2e <ApNr_50+0x52>
		L7_SDU_send[i] = Lager[i-2];
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1e9a      	subs	r2, r3, #2
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6839      	ldr	r1, [r7, #0]
 8002a20:	440b      	add	r3, r1
 8002a22:	490c      	ldr	r1, [pc, #48]	; (8002a54 <ApNr_50+0x78>)
 8002a24:	5c8a      	ldrb	r2, [r1, r2]
 8002a26:	701a      	strb	r2, [r3, #0]
	for(int i = 2; i < L7_SDU_size; i++){ // copy Lager to L7_SDU_send, index 2 to 7 //TODO: adapt to Lager size constant
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2b07      	cmp	r3, #7
 8002a32:	ddf1      	ble.n	8002a18 <ApNr_50+0x3c>
	}
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	2000060b 	.word	0x2000060b
 8002a48:	200005f1 	.word	0x200005f1
 8002a4c:	200005f2 	.word	0x200005f2
 8002a50:	200005f4 	.word	0x200005f4
 8002a54:	200005f8 	.word	0x200005f8

08002a58 <ApNr_100>:

// ApNr 100
// turn on onboard LED, if last byte of L7_SDU is not 0
// send back received L7_SDU
void ApNr_100(uint8_t L7_SDU[], uint8_t L7_SDU_send[]){
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
	if(L7_SDU[7] != 0){
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3307      	adds	r3, #7
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <ApNr_100+0x20>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	2120      	movs	r1, #32
 8002a70:	480f      	ldr	r0, [pc, #60]	; (8002ab0 <ApNr_100+0x58>)
 8002a72:	f001 fb2d 	bl	80040d0 <HAL_GPIO_WritePin>
 8002a76:	e004      	b.n	8002a82 <ApNr_100+0x2a>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2120      	movs	r1, #32
 8002a7c:	480c      	ldr	r0, [pc, #48]	; (8002ab0 <ApNr_100+0x58>)
 8002a7e:	f001 fb27 	bl	80040d0 <HAL_GPIO_WritePin>
		}

		for(int i = 0; i < L7_SDU_size; i++){ // copy L7_SDU to L7_SDU_send
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	e00a      	b.n	8002a9e <ApNr_100+0x46>
			L7_SDU_send[i] = L7_SDU[i];
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	441a      	add	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6839      	ldr	r1, [r7, #0]
 8002a92:	440b      	add	r3, r1
 8002a94:	7812      	ldrb	r2, [r2, #0]
 8002a96:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < L7_SDU_size; i++){ // copy L7_SDU to L7_SDU_send
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2b07      	cmp	r3, #7
 8002aa2:	ddf1      	ble.n	8002a88 <ApNr_100+0x30>
		}
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40020000 	.word	0x40020000

08002ab4 <ApNr_101>:

// ApNr 101
// ignore information in L7_SDU
// send back button presses counter in L7_SDU[7], reset counter
void ApNr_101(uint8_t L7_SDU_send[]){
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
	L7_SDU_send[7] = cnt; // store button presses
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3307      	adds	r3, #7
 8002ac0:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <ApNr_101+0x24>)
 8002ac2:	7812      	ldrb	r2, [r2, #0]
 8002ac4:	701a      	strb	r2, [r3, #0]
	cnt = 0; // reset counter
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <ApNr_101+0x24>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	200002bc 	.word	0x200002bc

08002adc <ApNr_102>:

// ignore information in L7_SDU
// send back lower 64 bits of device UID
void ApNr_102(uint8_t L7_SDU_send[]){
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
	uint32_t UIDw0 = HAL_GetUIDw0(); // get bits 0 to 31
 8002ae4:	f000 fc38 	bl	8003358 <HAL_GetUIDw0>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	60fb      	str	r3, [r7, #12]
	uint32_t UIDw1 = HAL_GetUIDw1(); // get bits 32 to 63
 8002aec:	f000 fc40 	bl	8003370 <HAL_GetUIDw1>
 8002af0:	4603      	mov	r3, r0
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68fa      	ldr	r2, [r7, #12]

	memcpy(L7_SDU_send, &UIDw0, 4); // copy bits 0 to 31
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	601a      	str	r2, [r3, #0]
	memcpy(L7_SDU_send+4, &UIDw1, 4); // copy bits 32 to 63
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	601a      	str	r2, [r3, #0]
}
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <ApNr_103>:

// ignore information in L7_SDU
// send back upper bits 64 to 95 of device UID
void ApNr_103(uint8_t L7_SDU_send[]){
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
	uint32_t UIDw2 = HAL_GetUIDw2(); // get bits 64 to 95
 8002b12:	f000 fc39 	bl	8003388 <HAL_GetUIDw2>
 8002b16:	4603      	mov	r3, r0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fa      	ldr	r2, [r7, #12]

	memcpy(L7_SDU_send, &UIDw2, 4); // copy bits 64 to 95
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	601a      	str	r2, [r3, #0]
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <crcSlow>:

// crc algorithm
// source: https://barrgroup.com/embedded-systems/how-to/crc-calculation-c-code
crc crcSlow(uint8_t const message[], int nBytes) {
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
    crc  remainder = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	75fb      	strb	r3, [r7, #23]

    // perform modulo-2 division, a byte at a time.
    for (int byte = 0; byte < nBytes; ++byte){
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	e022      	b.n	8002b82 <crcSlow+0x5a>

        // bring the next byte into the remainder.
        remainder ^= (message[byte] << (WIDTH - 8));
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	781a      	ldrb	r2, [r3, #0]
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	4053      	eors	r3, r2
 8002b48:	75fb      	strb	r3, [r7, #23]

        // perform modulo-2 division, a bit at a time.
        for (uint8_t bit = 8; bit > 0; --bit){
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	73fb      	strb	r3, [r7, #15]
 8002b4e:	e012      	b.n	8002b76 <crcSlow+0x4e>
            // try to divide the current data bit.
            if (remainder & TOPBIT){
 8002b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	da08      	bge.n	8002b6a <crcSlow+0x42>
                remainder = (remainder << 1) ^ POLYNOMIAL;
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	b25b      	sxtb	r3, r3
 8002b5e:	f083 0364 	eor.w	r3, r3, #100	; 0x64
 8002b62:	43db      	mvns	r3, r3
 8002b64:	b25b      	sxtb	r3, r3
 8002b66:	75fb      	strb	r3, [r7, #23]
 8002b68:	e002      	b.n	8002b70 <crcSlow+0x48>
            } else {
                remainder = (remainder << 1);
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	75fb      	strb	r3, [r7, #23]
        for (uint8_t bit = 8; bit > 0; --bit){
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e9      	bne.n	8002b50 <crcSlow+0x28>
    for (int byte = 0; byte < nBytes; ++byte){
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	dbd8      	blt.n	8002b3c <crcSlow+0x14>
            }
        }
    }

    // The final remainder is the CRC result.
    return (remainder);
 8002b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	371c      	adds	r7, #28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b9c:	b672      	cpsid	i
}
 8002b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ba0:	e7fe      	b.n	8002ba0 <Error_Handler+0x8>
	...

08002ba4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <HAL_MspInit+0x4c>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	4a0f      	ldr	r2, [pc, #60]	; (8002bf0 <HAL_MspInit+0x4c>)
 8002bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <HAL_MspInit+0x4c>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc2:	607b      	str	r3, [r7, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_MspInit+0x4c>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <HAL_MspInit+0x4c>)
 8002bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_MspInit+0x4c>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002be2:	2007      	movs	r0, #7
 8002be4:	f000 fcac 	bl	8003540 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40023800 	.word	0x40023800

08002bf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08a      	sub	sp, #40	; 0x28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfc:	f107 0314 	add.w	r3, r7, #20
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a34      	ldr	r2, [pc, #208]	; (8002ce4 <HAL_SPI_MspInit+0xf0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d162      	bne.n	8002cdc <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	4b33      	ldr	r3, [pc, #204]	; (8002ce8 <HAL_SPI_MspInit+0xf4>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	4a32      	ldr	r2, [pc, #200]	; (8002ce8 <HAL_SPI_MspInit+0xf4>)
 8002c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c24:	6413      	str	r3, [r2, #64]	; 0x40
 8002c26:	4b30      	ldr	r3, [pc, #192]	; (8002ce8 <HAL_SPI_MspInit+0xf4>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	4b2c      	ldr	r3, [pc, #176]	; (8002ce8 <HAL_SPI_MspInit+0xf4>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a2b      	ldr	r2, [pc, #172]	; (8002ce8 <HAL_SPI_MspInit+0xf4>)
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b29      	ldr	r3, [pc, #164]	; (8002ce8 <HAL_SPI_MspInit+0xf4>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002c4e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c54:	2302      	movs	r3, #2
 8002c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c60:	2305      	movs	r3, #5
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c64:	f107 0314 	add.w	r3, r7, #20
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4820      	ldr	r0, [pc, #128]	; (8002cec <HAL_SPI_MspInit+0xf8>)
 8002c6c:	f001 f8ac 	bl	8003dc8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002c70:	4b1f      	ldr	r3, [pc, #124]	; (8002cf0 <HAL_SPI_MspInit+0xfc>)
 8002c72:	4a20      	ldr	r2, [pc, #128]	; (8002cf4 <HAL_SPI_MspInit+0x100>)
 8002c74:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002c76:	4b1e      	ldr	r3, [pc, #120]	; (8002cf0 <HAL_SPI_MspInit+0xfc>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c7c:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <HAL_SPI_MspInit+0xfc>)
 8002c7e:	2240      	movs	r2, #64	; 0x40
 8002c80:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c82:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <HAL_SPI_MspInit+0xfc>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c88:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <HAL_SPI_MspInit+0xfc>)
 8002c8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c8e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c90:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <HAL_SPI_MspInit+0xfc>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c96:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <HAL_SPI_MspInit+0xfc>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002c9c:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <HAL_SPI_MspInit+0xfc>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ca2:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <HAL_SPI_MspInit+0xfc>)
 8002ca4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ca8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <HAL_SPI_MspInit+0xfc>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002cb0:	480f      	ldr	r0, [pc, #60]	; (8002cf0 <HAL_SPI_MspInit+0xfc>)
 8002cb2:	f000 fc87 	bl	80035c4 <HAL_DMA_Init>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002cbc:	f7ff ff6c 	bl	8002b98 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a0b      	ldr	r2, [pc, #44]	; (8002cf0 <HAL_SPI_MspInit+0xfc>)
 8002cc4:	649a      	str	r2, [r3, #72]	; 0x48
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <HAL_SPI_MspInit+0xfc>)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2100      	movs	r1, #0
 8002cd0:	2024      	movs	r0, #36	; 0x24
 8002cd2:	f000 fc40 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002cd6:	2024      	movs	r0, #36	; 0x24
 8002cd8:	f000 fc59 	bl	800358e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002cdc:	bf00      	nop
 8002cde:	3728      	adds	r7, #40	; 0x28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40003800 	.word	0x40003800
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40020400 	.word	0x40020400
 8002cf0:	200000c0 	.word	0x200000c0
 8002cf4:	40026070 	.word	0x40026070

08002cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d08:	d145      	bne.n	8002d96 <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	4b31      	ldr	r3, [pc, #196]	; (8002dd4 <HAL_TIM_Base_MspInit+0xdc>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	4a30      	ldr	r2, [pc, #192]	; (8002dd4 <HAL_TIM_Base_MspInit+0xdc>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1a:	4b2e      	ldr	r3, [pc, #184]	; (8002dd4 <HAL_TIM_Base_MspInit+0xdc>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 8002d26:	4b2c      	ldr	r3, [pc, #176]	; (8002dd8 <HAL_TIM_Base_MspInit+0xe0>)
 8002d28:	4a2c      	ldr	r2, [pc, #176]	; (8002ddc <HAL_TIM_Base_MspInit+0xe4>)
 8002d2a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 8002d2c:	4b2a      	ldr	r3, [pc, #168]	; (8002dd8 <HAL_TIM_Base_MspInit+0xe0>)
 8002d2e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002d32:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d34:	4b28      	ldr	r3, [pc, #160]	; (8002dd8 <HAL_TIM_Base_MspInit+0xe0>)
 8002d36:	2240      	movs	r2, #64	; 0x40
 8002d38:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d3a:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <HAL_TIM_Base_MspInit+0xe0>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8002d40:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <HAL_TIM_Base_MspInit+0xe0>)
 8002d42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d46:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d48:	4b23      	ldr	r3, [pc, #140]	; (8002dd8 <HAL_TIM_Base_MspInit+0xe0>)
 8002d4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d4e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d50:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <HAL_TIM_Base_MspInit+0xe0>)
 8002d52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d56:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 8002d58:	4b1f      	ldr	r3, [pc, #124]	; (8002dd8 <HAL_TIM_Base_MspInit+0xe0>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d5e:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <HAL_TIM_Base_MspInit+0xe0>)
 8002d60:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d64:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d66:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <HAL_TIM_Base_MspInit+0xe0>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 8002d6c:	481a      	ldr	r0, [pc, #104]	; (8002dd8 <HAL_TIM_Base_MspInit+0xe0>)
 8002d6e:	f000 fc29 	bl	80035c4 <HAL_DMA_Init>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002d78:	f7ff ff0e 	bl	8002b98 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a16      	ldr	r2, [pc, #88]	; (8002dd8 <HAL_TIM_Base_MspInit+0xe0>)
 8002d80:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d82:	4a15      	ldr	r2, [pc, #84]	; (8002dd8 <HAL_TIM_Base_MspInit+0xe0>)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a13      	ldr	r2, [pc, #76]	; (8002dd8 <HAL_TIM_Base_MspInit+0xe0>)
 8002d8c:	621a      	str	r2, [r3, #32]
 8002d8e:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <HAL_TIM_Base_MspInit+0xe0>)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d94:	e01a      	b.n	8002dcc <HAL_TIM_Base_MspInit+0xd4>
  else if(htim_base->Instance==TIM3)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a11      	ldr	r2, [pc, #68]	; (8002de0 <HAL_TIM_Base_MspInit+0xe8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d115      	bne.n	8002dcc <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002da0:	2300      	movs	r3, #0
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_TIM_Base_MspInit+0xdc>)
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	4a0a      	ldr	r2, [pc, #40]	; (8002dd4 <HAL_TIM_Base_MspInit+0xdc>)
 8002daa:	f043 0302 	orr.w	r3, r3, #2
 8002dae:	6413      	str	r3, [r2, #64]	; 0x40
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <HAL_TIM_Base_MspInit+0xdc>)
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	201d      	movs	r0, #29
 8002dc2:	f000 fbc8 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002dc6:	201d      	movs	r0, #29
 8002dc8:	f000 fbe1 	bl	800358e <HAL_NVIC_EnableIRQ>
}
 8002dcc:	bf00      	nop
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	200001b0 	.word	0x200001b0
 8002ddc:	40026028 	.word	0x40026028
 8002de0:	40000400 	.word	0x40000400

08002de4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 030c 	add.w	r3, r7, #12
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e04:	d11e      	bne.n	8002e44 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <HAL_TIM_MspPostInit+0x68>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	4a0f      	ldr	r2, [pc, #60]	; (8002e4c <HAL_TIM_MspPostInit+0x68>)
 8002e10:	f043 0302 	orr.w	r3, r3, #2
 8002e14:	6313      	str	r3, [r2, #48]	; 0x30
 8002e16:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <HAL_TIM_MspPostInit+0x68>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e34:	2301      	movs	r3, #1
 8002e36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e38:	f107 030c 	add.w	r3, r7, #12
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4804      	ldr	r0, [pc, #16]	; (8002e50 <HAL_TIM_MspPostInit+0x6c>)
 8002e40:	f000 ffc2 	bl	8003dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002e44:	bf00      	nop
 8002e46:	3720      	adds	r7, #32
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40020400 	.word	0x40020400

08002e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08c      	sub	sp, #48	; 0x30
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5c:	f107 031c 	add.w	r3, r7, #28
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a3a      	ldr	r2, [pc, #232]	; (8002f5c <HAL_UART_MspInit+0x108>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d135      	bne.n	8002ee2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	4b39      	ldr	r3, [pc, #228]	; (8002f60 <HAL_UART_MspInit+0x10c>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	4a38      	ldr	r2, [pc, #224]	; (8002f60 <HAL_UART_MspInit+0x10c>)
 8002e80:	f043 0310 	orr.w	r3, r3, #16
 8002e84:	6453      	str	r3, [r2, #68]	; 0x44
 8002e86:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <HAL_UART_MspInit+0x10c>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	61bb      	str	r3, [r7, #24]
 8002e90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	4b32      	ldr	r3, [pc, #200]	; (8002f60 <HAL_UART_MspInit+0x10c>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	4a31      	ldr	r2, [pc, #196]	; (8002f60 <HAL_UART_MspInit+0x10c>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea2:	4b2f      	ldr	r3, [pc, #188]	; (8002f60 <HAL_UART_MspInit+0x10c>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002eae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ec0:	2307      	movs	r3, #7
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec4:	f107 031c 	add.w	r3, r7, #28
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4826      	ldr	r0, [pc, #152]	; (8002f64 <HAL_UART_MspInit+0x110>)
 8002ecc:	f000 ff7c 	bl	8003dc8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	2025      	movs	r0, #37	; 0x25
 8002ed6:	f000 fb3e 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002eda:	2025      	movs	r0, #37	; 0x25
 8002edc:	f000 fb57 	bl	800358e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ee0:	e038      	b.n	8002f54 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a20      	ldr	r2, [pc, #128]	; (8002f68 <HAL_UART_MspInit+0x114>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d133      	bne.n	8002f54 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002eec:	2300      	movs	r3, #0
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <HAL_UART_MspInit+0x10c>)
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	4a1a      	ldr	r2, [pc, #104]	; (8002f60 <HAL_UART_MspInit+0x10c>)
 8002ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002efa:	6413      	str	r3, [r2, #64]	; 0x40
 8002efc:	4b18      	ldr	r3, [pc, #96]	; (8002f60 <HAL_UART_MspInit+0x10c>)
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	4b14      	ldr	r3, [pc, #80]	; (8002f60 <HAL_UART_MspInit+0x10c>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	4a13      	ldr	r2, [pc, #76]	; (8002f60 <HAL_UART_MspInit+0x10c>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6313      	str	r3, [r2, #48]	; 0x30
 8002f18:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <HAL_UART_MspInit+0x10c>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f24:	230c      	movs	r3, #12
 8002f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f30:	2300      	movs	r3, #0
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f34:	2307      	movs	r3, #7
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f38:	f107 031c 	add.w	r3, r7, #28
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4809      	ldr	r0, [pc, #36]	; (8002f64 <HAL_UART_MspInit+0x110>)
 8002f40:	f000 ff42 	bl	8003dc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f44:	2200      	movs	r2, #0
 8002f46:	2100      	movs	r1, #0
 8002f48:	2026      	movs	r0, #38	; 0x26
 8002f4a:	f000 fb04 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f4e:	2026      	movs	r0, #38	; 0x26
 8002f50:	f000 fb1d 	bl	800358e <HAL_NVIC_EnableIRQ>
}
 8002f54:	bf00      	nop
 8002f56:	3730      	adds	r7, #48	; 0x30
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40011000 	.word	0x40011000
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40020000 	.word	0x40020000
 8002f68:	40004400 	.word	0x40004400

08002f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f70:	e7fe      	b.n	8002f70 <NMI_Handler+0x4>

08002f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f76:	e7fe      	b.n	8002f76 <HardFault_Handler+0x4>

08002f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f7c:	e7fe      	b.n	8002f7c <MemManage_Handler+0x4>

08002f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f82:	e7fe      	b.n	8002f82 <BusFault_Handler+0x4>

08002f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f88:	e7fe      	b.n	8002f88 <UsageFault_Handler+0x4>

08002f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb8:	f000 f98a 	bl	80032d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R_N1_Pin);
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	f001 f89d 	bl	8004104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R_N2_Pin);
 8002fd2:	2002      	movs	r0, #2
 8002fd4:	f001 f896 	bl	8004104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R_N3_Pin);
 8002fe0:	2004      	movs	r0, #4
 8002fe2:	f001 f88f 	bl	8004104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R_N4_Pin);
 8002fee:	2008      	movs	r0, #8
 8002ff0:	f001 f888 	bl	8004104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002ff4:	bf00      	nop
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8002ffc:	4802      	ldr	r0, [pc, #8]	; (8003008 <DMA1_Stream1_IRQHandler+0x10>)
 8002ffe:	f000 fc79 	bl	80038f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	200001b0 	.word	0x200001b0

0800300c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003010:	4802      	ldr	r0, [pc, #8]	; (800301c <DMA1_Stream4_IRQHandler+0x10>)
 8003012:	f000 fc6f 	bl	80038f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200000c0 	.word	0x200000c0

08003020 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003024:	4802      	ldr	r0, [pc, #8]	; (8003030 <TIM3_IRQHandler+0x10>)
 8003026:	f002 fc47 	bl	80058b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800302a:	bf00      	nop
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000168 	.word	0x20000168

08003034 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003038:	4802      	ldr	r0, [pc, #8]	; (8003044 <SPI2_IRQHandler+0x10>)
 800303a:	f001 fe53 	bl	8004ce4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800303e:	bf00      	nop
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000068 	.word	0x20000068

08003048 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800304c:	4802      	ldr	r0, [pc, #8]	; (8003058 <USART1_IRQHandler+0x10>)
 800304e:	f003 fbd7 	bl	8006800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000210 	.word	0x20000210

0800305c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003060:	4802      	ldr	r0, [pc, #8]	; (800306c <USART2_IRQHandler+0x10>)
 8003062:	f003 fbcd 	bl	8006800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000254 	.word	0x20000254

08003070 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003074:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003078:	f001 f844 	bl	8004104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800307c:	bf00      	nop
 800307e:	bd80      	pop	{r7, pc}

08003080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <SystemInit+0x20>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	4a05      	ldr	r2, [pc, #20]	; (80030a0 <SystemInit+0x20>)
 800308c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	e000ed00 	.word	0xe000ed00

080030a4 <ws2812_init>:

uint8_t ws2812_buffer[WS2812_BUFFER_SIZE];

// set all pixels to 0 (off)
void ws2812_init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
  memset(ws2812_buffer, 0, WS2812_BUFFER_SIZE); // fill buffer with 0s
 80030aa:	f645 223c 	movw	r2, #23100	; 0x5a3c
 80030ae:	2100      	movs	r1, #0
 80030b0:	4809      	ldr	r0, [pc, #36]	; (80030d8 <ws2812_init+0x34>)
 80030b2:	f004 fa95 	bl	80075e0 <memset>
  HAL_SPI_Transmit_DMA(&hspi2, ws2812_buffer, WS2812_BUFFER_SIZE); // write buffer to LEDs
 80030b6:	f645 223c 	movw	r2, #23100	; 0x5a3c
 80030ba:	4907      	ldr	r1, [pc, #28]	; (80030d8 <ws2812_init+0x34>)
 80030bc:	4807      	ldr	r0, [pc, #28]	; (80030dc <ws2812_init+0x38>)
 80030be:	f001 fd5b 	bl	8004b78 <HAL_SPI_Transmit_DMA>
  ws2812_pixel_all(&(PixelRGB_t){0, 0, 0}); // set LEDs to black
 80030c2:	2300      	movs	r3, #0
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	1d3b      	adds	r3, r7, #4
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 f809 	bl	80030e0 <ws2812_pixel_all>
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000614 	.word	0x20000614
 80030dc:	20000068 	.word	0x20000068

080030e0 <ws2812_pixel_all>:
  WS2812_FILL_BUFFER(color->color.b);
}

// set all pixels to given color
void ws2812_pixel_all(PixelRGB_t* color)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint8_t* ptr = ws2812_buffer;
 80030e8:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <ws2812_pixel_all+0xd0>)
 80030ea:	617b      	str	r3, [r7, #20]
  for (uint16_t i = 0; i < WS2812_NUM_LEDS; ++i) 
 80030ec:	2300      	movs	r3, #0
 80030ee:	827b      	strh	r3, [r7, #18]
 80030f0:	e053      	b.n	800319a <ws2812_pixel_all+0xba>
  {
    WS2812_FILL_BUFFER(color->color.g);
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	747b      	strb	r3, [r7, #17]
 80030f6:	e014      	b.n	8003122 <ws2812_pixel_all+0x42>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	789a      	ldrb	r2, [r3, #2]
 80030fc:	7c7b      	ldrb	r3, [r7, #17]
 80030fe:	4013      	ands	r3, r2
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <ws2812_pixel_all+0x32>
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	617a      	str	r2, [r7, #20]
 800310c:	22fc      	movs	r2, #252	; 0xfc
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	e004      	b.n	800311c <ws2812_pixel_all+0x3c>
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	617a      	str	r2, [r7, #20]
 8003118:	2280      	movs	r2, #128	; 0x80
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	7c7b      	ldrb	r3, [r7, #17]
 800311e:	085b      	lsrs	r3, r3, #1
 8003120:	747b      	strb	r3, [r7, #17]
 8003122:	7c7b      	ldrb	r3, [r7, #17]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e7      	bne.n	80030f8 <ws2812_pixel_all+0x18>
    WS2812_FILL_BUFFER(color->color.r);
 8003128:	2380      	movs	r3, #128	; 0x80
 800312a:	743b      	strb	r3, [r7, #16]
 800312c:	e014      	b.n	8003158 <ws2812_pixel_all+0x78>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	785a      	ldrb	r2, [r3, #1]
 8003132:	7c3b      	ldrb	r3, [r7, #16]
 8003134:	4013      	ands	r3, r2
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <ws2812_pixel_all+0x68>
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	617a      	str	r2, [r7, #20]
 8003142:	22fc      	movs	r2, #252	; 0xfc
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	e004      	b.n	8003152 <ws2812_pixel_all+0x72>
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	617a      	str	r2, [r7, #20]
 800314e:	2280      	movs	r2, #128	; 0x80
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	7c3b      	ldrb	r3, [r7, #16]
 8003154:	085b      	lsrs	r3, r3, #1
 8003156:	743b      	strb	r3, [r7, #16]
 8003158:	7c3b      	ldrb	r3, [r7, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1e7      	bne.n	800312e <ws2812_pixel_all+0x4e>
    WS2812_FILL_BUFFER(color->color.b);
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	73fb      	strb	r3, [r7, #15]
 8003162:	e014      	b.n	800318e <ws2812_pixel_all+0xae>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	781a      	ldrb	r2, [r3, #0]
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	4013      	ands	r3, r2
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d005      	beq.n	800317e <ws2812_pixel_all+0x9e>
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	617a      	str	r2, [r7, #20]
 8003178:	22fc      	movs	r2, #252	; 0xfc
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	e004      	b.n	8003188 <ws2812_pixel_all+0xa8>
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	617a      	str	r2, [r7, #20]
 8003184:	2280      	movs	r2, #128	; 0x80
 8003186:	701a      	strb	r2, [r3, #0]
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e7      	bne.n	8003164 <ws2812_pixel_all+0x84>
  for (uint16_t i = 0; i < WS2812_NUM_LEDS; ++i) 
 8003194:	8a7b      	ldrh	r3, [r7, #18]
 8003196:	3301      	adds	r3, #1
 8003198:	827b      	strh	r3, [r7, #18]
 800319a:	8a7b      	ldrh	r3, [r7, #18]
 800319c:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 80031a0:	d3a7      	bcc.n	80030f2 <ws2812_pixel_all+0x12>
  }
}
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	20000614 	.word	0x20000614

080031b4 <HAL_SPI_TxCpltCallback>:
    }
  }
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  // Restart transmission when buffer tx is completed
  HAL_SPI_Transmit_DMA(&hspi2, ws2812_buffer, WS2812_BUFFER_SIZE);
 80031bc:	f645 223c 	movw	r2, #23100	; 0x5a3c
 80031c0:	4903      	ldr	r1, [pc, #12]	; (80031d0 <HAL_SPI_TxCpltCallback+0x1c>)
 80031c2:	4804      	ldr	r0, [pc, #16]	; (80031d4 <HAL_SPI_TxCpltCallback+0x20>)
 80031c4:	f001 fcd8 	bl	8004b78 <HAL_SPI_Transmit_DMA>
}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20000614 	.word	0x20000614
 80031d4:	20000068 	.word	0x20000068

080031d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003210 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031dc:	480d      	ldr	r0, [pc, #52]	; (8003214 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031de:	490e      	ldr	r1, [pc, #56]	; (8003218 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031e0:	4a0e      	ldr	r2, [pc, #56]	; (800321c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031e4:	e002      	b.n	80031ec <LoopCopyDataInit>

080031e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ea:	3304      	adds	r3, #4

080031ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031f0:	d3f9      	bcc.n	80031e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031f2:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031f4:	4c0b      	ldr	r4, [pc, #44]	; (8003224 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031f8:	e001      	b.n	80031fe <LoopFillZerobss>

080031fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031fc:	3204      	adds	r2, #4

080031fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003200:	d3fb      	bcc.n	80031fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003202:	f7ff ff3d 	bl	8003080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003206:	f004 f9f3 	bl	80075f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800320a:	f7fe fdad 	bl	8001d68 <main>
  bx  lr    
 800320e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003210:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003218:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 800321c:	08007684 	.word	0x08007684
  ldr r2, =_sbss
 8003220:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8003224:	20006054 	.word	0x20006054

08003228 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003228:	e7fe      	b.n	8003228 <ADC_IRQHandler>
	...

0800322c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003230:	4b0e      	ldr	r3, [pc, #56]	; (800326c <HAL_Init+0x40>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a0d      	ldr	r2, [pc, #52]	; (800326c <HAL_Init+0x40>)
 8003236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800323a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <HAL_Init+0x40>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a0a      	ldr	r2, [pc, #40]	; (800326c <HAL_Init+0x40>)
 8003242:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003246:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003248:	4b08      	ldr	r3, [pc, #32]	; (800326c <HAL_Init+0x40>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a07      	ldr	r2, [pc, #28]	; (800326c <HAL_Init+0x40>)
 800324e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003252:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003254:	2003      	movs	r0, #3
 8003256:	f000 f973 	bl	8003540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800325a:	2000      	movs	r0, #0
 800325c:	f000 f808 	bl	8003270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003260:	f7ff fca0 	bl	8002ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40023c00 	.word	0x40023c00

08003270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003278:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <HAL_InitTick+0x54>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <HAL_InitTick+0x58>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	4619      	mov	r1, r3
 8003282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003286:	fbb3 f3f1 	udiv	r3, r3, r1
 800328a:	fbb2 f3f3 	udiv	r3, r2, r3
 800328e:	4618      	mov	r0, r3
 8003290:	f000 f98b 	bl	80035aa <HAL_SYSTICK_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e00e      	b.n	80032bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b0f      	cmp	r3, #15
 80032a2:	d80a      	bhi.n	80032ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032a4:	2200      	movs	r2, #0
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ac:	f000 f953 	bl	8003556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032b0:	4a06      	ldr	r2, [pc, #24]	; (80032cc <HAL_InitTick+0x5c>)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e000      	b.n	80032bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20000040 	.word	0x20000040
 80032c8:	20000048 	.word	0x20000048
 80032cc:	20000044 	.word	0x20000044

080032d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_IncTick+0x20>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	461a      	mov	r2, r3
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <HAL_IncTick+0x24>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4413      	add	r3, r2
 80032e0:	4a04      	ldr	r2, [pc, #16]	; (80032f4 <HAL_IncTick+0x24>)
 80032e2:	6013      	str	r3, [r2, #0]
}
 80032e4:	bf00      	nop
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000048 	.word	0x20000048
 80032f4:	20006050 	.word	0x20006050

080032f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  return uwTick;
 80032fc:	4b03      	ldr	r3, [pc, #12]	; (800330c <HAL_GetTick+0x14>)
 80032fe:	681b      	ldr	r3, [r3, #0]
}
 8003300:	4618      	mov	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	20006050 	.word	0x20006050

08003310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003318:	f7ff ffee 	bl	80032f8 <HAL_GetTick>
 800331c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d005      	beq.n	8003336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800332a:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <HAL_Delay+0x44>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4413      	add	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003336:	bf00      	nop
 8003338:	f7ff ffde 	bl	80032f8 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	429a      	cmp	r2, r3
 8003346:	d8f7      	bhi.n	8003338 <HAL_Delay+0x28>
  {
  }
}
 8003348:	bf00      	nop
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000048 	.word	0x20000048

08003358 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800335c:	4b03      	ldr	r3, [pc, #12]	; (800336c <HAL_GetUIDw0+0x14>)
 800335e:	681b      	ldr	r3, [r3, #0]
}
 8003360:	4618      	mov	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	1fff7a10 	.word	0x1fff7a10

08003370 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <HAL_GetUIDw1+0x14>)
 8003376:	681b      	ldr	r3, [r3, #0]
}
 8003378:	4618      	mov	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	1fff7a14 	.word	0x1fff7a14

08003388 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <HAL_GetUIDw2+0x14>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	1fff7a18 	.word	0x1fff7a18

080033a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b0:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <__NVIC_SetPriorityGrouping+0x44>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033bc:	4013      	ands	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033d2:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <__NVIC_SetPriorityGrouping+0x44>)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	60d3      	str	r3, [r2, #12]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ec:	4b04      	ldr	r3, [pc, #16]	; (8003400 <__NVIC_GetPriorityGrouping+0x18>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	0a1b      	lsrs	r3, r3, #8
 80033f2:	f003 0307 	and.w	r3, r3, #7
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	2b00      	cmp	r3, #0
 8003414:	db0b      	blt.n	800342e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	f003 021f 	and.w	r2, r3, #31
 800341c:	4907      	ldr	r1, [pc, #28]	; (800343c <__NVIC_EnableIRQ+0x38>)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	2001      	movs	r0, #1
 8003426:	fa00 f202 	lsl.w	r2, r0, r2
 800342a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	e000e100 	.word	0xe000e100

08003440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	6039      	str	r1, [r7, #0]
 800344a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003450:	2b00      	cmp	r3, #0
 8003452:	db0a      	blt.n	800346a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	b2da      	uxtb	r2, r3
 8003458:	490c      	ldr	r1, [pc, #48]	; (800348c <__NVIC_SetPriority+0x4c>)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	0112      	lsls	r2, r2, #4
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	440b      	add	r3, r1
 8003464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003468:	e00a      	b.n	8003480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	b2da      	uxtb	r2, r3
 800346e:	4908      	ldr	r1, [pc, #32]	; (8003490 <__NVIC_SetPriority+0x50>)
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	3b04      	subs	r3, #4
 8003478:	0112      	lsls	r2, r2, #4
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	440b      	add	r3, r1
 800347e:	761a      	strb	r2, [r3, #24]
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	e000e100 	.word	0xe000e100
 8003490:	e000ed00 	.word	0xe000ed00

08003494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003494:	b480      	push	{r7}
 8003496:	b089      	sub	sp, #36	; 0x24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f1c3 0307 	rsb	r3, r3, #7
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	bf28      	it	cs
 80034b2:	2304      	movcs	r3, #4
 80034b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3304      	adds	r3, #4
 80034ba:	2b06      	cmp	r3, #6
 80034bc:	d902      	bls.n	80034c4 <NVIC_EncodePriority+0x30>
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3b03      	subs	r3, #3
 80034c2:	e000      	b.n	80034c6 <NVIC_EncodePriority+0x32>
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c8:	f04f 32ff 	mov.w	r2, #4294967295
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43da      	mvns	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	401a      	ands	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034dc:	f04f 31ff 	mov.w	r1, #4294967295
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	fa01 f303 	lsl.w	r3, r1, r3
 80034e6:	43d9      	mvns	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	4313      	orrs	r3, r2
         );
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3724      	adds	r7, #36	; 0x24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3b01      	subs	r3, #1
 8003508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800350c:	d301      	bcc.n	8003512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800350e:	2301      	movs	r3, #1
 8003510:	e00f      	b.n	8003532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003512:	4a0a      	ldr	r2, [pc, #40]	; (800353c <SysTick_Config+0x40>)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3b01      	subs	r3, #1
 8003518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800351a:	210f      	movs	r1, #15
 800351c:	f04f 30ff 	mov.w	r0, #4294967295
 8003520:	f7ff ff8e 	bl	8003440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <SysTick_Config+0x40>)
 8003526:	2200      	movs	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800352a:	4b04      	ldr	r3, [pc, #16]	; (800353c <SysTick_Config+0x40>)
 800352c:	2207      	movs	r2, #7
 800352e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	e000e010 	.word	0xe000e010

08003540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7ff ff29 	bl	80033a0 <__NVIC_SetPriorityGrouping>
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003556:	b580      	push	{r7, lr}
 8003558:	b086      	sub	sp, #24
 800355a:	af00      	add	r7, sp, #0
 800355c:	4603      	mov	r3, r0
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003568:	f7ff ff3e 	bl	80033e8 <__NVIC_GetPriorityGrouping>
 800356c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	6978      	ldr	r0, [r7, #20]
 8003574:	f7ff ff8e 	bl	8003494 <NVIC_EncodePriority>
 8003578:	4602      	mov	r2, r0
 800357a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357e:	4611      	mov	r1, r2
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff ff5d 	bl	8003440 <__NVIC_SetPriority>
}
 8003586:	bf00      	nop
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	4603      	mov	r3, r0
 8003596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ff31 	bl	8003404 <__NVIC_EnableIRQ>
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff ffa2 	bl	80034fc <SysTick_Config>
 80035b8:	4603      	mov	r3, r0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035d0:	f7ff fe92 	bl	80032f8 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e099      	b.n	8003714 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0201 	bic.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003600:	e00f      	b.n	8003622 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003602:	f7ff fe79 	bl	80032f8 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b05      	cmp	r3, #5
 800360e:	d908      	bls.n	8003622 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2203      	movs	r2, #3
 800361a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e078      	b.n	8003714 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1e8      	bne.n	8003602 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	4b38      	ldr	r3, [pc, #224]	; (800371c <HAL_DMA_Init+0x158>)
 800363c:	4013      	ands	r3, r2
 800363e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800364e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800365a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003666:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	2b04      	cmp	r3, #4
 800367a:	d107      	bne.n	800368c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	4313      	orrs	r3, r2
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f023 0307 	bic.w	r3, r3, #7
 80036a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d117      	bne.n	80036e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00e      	beq.n	80036e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 fb01 	bl	8003cd0 <DMA_CheckFifoParam>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2240      	movs	r2, #64	; 0x40
 80036d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036e2:	2301      	movs	r3, #1
 80036e4:	e016      	b.n	8003714 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fab8 	bl	8003c64 <DMA_CalcBaseAndBitshift>
 80036f4:	4603      	mov	r3, r0
 80036f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fc:	223f      	movs	r2, #63	; 0x3f
 80036fe:	409a      	lsls	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	f010803f 	.word	0xf010803f

08003720 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_DMA_Start_IT+0x26>
 8003742:	2302      	movs	r3, #2
 8003744:	e040      	b.n	80037c8 <HAL_DMA_Start_IT+0xa8>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b01      	cmp	r3, #1
 8003758:	d12f      	bne.n	80037ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2202      	movs	r2, #2
 800375e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fa4a 	bl	8003c08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003778:	223f      	movs	r2, #63	; 0x3f
 800377a:	409a      	lsls	r2, r3
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0216 	orr.w	r2, r2, #22
 800378e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0208 	orr.w	r2, r2, #8
 80037a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	e005      	b.n	80037c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037c2:	2302      	movs	r3, #2
 80037c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037de:	f7ff fd8b 	bl	80032f8 <HAL_GetTick>
 80037e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d008      	beq.n	8003802 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2280      	movs	r2, #128	; 0x80
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e052      	b.n	80038a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0216 	bic.w	r2, r2, #22
 8003810:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695a      	ldr	r2, [r3, #20]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003820:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d103      	bne.n	8003832 <HAL_DMA_Abort+0x62>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800382e:	2b00      	cmp	r3, #0
 8003830:	d007      	beq.n	8003842 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0208 	bic.w	r2, r2, #8
 8003840:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0201 	bic.w	r2, r2, #1
 8003850:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003852:	e013      	b.n	800387c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003854:	f7ff fd50 	bl	80032f8 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b05      	cmp	r3, #5
 8003860:	d90c      	bls.n	800387c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2220      	movs	r2, #32
 8003866:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2203      	movs	r2, #3
 800386c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e015      	b.n	80038a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e4      	bne.n	8003854 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388e:	223f      	movs	r2, #63	; 0x3f
 8003890:	409a      	lsls	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d004      	beq.n	80038ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2280      	movs	r2, #128	; 0x80
 80038c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e00c      	b.n	80038e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2205      	movs	r2, #5
 80038d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0201 	bic.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003900:	4b8e      	ldr	r3, [pc, #568]	; (8003b3c <HAL_DMA_IRQHandler+0x248>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a8e      	ldr	r2, [pc, #568]	; (8003b40 <HAL_DMA_IRQHandler+0x24c>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	0a9b      	lsrs	r3, r3, #10
 800390c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003912:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391e:	2208      	movs	r2, #8
 8003920:	409a      	lsls	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4013      	ands	r3, r2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d01a      	beq.n	8003960 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d013      	beq.n	8003960 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0204 	bic.w	r2, r2, #4
 8003946:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394c:	2208      	movs	r2, #8
 800394e:	409a      	lsls	r2, r3
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003958:	f043 0201 	orr.w	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003964:	2201      	movs	r2, #1
 8003966:	409a      	lsls	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d012      	beq.n	8003996 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00b      	beq.n	8003996 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003982:	2201      	movs	r2, #1
 8003984:	409a      	lsls	r2, r3
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398e:	f043 0202 	orr.w	r2, r3, #2
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399a:	2204      	movs	r2, #4
 800399c:	409a      	lsls	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d012      	beq.n	80039cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00b      	beq.n	80039cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b8:	2204      	movs	r2, #4
 80039ba:	409a      	lsls	r2, r3
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c4:	f043 0204 	orr.w	r2, r3, #4
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d0:	2210      	movs	r2, #16
 80039d2:	409a      	lsls	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d043      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d03c      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ee:	2210      	movs	r2, #16
 80039f0:	409a      	lsls	r2, r3
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d018      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d108      	bne.n	8003a24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d024      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	4798      	blx	r3
 8003a22:	e01f      	b.n	8003a64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01b      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4798      	blx	r3
 8003a34:	e016      	b.n	8003a64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d107      	bne.n	8003a54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0208 	bic.w	r2, r2, #8
 8003a52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a68:	2220      	movs	r2, #32
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 808f 	beq.w	8003b94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8087 	beq.w	8003b94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	409a      	lsls	r2, r3
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b05      	cmp	r3, #5
 8003a9c:	d136      	bne.n	8003b0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0216 	bic.w	r2, r2, #22
 8003aac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695a      	ldr	r2, [r3, #20]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003abc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d103      	bne.n	8003ace <HAL_DMA_IRQHandler+0x1da>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d007      	beq.n	8003ade <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0208 	bic.w	r2, r2, #8
 8003adc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	223f      	movs	r2, #63	; 0x3f
 8003ae4:	409a      	lsls	r2, r3
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d07e      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
        }
        return;
 8003b0a:	e079      	b.n	8003c00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d01d      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10d      	bne.n	8003b44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d031      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
 8003b38:	e02c      	b.n	8003b94 <HAL_DMA_IRQHandler+0x2a0>
 8003b3a:	bf00      	nop
 8003b3c:	20000040 	.word	0x20000040
 8003b40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d023      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	4798      	blx	r3
 8003b54:	e01e      	b.n	8003b94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10f      	bne.n	8003b84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0210 	bic.w	r2, r2, #16
 8003b72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d032      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d022      	beq.n	8003bee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2205      	movs	r2, #5
 8003bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0201 	bic.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d307      	bcc.n	8003bdc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f2      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0x2cc>
 8003bda:	e000      	b.n	8003bde <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003bdc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	4798      	blx	r3
 8003bfe:	e000      	b.n	8003c02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c00:	bf00      	nop
    }
  }
}
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b40      	cmp	r3, #64	; 0x40
 8003c34:	d108      	bne.n	8003c48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c46:	e007      	b.n	8003c58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	60da      	str	r2, [r3, #12]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	3b10      	subs	r3, #16
 8003c74:	4a14      	ldr	r2, [pc, #80]	; (8003cc8 <DMA_CalcBaseAndBitshift+0x64>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c7e:	4a13      	ldr	r2, [pc, #76]	; (8003ccc <DMA_CalcBaseAndBitshift+0x68>)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d909      	bls.n	8003ca6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c9a:	f023 0303 	bic.w	r3, r3, #3
 8003c9e:	1d1a      	adds	r2, r3, #4
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	659a      	str	r2, [r3, #88]	; 0x58
 8003ca4:	e007      	b.n	8003cb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cae:	f023 0303 	bic.w	r3, r3, #3
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	aaaaaaab 	.word	0xaaaaaaab
 8003ccc:	0800766c 	.word	0x0800766c

08003cd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d11f      	bne.n	8003d2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	d856      	bhi.n	8003d9e <DMA_CheckFifoParam+0xce>
 8003cf0:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <DMA_CheckFifoParam+0x28>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003d09 	.word	0x08003d09
 8003cfc:	08003d1b 	.word	0x08003d1b
 8003d00:	08003d09 	.word	0x08003d09
 8003d04:	08003d9f 	.word	0x08003d9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d046      	beq.n	8003da2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d18:	e043      	b.n	8003da2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d22:	d140      	bne.n	8003da6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d28:	e03d      	b.n	8003da6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d32:	d121      	bne.n	8003d78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d837      	bhi.n	8003daa <DMA_CheckFifoParam+0xda>
 8003d3a:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <DMA_CheckFifoParam+0x70>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003d51 	.word	0x08003d51
 8003d44:	08003d57 	.word	0x08003d57
 8003d48:	08003d51 	.word	0x08003d51
 8003d4c:	08003d69 	.word	0x08003d69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
      break;
 8003d54:	e030      	b.n	8003db8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d025      	beq.n	8003dae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d66:	e022      	b.n	8003dae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d70:	d11f      	bne.n	8003db2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d76:	e01c      	b.n	8003db2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d903      	bls.n	8003d86 <DMA_CheckFifoParam+0xb6>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d003      	beq.n	8003d8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d84:	e018      	b.n	8003db8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	73fb      	strb	r3, [r7, #15]
      break;
 8003d8a:	e015      	b.n	8003db8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00e      	beq.n	8003db6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d9c:	e00b      	b.n	8003db6 <DMA_CheckFifoParam+0xe6>
      break;
 8003d9e:	bf00      	nop
 8003da0:	e00a      	b.n	8003db8 <DMA_CheckFifoParam+0xe8>
      break;
 8003da2:	bf00      	nop
 8003da4:	e008      	b.n	8003db8 <DMA_CheckFifoParam+0xe8>
      break;
 8003da6:	bf00      	nop
 8003da8:	e006      	b.n	8003db8 <DMA_CheckFifoParam+0xe8>
      break;
 8003daa:	bf00      	nop
 8003dac:	e004      	b.n	8003db8 <DMA_CheckFifoParam+0xe8>
      break;
 8003dae:	bf00      	nop
 8003db0:	e002      	b.n	8003db8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003db2:	bf00      	nop
 8003db4:	e000      	b.n	8003db8 <DMA_CheckFifoParam+0xe8>
      break;
 8003db6:	bf00      	nop
    }
  } 
  
  return status; 
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop

08003dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b089      	sub	sp, #36	; 0x24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	e159      	b.n	8004098 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003de4:	2201      	movs	r2, #1
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	f040 8148 	bne.w	8004092 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d005      	beq.n	8003e1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d130      	bne.n	8003e7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	2203      	movs	r2, #3
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e50:	2201      	movs	r2, #1
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	091b      	lsrs	r3, r3, #4
 8003e66:	f003 0201 	and.w	r2, r3, #1
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 0303 	and.w	r3, r3, #3
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d017      	beq.n	8003eb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	2203      	movs	r2, #3
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d123      	bne.n	8003f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	08da      	lsrs	r2, r3, #3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3208      	adds	r2, #8
 8003ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	220f      	movs	r2, #15
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	08da      	lsrs	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3208      	adds	r2, #8
 8003f06:	69b9      	ldr	r1, [r7, #24]
 8003f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	2203      	movs	r2, #3
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 0203 	and.w	r2, r3, #3
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 80a2 	beq.w	8004092 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	4b57      	ldr	r3, [pc, #348]	; (80040b0 <HAL_GPIO_Init+0x2e8>)
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	4a56      	ldr	r2, [pc, #344]	; (80040b0 <HAL_GPIO_Init+0x2e8>)
 8003f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f5e:	4b54      	ldr	r3, [pc, #336]	; (80040b0 <HAL_GPIO_Init+0x2e8>)
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f6a:	4a52      	ldr	r2, [pc, #328]	; (80040b4 <HAL_GPIO_Init+0x2ec>)
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	089b      	lsrs	r3, r3, #2
 8003f70:	3302      	adds	r3, #2
 8003f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	220f      	movs	r2, #15
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a49      	ldr	r2, [pc, #292]	; (80040b8 <HAL_GPIO_Init+0x2f0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d019      	beq.n	8003fca <HAL_GPIO_Init+0x202>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a48      	ldr	r2, [pc, #288]	; (80040bc <HAL_GPIO_Init+0x2f4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d013      	beq.n	8003fc6 <HAL_GPIO_Init+0x1fe>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a47      	ldr	r2, [pc, #284]	; (80040c0 <HAL_GPIO_Init+0x2f8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00d      	beq.n	8003fc2 <HAL_GPIO_Init+0x1fa>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a46      	ldr	r2, [pc, #280]	; (80040c4 <HAL_GPIO_Init+0x2fc>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d007      	beq.n	8003fbe <HAL_GPIO_Init+0x1f6>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a45      	ldr	r2, [pc, #276]	; (80040c8 <HAL_GPIO_Init+0x300>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d101      	bne.n	8003fba <HAL_GPIO_Init+0x1f2>
 8003fb6:	2304      	movs	r3, #4
 8003fb8:	e008      	b.n	8003fcc <HAL_GPIO_Init+0x204>
 8003fba:	2307      	movs	r3, #7
 8003fbc:	e006      	b.n	8003fcc <HAL_GPIO_Init+0x204>
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e004      	b.n	8003fcc <HAL_GPIO_Init+0x204>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e002      	b.n	8003fcc <HAL_GPIO_Init+0x204>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <HAL_GPIO_Init+0x204>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	f002 0203 	and.w	r2, r2, #3
 8003fd2:	0092      	lsls	r2, r2, #2
 8003fd4:	4093      	lsls	r3, r2
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fdc:	4935      	ldr	r1, [pc, #212]	; (80040b4 <HAL_GPIO_Init+0x2ec>)
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	089b      	lsrs	r3, r3, #2
 8003fe2:	3302      	adds	r3, #2
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fea:	4b38      	ldr	r3, [pc, #224]	; (80040cc <HAL_GPIO_Init+0x304>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800400e:	4a2f      	ldr	r2, [pc, #188]	; (80040cc <HAL_GPIO_Init+0x304>)
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004014:	4b2d      	ldr	r3, [pc, #180]	; (80040cc <HAL_GPIO_Init+0x304>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	43db      	mvns	r3, r3
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4013      	ands	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004038:	4a24      	ldr	r2, [pc, #144]	; (80040cc <HAL_GPIO_Init+0x304>)
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800403e:	4b23      	ldr	r3, [pc, #140]	; (80040cc <HAL_GPIO_Init+0x304>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	43db      	mvns	r3, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4013      	ands	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004062:	4a1a      	ldr	r2, [pc, #104]	; (80040cc <HAL_GPIO_Init+0x304>)
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004068:	4b18      	ldr	r3, [pc, #96]	; (80040cc <HAL_GPIO_Init+0x304>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	43db      	mvns	r3, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4013      	ands	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800408c:	4a0f      	ldr	r2, [pc, #60]	; (80040cc <HAL_GPIO_Init+0x304>)
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	3301      	adds	r3, #1
 8004096:	61fb      	str	r3, [r7, #28]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2b0f      	cmp	r3, #15
 800409c:	f67f aea2 	bls.w	8003de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	3724      	adds	r7, #36	; 0x24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40023800 	.word	0x40023800
 80040b4:	40013800 	.word	0x40013800
 80040b8:	40020000 	.word	0x40020000
 80040bc:	40020400 	.word	0x40020400
 80040c0:	40020800 	.word	0x40020800
 80040c4:	40020c00 	.word	0x40020c00
 80040c8:	40021000 	.word	0x40021000
 80040cc:	40013c00 	.word	0x40013c00

080040d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	807b      	strh	r3, [r7, #2]
 80040dc:	4613      	mov	r3, r2
 80040de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040e0:	787b      	ldrb	r3, [r7, #1]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040e6:	887a      	ldrh	r2, [r7, #2]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040ec:	e003      	b.n	80040f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040ee:	887b      	ldrh	r3, [r7, #2]
 80040f0:	041a      	lsls	r2, r3, #16
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	619a      	str	r2, [r3, #24]
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
	...

08004104 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800410e:	4b08      	ldr	r3, [pc, #32]	; (8004130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	88fb      	ldrh	r3, [r7, #6]
 8004114:	4013      	ands	r3, r2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d006      	beq.n	8004128 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800411a:	4a05      	ldr	r2, [pc, #20]	; (8004130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fe f958 	bl	80023d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004128:	bf00      	nop
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40013c00 	.word	0x40013c00

08004134 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e267      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d075      	beq.n	800423e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004152:	4b88      	ldr	r3, [pc, #544]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	2b04      	cmp	r3, #4
 800415c:	d00c      	beq.n	8004178 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800415e:	4b85      	ldr	r3, [pc, #532]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004166:	2b08      	cmp	r3, #8
 8004168:	d112      	bne.n	8004190 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800416a:	4b82      	ldr	r3, [pc, #520]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004176:	d10b      	bne.n	8004190 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004178:	4b7e      	ldr	r3, [pc, #504]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d05b      	beq.n	800423c <HAL_RCC_OscConfig+0x108>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d157      	bne.n	800423c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e242      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004198:	d106      	bne.n	80041a8 <HAL_RCC_OscConfig+0x74>
 800419a:	4b76      	ldr	r3, [pc, #472]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a75      	ldr	r2, [pc, #468]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 80041a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	e01d      	b.n	80041e4 <HAL_RCC_OscConfig+0xb0>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041b0:	d10c      	bne.n	80041cc <HAL_RCC_OscConfig+0x98>
 80041b2:	4b70      	ldr	r3, [pc, #448]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a6f      	ldr	r2, [pc, #444]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 80041b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	4b6d      	ldr	r3, [pc, #436]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a6c      	ldr	r2, [pc, #432]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 80041c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	e00b      	b.n	80041e4 <HAL_RCC_OscConfig+0xb0>
 80041cc:	4b69      	ldr	r3, [pc, #420]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a68      	ldr	r2, [pc, #416]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 80041d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	4b66      	ldr	r3, [pc, #408]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a65      	ldr	r2, [pc, #404]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 80041de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d013      	beq.n	8004214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ec:	f7ff f884 	bl	80032f8 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041f4:	f7ff f880 	bl	80032f8 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b64      	cmp	r3, #100	; 0x64
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e207      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004206:	4b5b      	ldr	r3, [pc, #364]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0xc0>
 8004212:	e014      	b.n	800423e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004214:	f7ff f870 	bl	80032f8 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800421c:	f7ff f86c 	bl	80032f8 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	; 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e1f3      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800422e:	4b51      	ldr	r3, [pc, #324]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0xe8>
 800423a:	e000      	b.n	800423e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800423c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d063      	beq.n	8004312 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800424a:	4b4a      	ldr	r3, [pc, #296]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 030c 	and.w	r3, r3, #12
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00b      	beq.n	800426e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004256:	4b47      	ldr	r3, [pc, #284]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800425e:	2b08      	cmp	r3, #8
 8004260:	d11c      	bne.n	800429c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004262:	4b44      	ldr	r3, [pc, #272]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d116      	bne.n	800429c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800426e:	4b41      	ldr	r3, [pc, #260]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d005      	beq.n	8004286 <HAL_RCC_OscConfig+0x152>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d001      	beq.n	8004286 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e1c7      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004286:	4b3b      	ldr	r3, [pc, #236]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4937      	ldr	r1, [pc, #220]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 8004296:	4313      	orrs	r3, r2
 8004298:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800429a:	e03a      	b.n	8004312 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d020      	beq.n	80042e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042a4:	4b34      	ldr	r3, [pc, #208]	; (8004378 <HAL_RCC_OscConfig+0x244>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042aa:	f7ff f825 	bl	80032f8 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042b2:	f7ff f821 	bl	80032f8 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e1a8      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c4:	4b2b      	ldr	r3, [pc, #172]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0f0      	beq.n	80042b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d0:	4b28      	ldr	r3, [pc, #160]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	4925      	ldr	r1, [pc, #148]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	600b      	str	r3, [r1, #0]
 80042e4:	e015      	b.n	8004312 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042e6:	4b24      	ldr	r3, [pc, #144]	; (8004378 <HAL_RCC_OscConfig+0x244>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7ff f804 	bl	80032f8 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042f4:	f7ff f800 	bl	80032f8 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e187      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004306:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b00      	cmp	r3, #0
 800431c:	d036      	beq.n	800438c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d016      	beq.n	8004354 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004326:	4b15      	ldr	r3, [pc, #84]	; (800437c <HAL_RCC_OscConfig+0x248>)
 8004328:	2201      	movs	r2, #1
 800432a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432c:	f7fe ffe4 	bl	80032f8 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004334:	f7fe ffe0 	bl	80032f8 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e167      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004346:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <HAL_RCC_OscConfig+0x240>)
 8004348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f0      	beq.n	8004334 <HAL_RCC_OscConfig+0x200>
 8004352:	e01b      	b.n	800438c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004354:	4b09      	ldr	r3, [pc, #36]	; (800437c <HAL_RCC_OscConfig+0x248>)
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800435a:	f7fe ffcd 	bl	80032f8 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004360:	e00e      	b.n	8004380 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004362:	f7fe ffc9 	bl	80032f8 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d907      	bls.n	8004380 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e150      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
 8004374:	40023800 	.word	0x40023800
 8004378:	42470000 	.word	0x42470000
 800437c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004380:	4b88      	ldr	r3, [pc, #544]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1ea      	bne.n	8004362 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 8097 	beq.w	80044c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800439a:	2300      	movs	r3, #0
 800439c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800439e:	4b81      	ldr	r3, [pc, #516]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10f      	bne.n	80043ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043aa:	2300      	movs	r3, #0
 80043ac:	60bb      	str	r3, [r7, #8]
 80043ae:	4b7d      	ldr	r3, [pc, #500]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	4a7c      	ldr	r2, [pc, #496]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 80043b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ba:	4b7a      	ldr	r3, [pc, #488]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c2:	60bb      	str	r3, [r7, #8]
 80043c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043c6:	2301      	movs	r3, #1
 80043c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ca:	4b77      	ldr	r3, [pc, #476]	; (80045a8 <HAL_RCC_OscConfig+0x474>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d118      	bne.n	8004408 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043d6:	4b74      	ldr	r3, [pc, #464]	; (80045a8 <HAL_RCC_OscConfig+0x474>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a73      	ldr	r2, [pc, #460]	; (80045a8 <HAL_RCC_OscConfig+0x474>)
 80043dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043e2:	f7fe ff89 	bl	80032f8 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ea:	f7fe ff85 	bl	80032f8 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e10c      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fc:	4b6a      	ldr	r3, [pc, #424]	; (80045a8 <HAL_RCC_OscConfig+0x474>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f0      	beq.n	80043ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d106      	bne.n	800441e <HAL_RCC_OscConfig+0x2ea>
 8004410:	4b64      	ldr	r3, [pc, #400]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004414:	4a63      	ldr	r2, [pc, #396]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004416:	f043 0301 	orr.w	r3, r3, #1
 800441a:	6713      	str	r3, [r2, #112]	; 0x70
 800441c:	e01c      	b.n	8004458 <HAL_RCC_OscConfig+0x324>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b05      	cmp	r3, #5
 8004424:	d10c      	bne.n	8004440 <HAL_RCC_OscConfig+0x30c>
 8004426:	4b5f      	ldr	r3, [pc, #380]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442a:	4a5e      	ldr	r2, [pc, #376]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 800442c:	f043 0304 	orr.w	r3, r3, #4
 8004430:	6713      	str	r3, [r2, #112]	; 0x70
 8004432:	4b5c      	ldr	r3, [pc, #368]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004436:	4a5b      	ldr	r2, [pc, #364]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	6713      	str	r3, [r2, #112]	; 0x70
 800443e:	e00b      	b.n	8004458 <HAL_RCC_OscConfig+0x324>
 8004440:	4b58      	ldr	r3, [pc, #352]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004444:	4a57      	ldr	r2, [pc, #348]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004446:	f023 0301 	bic.w	r3, r3, #1
 800444a:	6713      	str	r3, [r2, #112]	; 0x70
 800444c:	4b55      	ldr	r3, [pc, #340]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 800444e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004450:	4a54      	ldr	r2, [pc, #336]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004452:	f023 0304 	bic.w	r3, r3, #4
 8004456:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d015      	beq.n	800448c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004460:	f7fe ff4a 	bl	80032f8 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004466:	e00a      	b.n	800447e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004468:	f7fe ff46 	bl	80032f8 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	; 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e0cb      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800447e:	4b49      	ldr	r3, [pc, #292]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0ee      	beq.n	8004468 <HAL_RCC_OscConfig+0x334>
 800448a:	e014      	b.n	80044b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800448c:	f7fe ff34 	bl	80032f8 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004492:	e00a      	b.n	80044aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004494:	f7fe ff30 	bl	80032f8 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e0b5      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044aa:	4b3e      	ldr	r3, [pc, #248]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1ee      	bne.n	8004494 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044b6:	7dfb      	ldrb	r3, [r7, #23]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d105      	bne.n	80044c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044bc:	4b39      	ldr	r3, [pc, #228]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	4a38      	ldr	r2, [pc, #224]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 80044c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80a1 	beq.w	8004614 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044d2:	4b34      	ldr	r3, [pc, #208]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d05c      	beq.n	8004598 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d141      	bne.n	800456a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e6:	4b31      	ldr	r3, [pc, #196]	; (80045ac <HAL_RCC_OscConfig+0x478>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7fe ff04 	bl	80032f8 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fe ff00 	bl	80032f8 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e087      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004506:	4b27      	ldr	r3, [pc, #156]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69da      	ldr	r2, [r3, #28]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	019b      	lsls	r3, r3, #6
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	3b01      	subs	r3, #1
 800452c:	041b      	lsls	r3, r3, #16
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	061b      	lsls	r3, r3, #24
 8004536:	491b      	ldr	r1, [pc, #108]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 8004538:	4313      	orrs	r3, r2
 800453a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800453c:	4b1b      	ldr	r3, [pc, #108]	; (80045ac <HAL_RCC_OscConfig+0x478>)
 800453e:	2201      	movs	r2, #1
 8004540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004542:	f7fe fed9 	bl	80032f8 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800454a:	f7fe fed5 	bl	80032f8 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e05c      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800455c:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <HAL_RCC_OscConfig+0x416>
 8004568:	e054      	b.n	8004614 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800456a:	4b10      	ldr	r3, [pc, #64]	; (80045ac <HAL_RCC_OscConfig+0x478>)
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004570:	f7fe fec2 	bl	80032f8 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004578:	f7fe febe 	bl	80032f8 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e045      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458a:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <HAL_RCC_OscConfig+0x470>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0x444>
 8004596:	e03d      	b.n	8004614 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d107      	bne.n	80045b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e038      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
 80045a4:	40023800 	.word	0x40023800
 80045a8:	40007000 	.word	0x40007000
 80045ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045b0:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <HAL_RCC_OscConfig+0x4ec>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d028      	beq.n	8004610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d121      	bne.n	8004610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d11a      	bne.n	8004610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045e0:	4013      	ands	r3, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d111      	bne.n	8004610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	085b      	lsrs	r3, r3, #1
 80045f8:	3b01      	subs	r3, #1
 80045fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d107      	bne.n	8004610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800460c:	429a      	cmp	r2, r3
 800460e:	d001      	beq.n	8004614 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e000      	b.n	8004616 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40023800 	.word	0x40023800

08004624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e0cc      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004638:	4b68      	ldr	r3, [pc, #416]	; (80047dc <HAL_RCC_ClockConfig+0x1b8>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d90c      	bls.n	8004660 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004646:	4b65      	ldr	r3, [pc, #404]	; (80047dc <HAL_RCC_ClockConfig+0x1b8>)
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800464e:	4b63      	ldr	r3, [pc, #396]	; (80047dc <HAL_RCC_ClockConfig+0x1b8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	429a      	cmp	r2, r3
 800465a:	d001      	beq.n	8004660 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0b8      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d020      	beq.n	80046ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004678:	4b59      	ldr	r3, [pc, #356]	; (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	4a58      	ldr	r2, [pc, #352]	; (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004682:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004690:	4b53      	ldr	r3, [pc, #332]	; (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	4a52      	ldr	r2, [pc, #328]	; (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800469a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800469c:	4b50      	ldr	r3, [pc, #320]	; (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	494d      	ldr	r1, [pc, #308]	; (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d044      	beq.n	8004744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d107      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c2:	4b47      	ldr	r3, [pc, #284]	; (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d119      	bne.n	8004702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e07f      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d003      	beq.n	80046e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d107      	bne.n	80046f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e2:	4b3f      	ldr	r3, [pc, #252]	; (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d109      	bne.n	8004702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e06f      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f2:	4b3b      	ldr	r3, [pc, #236]	; (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e067      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004702:	4b37      	ldr	r3, [pc, #220]	; (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f023 0203 	bic.w	r2, r3, #3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	4934      	ldr	r1, [pc, #208]	; (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004710:	4313      	orrs	r3, r2
 8004712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004714:	f7fe fdf0 	bl	80032f8 <HAL_GetTick>
 8004718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471a:	e00a      	b.n	8004732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800471c:	f7fe fdec 	bl	80032f8 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	f241 3288 	movw	r2, #5000	; 0x1388
 800472a:	4293      	cmp	r3, r2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e04f      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004732:	4b2b      	ldr	r3, [pc, #172]	; (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 020c 	and.w	r2, r3, #12
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	429a      	cmp	r2, r3
 8004742:	d1eb      	bne.n	800471c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004744:	4b25      	ldr	r3, [pc, #148]	; (80047dc <HAL_RCC_ClockConfig+0x1b8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d20c      	bcs.n	800476c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004752:	4b22      	ldr	r3, [pc, #136]	; (80047dc <HAL_RCC_ClockConfig+0x1b8>)
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800475a:	4b20      	ldr	r3, [pc, #128]	; (80047dc <HAL_RCC_ClockConfig+0x1b8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d001      	beq.n	800476c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e032      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004778:	4b19      	ldr	r3, [pc, #100]	; (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	4916      	ldr	r1, [pc, #88]	; (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004796:	4b12      	ldr	r3, [pc, #72]	; (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	490e      	ldr	r1, [pc, #56]	; (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047aa:	f000 f821 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 80047ae:	4602      	mov	r2, r0
 80047b0:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	091b      	lsrs	r3, r3, #4
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	490a      	ldr	r1, [pc, #40]	; (80047e4 <HAL_RCC_ClockConfig+0x1c0>)
 80047bc:	5ccb      	ldrb	r3, [r1, r3]
 80047be:	fa22 f303 	lsr.w	r3, r2, r3
 80047c2:	4a09      	ldr	r2, [pc, #36]	; (80047e8 <HAL_RCC_ClockConfig+0x1c4>)
 80047c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <HAL_RCC_ClockConfig+0x1c8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe fd50 	bl	8003270 <HAL_InitTick>

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40023c00 	.word	0x40023c00
 80047e0:	40023800 	.word	0x40023800
 80047e4:	08007654 	.word	0x08007654
 80047e8:	20000040 	.word	0x20000040
 80047ec:	20000044 	.word	0x20000044

080047f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047f4:	b094      	sub	sp, #80	; 0x50
 80047f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	647b      	str	r3, [r7, #68]	; 0x44
 80047fc:	2300      	movs	r3, #0
 80047fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004800:	2300      	movs	r3, #0
 8004802:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004808:	4b79      	ldr	r3, [pc, #484]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 030c 	and.w	r3, r3, #12
 8004810:	2b08      	cmp	r3, #8
 8004812:	d00d      	beq.n	8004830 <HAL_RCC_GetSysClockFreq+0x40>
 8004814:	2b08      	cmp	r3, #8
 8004816:	f200 80e1 	bhi.w	80049dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <HAL_RCC_GetSysClockFreq+0x34>
 800481e:	2b04      	cmp	r3, #4
 8004820:	d003      	beq.n	800482a <HAL_RCC_GetSysClockFreq+0x3a>
 8004822:	e0db      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004824:	4b73      	ldr	r3, [pc, #460]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004826:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004828:	e0db      	b.n	80049e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800482a:	4b73      	ldr	r3, [pc, #460]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800482c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800482e:	e0d8      	b.n	80049e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004830:	4b6f      	ldr	r3, [pc, #444]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004838:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800483a:	4b6d      	ldr	r3, [pc, #436]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d063      	beq.n	800490e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004846:	4b6a      	ldr	r3, [pc, #424]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	099b      	lsrs	r3, r3, #6
 800484c:	2200      	movs	r2, #0
 800484e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004850:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004858:	633b      	str	r3, [r7, #48]	; 0x30
 800485a:	2300      	movs	r3, #0
 800485c:	637b      	str	r3, [r7, #52]	; 0x34
 800485e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004862:	4622      	mov	r2, r4
 8004864:	462b      	mov	r3, r5
 8004866:	f04f 0000 	mov.w	r0, #0
 800486a:	f04f 0100 	mov.w	r1, #0
 800486e:	0159      	lsls	r1, r3, #5
 8004870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004874:	0150      	lsls	r0, r2, #5
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4621      	mov	r1, r4
 800487c:	1a51      	subs	r1, r2, r1
 800487e:	6139      	str	r1, [r7, #16]
 8004880:	4629      	mov	r1, r5
 8004882:	eb63 0301 	sbc.w	r3, r3, r1
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004894:	4659      	mov	r1, fp
 8004896:	018b      	lsls	r3, r1, #6
 8004898:	4651      	mov	r1, sl
 800489a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800489e:	4651      	mov	r1, sl
 80048a0:	018a      	lsls	r2, r1, #6
 80048a2:	4651      	mov	r1, sl
 80048a4:	ebb2 0801 	subs.w	r8, r2, r1
 80048a8:	4659      	mov	r1, fp
 80048aa:	eb63 0901 	sbc.w	r9, r3, r1
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048c2:	4690      	mov	r8, r2
 80048c4:	4699      	mov	r9, r3
 80048c6:	4623      	mov	r3, r4
 80048c8:	eb18 0303 	adds.w	r3, r8, r3
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	462b      	mov	r3, r5
 80048d0:	eb49 0303 	adc.w	r3, r9, r3
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048e2:	4629      	mov	r1, r5
 80048e4:	024b      	lsls	r3, r1, #9
 80048e6:	4621      	mov	r1, r4
 80048e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048ec:	4621      	mov	r1, r4
 80048ee:	024a      	lsls	r2, r1, #9
 80048f0:	4610      	mov	r0, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048f6:	2200      	movs	r2, #0
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004900:	f7fb ff70 	bl	80007e4 <__aeabi_uldivmod>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4613      	mov	r3, r2
 800490a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800490c:	e058      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490e:	4b38      	ldr	r3, [pc, #224]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	099b      	lsrs	r3, r3, #6
 8004914:	2200      	movs	r2, #0
 8004916:	4618      	mov	r0, r3
 8004918:	4611      	mov	r1, r2
 800491a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800491e:	623b      	str	r3, [r7, #32]
 8004920:	2300      	movs	r3, #0
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
 8004924:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004928:	4642      	mov	r2, r8
 800492a:	464b      	mov	r3, r9
 800492c:	f04f 0000 	mov.w	r0, #0
 8004930:	f04f 0100 	mov.w	r1, #0
 8004934:	0159      	lsls	r1, r3, #5
 8004936:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800493a:	0150      	lsls	r0, r2, #5
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4641      	mov	r1, r8
 8004942:	ebb2 0a01 	subs.w	sl, r2, r1
 8004946:	4649      	mov	r1, r9
 8004948:	eb63 0b01 	sbc.w	fp, r3, r1
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004958:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800495c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004960:	ebb2 040a 	subs.w	r4, r2, sl
 8004964:	eb63 050b 	sbc.w	r5, r3, fp
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	00eb      	lsls	r3, r5, #3
 8004972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004976:	00e2      	lsls	r2, r4, #3
 8004978:	4614      	mov	r4, r2
 800497a:	461d      	mov	r5, r3
 800497c:	4643      	mov	r3, r8
 800497e:	18e3      	adds	r3, r4, r3
 8004980:	603b      	str	r3, [r7, #0]
 8004982:	464b      	mov	r3, r9
 8004984:	eb45 0303 	adc.w	r3, r5, r3
 8004988:	607b      	str	r3, [r7, #4]
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004996:	4629      	mov	r1, r5
 8004998:	028b      	lsls	r3, r1, #10
 800499a:	4621      	mov	r1, r4
 800499c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049a0:	4621      	mov	r1, r4
 80049a2:	028a      	lsls	r2, r1, #10
 80049a4:	4610      	mov	r0, r2
 80049a6:	4619      	mov	r1, r3
 80049a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049aa:	2200      	movs	r2, #0
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	61fa      	str	r2, [r7, #28]
 80049b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049b4:	f7fb ff16 	bl	80007e4 <__aeabi_uldivmod>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4613      	mov	r3, r2
 80049be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	0c1b      	lsrs	r3, r3, #16
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	3301      	adds	r3, #1
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80049d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049da:	e002      	b.n	80049e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80049de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3750      	adds	r7, #80	; 0x50
 80049e8:	46bd      	mov	sp, r7
 80049ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ee:	bf00      	nop
 80049f0:	40023800 	.word	0x40023800
 80049f4:	00f42400 	.word	0x00f42400
 80049f8:	007a1200 	.word	0x007a1200

080049fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a00:	4b03      	ldr	r3, [pc, #12]	; (8004a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a02:	681b      	ldr	r3, [r3, #0]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	20000040 	.word	0x20000040

08004a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a18:	f7ff fff0 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	0a9b      	lsrs	r3, r3, #10
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	4903      	ldr	r1, [pc, #12]	; (8004a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a2a:	5ccb      	ldrb	r3, [r1, r3]
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40023800 	.word	0x40023800
 8004a38:	08007664 	.word	0x08007664

08004a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a40:	f7ff ffdc 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a44:	4602      	mov	r2, r0
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	0b5b      	lsrs	r3, r3, #13
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	4903      	ldr	r1, [pc, #12]	; (8004a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a52:	5ccb      	ldrb	r3, [r1, r3]
 8004a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	08007664 	.word	0x08007664

08004a64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e07b      	b.n	8004b6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d108      	bne.n	8004a90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a86:	d009      	beq.n	8004a9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	61da      	str	r2, [r3, #28]
 8004a8e:	e005      	b.n	8004a9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fe f89c 	bl	8002bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b20:	ea42 0103 	orr.w	r1, r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	0c1b      	lsrs	r3, r3, #16
 8004b3a:	f003 0104 	and.w	r1, r3, #4
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	f003 0210 	and.w	r2, r3, #16
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	4613      	mov	r3, r2
 8004b84:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d101      	bne.n	8004b98 <HAL_SPI_Transmit_DMA+0x20>
 8004b94:	2302      	movs	r3, #2
 8004b96:	e09b      	b.n	8004cd0 <HAL_SPI_Transmit_DMA+0x158>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d002      	beq.n	8004bb2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004bac:	2302      	movs	r3, #2
 8004bae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bb0:	e089      	b.n	8004cc6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <HAL_SPI_Transmit_DMA+0x46>
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d102      	bne.n	8004bc4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bc2:	e080      	b.n	8004cc6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2203      	movs	r2, #3
 8004bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	88fa      	ldrh	r2, [r7, #6]
 8004bdc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	88fa      	ldrh	r2, [r7, #6]
 8004be2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c0a:	d10f      	bne.n	8004c2c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c2a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c30:	4a29      	ldr	r2, [pc, #164]	; (8004cd8 <HAL_SPI_Transmit_DMA+0x160>)
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c38:	4a28      	ldr	r2, [pc, #160]	; (8004cdc <HAL_SPI_Transmit_DMA+0x164>)
 8004c3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c40:	4a27      	ldr	r2, [pc, #156]	; (8004ce0 <HAL_SPI_Transmit_DMA+0x168>)
 8004c42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c48:	2200      	movs	r2, #0
 8004c4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	4619      	mov	r1, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c62:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004c64:	f7fe fd5c 	bl	8003720 <HAL_DMA_Start_IT>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00c      	beq.n	8004c88 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c72:	f043 0210 	orr.w	r2, r3, #16
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004c86:	e01e      	b.n	8004cc6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c92:	2b40      	cmp	r3, #64	; 0x40
 8004c94:	d007      	beq.n	8004ca6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ca4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0220 	orr.w	r2, r2, #32
 8004cb4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f042 0202 	orr.w	r2, r2, #2
 8004cc4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	08004f9d 	.word	0x08004f9d
 8004cdc:	08004ef5 	.word	0x08004ef5
 8004ce0:	08004fb9 	.word	0x08004fb9

08004ce4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10e      	bne.n	8004d24 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d009      	beq.n	8004d24 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d004      	beq.n	8004d24 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	4798      	blx	r3
    return;
 8004d22:	e0ce      	b.n	8004ec2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <HAL_SPI_IRQHandler+0x5e>
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d004      	beq.n	8004d42 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	4798      	blx	r3
    return;
 8004d40:	e0bf      	b.n	8004ec2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <HAL_SPI_IRQHandler+0x7e>
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d105      	bne.n	8004d62 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80b0 	beq.w	8004ec2 <HAL_SPI_IRQHandler+0x1de>
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80aa 	beq.w	8004ec2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d023      	beq.n	8004dc0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d011      	beq.n	8004da8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d88:	f043 0204 	orr.w	r2, r3, #4
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	e00b      	b.n	8004dc0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004da8:	2300      	movs	r3, #0
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	613b      	str	r3, [r7, #16]
 8004dbc:	693b      	ldr	r3, [r7, #16]
        return;
 8004dbe:	e080      	b.n	8004ec2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d014      	beq.n	8004df4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dce:	f043 0201 	orr.w	r2, r3, #1
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00c      	beq.n	8004e18 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e02:	f043 0208 	orr.w	r2, r3, #8
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d04f      	beq.n	8004ec0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e2e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d104      	bne.n	8004e4c <HAL_SPI_IRQHandler+0x168>
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d034      	beq.n	8004eb6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0203 	bic.w	r2, r2, #3
 8004e5a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d011      	beq.n	8004e88 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e68:	4a17      	ldr	r2, [pc, #92]	; (8004ec8 <HAL_SPI_IRQHandler+0x1e4>)
 8004e6a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fe fd1d 	bl	80038b0 <HAL_DMA_Abort_IT>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d016      	beq.n	8004ebe <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e94:	4a0c      	ldr	r2, [pc, #48]	; (8004ec8 <HAL_SPI_IRQHandler+0x1e4>)
 8004e96:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fe fd07 	bl	80038b0 <HAL_DMA_Abort_IT>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00a      	beq.n	8004ebe <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004eb4:	e003      	b.n	8004ebe <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f812 	bl	8004ee0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004ebc:	e000      	b.n	8004ec0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004ebe:	bf00      	nop
    return;
 8004ec0:	bf00      	nop
  }
}
 8004ec2:	3720      	adds	r7, #32
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	08004ff9 	.word	0x08004ff9

08004ecc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f00:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f02:	f7fe f9f9 	bl	80032f8 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f16:	d03b      	beq.n	8004f90 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0220 	bic.w	r2, r2, #32
 8004f26:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0202 	bic.w	r2, r2, #2
 8004f36:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	2164      	movs	r1, #100	; 0x64
 8004f3c:	6978      	ldr	r0, [r7, #20]
 8004f3e:	f000 f8f7 	bl	8005130 <SPI_EndRxTxTransaction>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4c:	f043 0220 	orr.w	r2, r3, #32
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2200      	movs	r2, #0
 8004f76:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004f88:	6978      	ldr	r0, [r7, #20]
 8004f8a:	f7ff ffa9 	bl	8004ee0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004f8e:	e002      	b.n	8004f96 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004f90:	6978      	ldr	r0, [r7, #20]
 8004f92:	f7fe f90f 	bl	80031b4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f7ff ff8e 	bl	8004ecc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004fb0:	bf00      	nop
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0203 	bic.w	r2, r2, #3
 8004fd4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fda:	f043 0210 	orr.w	r2, r3, #16
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f7ff ff78 	bl	8004ee0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ff0:	bf00      	nop
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f7ff ff64 	bl	8004ee0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005018:	bf00      	nop
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	4613      	mov	r3, r2
 800502e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005030:	f7fe f962 	bl	80032f8 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	1a9b      	subs	r3, r3, r2
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	4413      	add	r3, r2
 800503e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005040:	f7fe f95a 	bl	80032f8 <HAL_GetTick>
 8005044:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005046:	4b39      	ldr	r3, [pc, #228]	; (800512c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	015b      	lsls	r3, r3, #5
 800504c:	0d1b      	lsrs	r3, r3, #20
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	fb02 f303 	mul.w	r3, r2, r3
 8005054:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005056:	e054      	b.n	8005102 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505e:	d050      	beq.n	8005102 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005060:	f7fe f94a 	bl	80032f8 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	429a      	cmp	r2, r3
 800506e:	d902      	bls.n	8005076 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d13d      	bne.n	80050f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005084:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800508e:	d111      	bne.n	80050b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005098:	d004      	beq.n	80050a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a2:	d107      	bne.n	80050b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050bc:	d10f      	bne.n	80050de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e017      	b.n	8005122 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	3b01      	subs	r3, #1
 8005100:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4013      	ands	r3, r2
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	429a      	cmp	r2, r3
 8005110:	bf0c      	ite	eq
 8005112:	2301      	moveq	r3, #1
 8005114:	2300      	movne	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	461a      	mov	r2, r3
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	429a      	cmp	r2, r3
 800511e:	d19b      	bne.n	8005058 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3720      	adds	r7, #32
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000040 	.word	0x20000040

08005130 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800513c:	4b1b      	ldr	r3, [pc, #108]	; (80051ac <SPI_EndRxTxTransaction+0x7c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1b      	ldr	r2, [pc, #108]	; (80051b0 <SPI_EndRxTxTransaction+0x80>)
 8005142:	fba2 2303 	umull	r2, r3, r2, r3
 8005146:	0d5b      	lsrs	r3, r3, #21
 8005148:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800514c:	fb02 f303 	mul.w	r3, r2, r3
 8005150:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800515a:	d112      	bne.n	8005182 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2200      	movs	r2, #0
 8005164:	2180      	movs	r1, #128	; 0x80
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f7ff ff5a 	bl	8005020 <SPI_WaitFlagStateUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d016      	beq.n	80051a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e00f      	b.n	80051a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	3b01      	subs	r3, #1
 800518c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005198:	2b80      	cmp	r3, #128	; 0x80
 800519a:	d0f2      	beq.n	8005182 <SPI_EndRxTxTransaction+0x52>
 800519c:	e000      	b.n	80051a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800519e:	bf00      	nop
  }

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000040 	.word	0x20000040
 80051b0:	165e9f81 	.word	0x165e9f81

080051b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e041      	b.n	800524a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fd fd8c 	bl	8002cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3304      	adds	r3, #4
 80051f0:	4619      	mov	r1, r3
 80051f2:	4610      	mov	r0, r2
 80051f4:	f000 fef4 	bl	8005fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b01      	cmp	r3, #1
 8005266:	d001      	beq.n	800526c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e044      	b.n	80052f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a1e      	ldr	r2, [pc, #120]	; (8005304 <HAL_TIM_Base_Start_IT+0xb0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d018      	beq.n	80052c0 <HAL_TIM_Base_Start_IT+0x6c>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005296:	d013      	beq.n	80052c0 <HAL_TIM_Base_Start_IT+0x6c>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1a      	ldr	r2, [pc, #104]	; (8005308 <HAL_TIM_Base_Start_IT+0xb4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00e      	beq.n	80052c0 <HAL_TIM_Base_Start_IT+0x6c>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a19      	ldr	r2, [pc, #100]	; (800530c <HAL_TIM_Base_Start_IT+0xb8>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d009      	beq.n	80052c0 <HAL_TIM_Base_Start_IT+0x6c>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a17      	ldr	r2, [pc, #92]	; (8005310 <HAL_TIM_Base_Start_IT+0xbc>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d004      	beq.n	80052c0 <HAL_TIM_Base_Start_IT+0x6c>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a16      	ldr	r2, [pc, #88]	; (8005314 <HAL_TIM_Base_Start_IT+0xc0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d111      	bne.n	80052e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b06      	cmp	r3, #6
 80052d0:	d010      	beq.n	80052f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0201 	orr.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e2:	e007      	b.n	80052f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40010000 	.word	0x40010000
 8005308:	40000400 	.word	0x40000400
 800530c:	40000800 	.word	0x40000800
 8005310:	40000c00 	.word	0x40000c00
 8005314:	40014000 	.word	0x40014000

08005318 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e041      	b.n	80053ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d106      	bne.n	8005344 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f839 	bl	80053b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3304      	adds	r3, #4
 8005354:	4619      	mov	r1, r3
 8005356:	4610      	mov	r0, r2
 8005358:	f000 fe42 	bl	8005fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
	...

080053cc <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d109      	bne.n	80053f8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	bf0c      	ite	eq
 80053f0:	2301      	moveq	r3, #1
 80053f2:	2300      	movne	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	e022      	b.n	800543e <HAL_TIM_PWM_Start_DMA+0x72>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d109      	bne.n	8005412 <HAL_TIM_PWM_Start_DMA+0x46>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	bf0c      	ite	eq
 800540a:	2301      	moveq	r3, #1
 800540c:	2300      	movne	r3, #0
 800540e:	b2db      	uxtb	r3, r3
 8005410:	e015      	b.n	800543e <HAL_TIM_PWM_Start_DMA+0x72>
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2b08      	cmp	r3, #8
 8005416:	d109      	bne.n	800542c <HAL_TIM_PWM_Start_DMA+0x60>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	bf0c      	ite	eq
 8005424:	2301      	moveq	r3, #1
 8005426:	2300      	movne	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	e008      	b.n	800543e <HAL_TIM_PWM_Start_DMA+0x72>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	bf0c      	ite	eq
 8005438:	2301      	moveq	r3, #1
 800543a:	2300      	movne	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005442:	2302      	movs	r3, #2
 8005444:	e15d      	b.n	8005702 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d109      	bne.n	8005460 <HAL_TIM_PWM_Start_DMA+0x94>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b01      	cmp	r3, #1
 8005456:	bf0c      	ite	eq
 8005458:	2301      	moveq	r3, #1
 800545a:	2300      	movne	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	e022      	b.n	80054a6 <HAL_TIM_PWM_Start_DMA+0xda>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b04      	cmp	r3, #4
 8005464:	d109      	bne.n	800547a <HAL_TIM_PWM_Start_DMA+0xae>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b01      	cmp	r3, #1
 8005470:	bf0c      	ite	eq
 8005472:	2301      	moveq	r3, #1
 8005474:	2300      	movne	r3, #0
 8005476:	b2db      	uxtb	r3, r3
 8005478:	e015      	b.n	80054a6 <HAL_TIM_PWM_Start_DMA+0xda>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b08      	cmp	r3, #8
 800547e:	d109      	bne.n	8005494 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b01      	cmp	r3, #1
 800548a:	bf0c      	ite	eq
 800548c:	2301      	moveq	r3, #1
 800548e:	2300      	movne	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	e008      	b.n	80054a6 <HAL_TIM_PWM_Start_DMA+0xda>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b01      	cmp	r3, #1
 800549e:	bf0c      	ite	eq
 80054a0:	2301      	moveq	r3, #1
 80054a2:	2300      	movne	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d024      	beq.n	80054f4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d104      	bne.n	80054ba <HAL_TIM_PWM_Start_DMA+0xee>
 80054b0:	887b      	ldrh	r3, [r7, #2]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e123      	b.n	8005702 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d104      	bne.n	80054ca <HAL_TIM_PWM_Start_DMA+0xfe>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054c8:	e016      	b.n	80054f8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d104      	bne.n	80054da <HAL_TIM_PWM_Start_DMA+0x10e>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054d8:	e00e      	b.n	80054f8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b08      	cmp	r3, #8
 80054de:	d104      	bne.n	80054ea <HAL_TIM_PWM_Start_DMA+0x11e>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054e8:	e006      	b.n	80054f8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2202      	movs	r2, #2
 80054ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054f2:	e001      	b.n	80054f8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e104      	b.n	8005702 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2b0c      	cmp	r3, #12
 80054fc:	f200 80ae 	bhi.w	800565c <HAL_TIM_PWM_Start_DMA+0x290>
 8005500:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	0800553d 	.word	0x0800553d
 800550c:	0800565d 	.word	0x0800565d
 8005510:	0800565d 	.word	0x0800565d
 8005514:	0800565d 	.word	0x0800565d
 8005518:	08005585 	.word	0x08005585
 800551c:	0800565d 	.word	0x0800565d
 8005520:	0800565d 	.word	0x0800565d
 8005524:	0800565d 	.word	0x0800565d
 8005528:	080055cd 	.word	0x080055cd
 800552c:	0800565d 	.word	0x0800565d
 8005530:	0800565d 	.word	0x0800565d
 8005534:	0800565d 	.word	0x0800565d
 8005538:	08005615 	.word	0x08005615
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	4a72      	ldr	r2, [pc, #456]	; (800570c <HAL_TIM_PWM_Start_DMA+0x340>)
 8005542:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	4a71      	ldr	r2, [pc, #452]	; (8005710 <HAL_TIM_PWM_Start_DMA+0x344>)
 800554a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	4a70      	ldr	r2, [pc, #448]	; (8005714 <HAL_TIM_PWM_Start_DMA+0x348>)
 8005552:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3334      	adds	r3, #52	; 0x34
 8005560:	461a      	mov	r2, r3
 8005562:	887b      	ldrh	r3, [r7, #2]
 8005564:	f7fe f8dc 	bl	8003720 <HAL_DMA_Start_IT>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e0c7      	b.n	8005702 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005580:	60da      	str	r2, [r3, #12]
      break;
 8005582:	e06e      	b.n	8005662 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005588:	4a60      	ldr	r2, [pc, #384]	; (800570c <HAL_TIM_PWM_Start_DMA+0x340>)
 800558a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	4a5f      	ldr	r2, [pc, #380]	; (8005710 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005592:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005598:	4a5e      	ldr	r2, [pc, #376]	; (8005714 <HAL_TIM_PWM_Start_DMA+0x348>)
 800559a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80055a0:	6879      	ldr	r1, [r7, #4]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3338      	adds	r3, #56	; 0x38
 80055a8:	461a      	mov	r2, r3
 80055aa:	887b      	ldrh	r3, [r7, #2]
 80055ac:	f7fe f8b8 	bl	8003720 <HAL_DMA_Start_IT>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e0a3      	b.n	8005702 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055c8:	60da      	str	r2, [r3, #12]
      break;
 80055ca:	e04a      	b.n	8005662 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	4a4e      	ldr	r2, [pc, #312]	; (800570c <HAL_TIM_PWM_Start_DMA+0x340>)
 80055d2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d8:	4a4d      	ldr	r2, [pc, #308]	; (8005710 <HAL_TIM_PWM_Start_DMA+0x344>)
 80055da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	4a4c      	ldr	r2, [pc, #304]	; (8005714 <HAL_TIM_PWM_Start_DMA+0x348>)
 80055e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	333c      	adds	r3, #60	; 0x3c
 80055f0:	461a      	mov	r2, r3
 80055f2:	887b      	ldrh	r3, [r7, #2]
 80055f4:	f7fe f894 	bl	8003720 <HAL_DMA_Start_IT>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e07f      	b.n	8005702 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005610:	60da      	str	r2, [r3, #12]
      break;
 8005612:	e026      	b.n	8005662 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	4a3c      	ldr	r2, [pc, #240]	; (800570c <HAL_TIM_PWM_Start_DMA+0x340>)
 800561a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005620:	4a3b      	ldr	r2, [pc, #236]	; (8005710 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005622:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005628:	4a3a      	ldr	r2, [pc, #232]	; (8005714 <HAL_TIM_PWM_Start_DMA+0x348>)
 800562a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3340      	adds	r3, #64	; 0x40
 8005638:	461a      	mov	r2, r3
 800563a:	887b      	ldrh	r3, [r7, #2]
 800563c:	f7fe f870 	bl	8003720 <HAL_DMA_Start_IT>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e05b      	b.n	8005702 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005658:	60da      	str	r2, [r3, #12]
      break;
 800565a:	e002      	b.n	8005662 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	75fb      	strb	r3, [r7, #23]
      break;
 8005660:	bf00      	nop
  }

  if (status == HAL_OK)
 8005662:	7dfb      	ldrb	r3, [r7, #23]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d14b      	bne.n	8005700 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2201      	movs	r2, #1
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	4618      	mov	r0, r3
 8005672:	f000 ff5b 	bl	800652c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a27      	ldr	r2, [pc, #156]	; (8005718 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d107      	bne.n	8005690 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800568e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a20      	ldr	r2, [pc, #128]	; (8005718 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d018      	beq.n	80056cc <HAL_TIM_PWM_Start_DMA+0x300>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a2:	d013      	beq.n	80056cc <HAL_TIM_PWM_Start_DMA+0x300>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1c      	ldr	r2, [pc, #112]	; (800571c <HAL_TIM_PWM_Start_DMA+0x350>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00e      	beq.n	80056cc <HAL_TIM_PWM_Start_DMA+0x300>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1b      	ldr	r2, [pc, #108]	; (8005720 <HAL_TIM_PWM_Start_DMA+0x354>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d009      	beq.n	80056cc <HAL_TIM_PWM_Start_DMA+0x300>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a19      	ldr	r2, [pc, #100]	; (8005724 <HAL_TIM_PWM_Start_DMA+0x358>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d004      	beq.n	80056cc <HAL_TIM_PWM_Start_DMA+0x300>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a18      	ldr	r2, [pc, #96]	; (8005728 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d111      	bne.n	80056f0 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	2b06      	cmp	r3, #6
 80056dc:	d010      	beq.n	8005700 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f042 0201 	orr.w	r2, r2, #1
 80056ec:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ee:	e007      	b.n	8005700 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0201 	orr.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005700:	7dfb      	ldrb	r3, [r7, #23]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	08005ed1 	.word	0x08005ed1
 8005710:	08005f79 	.word	0x08005f79
 8005714:	08005e3f 	.word	0x08005e3f
 8005718:	40010000 	.word	0x40010000
 800571c:	40000400 	.word	0x40000400
 8005720:	40000800 	.word	0x40000800
 8005724:	40000c00 	.word	0x40000c00
 8005728:	40014000 	.word	0x40014000

0800572c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b0c      	cmp	r3, #12
 800573e:	d855      	bhi.n	80057ec <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005740:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	0800577d 	.word	0x0800577d
 800574c:	080057ed 	.word	0x080057ed
 8005750:	080057ed 	.word	0x080057ed
 8005754:	080057ed 	.word	0x080057ed
 8005758:	08005799 	.word	0x08005799
 800575c:	080057ed 	.word	0x080057ed
 8005760:	080057ed 	.word	0x080057ed
 8005764:	080057ed 	.word	0x080057ed
 8005768:	080057b5 	.word	0x080057b5
 800576c:	080057ed 	.word	0x080057ed
 8005770:	080057ed 	.word	0x080057ed
 8005774:	080057ed 	.word	0x080057ed
 8005778:	080057d1 	.word	0x080057d1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800578a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	4618      	mov	r0, r3
 8005792:	f7fe f88d 	bl	80038b0 <HAL_DMA_Abort_IT>
      break;
 8005796:	e02c      	b.n	80057f2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fe f87f 	bl	80038b0 <HAL_DMA_Abort_IT>
      break;
 80057b2:	e01e      	b.n	80057f2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fe f871 	bl	80038b0 <HAL_DMA_Abort_IT>
      break;
 80057ce:	e010      	b.n	80057f2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fe f863 	bl	80038b0 <HAL_DMA_Abort_IT>
      break;
 80057ea:	e002      	b.n	80057f2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
      break;
 80057f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d157      	bne.n	80058a8 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2200      	movs	r2, #0
 80057fe:	6839      	ldr	r1, [r7, #0]
 8005800:	4618      	mov	r0, r3
 8005802:	f000 fe93 	bl	800652c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a2a      	ldr	r2, [pc, #168]	; (80058b4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d117      	bne.n	8005840 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6a1a      	ldr	r2, [r3, #32]
 8005816:	f241 1311 	movw	r3, #4369	; 0x1111
 800581a:	4013      	ands	r3, r2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10f      	bne.n	8005840 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6a1a      	ldr	r2, [r3, #32]
 8005826:	f240 4344 	movw	r3, #1092	; 0x444
 800582a:	4013      	ands	r3, r2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d107      	bne.n	8005840 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800583e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6a1a      	ldr	r2, [r3, #32]
 8005846:	f241 1311 	movw	r3, #4369	; 0x1111
 800584a:	4013      	ands	r3, r2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10f      	bne.n	8005870 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6a1a      	ldr	r2, [r3, #32]
 8005856:	f240 4344 	movw	r3, #1092	; 0x444
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d107      	bne.n	8005870 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0201 	bic.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d104      	bne.n	8005880 <HAL_TIM_PWM_Stop_DMA+0x154>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800587e:	e013      	b.n	80058a8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b04      	cmp	r3, #4
 8005884:	d104      	bne.n	8005890 <HAL_TIM_PWM_Stop_DMA+0x164>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800588e:	e00b      	b.n	80058a8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b08      	cmp	r3, #8
 8005894:	d104      	bne.n	80058a0 <HAL_TIM_PWM_Stop_DMA+0x174>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800589e:	e003      	b.n	80058a8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40010000 	.word	0x40010000

080058b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d122      	bne.n	8005914 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d11b      	bne.n	8005914 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0202 	mvn.w	r2, #2
 80058e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fa77 	bl	8005dee <HAL_TIM_IC_CaptureCallback>
 8005900:	e005      	b.n	800590e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fa69 	bl	8005dda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7fb f8e9 	bl	8000ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b04      	cmp	r3, #4
 8005920:	d122      	bne.n	8005968 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b04      	cmp	r3, #4
 800592e:	d11b      	bne.n	8005968 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0204 	mvn.w	r2, #4
 8005938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2202      	movs	r2, #2
 800593e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fa4d 	bl	8005dee <HAL_TIM_IC_CaptureCallback>
 8005954:	e005      	b.n	8005962 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fa3f 	bl	8005dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7fb f8bf 	bl	8000ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b08      	cmp	r3, #8
 8005974:	d122      	bne.n	80059bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b08      	cmp	r3, #8
 8005982:	d11b      	bne.n	80059bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0208 	mvn.w	r2, #8
 800598c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2204      	movs	r2, #4
 8005992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fa23 	bl	8005dee <HAL_TIM_IC_CaptureCallback>
 80059a8:	e005      	b.n	80059b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fa15 	bl	8005dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7fb f895 	bl	8000ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0310 	and.w	r3, r3, #16
 80059c6:	2b10      	cmp	r3, #16
 80059c8:	d122      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 0310 	and.w	r3, r3, #16
 80059d4:	2b10      	cmp	r3, #16
 80059d6:	d11b      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0210 	mvn.w	r2, #16
 80059e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2208      	movs	r2, #8
 80059e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f9f9 	bl	8005dee <HAL_TIM_IC_CaptureCallback>
 80059fc:	e005      	b.n	8005a0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f9eb 	bl	8005dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7fb f86b 	bl	8000ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d10e      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d107      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0201 	mvn.w	r2, #1
 8005a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7fb f8a6 	bl	8000b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a46:	2b80      	cmp	r3, #128	; 0x80
 8005a48:	d10e      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a54:	2b80      	cmp	r3, #128	; 0x80
 8005a56:	d107      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fe00 	bl	8006668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b40      	cmp	r3, #64	; 0x40
 8005a74:	d10e      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a80:	2b40      	cmp	r3, #64	; 0x40
 8005a82:	d107      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f9c1 	bl	8005e16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0320 	and.w	r3, r3, #32
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	d10e      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	d107      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0220 	mvn.w	r2, #32
 8005ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fdca 	bl	8006654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ac0:	bf00      	nop
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e0ae      	b.n	8005c44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b0c      	cmp	r3, #12
 8005af2:	f200 809f 	bhi.w	8005c34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005af6:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afc:	08005b31 	.word	0x08005b31
 8005b00:	08005c35 	.word	0x08005c35
 8005b04:	08005c35 	.word	0x08005c35
 8005b08:	08005c35 	.word	0x08005c35
 8005b0c:	08005b71 	.word	0x08005b71
 8005b10:	08005c35 	.word	0x08005c35
 8005b14:	08005c35 	.word	0x08005c35
 8005b18:	08005c35 	.word	0x08005c35
 8005b1c:	08005bb3 	.word	0x08005bb3
 8005b20:	08005c35 	.word	0x08005c35
 8005b24:	08005c35 	.word	0x08005c35
 8005b28:	08005c35 	.word	0x08005c35
 8005b2c:	08005bf3 	.word	0x08005bf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68b9      	ldr	r1, [r7, #8]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fad2 	bl	80060e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0208 	orr.w	r2, r2, #8
 8005b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0204 	bic.w	r2, r2, #4
 8005b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6999      	ldr	r1, [r3, #24]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	691a      	ldr	r2, [r3, #16]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	619a      	str	r2, [r3, #24]
      break;
 8005b6e:	e064      	b.n	8005c3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68b9      	ldr	r1, [r7, #8]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fb18 	bl	80061ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699a      	ldr	r2, [r3, #24]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6999      	ldr	r1, [r3, #24]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	021a      	lsls	r2, r3, #8
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	619a      	str	r2, [r3, #24]
      break;
 8005bb0:	e043      	b.n	8005c3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68b9      	ldr	r1, [r7, #8]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 fb63 	bl	8006284 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69da      	ldr	r2, [r3, #28]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0208 	orr.w	r2, r2, #8
 8005bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69da      	ldr	r2, [r3, #28]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0204 	bic.w	r2, r2, #4
 8005bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69d9      	ldr	r1, [r3, #28]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	61da      	str	r2, [r3, #28]
      break;
 8005bf0:	e023      	b.n	8005c3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fbad 	bl	8006358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69da      	ldr	r2, [r3, #28]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69d9      	ldr	r1, [r3, #28]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	021a      	lsls	r2, r3, #8
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	61da      	str	r2, [r3, #28]
      break;
 8005c32:	e002      	b.n	8005c3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	75fb      	strb	r3, [r7, #23]
      break;
 8005c38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_TIM_ConfigClockSource+0x1c>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e0b4      	b.n	8005dd2 <HAL_TIM_ConfigClockSource+0x186>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ca0:	d03e      	beq.n	8005d20 <HAL_TIM_ConfigClockSource+0xd4>
 8005ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ca6:	f200 8087 	bhi.w	8005db8 <HAL_TIM_ConfigClockSource+0x16c>
 8005caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cae:	f000 8086 	beq.w	8005dbe <HAL_TIM_ConfigClockSource+0x172>
 8005cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb6:	d87f      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb8:	2b70      	cmp	r3, #112	; 0x70
 8005cba:	d01a      	beq.n	8005cf2 <HAL_TIM_ConfigClockSource+0xa6>
 8005cbc:	2b70      	cmp	r3, #112	; 0x70
 8005cbe:	d87b      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc0:	2b60      	cmp	r3, #96	; 0x60
 8005cc2:	d050      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x11a>
 8005cc4:	2b60      	cmp	r3, #96	; 0x60
 8005cc6:	d877      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc8:	2b50      	cmp	r3, #80	; 0x50
 8005cca:	d03c      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0xfa>
 8005ccc:	2b50      	cmp	r3, #80	; 0x50
 8005cce:	d873      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd0:	2b40      	cmp	r3, #64	; 0x40
 8005cd2:	d058      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0x13a>
 8005cd4:	2b40      	cmp	r3, #64	; 0x40
 8005cd6:	d86f      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd8:	2b30      	cmp	r3, #48	; 0x30
 8005cda:	d064      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0x15a>
 8005cdc:	2b30      	cmp	r3, #48	; 0x30
 8005cde:	d86b      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	d060      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0x15a>
 8005ce4:	2b20      	cmp	r3, #32
 8005ce6:	d867      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d05c      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0x15a>
 8005cec:	2b10      	cmp	r3, #16
 8005cee:	d05a      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0x15a>
 8005cf0:	e062      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	6899      	ldr	r1, [r3, #8]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f000 fbf3 	bl	80064ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	609a      	str	r2, [r3, #8]
      break;
 8005d1e:	e04f      	b.n	8005dc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6818      	ldr	r0, [r3, #0]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	6899      	ldr	r1, [r3, #8]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f000 fbdc 	bl	80064ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d42:	609a      	str	r2, [r3, #8]
      break;
 8005d44:	e03c      	b.n	8005dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	6859      	ldr	r1, [r3, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	461a      	mov	r2, r3
 8005d54:	f000 fb50 	bl	80063f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2150      	movs	r1, #80	; 0x50
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fba9 	bl	80064b6 <TIM_ITRx_SetConfig>
      break;
 8005d64:	e02c      	b.n	8005dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6818      	ldr	r0, [r3, #0]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	6859      	ldr	r1, [r3, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	461a      	mov	r2, r3
 8005d74:	f000 fb6f 	bl	8006456 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2160      	movs	r1, #96	; 0x60
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 fb99 	bl	80064b6 <TIM_ITRx_SetConfig>
      break;
 8005d84:	e01c      	b.n	8005dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6818      	ldr	r0, [r3, #0]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	6859      	ldr	r1, [r3, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	461a      	mov	r2, r3
 8005d94:	f000 fb30 	bl	80063f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2140      	movs	r1, #64	; 0x40
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fb89 	bl	80064b6 <TIM_ITRx_SetConfig>
      break;
 8005da4:	e00c      	b.n	8005dc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4619      	mov	r1, r3
 8005db0:	4610      	mov	r0, r2
 8005db2:	f000 fb80 	bl	80064b6 <TIM_ITRx_SetConfig>
      break;
 8005db6:	e003      	b.n	8005dc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	73fb      	strb	r3, [r7, #15]
      break;
 8005dbc:	e000      	b.n	8005dc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b083      	sub	sp, #12
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005df6:	bf00      	nop
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d107      	bne.n	8005e66 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e64:	e02a      	b.n	8005ebc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d107      	bne.n	8005e80 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2202      	movs	r2, #2
 8005e74:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e7e:	e01d      	b.n	8005ebc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d107      	bne.n	8005e9a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e98:	e010      	b.n	8005ebc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d107      	bne.n	8005eb4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2208      	movs	r2, #8
 8005ea8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005eb2:	e003      	b.n	8005ebc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f7ff ffb4 	bl	8005e2a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	771a      	strb	r2, [r3, #28]
}
 8005ec8:	bf00      	nop
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005edc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d10b      	bne.n	8005f00 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2201      	movs	r2, #1
 8005eec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d136      	bne.n	8005f64 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005efe:	e031      	b.n	8005f64 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d10b      	bne.n	8005f22 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	69db      	ldr	r3, [r3, #28]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d125      	bne.n	8005f64 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f20:	e020      	b.n	8005f64 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d10b      	bne.n	8005f44 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2204      	movs	r2, #4
 8005f30:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d114      	bne.n	8005f64 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f42:	e00f      	b.n	8005f64 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d10a      	bne.n	8005f64 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2208      	movs	r2, #8
 8005f52:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d103      	bne.n	8005f64 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f7fa fdbb 	bl	8000ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	771a      	strb	r2, [r3, #28]
}
 8005f70:	bf00      	nop
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d103      	bne.n	8005f98 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2201      	movs	r2, #1
 8005f94:	771a      	strb	r2, [r3, #28]
 8005f96:	e019      	b.n	8005fcc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d103      	bne.n	8005faa <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	771a      	strb	r2, [r3, #28]
 8005fa8:	e010      	b.n	8005fcc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d103      	bne.n	8005fbc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2204      	movs	r2, #4
 8005fb8:	771a      	strb	r2, [r3, #28]
 8005fba:	e007      	b.n	8005fcc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d102      	bne.n	8005fcc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2208      	movs	r2, #8
 8005fca:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f7ff ff18 	bl	8005e02 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	771a      	strb	r2, [r3, #28]
}
 8005fd8:	bf00      	nop
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a34      	ldr	r2, [pc, #208]	; (80060c4 <TIM_Base_SetConfig+0xe4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00f      	beq.n	8006018 <TIM_Base_SetConfig+0x38>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffe:	d00b      	beq.n	8006018 <TIM_Base_SetConfig+0x38>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a31      	ldr	r2, [pc, #196]	; (80060c8 <TIM_Base_SetConfig+0xe8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d007      	beq.n	8006018 <TIM_Base_SetConfig+0x38>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a30      	ldr	r2, [pc, #192]	; (80060cc <TIM_Base_SetConfig+0xec>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d003      	beq.n	8006018 <TIM_Base_SetConfig+0x38>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a2f      	ldr	r2, [pc, #188]	; (80060d0 <TIM_Base_SetConfig+0xf0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d108      	bne.n	800602a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a25      	ldr	r2, [pc, #148]	; (80060c4 <TIM_Base_SetConfig+0xe4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d01b      	beq.n	800606a <TIM_Base_SetConfig+0x8a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006038:	d017      	beq.n	800606a <TIM_Base_SetConfig+0x8a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a22      	ldr	r2, [pc, #136]	; (80060c8 <TIM_Base_SetConfig+0xe8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d013      	beq.n	800606a <TIM_Base_SetConfig+0x8a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a21      	ldr	r2, [pc, #132]	; (80060cc <TIM_Base_SetConfig+0xec>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00f      	beq.n	800606a <TIM_Base_SetConfig+0x8a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a20      	ldr	r2, [pc, #128]	; (80060d0 <TIM_Base_SetConfig+0xf0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d00b      	beq.n	800606a <TIM_Base_SetConfig+0x8a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a1f      	ldr	r2, [pc, #124]	; (80060d4 <TIM_Base_SetConfig+0xf4>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d007      	beq.n	800606a <TIM_Base_SetConfig+0x8a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a1e      	ldr	r2, [pc, #120]	; (80060d8 <TIM_Base_SetConfig+0xf8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d003      	beq.n	800606a <TIM_Base_SetConfig+0x8a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a1d      	ldr	r2, [pc, #116]	; (80060dc <TIM_Base_SetConfig+0xfc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d108      	bne.n	800607c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a08      	ldr	r2, [pc, #32]	; (80060c4 <TIM_Base_SetConfig+0xe4>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d103      	bne.n	80060b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	691a      	ldr	r2, [r3, #16]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	615a      	str	r2, [r3, #20]
}
 80060b6:	bf00      	nop
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40010000 	.word	0x40010000
 80060c8:	40000400 	.word	0x40000400
 80060cc:	40000800 	.word	0x40000800
 80060d0:	40000c00 	.word	0x40000c00
 80060d4:	40014000 	.word	0x40014000
 80060d8:	40014400 	.word	0x40014400
 80060dc:	40014800 	.word	0x40014800

080060e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	f023 0201 	bic.w	r2, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0303 	bic.w	r3, r3, #3
 8006116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f023 0302 	bic.w	r3, r3, #2
 8006128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a1c      	ldr	r2, [pc, #112]	; (80061a8 <TIM_OC1_SetConfig+0xc8>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d10c      	bne.n	8006156 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f023 0308 	bic.w	r3, r3, #8
 8006142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f023 0304 	bic.w	r3, r3, #4
 8006154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a13      	ldr	r2, [pc, #76]	; (80061a8 <TIM_OC1_SetConfig+0xc8>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d111      	bne.n	8006182 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800616c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	621a      	str	r2, [r3, #32]
}
 800619c:	bf00      	nop
 800619e:	371c      	adds	r7, #28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	40010000 	.word	0x40010000

080061ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	f023 0210 	bic.w	r2, r3, #16
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	021b      	lsls	r3, r3, #8
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f023 0320 	bic.w	r3, r3, #32
 80061f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	011b      	lsls	r3, r3, #4
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	4313      	orrs	r3, r2
 8006202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a1e      	ldr	r2, [pc, #120]	; (8006280 <TIM_OC2_SetConfig+0xd4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d10d      	bne.n	8006228 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	4313      	orrs	r3, r2
 800621e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006226:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a15      	ldr	r2, [pc, #84]	; (8006280 <TIM_OC2_SetConfig+0xd4>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d113      	bne.n	8006258 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006236:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800623e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	4313      	orrs	r3, r2
 800624a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	621a      	str	r2, [r3, #32]
}
 8006272:	bf00      	nop
 8006274:	371c      	adds	r7, #28
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40010000 	.word	0x40010000

08006284 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0303 	bic.w	r3, r3, #3
 80062ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	021b      	lsls	r3, r3, #8
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a1d      	ldr	r2, [pc, #116]	; (8006354 <TIM_OC3_SetConfig+0xd0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d10d      	bne.n	80062fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	021b      	lsls	r3, r3, #8
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a14      	ldr	r2, [pc, #80]	; (8006354 <TIM_OC3_SetConfig+0xd0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d113      	bne.n	800632e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800630c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	011b      	lsls	r3, r3, #4
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	4313      	orrs	r3, r2
 8006320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	4313      	orrs	r3, r2
 800632c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	621a      	str	r2, [r3, #32]
}
 8006348:	bf00      	nop
 800634a:	371c      	adds	r7, #28
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	40010000 	.word	0x40010000

08006358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800638e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	031b      	lsls	r3, r3, #12
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a10      	ldr	r2, [pc, #64]	; (80063f4 <TIM_OC4_SetConfig+0x9c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d109      	bne.n	80063cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	019b      	lsls	r3, r3, #6
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	621a      	str	r2, [r3, #32]
}
 80063e6:	bf00      	nop
 80063e8:	371c      	adds	r7, #28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	40010000 	.word	0x40010000

080063f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b087      	sub	sp, #28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a1b      	ldr	r3, [r3, #32]
 8006408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	f023 0201 	bic.w	r2, r3, #1
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4313      	orrs	r3, r2
 800642c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f023 030a 	bic.w	r3, r3, #10
 8006434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	4313      	orrs	r3, r2
 800643c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	621a      	str	r2, [r3, #32]
}
 800644a:	bf00      	nop
 800644c:	371c      	adds	r7, #28
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006456:	b480      	push	{r7}
 8006458:	b087      	sub	sp, #28
 800645a:	af00      	add	r7, sp, #0
 800645c:	60f8      	str	r0, [r7, #12]
 800645e:	60b9      	str	r1, [r7, #8]
 8006460:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	f023 0210 	bic.w	r2, r3, #16
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006480:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	031b      	lsls	r3, r3, #12
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006492:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	011b      	lsls	r3, r3, #4
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	621a      	str	r2, [r3, #32]
}
 80064aa:	bf00      	nop
 80064ac:	371c      	adds	r7, #28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b085      	sub	sp, #20
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	f043 0307 	orr.w	r3, r3, #7
 80064d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	609a      	str	r2, [r3, #8]
}
 80064e0:	bf00      	nop
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	021a      	lsls	r2, r3, #8
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	431a      	orrs	r2, r3
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	4313      	orrs	r3, r2
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	4313      	orrs	r3, r2
 8006518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	609a      	str	r2, [r3, #8]
}
 8006520:	bf00      	nop
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	2201      	movs	r2, #1
 8006540:	fa02 f303 	lsl.w	r3, r2, r3
 8006544:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6a1a      	ldr	r2, [r3, #32]
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	43db      	mvns	r3, r3
 800654e:	401a      	ands	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6a1a      	ldr	r2, [r3, #32]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f003 031f 	and.w	r3, r3, #31
 800655e:	6879      	ldr	r1, [r7, #4]
 8006560:	fa01 f303 	lsl.w	r3, r1, r3
 8006564:	431a      	orrs	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	621a      	str	r2, [r3, #32]
}
 800656a:	bf00      	nop
 800656c:	371c      	adds	r7, #28
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
	...

08006578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006588:	2b01      	cmp	r3, #1
 800658a:	d101      	bne.n	8006590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800658c:	2302      	movs	r3, #2
 800658e:	e050      	b.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a1c      	ldr	r2, [pc, #112]	; (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d018      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065dc:	d013      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a18      	ldr	r2, [pc, #96]	; (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00e      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a16      	ldr	r2, [pc, #88]	; (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d009      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a15      	ldr	r2, [pc, #84]	; (800664c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d004      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a13      	ldr	r2, [pc, #76]	; (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d10c      	bne.n	8006620 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800660c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	4313      	orrs	r3, r2
 8006616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40010000 	.word	0x40010000
 8006644:	40000400 	.word	0x40000400
 8006648:	40000800 	.word	0x40000800
 800664c:	40000c00 	.word	0x40000c00
 8006650:	40014000 	.word	0x40014000

08006654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e03f      	b.n	800670e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7fc fbd6 	bl	8002e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2224      	movs	r2, #36	; 0x24
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fd19 	bl	80070f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	691a      	ldr	r2, [r3, #16]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	695a      	ldr	r2, [r3, #20]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68da      	ldr	r2, [r3, #12]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006716:	b480      	push	{r7}
 8006718:	b085      	sub	sp, #20
 800671a:	af00      	add	r7, sp, #0
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	4613      	mov	r3, r2
 8006722:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b20      	cmp	r3, #32
 800672e:	d130      	bne.n	8006792 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <HAL_UART_Transmit_IT+0x26>
 8006736:	88fb      	ldrh	r3, [r7, #6]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e029      	b.n	8006794 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006746:	2b01      	cmp	r3, #1
 8006748:	d101      	bne.n	800674e <HAL_UART_Transmit_IT+0x38>
 800674a:	2302      	movs	r3, #2
 800674c:	e022      	b.n	8006794 <HAL_UART_Transmit_IT+0x7e>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	88fa      	ldrh	r2, [r7, #6]
 8006760:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	88fa      	ldrh	r2, [r7, #6]
 8006766:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2221      	movs	r2, #33	; 0x21
 8006772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800678c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	e000      	b.n	8006794 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006792:	2302      	movs	r3, #2
  }
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	4613      	mov	r3, r2
 80067ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	d11d      	bne.n	80067f6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <HAL_UART_Receive_IT+0x26>
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e016      	b.n	80067f8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d101      	bne.n	80067d8 <HAL_UART_Receive_IT+0x38>
 80067d4:	2302      	movs	r3, #2
 80067d6:	e00f      	b.n	80067f8 <HAL_UART_Receive_IT+0x58>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	461a      	mov	r2, r3
 80067ea:	68b9      	ldr	r1, [r7, #8]
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 faab 	bl	8006d48 <UART_Start_Receive_IT>
 80067f2:	4603      	mov	r3, r0
 80067f4:	e000      	b.n	80067f8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80067f6:	2302      	movs	r3, #2
  }
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b0ba      	sub	sp, #232	; 0xe8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006826:	2300      	movs	r3, #0
 8006828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800682c:	2300      	movs	r3, #0
 800682e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006836:	f003 030f 	and.w	r3, r3, #15
 800683a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800683e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10f      	bne.n	8006866 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800684a:	f003 0320 	and.w	r3, r3, #32
 800684e:	2b00      	cmp	r3, #0
 8006850:	d009      	beq.n	8006866 <HAL_UART_IRQHandler+0x66>
 8006852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006856:	f003 0320 	and.w	r3, r3, #32
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fb8f 	bl	8006f82 <UART_Receive_IT>
      return;
 8006864:	e256      	b.n	8006d14 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 80de 	beq.w	8006a2c <HAL_UART_IRQHandler+0x22c>
 8006870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b00      	cmp	r3, #0
 800687a:	d106      	bne.n	800688a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800687c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006880:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 80d1 	beq.w	8006a2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800688a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00b      	beq.n	80068ae <HAL_UART_IRQHandler+0xae>
 8006896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800689a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	f043 0201 	orr.w	r2, r3, #1
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b2:	f003 0304 	and.w	r3, r3, #4
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00b      	beq.n	80068d2 <HAL_UART_IRQHandler+0xd2>
 80068ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d005      	beq.n	80068d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	f043 0202 	orr.w	r2, r3, #2
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00b      	beq.n	80068f6 <HAL_UART_IRQHandler+0xf6>
 80068de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d005      	beq.n	80068f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	f043 0204 	orr.w	r2, r3, #4
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068fa:	f003 0308 	and.w	r3, r3, #8
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d011      	beq.n	8006926 <HAL_UART_IRQHandler+0x126>
 8006902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b00      	cmp	r3, #0
 800690c:	d105      	bne.n	800691a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800690e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	f043 0208 	orr.w	r2, r3, #8
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 81ed 	beq.w	8006d0a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006934:	f003 0320 	and.w	r3, r3, #32
 8006938:	2b00      	cmp	r3, #0
 800693a:	d008      	beq.n	800694e <HAL_UART_IRQHandler+0x14e>
 800693c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006940:	f003 0320 	and.w	r3, r3, #32
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fb1a 	bl	8006f82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006958:	2b40      	cmp	r3, #64	; 0x40
 800695a:	bf0c      	ite	eq
 800695c:	2301      	moveq	r3, #1
 800695e:	2300      	movne	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	2b00      	cmp	r3, #0
 8006970:	d103      	bne.n	800697a <HAL_UART_IRQHandler+0x17a>
 8006972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006976:	2b00      	cmp	r3, #0
 8006978:	d04f      	beq.n	8006a1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa22 	bl	8006dc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698a:	2b40      	cmp	r3, #64	; 0x40
 800698c:	d141      	bne.n	8006a12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3314      	adds	r3, #20
 8006994:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800699c:	e853 3f00 	ldrex	r3, [r3]
 80069a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3314      	adds	r3, #20
 80069b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1d9      	bne.n	800698e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d013      	beq.n	8006a0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e6:	4a7d      	ldr	r2, [pc, #500]	; (8006bdc <HAL_UART_IRQHandler+0x3dc>)
 80069e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fc ff5e 	bl	80038b0 <HAL_DMA_Abort_IT>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d016      	beq.n	8006a28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a04:	4610      	mov	r0, r2
 8006a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a08:	e00e      	b.n	8006a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f986 	bl	8006d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a10:	e00a      	b.n	8006a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f982 	bl	8006d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a18:	e006      	b.n	8006a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f97e 	bl	8006d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a26:	e170      	b.n	8006d0a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a28:	bf00      	nop
    return;
 8006a2a:	e16e      	b.n	8006d0a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	f040 814a 	bne.w	8006cca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a3a:	f003 0310 	and.w	r3, r3, #16
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 8143 	beq.w	8006cca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a48:	f003 0310 	and.w	r3, r3, #16
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 813c 	beq.w	8006cca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a52:	2300      	movs	r3, #0
 8006a54:	60bb      	str	r3, [r7, #8]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	60bb      	str	r3, [r7, #8]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	60bb      	str	r3, [r7, #8]
 8006a66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a72:	2b40      	cmp	r3, #64	; 0x40
 8006a74:	f040 80b4 	bne.w	8006be0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8140 	beq.w	8006d0e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a96:	429a      	cmp	r2, r3
 8006a98:	f080 8139 	bcs.w	8006d0e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006aa2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aae:	f000 8088 	beq.w	8006bc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	330c      	adds	r3, #12
 8006ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	330c      	adds	r3, #12
 8006ada:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ade:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ae2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006aea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1d9      	bne.n	8006ab2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3314      	adds	r3, #20
 8006b04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b10:	f023 0301 	bic.w	r3, r3, #1
 8006b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3314      	adds	r3, #20
 8006b1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e1      	bne.n	8006afe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3314      	adds	r3, #20
 8006b40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3314      	adds	r3, #20
 8006b5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e3      	bne.n	8006b3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	330c      	adds	r3, #12
 8006b86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b92:	f023 0310 	bic.w	r3, r3, #16
 8006b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	330c      	adds	r3, #12
 8006ba0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ba4:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ba6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006baa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e3      	bne.n	8006b80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fc fe07 	bl	80037d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f8ac 	bl	8006d30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bd8:	e099      	b.n	8006d0e <HAL_UART_IRQHandler+0x50e>
 8006bda:	bf00      	nop
 8006bdc:	08006e8b 	.word	0x08006e8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 808b 	beq.w	8006d12 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 8086 	beq.w	8006d12 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c10:	e853 3f00 	ldrex	r3, [r3]
 8006c14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	330c      	adds	r3, #12
 8006c26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c2a:	647a      	str	r2, [r7, #68]	; 0x44
 8006c2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c32:	e841 2300 	strex	r3, r2, [r1]
 8006c36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e3      	bne.n	8006c06 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3314      	adds	r3, #20
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	f023 0301 	bic.w	r3, r3, #1
 8006c54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3314      	adds	r3, #20
 8006c5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c62:	633a      	str	r2, [r7, #48]	; 0x30
 8006c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e3      	bne.n	8006c3e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	330c      	adds	r3, #12
 8006c8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	e853 3f00 	ldrex	r3, [r3]
 8006c92:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f023 0310 	bic.w	r3, r3, #16
 8006c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	330c      	adds	r3, #12
 8006ca4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ca8:	61fa      	str	r2, [r7, #28]
 8006caa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	69b9      	ldr	r1, [r7, #24]
 8006cae:	69fa      	ldr	r2, [r7, #28]
 8006cb0:	e841 2300 	strex	r3, r2, [r1]
 8006cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e3      	bne.n	8006c84 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f834 	bl	8006d30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cc8:	e023      	b.n	8006d12 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d009      	beq.n	8006cea <HAL_UART_IRQHandler+0x4ea>
 8006cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f8e5 	bl	8006eb2 <UART_Transmit_IT>
    return;
 8006ce8:	e014      	b.n	8006d14 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00e      	beq.n	8006d14 <HAL_UART_IRQHandler+0x514>
 8006cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d008      	beq.n	8006d14 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f925 	bl	8006f52 <UART_EndTransmit_IT>
    return;
 8006d08:	e004      	b.n	8006d14 <HAL_UART_IRQHandler+0x514>
    return;
 8006d0a:	bf00      	nop
 8006d0c:	e002      	b.n	8006d14 <HAL_UART_IRQHandler+0x514>
      return;
 8006d0e:	bf00      	nop
 8006d10:	e000      	b.n	8006d14 <HAL_UART_IRQHandler+0x514>
      return;
 8006d12:	bf00      	nop
  }
}
 8006d14:	37e8      	adds	r7, #232	; 0xe8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop

08006d1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	4613      	mov	r3, r2
 8006d54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	88fa      	ldrh	r2, [r7, #6]
 8006d60:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	88fa      	ldrh	r2, [r7, #6]
 8006d66:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2222      	movs	r2, #34	; 0x22
 8006d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d007      	beq.n	8006d96 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d94:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	695a      	ldr	r2, [r3, #20]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f042 0201 	orr.w	r2, r2, #1
 8006da4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68da      	ldr	r2, [r3, #12]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f042 0220 	orr.w	r2, r2, #32
 8006db4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b095      	sub	sp, #84	; 0x54
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	330c      	adds	r3, #12
 8006dd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd6:	e853 3f00 	ldrex	r3, [r3]
 8006dda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	330c      	adds	r3, #12
 8006dea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dec:	643a      	str	r2, [r7, #64]	; 0x40
 8006dee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006df2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e5      	bne.n	8006dcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3314      	adds	r3, #20
 8006e06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	f023 0301 	bic.w	r3, r3, #1
 8006e16:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3314      	adds	r3, #20
 8006e1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e5      	bne.n	8006e00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d119      	bne.n	8006e70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	330c      	adds	r3, #12
 8006e42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	e853 3f00 	ldrex	r3, [r3]
 8006e4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f023 0310 	bic.w	r3, r3, #16
 8006e52:	647b      	str	r3, [r7, #68]	; 0x44
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	330c      	adds	r3, #12
 8006e5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e5c:	61ba      	str	r2, [r7, #24]
 8006e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	6979      	ldr	r1, [r7, #20]
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	e841 2300 	strex	r3, r2, [r1]
 8006e68:	613b      	str	r3, [r7, #16]
   return(result);
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e5      	bne.n	8006e3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2220      	movs	r2, #32
 8006e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e7e:	bf00      	nop
 8006e80:	3754      	adds	r7, #84	; 0x54
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f7ff ff39 	bl	8006d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eaa:	bf00      	nop
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b085      	sub	sp, #20
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b21      	cmp	r3, #33	; 0x21
 8006ec4:	d13e      	bne.n	8006f44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ece:	d114      	bne.n	8006efa <UART_Transmit_IT+0x48>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d110      	bne.n	8006efa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	1c9a      	adds	r2, r3, #2
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	621a      	str	r2, [r3, #32]
 8006ef8:	e008      	b.n	8006f0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	1c59      	adds	r1, r3, #1
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	6211      	str	r1, [r2, #32]
 8006f04:	781a      	ldrb	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10f      	bne.n	8006f40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68da      	ldr	r2, [r3, #12]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	e000      	b.n	8006f46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f44:	2302      	movs	r3, #2
  }
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b082      	sub	sp, #8
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68da      	ldr	r2, [r3, #12]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fb fa20 	bl	80023b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b08c      	sub	sp, #48	; 0x30
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b22      	cmp	r3, #34	; 0x22
 8006f94:	f040 80ab 	bne.w	80070ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa0:	d117      	bne.n	8006fd2 <UART_Receive_IT+0x50>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d113      	bne.n	8006fd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fca:	1c9a      	adds	r2, r3, #2
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	629a      	str	r2, [r3, #40]	; 0x28
 8006fd0:	e026      	b.n	8007020 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe4:	d007      	beq.n	8006ff6 <UART_Receive_IT+0x74>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10a      	bne.n	8007004 <UART_Receive_IT+0x82>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d106      	bne.n	8007004 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007000:	701a      	strb	r2, [r3, #0]
 8007002:	e008      	b.n	8007016 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	b2db      	uxtb	r3, r3
 800700c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007010:	b2da      	uxtb	r2, r3
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b01      	subs	r3, #1
 8007028:	b29b      	uxth	r3, r3
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	4619      	mov	r1, r3
 800702e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007030:	2b00      	cmp	r3, #0
 8007032:	d15a      	bne.n	80070ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0220 	bic.w	r2, r2, #32
 8007042:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68da      	ldr	r2, [r3, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007052:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	695a      	ldr	r2, [r3, #20]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0201 	bic.w	r2, r2, #1
 8007062:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007070:	2b01      	cmp	r3, #1
 8007072:	d135      	bne.n	80070e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	330c      	adds	r3, #12
 8007080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	613b      	str	r3, [r7, #16]
   return(result);
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f023 0310 	bic.w	r3, r3, #16
 8007090:	627b      	str	r3, [r7, #36]	; 0x24
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	330c      	adds	r3, #12
 8007098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800709a:	623a      	str	r2, [r7, #32]
 800709c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709e:	69f9      	ldr	r1, [r7, #28]
 80070a0:	6a3a      	ldr	r2, [r7, #32]
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1e5      	bne.n	800707a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0310 	and.w	r3, r3, #16
 80070b8:	2b10      	cmp	r3, #16
 80070ba:	d10a      	bne.n	80070d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070bc:	2300      	movs	r3, #0
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7ff fe29 	bl	8006d30 <HAL_UARTEx_RxEventCallback>
 80070de:	e002      	b.n	80070e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7fb f939 	bl	8002358 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070e6:	2300      	movs	r3, #0
 80070e8:	e002      	b.n	80070f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	e000      	b.n	80070f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80070ee:	2302      	movs	r3, #2
  }
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3730      	adds	r7, #48	; 0x30
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070fc:	b0c0      	sub	sp, #256	; 0x100
 80070fe:	af00      	add	r7, sp, #0
 8007100:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007114:	68d9      	ldr	r1, [r3, #12]
 8007116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	ea40 0301 	orr.w	r3, r0, r1
 8007120:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	431a      	orrs	r2, r3
 8007130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	431a      	orrs	r2, r3
 8007138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	4313      	orrs	r3, r2
 8007140:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007150:	f021 010c 	bic.w	r1, r1, #12
 8007154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800715e:	430b      	orrs	r3, r1
 8007160:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800716e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007172:	6999      	ldr	r1, [r3, #24]
 8007174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	ea40 0301 	orr.w	r3, r0, r1
 800717e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	4b8f      	ldr	r3, [pc, #572]	; (80073c4 <UART_SetConfig+0x2cc>)
 8007188:	429a      	cmp	r2, r3
 800718a:	d005      	beq.n	8007198 <UART_SetConfig+0xa0>
 800718c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	4b8d      	ldr	r3, [pc, #564]	; (80073c8 <UART_SetConfig+0x2d0>)
 8007194:	429a      	cmp	r2, r3
 8007196:	d104      	bne.n	80071a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007198:	f7fd fc50 	bl	8004a3c <HAL_RCC_GetPCLK2Freq>
 800719c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071a0:	e003      	b.n	80071aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071a2:	f7fd fc37 	bl	8004a14 <HAL_RCC_GetPCLK1Freq>
 80071a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071b4:	f040 810c 	bne.w	80073d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071bc:	2200      	movs	r2, #0
 80071be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80071ca:	4622      	mov	r2, r4
 80071cc:	462b      	mov	r3, r5
 80071ce:	1891      	adds	r1, r2, r2
 80071d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80071d2:	415b      	adcs	r3, r3
 80071d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071da:	4621      	mov	r1, r4
 80071dc:	eb12 0801 	adds.w	r8, r2, r1
 80071e0:	4629      	mov	r1, r5
 80071e2:	eb43 0901 	adc.w	r9, r3, r1
 80071e6:	f04f 0200 	mov.w	r2, #0
 80071ea:	f04f 0300 	mov.w	r3, #0
 80071ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071fa:	4690      	mov	r8, r2
 80071fc:	4699      	mov	r9, r3
 80071fe:	4623      	mov	r3, r4
 8007200:	eb18 0303 	adds.w	r3, r8, r3
 8007204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007208:	462b      	mov	r3, r5
 800720a:	eb49 0303 	adc.w	r3, r9, r3
 800720e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800721e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007222:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007226:	460b      	mov	r3, r1
 8007228:	18db      	adds	r3, r3, r3
 800722a:	653b      	str	r3, [r7, #80]	; 0x50
 800722c:	4613      	mov	r3, r2
 800722e:	eb42 0303 	adc.w	r3, r2, r3
 8007232:	657b      	str	r3, [r7, #84]	; 0x54
 8007234:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007238:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800723c:	f7f9 fad2 	bl	80007e4 <__aeabi_uldivmod>
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
 8007244:	4b61      	ldr	r3, [pc, #388]	; (80073cc <UART_SetConfig+0x2d4>)
 8007246:	fba3 2302 	umull	r2, r3, r3, r2
 800724a:	095b      	lsrs	r3, r3, #5
 800724c:	011c      	lsls	r4, r3, #4
 800724e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007252:	2200      	movs	r2, #0
 8007254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007258:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800725c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007260:	4642      	mov	r2, r8
 8007262:	464b      	mov	r3, r9
 8007264:	1891      	adds	r1, r2, r2
 8007266:	64b9      	str	r1, [r7, #72]	; 0x48
 8007268:	415b      	adcs	r3, r3
 800726a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800726c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007270:	4641      	mov	r1, r8
 8007272:	eb12 0a01 	adds.w	sl, r2, r1
 8007276:	4649      	mov	r1, r9
 8007278:	eb43 0b01 	adc.w	fp, r3, r1
 800727c:	f04f 0200 	mov.w	r2, #0
 8007280:	f04f 0300 	mov.w	r3, #0
 8007284:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007288:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800728c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007290:	4692      	mov	sl, r2
 8007292:	469b      	mov	fp, r3
 8007294:	4643      	mov	r3, r8
 8007296:	eb1a 0303 	adds.w	r3, sl, r3
 800729a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800729e:	464b      	mov	r3, r9
 80072a0:	eb4b 0303 	adc.w	r3, fp, r3
 80072a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072bc:	460b      	mov	r3, r1
 80072be:	18db      	adds	r3, r3, r3
 80072c0:	643b      	str	r3, [r7, #64]	; 0x40
 80072c2:	4613      	mov	r3, r2
 80072c4:	eb42 0303 	adc.w	r3, r2, r3
 80072c8:	647b      	str	r3, [r7, #68]	; 0x44
 80072ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80072d2:	f7f9 fa87 	bl	80007e4 <__aeabi_uldivmod>
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	4611      	mov	r1, r2
 80072dc:	4b3b      	ldr	r3, [pc, #236]	; (80073cc <UART_SetConfig+0x2d4>)
 80072de:	fba3 2301 	umull	r2, r3, r3, r1
 80072e2:	095b      	lsrs	r3, r3, #5
 80072e4:	2264      	movs	r2, #100	; 0x64
 80072e6:	fb02 f303 	mul.w	r3, r2, r3
 80072ea:	1acb      	subs	r3, r1, r3
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80072f2:	4b36      	ldr	r3, [pc, #216]	; (80073cc <UART_SetConfig+0x2d4>)
 80072f4:	fba3 2302 	umull	r2, r3, r3, r2
 80072f8:	095b      	lsrs	r3, r3, #5
 80072fa:	005b      	lsls	r3, r3, #1
 80072fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007300:	441c      	add	r4, r3
 8007302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007306:	2200      	movs	r2, #0
 8007308:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800730c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007310:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007314:	4642      	mov	r2, r8
 8007316:	464b      	mov	r3, r9
 8007318:	1891      	adds	r1, r2, r2
 800731a:	63b9      	str	r1, [r7, #56]	; 0x38
 800731c:	415b      	adcs	r3, r3
 800731e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007320:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007324:	4641      	mov	r1, r8
 8007326:	1851      	adds	r1, r2, r1
 8007328:	6339      	str	r1, [r7, #48]	; 0x30
 800732a:	4649      	mov	r1, r9
 800732c:	414b      	adcs	r3, r1
 800732e:	637b      	str	r3, [r7, #52]	; 0x34
 8007330:	f04f 0200 	mov.w	r2, #0
 8007334:	f04f 0300 	mov.w	r3, #0
 8007338:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800733c:	4659      	mov	r1, fp
 800733e:	00cb      	lsls	r3, r1, #3
 8007340:	4651      	mov	r1, sl
 8007342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007346:	4651      	mov	r1, sl
 8007348:	00ca      	lsls	r2, r1, #3
 800734a:	4610      	mov	r0, r2
 800734c:	4619      	mov	r1, r3
 800734e:	4603      	mov	r3, r0
 8007350:	4642      	mov	r2, r8
 8007352:	189b      	adds	r3, r3, r2
 8007354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007358:	464b      	mov	r3, r9
 800735a:	460a      	mov	r2, r1
 800735c:	eb42 0303 	adc.w	r3, r2, r3
 8007360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007370:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007374:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007378:	460b      	mov	r3, r1
 800737a:	18db      	adds	r3, r3, r3
 800737c:	62bb      	str	r3, [r7, #40]	; 0x28
 800737e:	4613      	mov	r3, r2
 8007380:	eb42 0303 	adc.w	r3, r2, r3
 8007384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007386:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800738a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800738e:	f7f9 fa29 	bl	80007e4 <__aeabi_uldivmod>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	4b0d      	ldr	r3, [pc, #52]	; (80073cc <UART_SetConfig+0x2d4>)
 8007398:	fba3 1302 	umull	r1, r3, r3, r2
 800739c:	095b      	lsrs	r3, r3, #5
 800739e:	2164      	movs	r1, #100	; 0x64
 80073a0:	fb01 f303 	mul.w	r3, r1, r3
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	3332      	adds	r3, #50	; 0x32
 80073aa:	4a08      	ldr	r2, [pc, #32]	; (80073cc <UART_SetConfig+0x2d4>)
 80073ac:	fba2 2303 	umull	r2, r3, r2, r3
 80073b0:	095b      	lsrs	r3, r3, #5
 80073b2:	f003 0207 	and.w	r2, r3, #7
 80073b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4422      	add	r2, r4
 80073be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073c0:	e106      	b.n	80075d0 <UART_SetConfig+0x4d8>
 80073c2:	bf00      	nop
 80073c4:	40011000 	.word	0x40011000
 80073c8:	40011400 	.word	0x40011400
 80073cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073d4:	2200      	movs	r2, #0
 80073d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80073de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80073e2:	4642      	mov	r2, r8
 80073e4:	464b      	mov	r3, r9
 80073e6:	1891      	adds	r1, r2, r2
 80073e8:	6239      	str	r1, [r7, #32]
 80073ea:	415b      	adcs	r3, r3
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
 80073ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073f2:	4641      	mov	r1, r8
 80073f4:	1854      	adds	r4, r2, r1
 80073f6:	4649      	mov	r1, r9
 80073f8:	eb43 0501 	adc.w	r5, r3, r1
 80073fc:	f04f 0200 	mov.w	r2, #0
 8007400:	f04f 0300 	mov.w	r3, #0
 8007404:	00eb      	lsls	r3, r5, #3
 8007406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800740a:	00e2      	lsls	r2, r4, #3
 800740c:	4614      	mov	r4, r2
 800740e:	461d      	mov	r5, r3
 8007410:	4643      	mov	r3, r8
 8007412:	18e3      	adds	r3, r4, r3
 8007414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007418:	464b      	mov	r3, r9
 800741a:	eb45 0303 	adc.w	r3, r5, r3
 800741e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800742e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007432:	f04f 0200 	mov.w	r2, #0
 8007436:	f04f 0300 	mov.w	r3, #0
 800743a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800743e:	4629      	mov	r1, r5
 8007440:	008b      	lsls	r3, r1, #2
 8007442:	4621      	mov	r1, r4
 8007444:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007448:	4621      	mov	r1, r4
 800744a:	008a      	lsls	r2, r1, #2
 800744c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007450:	f7f9 f9c8 	bl	80007e4 <__aeabi_uldivmod>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	4b60      	ldr	r3, [pc, #384]	; (80075dc <UART_SetConfig+0x4e4>)
 800745a:	fba3 2302 	umull	r2, r3, r3, r2
 800745e:	095b      	lsrs	r3, r3, #5
 8007460:	011c      	lsls	r4, r3, #4
 8007462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007466:	2200      	movs	r2, #0
 8007468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800746c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007470:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007474:	4642      	mov	r2, r8
 8007476:	464b      	mov	r3, r9
 8007478:	1891      	adds	r1, r2, r2
 800747a:	61b9      	str	r1, [r7, #24]
 800747c:	415b      	adcs	r3, r3
 800747e:	61fb      	str	r3, [r7, #28]
 8007480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007484:	4641      	mov	r1, r8
 8007486:	1851      	adds	r1, r2, r1
 8007488:	6139      	str	r1, [r7, #16]
 800748a:	4649      	mov	r1, r9
 800748c:	414b      	adcs	r3, r1
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	f04f 0200 	mov.w	r2, #0
 8007494:	f04f 0300 	mov.w	r3, #0
 8007498:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800749c:	4659      	mov	r1, fp
 800749e:	00cb      	lsls	r3, r1, #3
 80074a0:	4651      	mov	r1, sl
 80074a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074a6:	4651      	mov	r1, sl
 80074a8:	00ca      	lsls	r2, r1, #3
 80074aa:	4610      	mov	r0, r2
 80074ac:	4619      	mov	r1, r3
 80074ae:	4603      	mov	r3, r0
 80074b0:	4642      	mov	r2, r8
 80074b2:	189b      	adds	r3, r3, r2
 80074b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074b8:	464b      	mov	r3, r9
 80074ba:	460a      	mov	r2, r1
 80074bc:	eb42 0303 	adc.w	r3, r2, r3
 80074c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80074ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80074d0:	f04f 0200 	mov.w	r2, #0
 80074d4:	f04f 0300 	mov.w	r3, #0
 80074d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80074dc:	4649      	mov	r1, r9
 80074de:	008b      	lsls	r3, r1, #2
 80074e0:	4641      	mov	r1, r8
 80074e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074e6:	4641      	mov	r1, r8
 80074e8:	008a      	lsls	r2, r1, #2
 80074ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80074ee:	f7f9 f979 	bl	80007e4 <__aeabi_uldivmod>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4611      	mov	r1, r2
 80074f8:	4b38      	ldr	r3, [pc, #224]	; (80075dc <UART_SetConfig+0x4e4>)
 80074fa:	fba3 2301 	umull	r2, r3, r3, r1
 80074fe:	095b      	lsrs	r3, r3, #5
 8007500:	2264      	movs	r2, #100	; 0x64
 8007502:	fb02 f303 	mul.w	r3, r2, r3
 8007506:	1acb      	subs	r3, r1, r3
 8007508:	011b      	lsls	r3, r3, #4
 800750a:	3332      	adds	r3, #50	; 0x32
 800750c:	4a33      	ldr	r2, [pc, #204]	; (80075dc <UART_SetConfig+0x4e4>)
 800750e:	fba2 2303 	umull	r2, r3, r2, r3
 8007512:	095b      	lsrs	r3, r3, #5
 8007514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007518:	441c      	add	r4, r3
 800751a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800751e:	2200      	movs	r2, #0
 8007520:	673b      	str	r3, [r7, #112]	; 0x70
 8007522:	677a      	str	r2, [r7, #116]	; 0x74
 8007524:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007528:	4642      	mov	r2, r8
 800752a:	464b      	mov	r3, r9
 800752c:	1891      	adds	r1, r2, r2
 800752e:	60b9      	str	r1, [r7, #8]
 8007530:	415b      	adcs	r3, r3
 8007532:	60fb      	str	r3, [r7, #12]
 8007534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007538:	4641      	mov	r1, r8
 800753a:	1851      	adds	r1, r2, r1
 800753c:	6039      	str	r1, [r7, #0]
 800753e:	4649      	mov	r1, r9
 8007540:	414b      	adcs	r3, r1
 8007542:	607b      	str	r3, [r7, #4]
 8007544:	f04f 0200 	mov.w	r2, #0
 8007548:	f04f 0300 	mov.w	r3, #0
 800754c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007550:	4659      	mov	r1, fp
 8007552:	00cb      	lsls	r3, r1, #3
 8007554:	4651      	mov	r1, sl
 8007556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800755a:	4651      	mov	r1, sl
 800755c:	00ca      	lsls	r2, r1, #3
 800755e:	4610      	mov	r0, r2
 8007560:	4619      	mov	r1, r3
 8007562:	4603      	mov	r3, r0
 8007564:	4642      	mov	r2, r8
 8007566:	189b      	adds	r3, r3, r2
 8007568:	66bb      	str	r3, [r7, #104]	; 0x68
 800756a:	464b      	mov	r3, r9
 800756c:	460a      	mov	r2, r1
 800756e:	eb42 0303 	adc.w	r3, r2, r3
 8007572:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	663b      	str	r3, [r7, #96]	; 0x60
 800757e:	667a      	str	r2, [r7, #100]	; 0x64
 8007580:	f04f 0200 	mov.w	r2, #0
 8007584:	f04f 0300 	mov.w	r3, #0
 8007588:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800758c:	4649      	mov	r1, r9
 800758e:	008b      	lsls	r3, r1, #2
 8007590:	4641      	mov	r1, r8
 8007592:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007596:	4641      	mov	r1, r8
 8007598:	008a      	lsls	r2, r1, #2
 800759a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800759e:	f7f9 f921 	bl	80007e4 <__aeabi_uldivmod>
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	4b0d      	ldr	r3, [pc, #52]	; (80075dc <UART_SetConfig+0x4e4>)
 80075a8:	fba3 1302 	umull	r1, r3, r3, r2
 80075ac:	095b      	lsrs	r3, r3, #5
 80075ae:	2164      	movs	r1, #100	; 0x64
 80075b0:	fb01 f303 	mul.w	r3, r1, r3
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	011b      	lsls	r3, r3, #4
 80075b8:	3332      	adds	r3, #50	; 0x32
 80075ba:	4a08      	ldr	r2, [pc, #32]	; (80075dc <UART_SetConfig+0x4e4>)
 80075bc:	fba2 2303 	umull	r2, r3, r2, r3
 80075c0:	095b      	lsrs	r3, r3, #5
 80075c2:	f003 020f 	and.w	r2, r3, #15
 80075c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4422      	add	r2, r4
 80075ce:	609a      	str	r2, [r3, #8]
}
 80075d0:	bf00      	nop
 80075d2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80075d6:	46bd      	mov	sp, r7
 80075d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075dc:	51eb851f 	.word	0x51eb851f

080075e0 <memset>:
 80075e0:	4402      	add	r2, r0
 80075e2:	4603      	mov	r3, r0
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d100      	bne.n	80075ea <memset+0xa>
 80075e8:	4770      	bx	lr
 80075ea:	f803 1b01 	strb.w	r1, [r3], #1
 80075ee:	e7f9      	b.n	80075e4 <memset+0x4>

080075f0 <__libc_init_array>:
 80075f0:	b570      	push	{r4, r5, r6, lr}
 80075f2:	4d0d      	ldr	r5, [pc, #52]	; (8007628 <__libc_init_array+0x38>)
 80075f4:	4c0d      	ldr	r4, [pc, #52]	; (800762c <__libc_init_array+0x3c>)
 80075f6:	1b64      	subs	r4, r4, r5
 80075f8:	10a4      	asrs	r4, r4, #2
 80075fa:	2600      	movs	r6, #0
 80075fc:	42a6      	cmp	r6, r4
 80075fe:	d109      	bne.n	8007614 <__libc_init_array+0x24>
 8007600:	4d0b      	ldr	r5, [pc, #44]	; (8007630 <__libc_init_array+0x40>)
 8007602:	4c0c      	ldr	r4, [pc, #48]	; (8007634 <__libc_init_array+0x44>)
 8007604:	f000 f818 	bl	8007638 <_init>
 8007608:	1b64      	subs	r4, r4, r5
 800760a:	10a4      	asrs	r4, r4, #2
 800760c:	2600      	movs	r6, #0
 800760e:	42a6      	cmp	r6, r4
 8007610:	d105      	bne.n	800761e <__libc_init_array+0x2e>
 8007612:	bd70      	pop	{r4, r5, r6, pc}
 8007614:	f855 3b04 	ldr.w	r3, [r5], #4
 8007618:	4798      	blx	r3
 800761a:	3601      	adds	r6, #1
 800761c:	e7ee      	b.n	80075fc <__libc_init_array+0xc>
 800761e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007622:	4798      	blx	r3
 8007624:	3601      	adds	r6, #1
 8007626:	e7f2      	b.n	800760e <__libc_init_array+0x1e>
 8007628:	0800767c 	.word	0x0800767c
 800762c:	0800767c 	.word	0x0800767c
 8007630:	0800767c 	.word	0x0800767c
 8007634:	08007680 	.word	0x08007680

08007638 <_init>:
 8007638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763a:	bf00      	nop
 800763c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800763e:	bc08      	pop	{r3}
 8007640:	469e      	mov	lr, r3
 8007642:	4770      	bx	lr

08007644 <_fini>:
 8007644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007646:	bf00      	nop
 8007648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764a:	bc08      	pop	{r3}
 800764c:	469e      	mov	lr, r3
 800764e:	4770      	bx	lr
