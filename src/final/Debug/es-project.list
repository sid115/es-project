
es-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d1c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08006eb0  08006eb0  00016eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eec  08006eec  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08006eec  08006eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ef4  08006ef4  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ef4  08006ef4  00016ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ef8  08006ef8  00016ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08006efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006194  200000a8  08006fa4  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000623c  08006fa4  0002623c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011639  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002831  00000000  00000000  00031754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001120  00000000  00000000  00033f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d48  00000000  00000000  000350a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000167b0  00000000  00000000  00035df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b5b  00000000  00000000  0004c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000919fe  00000000  00000000  0005f0fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ac8  00000000  00000000  000f0afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000f55c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000a8 	.word	0x200000a8
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006e98 	.word	0x08006e98

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000ac 	.word	0x200000ac
 80001d0:	08006e98 	.word	0x08006e98

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_TIM_PWM_PulseFinishedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* LED stuff */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 80004d8:	2108      	movs	r1, #8
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f004 fc78 	bl	8004dd0 <HAL_TIM_PWM_Stop_DMA>
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <writeLEDs>:

void writeLEDs(PixelRGB_t* pixel){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	int i,j;

	pBuff = dmaBuffer;
 80004f0:	4b1e      	ldr	r3, [pc, #120]	; (800056c <writeLEDs+0x84>)
 80004f2:	4a1f      	ldr	r2, [pc, #124]	; (8000570 <writeLEDs+0x88>)
 80004f4:	601a      	str	r2, [r3, #0]
	  for (i = 0; i < NUM_PIXELS; i++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	e025      	b.n	8000548 <writeLEDs+0x60>
	  {
		 for (j = 23; j >= 0; j--)
 80004fc:	2317      	movs	r3, #23
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	e01c      	b.n	800053c <writeLEDs+0x54>
		 {
		   if ((pixel[i].data >> j) & 0x01)
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	4413      	add	r3, r2
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	fa22 f303 	lsr.w	r3, r2, r3
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	2b00      	cmp	r3, #0
 8000518:	d004      	beq.n	8000524 <writeLEDs+0x3c>
		   {
			 *pBuff = NEOPIXEL_ONE;
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <writeLEDs+0x84>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2243      	movs	r2, #67	; 0x43
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	e003      	b.n	800052c <writeLEDs+0x44>
		   }
		   else
		   {
			 *pBuff = NEOPIXEL_ZERO;
 8000524:	4b11      	ldr	r3, [pc, #68]	; (800056c <writeLEDs+0x84>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2222      	movs	r2, #34	; 0x22
 800052a:	601a      	str	r2, [r3, #0]
		   }
		   pBuff++;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <writeLEDs+0x84>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <writeLEDs+0x84>)
 8000534:	6013      	str	r3, [r2, #0]
		 for (j = 23; j >= 0; j--)
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	3b01      	subs	r3, #1
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	2b00      	cmp	r3, #0
 8000540:	dadf      	bge.n	8000502 <writeLEDs+0x1a>
	  for (i = 0; i < NUM_PIXELS; i++)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	3301      	adds	r3, #1
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	2b07      	cmp	r3, #7
 800054c:	ddd6      	ble.n	80004fc <writeLEDs+0x14>
	   }
	  }
	  dmaBuffer[DMA_BUFF_SIZE - 1] = 0; // last element must be 0!
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <writeLEDs+0x88>)
 8000550:	2200      	movs	r2, #0
 8000552:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

	  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, dmaBuffer, DMA_BUFF_SIZE);
 8000556:	23c1      	movs	r3, #193	; 0xc1
 8000558:	4a05      	ldr	r2, [pc, #20]	; (8000570 <writeLEDs+0x88>)
 800055a:	2108      	movs	r1, #8
 800055c:	4805      	ldr	r0, [pc, #20]	; (8000574 <writeLEDs+0x8c>)
 800055e:	f004 fa87 	bl	8004a70 <HAL_TIM_PWM_Start_DMA>
}
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000628 	.word	0x20000628
 8000570:	20000324 	.word	0x20000324
 8000574:	2000017c 	.word	0x2000017c

08000578 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a05      	ldr	r2, [pc, #20]	; (800059c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d102      	bne.n	8000590 <HAL_TIM_PeriodElapsedCallback+0x18>
		timer_irq = TRUE;
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800058c:	2201      	movs	r2, #1
 800058e:	701a      	strb	r2, [r3, #0]
	}
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	40000400 	.word	0x40000400
 80005a0:	2000064c 	.word	0x2000064c

080005a4 <stateProcessing>:
//* Packet forwarding begin *//
// DFD processes //
void stateProcessing(void){
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	state = 0;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <stateProcessing+0x14>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	2000064d 	.word	0x2000064d

080005bc <stateAwait>:
void stateAwait(void){
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
	state = 1;
 80005c0:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <stateAwait+0x14>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	701a      	strb	r2, [r3, #0]
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	2000064d 	.word	0x2000064d

080005d4 <stateReceived>:
void stateReceived(void){
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
	state = 2;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <stateReceived+0x14>)
 80005da:	2202      	movs	r2, #2
 80005dc:	701a      	strb	r2, [r3, #0]
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	2000064d 	.word	0x2000064d

080005ec <stateSent>:
void stateSent(void){
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	state = 3;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <stateSent+0x14>)
 80005f2:	2203      	movs	r2, #3
 80005f4:	701a      	strb	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	2000064d 	.word	0x2000064d

08000604 <stateFailure>:
void stateFailure(void){
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
	state = 4;
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <stateFailure+0x14>)
 800060a:	2204      	movs	r2, #4
 800060c:	701a      	strb	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	2000064d 	.word	0x2000064d

0800061c <handleStore>:
void handleStore(void){
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
	int i;

	// copy Lager to tempLager
	for(i = 0; i < LAGER_SIZE; i++){
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	e00b      	b.n	8000640 <handleStore+0x24>
		tempLager[i] = Lager[i];
 8000628:	4a17      	ldr	r2, [pc, #92]	; (8000688 <handleStore+0x6c>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4413      	add	r3, r2
 800062e:	7819      	ldrb	r1, [r3, #0]
 8000630:	4a16      	ldr	r2, [pc, #88]	; (800068c <handleStore+0x70>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	460a      	mov	r2, r1
 8000638:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < LAGER_SIZE; i++){
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3301      	adds	r3, #1
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b05      	cmp	r3, #5
 8000644:	ddf0      	ble.n	8000628 <handleStore+0xc>
	}


	// put package in first free spot (0) in tempLager
	for(i = 0; i < LAGER_SIZE; i++){
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e010      	b.n	800066e <handleStore+0x52>
		if(tempLager[i] == 0){
 800064c:	4a0f      	ldr	r2, [pc, #60]	; (800068c <handleStore+0x70>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d107      	bne.n	8000668 <handleStore+0x4c>
			tempLager[i] = packageId;
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <handleStore+0x74>)
 800065a:	7819      	ldrb	r1, [r3, #0]
 800065c:	4a0b      	ldr	r2, [pc, #44]	; (800068c <handleStore+0x70>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	460a      	mov	r2, r1
 8000664:	701a      	strb	r2, [r3, #0]
			break;
 8000666:	e005      	b.n	8000674 <handleStore+0x58>
	for(i = 0; i < LAGER_SIZE; i++){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3301      	adds	r3, #1
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b05      	cmp	r3, #5
 8000672:	ddeb      	ble.n	800064c <handleStore+0x30>
		}
	}

	finishedStore = TRUE;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <handleStore+0x78>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20000654 	.word	0x20000654
 800068c:	2000065c 	.word	0x2000065c
 8000690:	20000650 	.word	0x20000650
 8000694:	2000066a 	.word	0x2000066a

08000698 <handleSend>:
void handleSend(void){
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
	int i;

	// copy Lager to tempLager
	for(i = 0; i < LAGER_SIZE; i++){
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	e00b      	b.n	80006bc <handleSend+0x24>
		tempLager[i] = Lager[i];
 80006a4:	4a17      	ldr	r2, [pc, #92]	; (8000704 <handleSend+0x6c>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	7819      	ldrb	r1, [r3, #0]
 80006ac:	4a16      	ldr	r2, [pc, #88]	; (8000708 <handleSend+0x70>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	460a      	mov	r2, r1
 80006b4:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < LAGER_SIZE; i++){
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3301      	adds	r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b05      	cmp	r3, #5
 80006c0:	ddf0      	ble.n	80006a4 <handleSend+0xc>
	}

	// delete package out of tempLager
	for(i = 0; i < LAGER_SIZE; i++){
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	e010      	b.n	80006ea <handleSend+0x52>
		if(tempLager[i] == packageId){
 80006c8:	4a0f      	ldr	r2, [pc, #60]	; (8000708 <handleSend+0x70>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	781a      	ldrb	r2, [r3, #0]
 80006d0:	4b0e      	ldr	r3, [pc, #56]	; (800070c <handleSend+0x74>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d105      	bne.n	80006e4 <handleSend+0x4c>
			tempLager[i] = 0;
 80006d8:	4a0b      	ldr	r2, [pc, #44]	; (8000708 <handleSend+0x70>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
			break;
 80006e2:	e005      	b.n	80006f0 <handleSend+0x58>
	for(i = 0; i < LAGER_SIZE; i++){
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3301      	adds	r3, #1
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b05      	cmp	r3, #5
 80006ee:	ddeb      	ble.n	80006c8 <handleSend+0x30>
		}
	}

	finishedSend = TRUE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <handleSend+0x78>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	20000654 	.word	0x20000654
 8000708:	2000065c 	.word	0x2000065c
 800070c:	20000650 	.word	0x20000650
 8000710:	20000669 	.word	0x20000669

08000714 <updateLager>:
void updateLager(void){
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
	int i;

	// copy tempLager to Lager
	for(i = 0; i < LAGER_SIZE; i++){
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	e00b      	b.n	8000738 <updateLager+0x24>
		Lager[i] = tempLager[i];
 8000720:	4a0a      	ldr	r2, [pc, #40]	; (800074c <updateLager+0x38>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	7819      	ldrb	r1, [r3, #0]
 8000728:	4a09      	ldr	r2, [pc, #36]	; (8000750 <updateLager+0x3c>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	460a      	mov	r2, r1
 8000730:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < LAGER_SIZE; i++){
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	3301      	adds	r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b05      	cmp	r3, #5
 800073c:	ddf0      	ble.n	8000720 <updateLager+0xc>
	}
}
 800073e:	bf00      	nop
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	2000065c 	.word	0x2000065c
 8000750:	20000654 	.word	0x20000654

08000754 <animateSend>:
void animateSend(void){
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	71fb      	strb	r3, [r7, #7]

	// find index of Lager, where packageId is stored
	for(i = 0; i < LAGER_SIZE; i++){
 800075e:	2300      	movs	r3, #0
 8000760:	71fb      	strb	r3, [r7, #7]
 8000762:	e009      	b.n	8000778 <animateSend+0x24>
		if(Lager[i] == packageId){
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	4a1d      	ldr	r2, [pc, #116]	; (80007dc <animateSend+0x88>)
 8000768:	5cd2      	ldrb	r2, [r2, r3]
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <animateSend+0x8c>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	429a      	cmp	r2, r3
 8000770:	d006      	beq.n	8000780 <animateSend+0x2c>
	for(i = 0; i < LAGER_SIZE; i++){
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	3301      	adds	r3, #1
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b05      	cmp	r3, #5
 800077c:	d9f2      	bls.n	8000764 <animateSend+0x10>
 800077e:	e000      	b.n	8000782 <animateSend+0x2e>
			break;
 8000780:	bf00      	nop
		}
	}

	// skip any but first function call
	if (i == LAGER_SIZE) return;
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b06      	cmp	r3, #6
 8000786:	d024      	beq.n	80007d2 <animateSend+0x7e>

	// blink corresponding LED once
    pixels[i+1] = color[C_BLACK];
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	3301      	adds	r3, #1
 800078c:	4915      	ldr	r1, [pc, #84]	; (80007e4 <animateSend+0x90>)
 800078e:	4a16      	ldr	r2, [pc, #88]	; (80007e8 <animateSend+0x94>)
 8000790:	6812      	ldr	r2, [r2, #0]
 8000792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	writeLEDs(pixels);
 8000796:	4813      	ldr	r0, [pc, #76]	; (80007e4 <animateSend+0x90>)
 8000798:	f7ff fea6 	bl	80004e8 <writeLEDs>
	HAL_Delay(BLINK_TIME);
 800079c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a0:	f002 f8f0 	bl	8002984 <HAL_Delay>
    pixels[LAGER_SIZE+1] = color[packageId];
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <animateSend+0x8c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	4619      	mov	r1, r3
 80007aa:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <animateSend+0x90>)
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <animateSend+0x94>)
 80007ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007b2:	61d3      	str	r3, [r2, #28]
	writeLEDs(pixels);
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <animateSend+0x90>)
 80007b6:	f7ff fe97 	bl	80004e8 <writeLEDs>
	HAL_Delay(BLINK_TIME);
 80007ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007be:	f002 f8e1 	bl	8002984 <HAL_Delay>
    pixels[LAGER_SIZE+1] = color[C_BLACK];
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <animateSend+0x90>)
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <animateSend+0x94>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	61d3      	str	r3, [r2, #28]
	writeLEDs(pixels);
 80007ca:	4806      	ldr	r0, [pc, #24]	; (80007e4 <animateSend+0x90>)
 80007cc:	f7ff fe8c 	bl	80004e8 <writeLEDs>
 80007d0:	e000      	b.n	80007d4 <animateSend+0x80>
	if (i == LAGER_SIZE) return;
 80007d2:	bf00      	nop
}
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000654 	.word	0x20000654
 80007e0:	20000650 	.word	0x20000650
 80007e4:	2000062c 	.word	0x2000062c
 80007e8:	20000004 	.word	0x20000004

080007ec <animateReceive>:

void animateReceive(void){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	71fb      	strb	r3, [r7, #7]

	// find index of tempLager, where packageId is stored
	for(i = 0; i < LAGER_SIZE; i++){
 80007f6:	2300      	movs	r3, #0
 80007f8:	71fb      	strb	r3, [r7, #7]
 80007fa:	e009      	b.n	8000810 <animateReceive+0x24>
		if(tempLager[i] == packageId){
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	4a1f      	ldr	r2, [pc, #124]	; (800087c <animateReceive+0x90>)
 8000800:	5cd2      	ldrb	r2, [r2, r3]
 8000802:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <animateReceive+0x94>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	429a      	cmp	r2, r3
 8000808:	d006      	beq.n	8000818 <animateReceive+0x2c>
	for(i = 0; i < LAGER_SIZE; i++){
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	3301      	adds	r3, #1
 800080e:	71fb      	strb	r3, [r7, #7]
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b05      	cmp	r3, #5
 8000814:	d9f2      	bls.n	80007fc <animateReceive+0x10>
 8000816:	e000      	b.n	800081a <animateReceive+0x2e>
			break;
 8000818:	bf00      	nop
		}
	}

	// skip any but first function call
	if (i == LAGER_SIZE) return;
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b06      	cmp	r3, #6
 800081e:	d028      	beq.n	8000872 <animateReceive+0x86>

	// blink corresponding LED once
    pixels[0] = color[packageId];
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <animateReceive+0x94>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4619      	mov	r1, r3
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <animateReceive+0x98>)
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <animateReceive+0x9c>)
 800082a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800082e:	6013      	str	r3, [r2, #0]
	writeLEDs(pixels);
 8000830:	4814      	ldr	r0, [pc, #80]	; (8000884 <animateReceive+0x98>)
 8000832:	f7ff fe59 	bl	80004e8 <writeLEDs>
	HAL_Delay(BLINK_TIME);
 8000836:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800083a:	f002 f8a3 	bl	8002984 <HAL_Delay>
    pixels[0] = color[C_BLACK];
 800083e:	4a11      	ldr	r2, [pc, #68]	; (8000884 <animateReceive+0x98>)
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <animateReceive+0x9c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	6013      	str	r3, [r2, #0]
	writeLEDs(pixels);
 8000846:	480f      	ldr	r0, [pc, #60]	; (8000884 <animateReceive+0x98>)
 8000848:	f7ff fe4e 	bl	80004e8 <writeLEDs>
	HAL_Delay(BLINK_TIME);
 800084c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000850:	f002 f898 	bl	8002984 <HAL_Delay>
    pixels[i+1] = color[packageId];
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <animateReceive+0x94>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4618      	mov	r0, r3
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	3301      	adds	r3, #1
 800085e:	4909      	ldr	r1, [pc, #36]	; (8000884 <animateReceive+0x98>)
 8000860:	4a09      	ldr	r2, [pc, #36]	; (8000888 <animateReceive+0x9c>)
 8000862:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8000866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	writeLEDs(pixels);
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <animateReceive+0x98>)
 800086c:	f7ff fe3c 	bl	80004e8 <writeLEDs>
 8000870:	e000      	b.n	8000874 <animateReceive+0x88>
	if (i == LAGER_SIZE) return;
 8000872:	bf00      	nop
}
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000065c 	.word	0x2000065c
 8000880:	20000650 	.word	0x20000650
 8000884:	2000062c 	.word	0x2000062c
 8000888:	20000004 	.word	0x20000004

0800088c <animateCreate>:

void animateCreate(void){
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	71fb      	strb	r3, [r7, #7]

	// find index of tempLager, where packageId is stored
	for(i = 0; i < LAGER_SIZE; i++){
 8000896:	2300      	movs	r3, #0
 8000898:	71fb      	strb	r3, [r7, #7]
 800089a:	e009      	b.n	80008b0 <animateCreate+0x24>
		if(tempLager[i] == packageId){
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	4a22      	ldr	r2, [pc, #136]	; (8000928 <animateCreate+0x9c>)
 80008a0:	5cd2      	ldrb	r2, [r2, r3]
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <animateCreate+0xa0>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d006      	beq.n	80008b8 <animateCreate+0x2c>
	for(i = 0; i < LAGER_SIZE; i++){
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	3301      	adds	r3, #1
 80008ae:	71fb      	strb	r3, [r7, #7]
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	2b05      	cmp	r3, #5
 80008b4:	d9f2      	bls.n	800089c <animateCreate+0x10>
 80008b6:	e000      	b.n	80008ba <animateCreate+0x2e>
			break;
 80008b8:	bf00      	nop
		}
	}

	// skip any but first function call
	if (i == LAGER_SIZE) return;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b06      	cmp	r3, #6
 80008be:	d02e      	beq.n	800091e <animateCreate+0x92>

	// blink corresponding LED once
    pixels[i+1] = color[packageId];
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <animateCreate+0xa0>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	3301      	adds	r3, #1
 80008ca:	4919      	ldr	r1, [pc, #100]	; (8000930 <animateCreate+0xa4>)
 80008cc:	4a19      	ldr	r2, [pc, #100]	; (8000934 <animateCreate+0xa8>)
 80008ce:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80008d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	writeLEDs(pixels);
 80008d6:	4816      	ldr	r0, [pc, #88]	; (8000930 <animateCreate+0xa4>)
 80008d8:	f7ff fe06 	bl	80004e8 <writeLEDs>
	HAL_Delay(BLINK_TIME);
 80008dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e0:	f002 f850 	bl	8002984 <HAL_Delay>
    pixels[i+1] = color[C_BLACK];
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	3301      	adds	r3, #1
 80008e8:	4911      	ldr	r1, [pc, #68]	; (8000930 <animateCreate+0xa4>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <animateCreate+0xa8>)
 80008ec:	6812      	ldr	r2, [r2, #0]
 80008ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	writeLEDs(pixels);
 80008f2:	480f      	ldr	r0, [pc, #60]	; (8000930 <animateCreate+0xa4>)
 80008f4:	f7ff fdf8 	bl	80004e8 <writeLEDs>
	HAL_Delay(BLINK_TIME);
 80008f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008fc:	f002 f842 	bl	8002984 <HAL_Delay>
    pixels[i+1] = color[packageId];
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <animateCreate+0xa0>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	3301      	adds	r3, #1
 800090a:	4909      	ldr	r1, [pc, #36]	; (8000930 <animateCreate+0xa4>)
 800090c:	4a09      	ldr	r2, [pc, #36]	; (8000934 <animateCreate+0xa8>)
 800090e:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8000912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	writeLEDs(pixels);
 8000916:	4806      	ldr	r0, [pc, #24]	; (8000930 <animateCreate+0xa4>)
 8000918:	f7ff fde6 	bl	80004e8 <writeLEDs>
 800091c:	e000      	b.n	8000920 <animateCreate+0x94>
	if (i == LAGER_SIZE) return;
 800091e:	bf00      	nop
}
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000065c 	.word	0x2000065c
 800092c:	20000650 	.word	0x20000650
 8000930:	2000062c 	.word	0x2000062c
 8000934:	20000004 	.word	0x20000004

08000938 <animateDeliver>:
void animateDeliver(void){
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	71fb      	strb	r3, [r7, #7]

	// find index of Lager, where packageId is stored
	for(i = 0; i < LAGER_SIZE; i++){
 8000942:	2300      	movs	r3, #0
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	e009      	b.n	800095c <animateDeliver+0x24>
		if(Lager[i] == packageId){
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	4a20      	ldr	r2, [pc, #128]	; (80009cc <animateDeliver+0x94>)
 800094c:	5cd2      	ldrb	r2, [r2, r3]
 800094e:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <animateDeliver+0x98>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	429a      	cmp	r2, r3
 8000954:	d006      	beq.n	8000964 <animateDeliver+0x2c>
	for(i = 0; i < LAGER_SIZE; i++){
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	3301      	adds	r3, #1
 800095a:	71fb      	strb	r3, [r7, #7]
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	2b05      	cmp	r3, #5
 8000960:	d9f2      	bls.n	8000948 <animateDeliver+0x10>
 8000962:	e000      	b.n	8000966 <animateDeliver+0x2e>
			break;
 8000964:	bf00      	nop
		}
	}

	// skip any but first function call
	if (i == LAGER_SIZE) return;
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b06      	cmp	r3, #6
 800096a:	d02a      	beq.n	80009c2 <animateDeliver+0x8a>

	// blink corresponding LED once
    pixels[i+1] = color[C_BLACK];
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	3301      	adds	r3, #1
 8000970:	4918      	ldr	r1, [pc, #96]	; (80009d4 <animateDeliver+0x9c>)
 8000972:	4a19      	ldr	r2, [pc, #100]	; (80009d8 <animateDeliver+0xa0>)
 8000974:	6812      	ldr	r2, [r2, #0]
 8000976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	writeLEDs(pixels);
 800097a:	4816      	ldr	r0, [pc, #88]	; (80009d4 <animateDeliver+0x9c>)
 800097c:	f7ff fdb4 	bl	80004e8 <writeLEDs>
	HAL_Delay(BLINK_TIME);
 8000980:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000984:	f001 fffe 	bl	8002984 <HAL_Delay>
    pixels[i+1] = color[packageId];
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <animateDeliver+0x98>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	3301      	adds	r3, #1
 8000992:	4910      	ldr	r1, [pc, #64]	; (80009d4 <animateDeliver+0x9c>)
 8000994:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <animateDeliver+0xa0>)
 8000996:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800099a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	writeLEDs(pixels);
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <animateDeliver+0x9c>)
 80009a0:	f7ff fda2 	bl	80004e8 <writeLEDs>
	HAL_Delay(BLINK_TIME);
 80009a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a8:	f001 ffec 	bl	8002984 <HAL_Delay>
    pixels[i+1] = color[C_BLACK];
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	3301      	adds	r3, #1
 80009b0:	4908      	ldr	r1, [pc, #32]	; (80009d4 <animateDeliver+0x9c>)
 80009b2:	4a09      	ldr	r2, [pc, #36]	; (80009d8 <animateDeliver+0xa0>)
 80009b4:	6812      	ldr	r2, [r2, #0]
 80009b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	writeLEDs(pixels);
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <animateDeliver+0x9c>)
 80009bc:	f7ff fd94 	bl	80004e8 <writeLEDs>
 80009c0:	e000      	b.n	80009c4 <animateDeliver+0x8c>
	if (i == LAGER_SIZE) return;
 80009c2:	bf00      	nop
}
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000654 	.word	0x20000654
 80009d0:	20000650 	.word	0x20000650
 80009d4:	2000062c 	.word	0x2000062c
 80009d8:	20000004 	.word	0x20000004

080009dc <pulse>:

void pulse(void){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
	uint8_t partnerNumber = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	71bb      	strb	r3, [r7, #6]

	// find out number of partner
	for(i = 0; i < NUM_NEIGHBOURS; i++){
 80009ea:	2300      	movs	r3, #0
 80009ec:	71bb      	strb	r3, [r7, #6]
 80009ee:	e00c      	b.n	8000a0a <pulse+0x2e>
		if(neighbourIDs[i] == partnerId){
 80009f0:	79bb      	ldrb	r3, [r7, #6]
 80009f2:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <pulse+0x68>)
 80009f4:	5cd2      	ldrb	r2, [r2, r3]
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <pulse+0x6c>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d102      	bne.n	8000a04 <pulse+0x28>
			partnerNumber = i;
 80009fe:	79bb      	ldrb	r3, [r7, #6]
 8000a00:	71fb      	strb	r3, [r7, #7]
			break;
 8000a02:	e005      	b.n	8000a10 <pulse+0x34>
	for(i = 0; i < NUM_NEIGHBOURS; i++){
 8000a04:	79bb      	ldrb	r3, [r7, #6]
 8000a06:	3301      	adds	r3, #1
 8000a08:	71bb      	strb	r3, [r7, #6]
 8000a0a:	79bb      	ldrb	r3, [r7, #6]
 8000a0c:	2b03      	cmp	r3, #3
 8000a0e:	d9ef      	bls.n	80009f0 <pulse+0x14>
		}
	}

	// toggle corresponding pin for 1ms // TODO: actually implement pulse with a state between passOn and sent (passOnPulse or something) and a timer
	HAL_GPIO_WritePin (GPIOC, neighbourSendPins[partnerNumber], GPIO_PIN_SET);
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <pulse+0x70>)
 8000a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480c      	ldr	r0, [pc, #48]	; (8000a50 <pulse+0x74>)
 8000a1e:	f002 fea9 	bl	8003774 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a22:	2001      	movs	r0, #1
 8000a24:	f001 ffae 	bl	8002984 <HAL_Delay>
	HAL_GPIO_WritePin (GPIOC, neighbourSendPins[partnerNumber], GPIO_PIN_RESET);
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <pulse+0x70>)
 8000a2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a30:	2200      	movs	r2, #0
 8000a32:	4619      	mov	r1, r3
 8000a34:	4806      	ldr	r0, [pc, #24]	; (8000a50 <pulse+0x74>)
 8000a36:	f002 fe9d 	bl	8003774 <HAL_GPIO_WritePin>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	08006ec8 	.word	0x08006ec8
 8000a48:	2000064f 	.word	0x2000064f
 8000a4c:	08006eb0 	.word	0x08006eb0
 8000a50:	40020800 	.word	0x40020800

08000a54 <checkFailure>:
void checkFailure(void){
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
	BOOL lagerFull = TRUE;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	73fb      	strb	r3, [r7, #15]
	BOOL packetInLager = FALSE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	73bb      	strb	r3, [r7, #14]
	BOOL packetNoExist = TRUE;
 8000a62:	2301      	movs	r3, #1
 8000a64:	737b      	strb	r3, [r7, #13]
	BOOL unknownNeighbour = TRUE;
 8000a66:	2301      	movs	r3, #1
 8000a68:	733b      	strb	r3, [r7, #12]
	BOOL unknownPacket = FALSE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	72fb      	strb	r3, [r7, #11]

	int i;

	// check if neighbour is known
	if(partnerId == 0){ //TODO: fixed with idle in processing, but that should not be there
 8000a6e:	4b4e      	ldr	r3, [pc, #312]	; (8000ba8 <checkFailure+0x154>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d101      	bne.n	8000a7a <checkFailure+0x26>
		unknownNeighbour = FALSE; // neighbourId is valid
 8000a76:	2300      	movs	r3, #0
 8000a78:	733b      	strb	r3, [r7, #12]
	}
	for(i = 0; i < NUM_NEIGHBOURS; i++){
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	e00d      	b.n	8000a9c <checkFailure+0x48>
		if(partnerId == neighbourIDs[i]){
 8000a80:	4a4a      	ldr	r2, [pc, #296]	; (8000bac <checkFailure+0x158>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	781a      	ldrb	r2, [r3, #0]
 8000a88:	4b47      	ldr	r3, [pc, #284]	; (8000ba8 <checkFailure+0x154>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d102      	bne.n	8000a96 <checkFailure+0x42>
			unknownNeighbour = FALSE; // neighbourId is valid
 8000a90:	2300      	movs	r3, #0
 8000a92:	733b      	strb	r3, [r7, #12]
			break;
 8000a94:	e005      	b.n	8000aa2 <checkFailure+0x4e>
	for(i = 0; i < NUM_NEIGHBOURS; i++){
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	ddee      	ble.n	8000a80 <checkFailure+0x2c>
		}
	}

	if(ApNr == 42){ // create or await is set
 8000aa2:	4b43      	ldr	r3, [pc, #268]	; (8000bb0 <checkFailure+0x15c>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8000aa8:	d127      	bne.n	8000afa <checkFailure+0xa6>
		// check if Lager is already completely filled
		for(i = 0; i < LAGER_SIZE; i++){
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	e00b      	b.n	8000ac8 <checkFailure+0x74>
			if(Lager[i] == 0){
 8000ab0:	4a40      	ldr	r2, [pc, #256]	; (8000bb4 <checkFailure+0x160>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d102      	bne.n	8000ac2 <checkFailure+0x6e>
				lagerFull = FALSE; // Lager is not completely filled
 8000abc:	2300      	movs	r3, #0
 8000abe:	73fb      	strb	r3, [r7, #15]
				break;
 8000ac0:	e005      	b.n	8000ace <checkFailure+0x7a>
		for(i = 0; i < LAGER_SIZE; i++){
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b05      	cmp	r3, #5
 8000acc:	ddf0      	ble.n	8000ab0 <checkFailure+0x5c>
			}
		}

		packetNoExist = FALSE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	737b      	strb	r3, [r7, #13]
		// check if packageId is already stored in Lager
		for(i = 0; i < LAGER_SIZE; i++){
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	e00d      	b.n	8000af4 <checkFailure+0xa0>
			if(Lager[i] == packageId){
 8000ad8:	4a36      	ldr	r2, [pc, #216]	; (8000bb4 <checkFailure+0x160>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	781a      	ldrb	r2, [r3, #0]
 8000ae0:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <checkFailure+0x164>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d102      	bne.n	8000aee <checkFailure+0x9a>
				packetInLager = TRUE; // packageId already exists in Lager
 8000ae8:	2301      	movs	r3, #1
 8000aea:	73bb      	strb	r3, [r7, #14]
				break;
 8000aec:	e005      	b.n	8000afa <checkFailure+0xa6>
		for(i = 0; i < LAGER_SIZE; i++){
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3301      	adds	r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b05      	cmp	r3, #5
 8000af8:	ddee      	ble.n	8000ad8 <checkFailure+0x84>
			}
		}
	}

	if(ApNr == 43){ // deliver or passOn is set
 8000afa:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <checkFailure+0x15c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b2b      	cmp	r3, #43	; 0x2b
 8000b00:	d114      	bne.n	8000b2c <checkFailure+0xd8>
		lagerFull = FALSE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	73fb      	strb	r3, [r7, #15]

		// Check if packageId exists in Lager
		for(i = 0; i < LAGER_SIZE; i++){
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	e00c      	b.n	8000b26 <checkFailure+0xd2>
			if(Lager[i] == packageId){
 8000b0c:	4a29      	ldr	r2, [pc, #164]	; (8000bb4 <checkFailure+0x160>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <checkFailure+0x164>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d101      	bne.n	8000b20 <checkFailure+0xcc>
				packetNoExist = FALSE; // packageId does exist in Lager
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	737b      	strb	r3, [r7, #13]
		for(i = 0; i < LAGER_SIZE; i++){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3301      	adds	r3, #1
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b05      	cmp	r3, #5
 8000b2a:	ddef      	ble.n	8000b0c <checkFailure+0xb8>
			}
		}
	}

	// check if package has a valid number
	if((packageId < 0) || (packageId > 16)){
 8000b2c:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <checkFailure+0x164>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b10      	cmp	r3, #16
 8000b32:	d901      	bls.n	8000b38 <checkFailure+0xe4>
		unknownPacket = TRUE;
 8000b34:	2301      	movs	r3, #1
 8000b36:	72fb      	strb	r3, [r7, #11]
	}


	// set errorId according to failure
	if(packetInLager){
 8000b38:	7bbb      	ldrb	r3, [r7, #14]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d006      	beq.n	8000b4c <checkFailure+0xf8>
		failure = TRUE;
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <checkFailure+0x168>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
		errorId = 1;
 8000b44:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <checkFailure+0x16c>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
	}
	else if(unknownPacket){
		failure = TRUE;
		errorId = 5; //TODO: Minispezifikation
	}
}
 8000b4a:	e026      	b.n	8000b9a <checkFailure+0x146>
	else if(lagerFull){
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d006      	beq.n	8000b60 <checkFailure+0x10c>
		failure = TRUE;
 8000b52:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <checkFailure+0x168>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	701a      	strb	r2, [r3, #0]
		errorId = 2;
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <checkFailure+0x16c>)
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	701a      	strb	r2, [r3, #0]
}
 8000b5e:	e01c      	b.n	8000b9a <checkFailure+0x146>
	else if(packetNoExist){
 8000b60:	7b7b      	ldrb	r3, [r7, #13]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d006      	beq.n	8000b74 <checkFailure+0x120>
		failure = TRUE;
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <checkFailure+0x168>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	701a      	strb	r2, [r3, #0]
		errorId = 3;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <checkFailure+0x16c>)
 8000b6e:	2203      	movs	r2, #3
 8000b70:	701a      	strb	r2, [r3, #0]
}
 8000b72:	e012      	b.n	8000b9a <checkFailure+0x146>
	else if(unknownNeighbour){
 8000b74:	7b3b      	ldrb	r3, [r7, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d006      	beq.n	8000b88 <checkFailure+0x134>
		failure = TRUE;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <checkFailure+0x168>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
		errorId = 4;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <checkFailure+0x16c>)
 8000b82:	2204      	movs	r2, #4
 8000b84:	701a      	strb	r2, [r3, #0]
}
 8000b86:	e008      	b.n	8000b9a <checkFailure+0x146>
	else if(unknownPacket){
 8000b88:	7afb      	ldrb	r3, [r7, #11]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d005      	beq.n	8000b9a <checkFailure+0x146>
		failure = TRUE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <checkFailure+0x168>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	701a      	strb	r2, [r3, #0]
		errorId = 5; //TODO: Minispezifikation
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <checkFailure+0x16c>)
 8000b96:	2205      	movs	r2, #5
 8000b98:	701a      	strb	r2, [r3, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	2000064f 	.word	0x2000064f
 8000bac:	08006ec8 	.word	0x08006ec8
 8000bb0:	20000662 	.word	0x20000662
 8000bb4:	20000654 	.word	0x20000654
 8000bb8:	20000650 	.word	0x20000650
 8000bbc:	2000066b 	.word	0x2000066b
 8000bc0:	2000064e 	.word	0x2000064e

08000bc4 <resetData>:
void resetData(){
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
	packageId = 0;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <resetData+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
	partnerId = 0;
 8000bce:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <resetData+0x68>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
	errorId = 0;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <resetData+0x6c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
	receive = FALSE;
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <resetData+0x70>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
	passOn = FALSE;
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <resetData+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
	create = FALSE;
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <resetData+0x78>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
	deliver = FALSE;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <resetData+0x7c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
	poll = FALSE;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <resetData+0x80>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
	await = FALSE;
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <resetData+0x84>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
	ApNr = 0;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <resetData+0x88>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
	failure = FALSE;
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <resetData+0x8c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
	finishedStore = FALSE;
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <resetData+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
	finishedSend = FALSE;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <resetData+0x94>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
	receivedSDU = FALSE;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <resetData+0x98>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000650 	.word	0x20000650
 8000c2c:	2000064f 	.word	0x2000064f
 8000c30:	2000064e 	.word	0x2000064e
 8000c34:	20000663 	.word	0x20000663
 8000c38:	20000664 	.word	0x20000664
 8000c3c:	20000665 	.word	0x20000665
 8000c40:	20000666 	.word	0x20000666
 8000c44:	20000667 	.word	0x20000667
 8000c48:	20000668 	.word	0x20000668
 8000c4c:	20000662 	.word	0x20000662
 8000c50:	2000066b 	.word	0x2000066b
 8000c54:	2000066a 	.word	0x2000066a
 8000c58:	20000669 	.word	0x20000669
 8000c5c:	2000066c 	.word	0x2000066c

08000c60 <std>:

// STD
void std(void){
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
	switch(zustand){
 8000c64:	4b98      	ldr	r3, [pc, #608]	; (8000ec8 <std+0x268>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b07      	cmp	r3, #7
 8000c6a:	f200 8127 	bhi.w	8000ebc <std+0x25c>
 8000c6e:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <std+0x14>)
 8000c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c74:	08000c95 	.word	0x08000c95
 8000c78:	08000cd1 	.word	0x08000cd1
 8000c7c:	08000d75 	.word	0x08000d75
 8000c80:	08000d93 	.word	0x08000d93
 8000c84:	08000dbb 	.word	0x08000dbb
 8000c88:	08000ddf 	.word	0x08000ddf
 8000c8c:	08000dfb 	.word	0x08000dfb
 8000c90:	08000e73 	.word	0x08000e73
	case Z_idle:
		if (receivedSDU){
 8000c94:	4b8d      	ldr	r3, [pc, #564]	; (8000ecc <std+0x26c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d009      	beq.n	8000cb0 <std+0x50>
			aktion = A_checkFailure;
 8000c9c:	4b8c      	ldr	r3, [pc, #560]	; (8000ed0 <std+0x270>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	701a      	strb	r2, [r3, #0]
			zustand = Z_processing;
 8000ca2:	4b89      	ldr	r3, [pc, #548]	; (8000ec8 <std+0x268>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
			receivedSDU = FALSE; //*
 8000ca8:	4b88      	ldr	r3, [pc, #544]	; (8000ecc <std+0x26c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
			aktion = A_idle; // so it is not stuck in A_reset
		}
		else if(!receivedSDU){
			aktion = A_idle; // so it is not stuck in A_reset
		}*/
		break;
 8000cae:	e0f6      	b.n	8000e9e <std+0x23e>
		else if(poll || (!receivedSDU)){ //TODO: SA/RT
 8000cb0:	4b88      	ldr	r3, [pc, #544]	; (8000ed4 <std+0x274>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d104      	bne.n	8000cc2 <std+0x62>
 8000cb8:	4b84      	ldr	r3, [pc, #528]	; (8000ecc <std+0x26c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f040 80ee 	bne.w	8000e9e <std+0x23e>
			aktion = A_idle;
 8000cc2:	4b83      	ldr	r3, [pc, #524]	; (8000ed0 <std+0x270>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8000cc8:	4b82      	ldr	r3, [pc, #520]	; (8000ed4 <std+0x274>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
		break;
 8000cce:	e0e6      	b.n	8000e9e <std+0x23e>


	case Z_processing:
		if (create && (!failure)){ // no poll (transient state), because processing + packageId should only be reported in modes passOn and deliver
 8000cd0:	4b81      	ldr	r3, [pc, #516]	; (8000ed8 <std+0x278>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d00d      	beq.n	8000cf4 <std+0x94>
 8000cd8:	4b80      	ldr	r3, [pc, #512]	; (8000edc <std+0x27c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d109      	bne.n	8000cf4 <std+0x94>
			aktion = A_create;
 8000ce0:	4b7b      	ldr	r3, [pc, #492]	; (8000ed0 <std+0x270>)
 8000ce2:	2208      	movs	r2, #8
 8000ce4:	701a      	strb	r2, [r3, #0]
			zustand = Z_awaiting;
 8000ce6:	4b78      	ldr	r3, [pc, #480]	; (8000ec8 <std+0x268>)
 8000ce8:	2206      	movs	r2, #6
 8000cea:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8000cec:	4b79      	ldr	r3, [pc, #484]	; (8000ed4 <std+0x274>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
 8000cf2:	e03e      	b.n	8000d72 <std+0x112>
		}
		else if (await && (!failure)){ // no poll (transient state), because processing + packageId should only be reported in modes passOn and deliver
 8000cf4:	4b7a      	ldr	r3, [pc, #488]	; (8000ee0 <std+0x280>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00d      	beq.n	8000d18 <std+0xb8>
 8000cfc:	4b77      	ldr	r3, [pc, #476]	; (8000edc <std+0x27c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d109      	bne.n	8000d18 <std+0xb8>
			aktion = A_await;
 8000d04:	4b72      	ldr	r3, [pc, #456]	; (8000ed0 <std+0x270>)
 8000d06:	2207      	movs	r2, #7
 8000d08:	701a      	strb	r2, [r3, #0]
			zustand = Z_awaiting;
 8000d0a:	4b6f      	ldr	r3, [pc, #444]	; (8000ec8 <std+0x268>)
 8000d0c:	2206      	movs	r2, #6
 8000d0e:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8000d10:	4b70      	ldr	r3, [pc, #448]	; (8000ed4 <std+0x274>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	e02c      	b.n	8000d72 <std+0x112>
		}
		else if (deliver && (!failure)){
 8000d18:	4b72      	ldr	r3, [pc, #456]	; (8000ee4 <std+0x284>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d00a      	beq.n	8000d36 <std+0xd6>
 8000d20:	4b6e      	ldr	r3, [pc, #440]	; (8000edc <std+0x27c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d106      	bne.n	8000d36 <std+0xd6>
			aktion = A_deliver;
 8000d28:	4b69      	ldr	r3, [pc, #420]	; (8000ed0 <std+0x270>)
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	701a      	strb	r2, [r3, #0]
			zustand = Z_deliver;
 8000d2e:	4b66      	ldr	r3, [pc, #408]	; (8000ec8 <std+0x268>)
 8000d30:	2203      	movs	r2, #3
 8000d32:	701a      	strb	r2, [r3, #0]
 8000d34:	e01d      	b.n	8000d72 <std+0x112>
		}
		else if (passOn && (!failure)){
 8000d36:	4b6c      	ldr	r3, [pc, #432]	; (8000ee8 <std+0x288>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d00a      	beq.n	8000d54 <std+0xf4>
 8000d3e:	4b67      	ldr	r3, [pc, #412]	; (8000edc <std+0x27c>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d106      	bne.n	8000d54 <std+0xf4>
			aktion = A_passOn;
 8000d46:	4b62      	ldr	r3, [pc, #392]	; (8000ed0 <std+0x270>)
 8000d48:	2203      	movs	r2, #3
 8000d4a:	701a      	strb	r2, [r3, #0]
			zustand = Z_passOn;
 8000d4c:	4b5e      	ldr	r3, [pc, #376]	; (8000ec8 <std+0x268>)
 8000d4e:	2204      	movs	r2, #4
 8000d50:	701a      	strb	r2, [r3, #0]
 8000d52:	e00e      	b.n	8000d72 <std+0x112>
		}
		else if (failure){
 8000d54:	4b61      	ldr	r3, [pc, #388]	; (8000edc <std+0x27c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 80a2 	beq.w	8000ea2 <std+0x242>
			aktion = A_failure;
 8000d5e:	4b5c      	ldr	r3, [pc, #368]	; (8000ed0 <std+0x270>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	701a      	strb	r2, [r3, #0]
			zustand = Z_failure;
 8000d64:	4b58      	ldr	r3, [pc, #352]	; (8000ec8 <std+0x268>)
 8000d66:	2202      	movs	r2, #2
 8000d68:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8000d6a:	4b5a      	ldr	r3, [pc, #360]	; (8000ed4 <std+0x274>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
		}
		/*
		else{
			aktion = A_idle; // TODO: why do we need this so failure for unknown neighbour works??
		}*/
		break;
 8000d70:	e097      	b.n	8000ea2 <std+0x242>
 8000d72:	e096      	b.n	8000ea2 <std+0x242>

	case Z_failure:
		if(poll){
 8000d74:	4b57      	ldr	r3, [pc, #348]	; (8000ed4 <std+0x274>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f000 8094 	beq.w	8000ea6 <std+0x246>
			aktion = A_setup;
 8000d7e:	4b54      	ldr	r3, [pc, #336]	; (8000ed0 <std+0x270>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
			zustand = Z_idle;
 8000d84:	4b50      	ldr	r3, [pc, #320]	; (8000ec8 <std+0x268>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8000d8a:	4b52      	ldr	r3, [pc, #328]	; (8000ed4 <std+0x274>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d90:	e089      	b.n	8000ea6 <std+0x246>

	case Z_deliver:
		if (poll && finishedSend){
 8000d92:	4b50      	ldr	r3, [pc, #320]	; (8000ed4 <std+0x274>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 8087 	beq.w	8000eaa <std+0x24a>
 8000d9c:	4b53      	ldr	r3, [pc, #332]	; (8000eec <std+0x28c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f000 8082 	beq.w	8000eaa <std+0x24a>
			aktion = A_updateLager;
 8000da6:	4b4a      	ldr	r3, [pc, #296]	; (8000ed0 <std+0x270>)
 8000da8:	2206      	movs	r2, #6
 8000daa:	701a      	strb	r2, [r3, #0]
			zustand = Z_sent;
 8000dac:	4b46      	ldr	r3, [pc, #280]	; (8000ec8 <std+0x268>)
 8000dae:	2205      	movs	r2, #5
 8000db0:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8000db2:	4b48      	ldr	r3, [pc, #288]	; (8000ed4 <std+0x274>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000db8:	e077      	b.n	8000eaa <std+0x24a>

	case Z_passOn:
		if (poll && finishedSend){
 8000dba:	4b46      	ldr	r3, [pc, #280]	; (8000ed4 <std+0x274>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d075      	beq.n	8000eae <std+0x24e>
 8000dc2:	4b4a      	ldr	r3, [pc, #296]	; (8000eec <std+0x28c>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d071      	beq.n	8000eae <std+0x24e>
			aktion = A_pulse;
 8000dca:	4b41      	ldr	r3, [pc, #260]	; (8000ed0 <std+0x270>)
 8000dcc:	2205      	movs	r2, #5
 8000dce:	701a      	strb	r2, [r3, #0]
			zustand = Z_sent;
 8000dd0:	4b3d      	ldr	r3, [pc, #244]	; (8000ec8 <std+0x268>)
 8000dd2:	2205      	movs	r2, #5
 8000dd4:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8000dd6:	4b3f      	ldr	r3, [pc, #252]	; (8000ed4 <std+0x274>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000ddc:	e067      	b.n	8000eae <std+0x24e>

	case Z_sent:
		if (poll){
 8000dde:	4b3d      	ldr	r3, [pc, #244]	; (8000ed4 <std+0x274>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d065      	beq.n	8000eb2 <std+0x252>
			aktion = A_setup;
 8000de6:	4b3a      	ldr	r3, [pc, #232]	; (8000ed0 <std+0x270>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
			zustand = Z_idle;
 8000dec:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <std+0x268>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8000df2:	4b38      	ldr	r3, [pc, #224]	; (8000ed4 <std+0x274>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000df8:	e05b      	b.n	8000eb2 <std+0x252>

	case Z_awaiting: // TODO: no GPIO needed for going from awating to send?? maybe something to do with pull up, but it used to work?
		if (GPIO_neighbour_in && await){
 8000dfa:	4b3d      	ldr	r3, [pc, #244]	; (8000ef0 <std+0x290>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d00a      	beq.n	8000e18 <std+0x1b8>
 8000e02:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <std+0x280>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d006      	beq.n	8000e18 <std+0x1b8>
			aktion = A_handleStore;
 8000e0a:	4b31      	ldr	r3, [pc, #196]	; (8000ed0 <std+0x270>)
 8000e0c:	2209      	movs	r2, #9
 8000e0e:	701a      	strb	r2, [r3, #0]
			GPIO_neighbour_in = FALSE; //*
 8000e10:	4b37      	ldr	r3, [pc, #220]	; (8000ef0 <std+0x290>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	e02b      	b.n	8000e70 <std+0x210>
		}
		else if (poll && finishedStore && await){
 8000e18:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <std+0x274>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d011      	beq.n	8000e44 <std+0x1e4>
 8000e20:	4b34      	ldr	r3, [pc, #208]	; (8000ef4 <std+0x294>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d00d      	beq.n	8000e44 <std+0x1e4>
 8000e28:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <std+0x280>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d009      	beq.n	8000e44 <std+0x1e4>
			aktion = A_storeAwait;
 8000e30:	4b27      	ldr	r3, [pc, #156]	; (8000ed0 <std+0x270>)
 8000e32:	220a      	movs	r2, #10
 8000e34:	701a      	strb	r2, [r3, #0]
			zustand = Z_received;
 8000e36:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <std+0x268>)
 8000e38:	2207      	movs	r2, #7
 8000e3a:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8000e3c:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <std+0x274>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	e015      	b.n	8000e70 <std+0x210>
		}
		else if (poll && finishedStore && create){ //else if (poll && finishedStore && create && count	){
 8000e44:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <std+0x274>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d034      	beq.n	8000eb6 <std+0x256>
 8000e4c:	4b29      	ldr	r3, [pc, #164]	; (8000ef4 <std+0x294>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d030      	beq.n	8000eb6 <std+0x256>
 8000e54:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <std+0x278>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d02c      	beq.n	8000eb6 <std+0x256>
			aktion = A_storeCreate;
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <std+0x270>)
 8000e5e:	220b      	movs	r2, #11
 8000e60:	701a      	strb	r2, [r3, #0]
			zustand = Z_received;
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <std+0x268>)
 8000e64:	2207      	movs	r2, #7
 8000e66:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8000e68:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <std+0x274>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
			//count = FALSE;
		}
		break;
 8000e6e:	e022      	b.n	8000eb6 <std+0x256>
 8000e70:	e021      	b.n	8000eb6 <std+0x256>

	case Z_received:
		if (poll){
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <std+0x274>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d009      	beq.n	8000e8e <std+0x22e>
			aktion = A_setup;
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <std+0x270>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
			zustand = Z_idle;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <std+0x268>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <std+0x274>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
		}
		else if(!poll){
			aktion = A_idle; //*
		}
		break;
 8000e8c:	e015      	b.n	8000eba <std+0x25a>
		else if(!poll){
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <std+0x274>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d111      	bne.n	8000eba <std+0x25a>
			aktion = A_idle; //*
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <std+0x270>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
		break;
 8000e9c:	e00d      	b.n	8000eba <std+0x25a>
		break;
 8000e9e:	bf00      	nop
 8000ea0:	e00c      	b.n	8000ebc <std+0x25c>
		break;
 8000ea2:	bf00      	nop
 8000ea4:	e00a      	b.n	8000ebc <std+0x25c>
		break;
 8000ea6:	bf00      	nop
 8000ea8:	e008      	b.n	8000ebc <std+0x25c>
		break;
 8000eaa:	bf00      	nop
 8000eac:	e006      	b.n	8000ebc <std+0x25c>
		break;
 8000eae:	bf00      	nop
 8000eb0:	e004      	b.n	8000ebc <std+0x25c>
		break;
 8000eb2:	bf00      	nop
 8000eb4:	e002      	b.n	8000ebc <std+0x25c>
		break;
 8000eb6:	bf00      	nop
 8000eb8:	e000      	b.n	8000ebc <std+0x25c>
		break;
 8000eba:	bf00      	nop
	}
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	2000066e 	.word	0x2000066e
 8000ecc:	2000066c 	.word	0x2000066c
 8000ed0:	2000066f 	.word	0x2000066f
 8000ed4:	20000667 	.word	0x20000667
 8000ed8:	20000665 	.word	0x20000665
 8000edc:	2000066b 	.word	0x2000066b
 8000ee0:	20000668 	.word	0x20000668
 8000ee4:	20000666 	.word	0x20000666
 8000ee8:	20000664 	.word	0x20000664
 8000eec:	20000669 	.word	0x20000669
 8000ef0:	2000066d 	.word	0x2000066d
 8000ef4:	2000066a 	.word	0x2000066a

08000ef8 <pat>:

//* Kontrollflüsse werden im Interrupt gesetzt und müssen deshalb hier zurückgesetzt werden

// PAT
void pat(void){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	switch(aktion){
 8000efc:	4b32      	ldr	r3, [pc, #200]	; (8000fc8 <pat+0xd0>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b0c      	cmp	r3, #12
 8000f02:	d85e      	bhi.n	8000fc2 <pat+0xca>
 8000f04:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <pat+0x14>)
 8000f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0a:	bf00      	nop
 8000f0c:	08000fc1 	.word	0x08000fc1
 8000f10:	08000f41 	.word	0x08000f41
 8000f14:	08000f4b 	.word	0x08000f4b
 8000f18:	08000f55 	.word	0x08000f55
 8000f1c:	08000f5f 	.word	0x08000f5f
 8000f20:	08000f65 	.word	0x08000f65
 8000f24:	08000f77 	.word	0x08000f77
 8000f28:	08000f85 	.word	0x08000f85
 8000f2c:	08000f8b 	.word	0x08000f8b
 8000f30:	08000f95 	.word	0x08000f95
 8000f34:	08000f9b 	.word	0x08000f9b
 8000f38:	08000fa9 	.word	0x08000fa9
 8000f3c:	08000fb7 	.word	0x08000fb7
	case A_setup:
		resetData(); // TODO: SA/RT
 8000f40:	f7ff fe40 	bl	8000bc4 <resetData>
		stateProcessing();
 8000f44:	f7ff fb2e 	bl	80005a4 <stateProcessing>
		break;
 8000f48:	e03b      	b.n	8000fc2 <pat+0xca>
	case A_deliver: // TODO: A_deliver and A_passOn are identical
		stateProcessing();
 8000f4a:	f7ff fb2b 	bl	80005a4 <stateProcessing>
		handleSend();
 8000f4e:	f7ff fba3 	bl	8000698 <handleSend>
		break;
 8000f52:	e036      	b.n	8000fc2 <pat+0xca>
	case A_passOn:
		stateProcessing();
 8000f54:	f7ff fb26 	bl	80005a4 <stateProcessing>
		handleSend();
 8000f58:	f7ff fb9e 	bl	8000698 <handleSend>
		break;
 8000f5c:	e031      	b.n	8000fc2 <pat+0xca>
	case A_failure:
		stateFailure();
 8000f5e:	f7ff fb51 	bl	8000604 <stateFailure>
		break;
 8000f62:	e02e      	b.n	8000fc2 <pat+0xca>
	case A_pulse:
		animateSend();
 8000f64:	f7ff fbf6 	bl	8000754 <animateSend>
		pulse();
 8000f68:	f7ff fd38 	bl	80009dc <pulse>
		updateLager();
 8000f6c:	f7ff fbd2 	bl	8000714 <updateLager>
		stateSent();
 8000f70:	f7ff fb3c 	bl	80005ec <stateSent>
		break;
 8000f74:	e025      	b.n	8000fc2 <pat+0xca>
	case A_updateLager:
		animateDeliver();
 8000f76:	f7ff fcdf 	bl	8000938 <animateDeliver>
		updateLager();
 8000f7a:	f7ff fbcb 	bl	8000714 <updateLager>
		stateSent();
 8000f7e:	f7ff fb35 	bl	80005ec <stateSent>
		break;
 8000f82:	e01e      	b.n	8000fc2 <pat+0xca>
	case A_await:
		stateAwait();
 8000f84:	f7ff fb1a 	bl	80005bc <stateAwait>
		break;
 8000f88:	e01b      	b.n	8000fc2 <pat+0xca>
	case A_create:
		stateAwait();
 8000f8a:	f7ff fb17 	bl	80005bc <stateAwait>
		handleStore();
 8000f8e:	f7ff fb45 	bl	800061c <handleStore>
		break;
 8000f92:	e016      	b.n	8000fc2 <pat+0xca>
	case A_handleStore:
		handleStore();
 8000f94:	f7ff fb42 	bl	800061c <handleStore>
		break;
 8000f98:	e013      	b.n	8000fc2 <pat+0xca>
	case A_storeAwait:
		animateReceive();
 8000f9a:	f7ff fc27 	bl	80007ec <animateReceive>
		updateLager();
 8000f9e:	f7ff fbb9 	bl	8000714 <updateLager>
		stateReceived();
 8000fa2:	f7ff fb17 	bl	80005d4 <stateReceived>
		break;
 8000fa6:	e00c      	b.n	8000fc2 <pat+0xca>
	case A_storeCreate:
		animateCreate();
 8000fa8:	f7ff fc70 	bl	800088c <animateCreate>
		updateLager();
 8000fac:	f7ff fbb2 	bl	8000714 <updateLager>
		stateReceived();
 8000fb0:	f7ff fb10 	bl	80005d4 <stateReceived>
		break;
 8000fb4:	e005      	b.n	8000fc2 <pat+0xca>
	case A_checkFailure:
		checkFailure();
 8000fb6:	f7ff fd4d 	bl	8000a54 <checkFailure>
		stateProcessing();
 8000fba:	f7ff faf3 	bl	80005a4 <stateProcessing>
		break;
 8000fbe:	e000      	b.n	8000fc2 <pat+0xca>

	//TODO: SA/RT
	case A_idle:
		break;
 8000fc0:	bf00      	nop
	}
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000066f 	.word	0x2000066f

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  //ColorRGB_t* pixel[WS2812_NUM_LEDS_Y][WS2812_NUM_LEDS_X] = {0}; // fill with &color[C_COLOR]
                                                                
  /* maze vars */
  uint8_t startX = 1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	737b      	strb	r3, [r7, #13]
  uint8_t startY = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	733b      	strb	r3, [r7, #12]
  uint8_t exitX = WS2812_NUM_LEDS_X - 2;
 8000fda:	2326      	movs	r3, #38	; 0x26
 8000fdc:	72fb      	strb	r3, [r7, #11]
  uint8_t exitY = WS2812_NUM_LEDS_Y - 1;
 8000fde:	2317      	movs	r3, #23
 8000fe0:	72bb      	strb	r3, [r7, #10]

  uint16_t i = 0, x = 0, y = 0; // index variables
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	81fb      	strh	r3, [r7, #14]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	813b      	strh	r3, [r7, #8]
 8000fea:	2300      	movs	r3, #0
 8000fec:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fee:	f001 fc57 	bl	80028a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 f865 	bl	80010c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f000 fa43 	bl	8001480 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ffa:	f000 fa19 	bl	8001430 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ffe:	f000 f9ed 	bl	80013dc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001002:	f000 f9c1 	bl	8001388 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001006:	f000 f8fd 	bl	8001204 <MX_TIM2_Init>
  MX_TIM3_Init();
 800100a:	f000 f96f 	bl	80012ec <MX_TIM3_Init>
  MX_SPI2_Init();
 800100e:	f000 f8c3 	bl	8001198 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_buf, L1_PDU_size);
 8001012:	2210      	movs	r2, #16
 8001014:	491f      	ldr	r1, [pc, #124]	; (8001094 <main+0xc8>)
 8001016:	4820      	ldr	r0, [pc, #128]	; (8001098 <main+0xcc>)
 8001018:	f004 ff14 	bl	8005e44 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800101c:	481f      	ldr	r0, [pc, #124]	; (800109c <main+0xd0>)
 800101e:	f003 fc6b 	bl	80048f8 <HAL_TIM_Base_Start_IT>
  ws2812_init();
 8001022:	f001 fb79 	bl	8002718 <ws2812_init>
  initMaze(&maze, WS2812_NUM_LEDS_Y, WS2812_NUM_LEDS_X, startX, startY, exitX, exitY);
 8001026:	7b7a      	ldrb	r2, [r7, #13]
 8001028:	7abb      	ldrb	r3, [r7, #10]
 800102a:	9302      	str	r3, [sp, #8]
 800102c:	7afb      	ldrb	r3, [r7, #11]
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	7b3b      	ldrb	r3, [r7, #12]
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	4613      	mov	r3, r2
 8001036:	2228      	movs	r2, #40	; 0x28
 8001038:	2118      	movs	r1, #24
 800103a:	4819      	ldr	r0, [pc, #100]	; (80010a0 <main+0xd4>)
 800103c:	f000 ff19 	bl	8001e72 <initMaze>
  initPath(&path, WS2812_NUM_LEDS_Y * WS2812_NUM_LEDS_X);
 8001040:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001044:	4817      	ldr	r0, [pc, #92]	; (80010a4 <main+0xd8>)
 8001046:	f001 f810 	bl	800206a <initPath>
  initPRNG(&rng, numbers, SIZE_NUMBERS);
 800104a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800104e:	4916      	ldr	r1, [pc, #88]	; (80010a8 <main+0xdc>)
 8001050:	4816      	ldr	r0, [pc, #88]	; (80010ac <main+0xe0>)
 8001052:	f001 f85f 	bl	8002114 <initPRNG>
	// Zustandsuebergangsdiagramm reset
	zustand = Z_idle;
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <main+0xe4>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
	aktion = A_idle;
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <main+0xe8>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
	pat();
 8001062:	f7ff ff49 	bl	8000ef8 <pat>
    
	// Reset storage LEDs
	for(i = 0; i < LAGER_SIZE; i++){
 8001066:	2300      	movs	r3, #0
 8001068:	81fb      	strh	r3, [r7, #14]
 800106a:	e008      	b.n	800107e <main+0xb2>
		pixels[i] = color[C_BLACK];
 800106c:	89fb      	ldrh	r3, [r7, #14]
 800106e:	4912      	ldr	r1, [pc, #72]	; (80010b8 <main+0xec>)
 8001070:	4a12      	ldr	r2, [pc, #72]	; (80010bc <main+0xf0>)
 8001072:	6812      	ldr	r2, [r2, #0]
 8001074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i = 0; i < LAGER_SIZE; i++){
 8001078:	89fb      	ldrh	r3, [r7, #14]
 800107a:	3301      	adds	r3, #1
 800107c:	81fb      	strh	r3, [r7, #14]
 800107e:	89fb      	ldrh	r3, [r7, #14]
 8001080:	2b05      	cmp	r3, #5
 8001082:	d9f3      	bls.n	800106c <main+0xa0>
	}
	writeLEDs(pixels);
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <main+0xec>)
 8001086:	f7ff fa2f 	bl	80004e8 <writeLEDs>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	std();
 800108a:	f7ff fde9 	bl	8000c60 <std>
	pat();
 800108e:	f7ff ff33 	bl	8000ef8 <pat>
	std();
 8001092:	e7fa      	b.n	800108a <main+0xbe>
 8001094:	200002f8 	.word	0x200002f8
 8001098:	2000026c 	.word	0x2000026c
 800109c:	200001c4 	.word	0x200001c4
 80010a0:	20000670 	.word	0x20000670
 80010a4:	20000698 	.word	0x20000698
 80010a8:	20000048 	.word	0x20000048
 80010ac:	200006a0 	.word	0x200006a0
 80010b0:	2000066e 	.word	0x2000066e
 80010b4:	2000066f 	.word	0x2000066f
 80010b8:	2000062c 	.word	0x2000062c
 80010bc:	20000004 	.word	0x20000004

080010c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b094      	sub	sp, #80	; 0x50
 80010c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	2230      	movs	r2, #48	; 0x30
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f005 fe9e 	bl	8006e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	4b29      	ldr	r3, [pc, #164]	; (8001190 <SystemClock_Config+0xd0>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	4a28      	ldr	r2, [pc, #160]	; (8001190 <SystemClock_Config+0xd0>)
 80010ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f2:	6413      	str	r3, [r2, #64]	; 0x40
 80010f4:	4b26      	ldr	r3, [pc, #152]	; (8001190 <SystemClock_Config+0xd0>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <SystemClock_Config+0xd4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800110c:	4a21      	ldr	r2, [pc, #132]	; (8001194 <SystemClock_Config+0xd4>)
 800110e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <SystemClock_Config+0xd4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001120:	2302      	movs	r3, #2
 8001122:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001124:	2301      	movs	r3, #1
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001128:	2310      	movs	r3, #16
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112c:	2302      	movs	r3, #2
 800112e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001130:	2300      	movs	r3, #0
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001134:	2310      	movs	r3, #16
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001138:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800113c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800113e:	2304      	movs	r3, #4
 8001140:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001142:	2307      	movs	r3, #7
 8001144:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	4618      	mov	r0, r3
 800114c:	f002 fb44 	bl	80037d8 <HAL_RCC_OscConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001156:	f000 fe87 	bl	8001e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115a:	230f      	movs	r3, #15
 800115c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115e:	2302      	movs	r3, #2
 8001160:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2102      	movs	r1, #2
 8001176:	4618      	mov	r0, r3
 8001178:	f002 fda6 	bl	8003cc8 <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001182:	f000 fe71 	bl	8001e68 <Error_Handler>
  }
}
 8001186:	bf00      	nop
 8001188:	3750      	adds	r7, #80	; 0x50
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <MX_SPI2_Init+0x64>)
 800119e:	4a18      	ldr	r2, [pc, #96]	; (8001200 <MX_SPI2_Init+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_SPI2_Init+0x64>)
 80011a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_SPI2_Init+0x64>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_SPI2_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_SPI2_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_SPI2_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_SPI2_Init+0x64>)
 80011c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_SPI2_Init+0x64>)
 80011cc:	2218      	movs	r2, #24
 80011ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <MX_SPI2_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_SPI2_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <MX_SPI2_Init+0x64>)
 80011de:	2200      	movs	r2, #0
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_SPI2_Init+0x64>)
 80011e4:	220a      	movs	r2, #10
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_SPI2_Init+0x64>)
 80011ea:	f002 ff8d 	bl	8004108 <HAL_SPI_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80011f4:	f000 fe38 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200000c4 	.word	0x200000c4
 8001200:	40003800 	.word	0x40003800

08001204 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	; 0x38
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	f107 0320 	add.w	r3, r7, #32
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001234:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <MX_TIM2_Init+0xe4>)
 8001236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800123a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800123c:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <MX_TIM2_Init+0xe4>)
 800123e:	2200      	movs	r2, #0
 8001240:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <MX_TIM2_Init+0xe4>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001248:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <MX_TIM2_Init+0xe4>)
 800124a:	2264      	movs	r2, #100	; 0x64
 800124c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <MX_TIM2_Init+0xe4>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <MX_TIM2_Init+0xe4>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800125a:	4823      	ldr	r0, [pc, #140]	; (80012e8 <MX_TIM2_Init+0xe4>)
 800125c:	f003 fafc 	bl	8004858 <HAL_TIM_Base_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001266:	f000 fdff 	bl	8001e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001270:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001274:	4619      	mov	r1, r3
 8001276:	481c      	ldr	r0, [pc, #112]	; (80012e8 <MX_TIM2_Init+0xe4>)
 8001278:	f004 f83a 	bl	80052f0 <HAL_TIM_ConfigClockSource>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001282:	f000 fdf1 	bl	8001e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001286:	4818      	ldr	r0, [pc, #96]	; (80012e8 <MX_TIM2_Init+0xe4>)
 8001288:	f003 fb98 	bl	80049bc <HAL_TIM_PWM_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001292:	f000 fde9 	bl	8001e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	4619      	mov	r1, r3
 80012a4:	4810      	ldr	r0, [pc, #64]	; (80012e8 <MX_TIM2_Init+0xe4>)
 80012a6:	f004 fcb9 	bl	8005c1c <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80012b0:	f000 fdda 	bl	8001e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b4:	2360      	movs	r3, #96	; 0x60
 80012b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2208      	movs	r2, #8
 80012c8:	4619      	mov	r1, r3
 80012ca:	4807      	ldr	r0, [pc, #28]	; (80012e8 <MX_TIM2_Init+0xe4>)
 80012cc:	f003 ff4e 	bl	800516c <HAL_TIM_PWM_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80012d6:	f000 fdc7 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012da:	4803      	ldr	r0, [pc, #12]	; (80012e8 <MX_TIM2_Init+0xe4>)
 80012dc:	f001 f872 	bl	80023c4 <HAL_TIM_MspPostInit>

}
 80012e0:	bf00      	nop
 80012e2:	3738      	adds	r7, #56	; 0x38
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000017c 	.word	0x2000017c

080012ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001308:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <MX_TIM3_Init+0x94>)
 800130a:	4a1e      	ldr	r2, [pc, #120]	; (8001384 <MX_TIM3_Init+0x98>)
 800130c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <MX_TIM3_Init+0x94>)
 8001310:	f242 7210 	movw	r2, #10000	; 0x2710
 8001314:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <MX_TIM3_Init+0x94>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4200;
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <MX_TIM3_Init+0x94>)
 800131e:	f241 0268 	movw	r2, #4200	; 0x1068
 8001322:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <MX_TIM3_Init+0x94>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <MX_TIM3_Init+0x94>)
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001330:	4813      	ldr	r0, [pc, #76]	; (8001380 <MX_TIM3_Init+0x94>)
 8001332:	f003 fa91 	bl	8004858 <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800133c:	f000 fd94 	bl	8001e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001344:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	4619      	mov	r1, r3
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <MX_TIM3_Init+0x94>)
 800134e:	f003 ffcf 	bl	80052f0 <HAL_TIM_ConfigClockSource>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001358:	f000 fd86 	bl	8001e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_TIM3_Init+0x94>)
 800136a:	f004 fc57 	bl	8005c1c <HAL_TIMEx_MasterConfigSynchronization>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001374:	f000 fd78 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200001c4 	.word	0x200001c4
 8001384:	40000400 	.word	0x40000400

08001388 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <MX_USART1_UART_Init+0x50>)
 8001390:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 8001394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001398:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 80013c0:	f004 fcae 	bl	8005d20 <HAL_UART_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013ca:	f000 fd4d 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000026c 	.word	0x2000026c
 80013d8:	40011000 	.word	0x40011000

080013dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <MX_USART2_UART_Init+0x50>)
 80013e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 80013e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 8001414:	f004 fc84 	bl	8005d20 <HAL_UART_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800141e:	f000 fd23 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200002b0 	.word	0x200002b0
 800142c:	40004400 	.word	0x40004400

08001430 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_DMA_Init+0x4c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a0f      	ldr	r2, [pc, #60]	; (800147c <MX_DMA_Init+0x4c>)
 8001440:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <MX_DMA_Init+0x4c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	200c      	movs	r0, #12
 8001458:	f001 fbb7 	bl	8002bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800145c:	200c      	movs	r0, #12
 800145e:	f001 fbd0 	bl	8002c02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	200f      	movs	r0, #15
 8001468:	f001 fbaf 	bl	8002bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800146c:	200f      	movs	r0, #15
 800146e:	f001 fbc8 	bl	8002c02 <HAL_NVIC_EnableIRQ>

}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b5c      	ldr	r3, [pc, #368]	; (800160c <MX_GPIO_Init+0x18c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a5b      	ldr	r2, [pc, #364]	; (800160c <MX_GPIO_Init+0x18c>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b59      	ldr	r3, [pc, #356]	; (800160c <MX_GPIO_Init+0x18c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b55      	ldr	r3, [pc, #340]	; (800160c <MX_GPIO_Init+0x18c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a54      	ldr	r2, [pc, #336]	; (800160c <MX_GPIO_Init+0x18c>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b52      	ldr	r3, [pc, #328]	; (800160c <MX_GPIO_Init+0x18c>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	4b4e      	ldr	r3, [pc, #312]	; (800160c <MX_GPIO_Init+0x18c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a4d      	ldr	r2, [pc, #308]	; (800160c <MX_GPIO_Init+0x18c>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b4b      	ldr	r3, [pc, #300]	; (800160c <MX_GPIO_Init+0x18c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b47      	ldr	r3, [pc, #284]	; (800160c <MX_GPIO_Init+0x18c>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a46      	ldr	r2, [pc, #280]	; (800160c <MX_GPIO_Init+0x18c>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b44      	ldr	r3, [pc, #272]	; (800160c <MX_GPIO_Init+0x18c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	2120      	movs	r1, #32
 800150a:	4841      	ldr	r0, [pc, #260]	; (8001610 <MX_GPIO_Init+0x190>)
 800150c:	f002 f932 	bl	8003774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_N1_Pin|S_N2_Pin|S_N3_Pin|S_N4_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001516:	483f      	ldr	r0, [pc, #252]	; (8001614 <MX_GPIO_Init+0x194>)
 8001518:	f002 f92c 	bl	8003774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800151c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001522:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	4838      	ldr	r0, [pc, #224]	; (8001614 <MX_GPIO_Init+0x194>)
 8001534:	f001 ff82 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pins : R_N1_Pin R_N3_Pin */
  GPIO_InitStruct.Pin = R_N1_Pin|R_N3_Pin;
 8001538:	2305      	movs	r3, #5
 800153a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800153c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001542:	2302      	movs	r3, #2
 8001544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	4831      	ldr	r0, [pc, #196]	; (8001614 <MX_GPIO_Init+0x194>)
 800154e:	f001 ff75 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pin : R_N2_Pin */
  GPIO_InitStruct.Pin = R_N2_Pin;
 8001552:	2302      	movs	r3, #2
 8001554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001556:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800155a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R_N2_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	482b      	ldr	r0, [pc, #172]	; (8001614 <MX_GPIO_Init+0x194>)
 8001568:	f001 ff68 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800156c:	2320      	movs	r3, #32
 800156e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001570:	2301      	movs	r3, #1
 8001572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	4823      	ldr	r0, [pc, #140]	; (8001610 <MX_GPIO_Init+0x190>)
 8001584:	f001 ff5a 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pins : S_N1_Pin S_N2_Pin S_N3_Pin S_N4_Pin */
  GPIO_InitStruct.Pin = S_N1_Pin|S_N2_Pin|S_N3_Pin|S_N4_Pin;
 8001588:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800158c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	481c      	ldr	r0, [pc, #112]	; (8001614 <MX_GPIO_Init+0x194>)
 80015a2:	f001 ff4b 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pin : R_N4_Pin */
  GPIO_InitStruct.Pin = R_N4_Pin;
 80015a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R_N4_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	4814      	ldr	r0, [pc, #80]	; (8001610 <MX_GPIO_Init+0x190>)
 80015be:	f001 ff3d 	bl	800343c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2006      	movs	r0, #6
 80015c8:	f001 faff 	bl	8002bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015cc:	2006      	movs	r0, #6
 80015ce:	f001 fb18 	bl	8002c02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2007      	movs	r0, #7
 80015d8:	f001 faf7 	bl	8002bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80015dc:	2007      	movs	r0, #7
 80015de:	f001 fb10 	bl	8002c02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	2008      	movs	r0, #8
 80015e8:	f001 faef 	bl	8002bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80015ec:	2008      	movs	r0, #8
 80015ee:	f001 fb08 	bl	8002c02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	2028      	movs	r0, #40	; 0x28
 80015f8:	f001 fae7 	bl	8002bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015fc:	2028      	movs	r0, #40	; 0x28
 80015fe:	f001 fb00 	bl	8002c02 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	; 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	40020000 	.word	0x40020000
 8001614:	40020800 	.word	0x40020800

08001618 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Rx Transfer completed callbacks.
// Gets called when HAL_UART_Receive_IT receive is completed
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){ // check if something was received on UART1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a10      	ldr	r2, [pc, #64]	; (8001668 <HAL_UART_RxCpltCallback+0x50>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d111      	bne.n	800164e <HAL_UART_RxCpltCallback+0x36>
		for(int i = 0; i < L1_PDU_size; i++){ // copy received packet from buffer
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	e00b      	b.n	8001648 <HAL_UART_RxCpltCallback+0x30>
			L1_PDU[i] = rx_buf[i];
 8001630:	4a0e      	ldr	r2, [pc, #56]	; (800166c <HAL_UART_RxCpltCallback+0x54>)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4413      	add	r3, r2
 8001636:	7819      	ldrb	r1, [r3, #0]
 8001638:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <HAL_UART_RxCpltCallback+0x58>)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4413      	add	r3, r2
 800163e:	460a      	mov	r2, r1
 8001640:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < L1_PDU_size; i++){ // copy received packet from buffer
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	3301      	adds	r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b0f      	cmp	r3, #15
 800164c:	ddf0      	ble.n	8001630 <HAL_UART_RxCpltCallback+0x18>
		}
	}
  HAL_UART_Receive_IT(&huart1, rx_buf, L1_PDU_size); // Attach interrupt to receive L1_PDU from USART
 800164e:	2210      	movs	r2, #16
 8001650:	4906      	ldr	r1, [pc, #24]	; (800166c <HAL_UART_RxCpltCallback+0x54>)
 8001652:	4808      	ldr	r0, [pc, #32]	; (8001674 <HAL_UART_RxCpltCallback+0x5c>)
 8001654:	f004 fbf6 	bl	8005e44 <HAL_UART_Receive_IT>
  L1_receive(L1_PDU); // Pass L1_PDU to protocol stack
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <HAL_UART_RxCpltCallback+0x58>)
 800165a:	f000 f87f 	bl	800175c <L1_receive>
}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40011000 	.word	0x40011000
 800166c:	200002f8 	.word	0x200002f8
 8001670:	20000308 	.word	0x20000308
 8001674:	2000026c 	.word	0x2000026c

08001678 <HAL_UART_TxCpltCallback>:

// Tx Transfer completed callbacks.
// Gets called when HAL_UART_Transmit_IT transmission is completed
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	tx_complete = 1; // packet received
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <HAL_UART_TxCpltCallback+0x1c>)
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	200002f4 	.word	0x200002f4

08001698 <HAL_GPIO_EXTI_Callback>:

// GPIO interrupt callback
// increments button press counter
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	80fb      	strh	r3, [r7, #6]
	// rising edge at button pin was detected and DEBOUNCE_INTERVAL has elapsed since last rising edge
	if (GPIO_Pin == B1_Pin){
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016a8:	d115      	bne.n	80016d6 <HAL_GPIO_EXTI_Callback+0x3e>
		millis = HAL_GetTick(); // get current elapsed time in milliseconds
 80016aa:	f001 f95f 	bl	800296c <HAL_GetTick>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4a22      	ldr	r2, [pc, #136]	; (800173c <HAL_GPIO_EXTI_Callback+0xa4>)
 80016b2:	6013      	str	r3, [r2, #0]
		if((millis - lastPress) > DEBOUNCE_INTERVAL){
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <HAL_GPIO_EXTI_Callback+0xa4>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b21      	ldr	r3, [pc, #132]	; (8001740 <HAL_GPIO_EXTI_Callback+0xa8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b0a      	cmp	r3, #10
 80016c0:	d909      	bls.n	80016d6 <HAL_GPIO_EXTI_Callback+0x3e>
			cnt++;
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_GPIO_EXTI_Callback+0xac>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	3301      	adds	r3, #1
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <HAL_GPIO_EXTI_Callback+0xac>)
 80016cc:	701a      	strb	r2, [r3, #0]
			lastPress = millis;
 80016ce:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_GPIO_EXTI_Callback+0xa4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a1b      	ldr	r2, [pc, #108]	; (8001740 <HAL_GPIO_EXTI_Callback+0xa8>)
 80016d4:	6013      	str	r3, [r2, #0]
		}
	}

    for (uint8_t i = 0; i < NUM_NEIGHBOURS; i++) {
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]
 80016da:	e026      	b.n	800172a <HAL_GPIO_EXTI_Callback+0x92>
	  // rising edge at neighbor receive pin i was detected and packet should be received from neighbour i
	  if((GPIO_Pin == neighbourReceivePins[i]) && (neighbourIDs[i] == partnerId)){
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <HAL_GPIO_EXTI_Callback+0xb0>)
 80016e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016e4:	88fa      	ldrh	r2, [r7, #6]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d11c      	bne.n	8001724 <HAL_GPIO_EXTI_Callback+0x8c>
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	4a17      	ldr	r2, [pc, #92]	; (800174c <HAL_GPIO_EXTI_Callback+0xb4>)
 80016ee:	5cd2      	ldrb	r2, [r2, r3]
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_GPIO_EXTI_Callback+0xb8>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d115      	bne.n	8001724 <HAL_GPIO_EXTI_Callback+0x8c>
        HAL_Delay(DEBOUNCE_INTERVAL);
 80016f8:	200a      	movs	r0, #10
 80016fa:	f001 f943 	bl	8002984 <HAL_Delay>
        // check if pin is still high after debounce interval
        if (HAL_GPIO_ReadPin(neighbourReceivePorts[i], neighbourReceivePins[i]) == GPIO_PIN_SET) {
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	4a14      	ldr	r2, [pc, #80]	; (8001754 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001706:	4618      	mov	r0, r3
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <HAL_GPIO_EXTI_Callback+0xb0>)
 800170c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001710:	4619      	mov	r1, r3
 8001712:	f002 f817 	bl	8003744 <HAL_GPIO_ReadPin>
 8001716:	4603      	mov	r3, r0
 8001718:	2b01      	cmp	r3, #1
 800171a:	d103      	bne.n	8001724 <HAL_GPIO_EXTI_Callback+0x8c>
	  	  GPIO_neighbour_in = TRUE;
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_GPIO_EXTI_Callback+0xc0>)
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
          break;
 8001722:	e006      	b.n	8001732 <HAL_GPIO_EXTI_Callback+0x9a>
    for (uint8_t i = 0; i < NUM_NEIGHBOURS; i++) {
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	3301      	adds	r3, #1
 8001728:	73fb      	strb	r3, [r7, #15]
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	2b03      	cmp	r3, #3
 800172e:	d9d5      	bls.n	80016dc <HAL_GPIO_EXTI_Callback+0x44>
	//// rising edge at neighbour receive pin 1 was detected and packet should be received from neighbour 1
    //else if((GPIO_Pin == R_N4_Pin) && (neighbourIDs[3] == partnerId)){
	//	GPIO_neighbour_in = TRUE;
	//}

}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000031c 	.word	0x2000031c
 8001740:	20000320 	.word	0x20000320
 8001744:	20000318 	.word	0x20000318
 8001748:	08006eb8 	.word	0x08006eb8
 800174c:	08006ec8 	.word	0x08006ec8
 8001750:	2000064f 	.word	0x2000064f
 8001754:	08006ec0 	.word	0x08006ec0
 8001758:	2000066d 	.word	0x2000066d

0800175c <L1_receive>:

/* protocol stack functions begin */
void L1_receive(uint8_t L1_PDU[]){
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	// remove first (SOF) and last (EOF) byte from packet to get L1_SDU
	uint8_t L1_SDU[L1_SDU_size] = {0};
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	811a      	strh	r2, [r3, #8]

	for(int i = 0; i < L1_SDU_size; i++){
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
 8001778:	e00d      	b.n	8001796 <L1_receive+0x3a>
		L1_SDU[i] = L1_PDU[i+1];
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3301      	adds	r3, #1
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	7819      	ldrb	r1, [r3, #0]
 8001784:	f107 020c 	add.w	r2, r7, #12
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	4413      	add	r3, r2
 800178c:	460a      	mov	r2, r1
 800178e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L1_SDU_size; i++){
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	3301      	adds	r3, #1
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	2b0d      	cmp	r3, #13
 800179a:	ddee      	ble.n	800177a <L1_receive+0x1e>
	}
	L2_receive(L1_SDU); // L1_SDU = L2_PDU
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 f805 	bl	80017b0 <L2_receive>
}
 80017a6:	bf00      	nop
 80017a8:	3720      	adds	r7, #32
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <L2_receive>:

void L2_receive(uint8_t L2_PDU[]){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	uint8_t L2_SDU[L2_SDU_size] = {0};
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	721a      	strb	r2, [r3, #8]
	uint8_t checksum = L2_PDU[13]; // last byte is checksum
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7b5b      	ldrb	r3, [r3, #13]
 80017cc:	76fb      	strb	r3, [r7, #27]

	for(int i = 0; i < L2_SDU_size; i++){ // remove last byte (checksum) to get L2_SDU
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
 80017d2:	e00c      	b.n	80017ee <L2_receive+0x3e>
		L2_SDU[i] = L2_PDU[i];
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	7819      	ldrb	r1, [r3, #0]
 80017dc:	f107 020c 	add.w	r2, r7, #12
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	4413      	add	r3, r2
 80017e4:	460a      	mov	r2, r1
 80017e6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L2_SDU_size; i++){ // remove last byte (checksum) to get L2_SDU
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	3301      	adds	r3, #1
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	2b0c      	cmp	r3, #12
 80017f2:	ddef      	ble.n	80017d4 <L2_receive+0x24>
	}

	if(crcSlow(L2_SDU, L2_SDU_size) == checksum){ // checksum is valid -> pass packet to next Layer
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	210d      	movs	r1, #13
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fafc 	bl	8001df8 <crcSlow>
 8001800:	4603      	mov	r3, r0
 8001802:	461a      	mov	r2, r3
 8001804:	7efb      	ldrb	r3, [r7, #27]
 8001806:	4293      	cmp	r3, r2
 8001808:	d105      	bne.n	8001816 <L2_receive+0x66>
		L3_receive(L2_SDU); // L2_SDU = L3_PDU
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f80a 	bl	8001828 <L3_receive>
	} else { // checksum is invalid -> discard packet
		tx_complete = 1;
	}
}
 8001814:	e002      	b.n	800181c <L2_receive+0x6c>
		tx_complete = 1;
 8001816:	4b03      	ldr	r3, [pc, #12]	; (8001824 <L2_receive+0x74>)
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]
}
 800181c:	bf00      	nop
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	200002f4 	.word	0x200002f4

08001828 <L3_receive>:

void L3_receive(uint8_t L3_PDU[]){
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	uint8_t L3_SDU[L3_SDU_size] = {0};
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	711a      	strb	r2, [r3, #4]

	for(int i = 0; i < L3_SDU_size; i++){ // remove first 4 bytes (To, From, Vers, Hops) tp get L3_SDU
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	e00d      	b.n	8001860 <L3_receive+0x38>
		L3_SDU[i] = L3_PDU[i+4];
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3304      	adds	r3, #4
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	4413      	add	r3, r2
 800184c:	7819      	ldrb	r1, [r3, #0]
 800184e:	f107 0208 	add.w	r2, r7, #8
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	4413      	add	r3, r2
 8001856:	460a      	mov	r2, r1
 8001858:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L3_SDU_size; i++){ // remove first 4 bytes (To, From, Vers, Hops) tp get L3_SDU
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	3301      	adds	r3, #1
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2b08      	cmp	r3, #8
 8001864:	ddee      	ble.n	8001844 <L3_receive+0x1c>
	}
	if(L3_PDU[0] != MMCP_MASTER_ADDRESS && L3_PDU[1] == MMCP_MASTER_ADDRESS && L3_PDU[2] == MMCP_VERSION){ // packet is not addressed to master, is from master and version is correct -> packet is valid
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d014      	beq.n	8001898 <L3_receive+0x70>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3301      	adds	r3, #1
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10f      	bne.n	8001898 <L3_receive+0x70>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3302      	adds	r3, #2
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b05      	cmp	r3, #5
 8001880:	d10a      	bne.n	8001898 <L3_receive+0x70>
		if(L3_PDU[0] == myAddress){ // packet is addressed to this device -> pass packet to next Layer
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	781a      	ldrb	r2, [r3, #0]
 8001886:	4b19      	ldr	r3, [pc, #100]	; (80018ec <L3_receive+0xc4>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d104      	bne.n	8001898 <L3_receive+0x70>
			L7_receive(L3_SDU); // L3_SDU = L7_PDU)
 800188e:	f107 0308 	add.w	r3, r7, #8
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f82e 	bl	80018f4 <L7_receive>
		}
	}
	if(L3_PDU[0] != myAddress && L3_PDU[2] == MMCP_VERSION){ // packet is addressed to different device -> forward packet
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	781a      	ldrb	r2, [r3, #0]
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <L3_receive+0xc4>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d00e      	beq.n	80018c2 <L3_receive+0x9a>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3302      	adds	r3, #2
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b05      	cmp	r3, #5
 80018ac:	d109      	bne.n	80018c2 <L3_receive+0x9a>
		L3_PDU[3]++; // increment hop-counter
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3303      	adds	r3, #3
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	3201      	adds	r2, #1
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	701a      	strb	r2, [r3, #0]
		L2_send(L3_PDU);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f918 	bl	8001af0 <L2_send>
	}
	else if(L3_PDU[0] == MMCP_MASTER_ADDRESS && L3_PDU[1] == MMCP_MASTER_ADDRESS && L3_PDU[2] == MMCP_VERSION){ // packet is addressed from master to master (invalid) -> discard packet
		tx_complete = 1;
	}
}
 80018c0:	e010      	b.n	80018e4 <L3_receive+0xbc>
	else if(L3_PDU[0] == MMCP_MASTER_ADDRESS && L3_PDU[1] == MMCP_MASTER_ADDRESS && L3_PDU[2] == MMCP_VERSION){ // packet is addressed from master to master (invalid) -> discard packet
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10c      	bne.n	80018e4 <L3_receive+0xbc>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3301      	adds	r3, #1
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d107      	bne.n	80018e4 <L3_receive+0xbc>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3302      	adds	r3, #2
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b05      	cmp	r3, #5
 80018dc:	d102      	bne.n	80018e4 <L3_receive+0xbc>
		tx_complete = 1;
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <L3_receive+0xc8>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
}
 80018e4:	bf00      	nop
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000000 	.word	0x20000000
 80018f0:	200002f4 	.word	0x200002f4

080018f4 <L7_receive>:

void L7_receive(uint8_t L7_PDU[]){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	uint8_t L7_SDU[L7_SDU_size] = {0};
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	2300      	movs	r3, #0
 8001902:	61bb      	str	r3, [r7, #24]
	uint8_t L7_SDU_send[L7_SDU_size] = {0}; // information to send back
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < L7_SDU_size; i++){ // remove first byte (ApNr) to get L7_SDU
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	e00d      	b.n	800192e <L7_receive+0x3a>
		L7_SDU[i] = L7_PDU[i+1];
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3301      	adds	r3, #1
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	7819      	ldrb	r1, [r3, #0]
 800191c:	f107 0214 	add.w	r2, r7, #20
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	4413      	add	r3, r2
 8001924:	460a      	mov	r2, r1
 8001926:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L7_SDU_size; i++){ // remove first byte (ApNr) to get L7_SDU
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	3301      	adds	r3, #1
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	2b07      	cmp	r3, #7
 8001932:	ddee      	ble.n	8001912 <L7_receive+0x1e>
	}

	// ApNr 42
	// await / create package
	// send back received L7_SDU
	if(L7_PDU[0] == 42){
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b2a      	cmp	r3, #42	; 0x2a
 800193a:	d10d      	bne.n	8001958 <L7_receive+0x64>
		ApNr_42(L7_SDU, L7_SDU_send);
 800193c:	f107 020c 	add.w	r2, r7, #12
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f92c 	bl	8001ba4 <ApNr_42>
		L7_send(42, L7_SDU_send);
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	4619      	mov	r1, r3
 8001952:	202a      	movs	r0, #42	; 0x2a
 8001954:	f000 f86c 	bl	8001a30 <L7_send>
	}

	// ApNr 43
	// pass on / deliver package
	// send back received L7_SDU
	if(L7_PDU[0] == 43){
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b2b      	cmp	r3, #43	; 0x2b
 800195e:	d10d      	bne.n	800197c <L7_receive+0x88>
		ApNr_43(L7_SDU, L7_SDU_send);
 8001960:	f107 020c 	add.w	r2, r7, #12
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f95c 	bl	8001c28 <ApNr_43>
		L7_send(43, L7_SDU_send);
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	4619      	mov	r1, r3
 8001976:	202b      	movs	r0, #43	; 0x2b
 8001978:	f000 f85a 	bl	8001a30 <L7_send>
	}

	// ApNr 50
	// poll status
	if(L7_PDU[0] == 50){
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b32      	cmp	r3, #50	; 0x32
 8001982:	d10d      	bne.n	80019a0 <L7_receive+0xac>
		ApNr_50(L7_SDU, L7_SDU_send);
 8001984:	f107 020c 	add.w	r2, r7, #12
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4611      	mov	r1, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f98c 	bl	8001cac <ApNr_50>
		L7_send(50, L7_SDU_send);
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	4619      	mov	r1, r3
 800199a:	2032      	movs	r0, #50	; 0x32
 800199c:	f000 f848 	bl	8001a30 <L7_send>
	}

	// ApNr 100
	// turn on onboard LED if last byte of L7_SDU is not 0
	// send back received L7_SDU
	if(L7_PDU[0] == 100){
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b64      	cmp	r3, #100	; 0x64
 80019a6:	d10d      	bne.n	80019c4 <L7_receive+0xd0>
		ApNr_100(L7_SDU, L7_SDU_send);
 80019a8:	f107 020c 	add.w	r2, r7, #12
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f9b8 	bl	8001d28 <ApNr_100>
		L7_send(100, L7_SDU_send);
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	4619      	mov	r1, r3
 80019be:	2064      	movs	r0, #100	; 0x64
 80019c0:	f000 f836 	bl	8001a30 <L7_send>
	}

	// ApNr 101
	// ignore information in L7_SDU
	// send back button presses counter in L7_SDU[7], reset counter
	if(L7_PDU[0] == 101){
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b65      	cmp	r3, #101	; 0x65
 80019ca:	d10a      	bne.n	80019e2 <L7_receive+0xee>
		ApNr_101(L7_SDU_send);
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 f9d7 	bl	8001d84 <ApNr_101>
		L7_send(101, L7_SDU_send);
 80019d6:	f107 030c 	add.w	r3, r7, #12
 80019da:	4619      	mov	r1, r3
 80019dc:	2065      	movs	r0, #101	; 0x65
 80019de:	f000 f827 	bl	8001a30 <L7_send>
	}

	// ApNr 102
	// ignore information in L7_SDU
	// send back lower 64 bits of device UID
	if(L7_PDU[0] == 102){
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b66      	cmp	r3, #102	; 0x66
 80019e8:	d10a      	bne.n	8001a00 <L7_receive+0x10c>
		ApNr_102(L7_SDU_send);
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f9dc 	bl	8001dac <ApNr_102>
		L7_send(102, L7_SDU_send);
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4619      	mov	r1, r3
 80019fa:	2066      	movs	r0, #102	; 0x66
 80019fc:	f000 f818 	bl	8001a30 <L7_send>
	}

	// ApNr 103
	// ignore information in L7_SDU
	// send back upper bits 64 to 95 of device UID
	if(L7_PDU[0] == 103){
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b67      	cmp	r3, #103	; 0x67
 8001a06:	d10a      	bne.n	8001a1e <L7_receive+0x12a>
		ApNr_103(L7_SDU_send);
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 f9e4 	bl	8001dda <ApNr_103>
		L7_send(103, L7_SDU_send);
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	4619      	mov	r1, r3
 8001a18:	2067      	movs	r0, #103	; 0x67
 8001a1a:	f000 f809 	bl	8001a30 <L7_send>
	}

	tx_complete = 1;  // ApNr invalid (unknown) -> discard packet
 8001a1e:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <L7_receive+0x138>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Receive_IT(&huart1, rx_buf, L1_PDU_size); // Attach interrupt to receive L1_PDU from USART
}
 8001a24:	bf00      	nop
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200002f4 	.word	0x200002f4

08001a30 <L7_send>:

void L7_send(uint8_t ApNr, uint8_t L7_SDU[]){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
	uint8_t L7_PDU[L7_PDU_size] = {0};
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	711a      	strb	r2, [r3, #4]

	// copy ApNr and L7_SDU to get L7_PDU
	L7_PDU[0] = ApNr;
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	723b      	strb	r3, [r7, #8]
	for(int i = 0; i < L7_SDU_size; i++){
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	e00c      	b.n	8001a6e <L7_send+0x3e>
		L7_PDU[i+1] = L7_SDU[i];
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	441a      	add	r2, r3
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	7812      	ldrb	r2, [r2, #0]
 8001a60:	3318      	adds	r3, #24
 8001a62:	443b      	add	r3, r7
 8001a64:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(int i = 0; i < L7_SDU_size; i++){
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b07      	cmp	r3, #7
 8001a72:	ddef      	ble.n	8001a54 <L7_send+0x24>
	}

	L3_send(L7_PDU); // L7_PDU = l3_SDU
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 f805 	bl	8001a88 <L3_send>
}
 8001a7e:	bf00      	nop
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <L3_send>:

void L3_send(uint8_t L3_SDU[]){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	uint8_t L3_PDU[L3_PDU_size] = {0};
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	721a      	strb	r2, [r3, #8]

	L3_PDU[0] = MMCP_MASTER_ADDRESS; // To: Master
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	733b      	strb	r3, [r7, #12]
	L3_PDU[1] = myAddress; // From: device
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <L3_send+0x64>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	737b      	strb	r3, [r7, #13]
	L3_PDU[2] = MMCP_VERSION; // protocol version
 8001aaa:	2305      	movs	r3, #5
 8001aac:	73bb      	strb	r3, [r7, #14]
	L3_PDU[3] = 0; // Hops: 0
 8001aae:	2300      	movs	r3, #0
 8001ab0:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < L3_SDU_size; i++){
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	e00c      	b.n	8001ad2 <L3_send+0x4a>
		L3_PDU[i+L3_PCI_size] = L3_SDU[i];
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	441a      	add	r2, r3
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	7812      	ldrb	r2, [r2, #0]
 8001ac4:	3320      	adds	r3, #32
 8001ac6:	443b      	add	r3, r7
 8001ac8:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(int i = 0; i < L3_SDU_size; i++){
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	ddef      	ble.n	8001ab8 <L3_send+0x30>
	}

	L2_send(L3_PDU); // L3_PDU = L2_SDU
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 f807 	bl	8001af0 <L2_send>
}
 8001ae2:	bf00      	nop
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000000 	.word	0x20000000

08001af0 <L2_send>:

void L2_send(uint8_t L2_SDU[]){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	uint8_t L2_PDU[L2_PDU_size] = {0};
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	f107 0310 	add.w	r3, r7, #16
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	811a      	strh	r2, [r3, #8]
	uint8_t checksum = 42;
 8001b08:	232a      	movs	r3, #42	; 0x2a
 8001b0a:	76fb      	strb	r3, [r7, #27]

	// copy L2_SDU to first 13 bytes of L2_PDU
	for(int i = 0; i < L2_SDU_size; i++){
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	e00c      	b.n	8001b2c <L2_send+0x3c>
		L2_PDU[i] = L2_SDU[i];
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	4413      	add	r3, r2
 8001b18:	7819      	ldrb	r1, [r3, #0]
 8001b1a:	f107 020c 	add.w	r2, r7, #12
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	4413      	add	r3, r2
 8001b22:	460a      	mov	r2, r1
 8001b24:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L2_SDU_size; i++){
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	2b0c      	cmp	r3, #12
 8001b30:	ddef      	ble.n	8001b12 <L2_send+0x22>
	}

	checksum = crcSlow(L2_SDU, L2_SDU_size); // calculate checksum
 8001b32:	210d      	movs	r1, #13
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f95f 	bl	8001df8 <crcSlow>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	76fb      	strb	r3, [r7, #27]
	L2_PDU[13] = checksum; // last bit is checksum
 8001b3e:	7efb      	ldrb	r3, [r7, #27]
 8001b40:	767b      	strb	r3, [r7, #25]

	L1_send(L2_PDU);
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f804 	bl	8001b54 <L1_send>
}
 8001b4c:	bf00      	nop
 8001b4e:	3720      	adds	r7, #32
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <L1_send>:

void L1_send(uint8_t L1_SDU[]){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	L1_PDU[0] = 0; // SOF: 0
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <L1_send+0x48>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
	// copy L1_SDU to bytes 1...15 of L1_PDU
	for(int i = 0; i < L1_SDU_size; i++){
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e00a      	b.n	8001b7e <L1_send+0x2a>
		L1_PDU[i+1] = L1_SDU[i];
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	441a      	add	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3301      	adds	r3, #1
 8001b72:	7811      	ldrb	r1, [r2, #0]
 8001b74:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <L1_send+0x48>)
 8001b76:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < L1_SDU_size; i++){
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2b0d      	cmp	r3, #13
 8001b82:	ddf1      	ble.n	8001b68 <L1_send+0x14>
	}
	L1_PDU[15] = 0; // EOF: 0
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <L1_send+0x48>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	73da      	strb	r2, [r3, #15]

	HAL_UART_Transmit_IT(&huart1, L1_PDU, L1_PDU_size); // send L1_PDU over USART2 (non-blocking)
 8001b8a:	2210      	movs	r2, #16
 8001b8c:	4903      	ldr	r1, [pc, #12]	; (8001b9c <L1_send+0x48>)
 8001b8e:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <L1_send+0x4c>)
 8001b90:	f004 f913 	bl	8005dba <HAL_UART_Transmit_IT>
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000308 	.word	0x20000308
 8001ba0:	2000026c 	.word	0x2000026c

08001ba4 <ApNr_42>:
/* protocol stack functions end */
// ApNr 42
// await / create package
// send back received L7_SDU
void ApNr_42(uint8_t L7_SDU[], uint8_t L7_SDU_send[]){
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
	packageId = L7_SDU[0];
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	781a      	ldrb	r2, [r3, #0]
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <ApNr_42+0x6c>)
 8001bb4:	701a      	strb	r2, [r3, #0]
	partnerId = L7_SDU[1];
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	785a      	ldrb	r2, [r3, #1]
 8001bba:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <ApNr_42+0x70>)
 8001bbc:	701a      	strb	r2, [r3, #0]

	receivedSDU = TRUE;
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <ApNr_42+0x74>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	701a      	strb	r2, [r3, #0]
	ApNr = 42;
 8001bc4:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <ApNr_42+0x78>)
 8001bc6:	222a      	movs	r2, #42	; 0x2a
 8001bc8:	701a      	strb	r2, [r3, #0]

	if(partnerId != 0){ // partnerId is not 0 -> await new package
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <ApNr_42+0x70>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <ApNr_42+0x36>
		await = TRUE;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <ApNr_42+0x7c>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
 8001bd8:	e002      	b.n	8001be0 <ApNr_42+0x3c>
	} else { // partnerId is 0 -> create new package
		create = TRUE;
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <ApNr_42+0x80>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < L7_SDU_size; i++){ // copy L7_SDU to L7_SDU_send
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	e00a      	b.n	8001bfc <ApNr_42+0x58>
		L7_SDU_send[i] = L7_SDU[i];
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	441a      	add	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6839      	ldr	r1, [r7, #0]
 8001bf0:	440b      	add	r3, r1
 8001bf2:	7812      	ldrb	r2, [r2, #0]
 8001bf4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L7_SDU_size; i++){ // copy L7_SDU to L7_SDU_send
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b07      	cmp	r3, #7
 8001c00:	ddf1      	ble.n	8001be6 <ApNr_42+0x42>
	}
}
 8001c02:	bf00      	nop
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	20000650 	.word	0x20000650
 8001c14:	2000064f 	.word	0x2000064f
 8001c18:	2000066c 	.word	0x2000066c
 8001c1c:	20000662 	.word	0x20000662
 8001c20:	20000668 	.word	0x20000668
 8001c24:	20000665 	.word	0x20000665

08001c28 <ApNr_43>:

// ApNr 43
// pass on / deliver package
// send back received L7_SDU
void ApNr_43(uint8_t L7_SDU[], uint8_t L7_SDU_send[]){
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
	packageId = L7_SDU[0];
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	781a      	ldrb	r2, [r3, #0]
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <ApNr_43+0x6c>)
 8001c38:	701a      	strb	r2, [r3, #0]
	partnerId = L7_SDU[1];
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	785a      	ldrb	r2, [r3, #1]
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <ApNr_43+0x70>)
 8001c40:	701a      	strb	r2, [r3, #0]

	receivedSDU = TRUE;
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <ApNr_43+0x74>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
	ApNr = 43;
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <ApNr_43+0x78>)
 8001c4a:	222b      	movs	r2, #43	; 0x2b
 8001c4c:	701a      	strb	r2, [r3, #0]

	if(partnerId != 0){ // partnerId is not 0 -> passOn package
 8001c4e:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <ApNr_43+0x70>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <ApNr_43+0x36>
		passOn = TRUE;
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <ApNr_43+0x7c>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
 8001c5c:	e002      	b.n	8001c64 <ApNr_43+0x3c>
	} else { // partnerId is 0 -> deliver package
		deliver = TRUE;
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <ApNr_43+0x80>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < L7_SDU_size; i++){ // copy L7_SDU to L7_SDU_send
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	e00a      	b.n	8001c80 <ApNr_43+0x58>
		L7_SDU_send[i] = L7_SDU[i];
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	441a      	add	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6839      	ldr	r1, [r7, #0]
 8001c74:	440b      	add	r3, r1
 8001c76:	7812      	ldrb	r2, [r2, #0]
 8001c78:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L7_SDU_size; i++){ // copy L7_SDU to L7_SDU_send
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b07      	cmp	r3, #7
 8001c84:	ddf1      	ble.n	8001c6a <ApNr_43+0x42>
	}
}
 8001c86:	bf00      	nop
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	20000650 	.word	0x20000650
 8001c98:	2000064f 	.word	0x2000064f
 8001c9c:	2000066c 	.word	0x2000066c
 8001ca0:	20000662 	.word	0x20000662
 8001ca4:	20000664 	.word	0x20000664
 8001ca8:	20000666 	.word	0x20000666

08001cac <ApNr_50>:

// ApNr 50
// poll status
void ApNr_50(uint8_t L7_SDU[], uint8_t L7_SDU_send[]){
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
	poll = TRUE;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <ApNr_50+0x68>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]

	L7_SDU_send[0] = state;
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <ApNr_50+0x6c>)
 8001cbe:	781a      	ldrb	r2, [r3, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	701a      	strb	r2, [r3, #0]
	if(state == 4){ // state is failure, send errorId instead of packageId
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <ApNr_50+0x6c>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d105      	bne.n	8001cd8 <ApNr_50+0x2c>
		L7_SDU_send[1] = errorId;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <ApNr_50+0x70>)
 8001cd2:	7812      	ldrb	r2, [r2, #0]
 8001cd4:	701a      	strb	r2, [r3, #0]
 8001cd6:	e004      	b.n	8001ce2 <ApNr_50+0x36>
	} else {
		L7_SDU_send[1] = packageId;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	4a10      	ldr	r2, [pc, #64]	; (8001d20 <ApNr_50+0x74>)
 8001cde:	7812      	ldrb	r2, [r2, #0]
 8001ce0:	701a      	strb	r2, [r3, #0]
	}
	for(int i = 2; i < L7_SDU_size; i++){ // copy Lager to L7_SDU_send, index 2 to 7 //TODO: adapt to Lager size constant
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	e00a      	b.n	8001cfe <ApNr_50+0x52>
		L7_SDU_send[i] = Lager[i-2];
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1e9a      	subs	r2, r3, #2
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6839      	ldr	r1, [r7, #0]
 8001cf0:	440b      	add	r3, r1
 8001cf2:	490c      	ldr	r1, [pc, #48]	; (8001d24 <ApNr_50+0x78>)
 8001cf4:	5c8a      	ldrb	r2, [r1, r2]
 8001cf6:	701a      	strb	r2, [r3, #0]
	for(int i = 2; i < L7_SDU_size; i++){ // copy Lager to L7_SDU_send, index 2 to 7 //TODO: adapt to Lager size constant
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b07      	cmp	r3, #7
 8001d02:	ddf1      	ble.n	8001ce8 <ApNr_50+0x3c>
	}
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000667 	.word	0x20000667
 8001d18:	2000064d 	.word	0x2000064d
 8001d1c:	2000064e 	.word	0x2000064e
 8001d20:	20000650 	.word	0x20000650
 8001d24:	20000654 	.word	0x20000654

08001d28 <ApNr_100>:

// ApNr 100
// turn on onboard LED, if last byte of L7_SDU is not 0
// send back received L7_SDU
void ApNr_100(uint8_t L7_SDU[], uint8_t L7_SDU_send[]){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
	if(L7_SDU[7] != 0){
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3307      	adds	r3, #7
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <ApNr_100+0x20>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2120      	movs	r1, #32
 8001d40:	480f      	ldr	r0, [pc, #60]	; (8001d80 <ApNr_100+0x58>)
 8001d42:	f001 fd17 	bl	8003774 <HAL_GPIO_WritePin>
 8001d46:	e004      	b.n	8001d52 <ApNr_100+0x2a>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2120      	movs	r1, #32
 8001d4c:	480c      	ldr	r0, [pc, #48]	; (8001d80 <ApNr_100+0x58>)
 8001d4e:	f001 fd11 	bl	8003774 <HAL_GPIO_WritePin>
		}

		for(int i = 0; i < L7_SDU_size; i++){ // copy L7_SDU to L7_SDU_send
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	e00a      	b.n	8001d6e <ApNr_100+0x46>
			L7_SDU_send[i] = L7_SDU[i];
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	441a      	add	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6839      	ldr	r1, [r7, #0]
 8001d62:	440b      	add	r3, r1
 8001d64:	7812      	ldrb	r2, [r2, #0]
 8001d66:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < L7_SDU_size; i++){ // copy L7_SDU to L7_SDU_send
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b07      	cmp	r3, #7
 8001d72:	ddf1      	ble.n	8001d58 <ApNr_100+0x30>
		}
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40020000 	.word	0x40020000

08001d84 <ApNr_101>:

// ApNr 101
// ignore information in L7_SDU
// send back button presses counter in L7_SDU[7], reset counter
void ApNr_101(uint8_t L7_SDU_send[]){
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	L7_SDU_send[7] = cnt; // store button presses
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3307      	adds	r3, #7
 8001d90:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <ApNr_101+0x24>)
 8001d92:	7812      	ldrb	r2, [r2, #0]
 8001d94:	701a      	strb	r2, [r3, #0]
	cnt = 0; // reset counter
 8001d96:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <ApNr_101+0x24>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	20000318 	.word	0x20000318

08001dac <ApNr_102>:

// ignore information in L7_SDU
// send back lower 64 bits of device UID
void ApNr_102(uint8_t L7_SDU_send[]){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	uint32_t UIDw0 = HAL_GetUIDw0(); // get bits 0 to 31
 8001db4:	f000 fe0a 	bl	80029cc <HAL_GetUIDw0>
 8001db8:	4603      	mov	r3, r0
 8001dba:	60fb      	str	r3, [r7, #12]
	uint32_t UIDw1 = HAL_GetUIDw1(); // get bits 32 to 63
 8001dbc:	f000 fe12 	bl	80029e4 <HAL_GetUIDw1>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68fa      	ldr	r2, [r7, #12]

	memcpy(L7_SDU_send, &UIDw0, 4); // copy bits 0 to 31
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	601a      	str	r2, [r3, #0]
	memcpy(L7_SDU_send+4, &UIDw1, 4); // copy bits 32 to 63
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	601a      	str	r2, [r3, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <ApNr_103>:

// ignore information in L7_SDU
// send back upper bits 64 to 95 of device UID
void ApNr_103(uint8_t L7_SDU_send[]){
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b084      	sub	sp, #16
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
	uint32_t UIDw2 = HAL_GetUIDw2(); // get bits 64 to 95
 8001de2:	f000 fe0b 	bl	80029fc <HAL_GetUIDw2>
 8001de6:	4603      	mov	r3, r0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fa      	ldr	r2, [r7, #12]

	memcpy(L7_SDU_send, &UIDw2, 4); // copy bits 64 to 95
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	601a      	str	r2, [r3, #0]
}
 8001df0:	bf00      	nop
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <crcSlow>:

// crc algorithm
// source: https://barrgroup.com/embedded-systems/how-to/crc-calculation-c-code
crc crcSlow(uint8_t const message[], int nBytes) {
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
    crc  remainder = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	75fb      	strb	r3, [r7, #23]

    // perform modulo-2 division, a byte at a time.
    for (int byte = 0; byte < nBytes; ++byte){
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	e022      	b.n	8001e52 <crcSlow+0x5a>

        // bring the next byte into the remainder.
        remainder ^= (message[byte] << (WIDTH - 8));
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	781a      	ldrb	r2, [r3, #0]
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	4053      	eors	r3, r2
 8001e18:	75fb      	strb	r3, [r7, #23]

        // perform modulo-2 division, a bit at a time.
        for (uint8_t bit = 8; bit > 0; --bit){
 8001e1a:	2308      	movs	r3, #8
 8001e1c:	73fb      	strb	r3, [r7, #15]
 8001e1e:	e012      	b.n	8001e46 <crcSlow+0x4e>
            // try to divide the current data bit.
            if (remainder & TOPBIT){
 8001e20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	da08      	bge.n	8001e3a <crcSlow+0x42>
                remainder = (remainder << 1) ^ POLYNOMIAL;
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	b25b      	sxtb	r3, r3
 8001e2e:	f083 0364 	eor.w	r3, r3, #100	; 0x64
 8001e32:	43db      	mvns	r3, r3
 8001e34:	b25b      	sxtb	r3, r3
 8001e36:	75fb      	strb	r3, [r7, #23]
 8001e38:	e002      	b.n	8001e40 <crcSlow+0x48>
            } else {
                remainder = (remainder << 1);
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	75fb      	strb	r3, [r7, #23]
        for (uint8_t bit = 8; bit > 0; --bit){
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	73fb      	strb	r3, [r7, #15]
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e9      	bne.n	8001e20 <crcSlow+0x28>
    for (int byte = 0; byte < nBytes; ++byte){
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	dbd8      	blt.n	8001e0c <crcSlow+0x14>
            }
        }
    }

    // The final remainder is the CRC result.
    return (remainder);
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e6c:	b672      	cpsid	i
}
 8001e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <Error_Handler+0x8>

08001e72 <initMaze>:
#include "prng.h"

Maze maze;
Path path;

void initMaze(Maze* maze, uint8_t rows, uint8_t cols, uint8_t startX, uint8_t startY, uint8_t exitX, uint8_t exitY) {
 8001e72:	b590      	push	{r4, r7, lr}
 8001e74:	b087      	sub	sp, #28
 8001e76:	af02      	add	r7, sp, #8
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	4608      	mov	r0, r1
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4603      	mov	r3, r0
 8001e82:	70fb      	strb	r3, [r7, #3]
 8001e84:	460b      	mov	r3, r1
 8001e86:	70bb      	strb	r3, [r7, #2]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	707b      	strb	r3, [r7, #1]
    uint8_t r; /* index variable */

    /* check input */
    if (rows <= 0) exit(1); /* number of rows must be greater than 0 */
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d102      	bne.n	8001e98 <initMaze+0x26>
 8001e92:	2001      	movs	r0, #1
 8001e94:	f004 fef6 	bl	8006c84 <exit>
    if (cols <= 0) exit(1); /* number of cols must be greater than 0 */
 8001e98:	78bb      	ldrb	r3, [r7, #2]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d102      	bne.n	8001ea4 <initMaze+0x32>
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f004 fef0 	bl	8006c84 <exit>

    /* allocate memory */
    maze->grid = (uint8_t**) malloc(rows * sizeof(uint8_t*));
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f004 fefd 	bl	8006ca8 <malloc>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24
    for (r = 0; r < rows; r++) {
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73fb      	strb	r3, [r7, #15]
 8001eba:	e00d      	b.n	8001ed8 <initMaze+0x66>
        maze->grid[r] = (uint8_t*) malloc(cols * sizeof(uint8_t));
 8001ebc:	78b9      	ldrb	r1, [r7, #2]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	18d4      	adds	r4, r2, r3
 8001ec8:	4608      	mov	r0, r1
 8001eca:	f004 feed 	bl	8006ca8 <malloc>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6023      	str	r3, [r4, #0]
    for (r = 0; r < rows; r++) {
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d3ed      	bcc.n	8001ebc <initMaze+0x4a>
    }

    /* set attrs */
    maze->rows = rows;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	78fa      	ldrb	r2, [r7, #3]
 8001ee4:	701a      	strb	r2, [r3, #0]
    maze->cols = cols;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	78ba      	ldrb	r2, [r7, #2]
 8001eea:	705a      	strb	r2, [r3, #1]
    resetMaze(maze, startX, startY, exitX, exitY);
 8001eec:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8001ef0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ef4:	7879      	ldrb	r1, [r7, #1]
 8001ef6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	4603      	mov	r3, r0
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f804 	bl	8001f0c <resetMaze>
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd90      	pop	{r4, r7, pc}

08001f0c <resetMaze>:

void resetMaze(Maze* maze, uint8_t startX, uint8_t startY, uint8_t exitX, uint8_t exitY) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	4608      	mov	r0, r1
 8001f16:	4611      	mov	r1, r2
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	70fb      	strb	r3, [r7, #3]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	70bb      	strb	r3, [r7, #2]
 8001f22:	4613      	mov	r3, r2
 8001f24:	707b      	strb	r3, [r7, #1]
    uint8_t r, c; /* index variables */

    /* check input */
    if (exitX >= maze->cols || exitY >= maze->rows) exit(1);                                            /* exit point has to be inside the maze */
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	785b      	ldrb	r3, [r3, #1]
 8001f2a:	787a      	ldrb	r2, [r7, #1]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d204      	bcs.n	8001f3a <resetMaze+0x2e>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	7e3a      	ldrb	r2, [r7, #24]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d302      	bcc.n	8001f40 <resetMaze+0x34>
 8001f3a:	2001      	movs	r0, #1
 8001f3c:	f004 fea2 	bl	8006c84 <exit>
    if (!((startX == 0 || startX == maze->cols-1) || (startY == 0 || startY == maze->rows-1))) exit(1); /* start point has to be on edge of maze */
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d011      	beq.n	8001f6a <resetMaze+0x5e>
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	785b      	ldrb	r3, [r3, #1]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d00b      	beq.n	8001f6a <resetMaze+0x5e>
 8001f52:	78bb      	ldrb	r3, [r7, #2]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <resetMaze+0x5e>
 8001f58:	78ba      	ldrb	r2, [r7, #2]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d002      	beq.n	8001f6a <resetMaze+0x5e>
 8001f64:	2001      	movs	r0, #1
 8001f66:	f004 fe8d 	bl	8006c84 <exit>
    if (!((exitX == 0 || exitX == maze->cols-1) || (exitY == 0 || exitY == maze->rows-1))) exit(1);     /* exit point has to be on edge of maze */
 8001f6a:	787b      	ldrb	r3, [r7, #1]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d011      	beq.n	8001f94 <resetMaze+0x88>
 8001f70:	787a      	ldrb	r2, [r7, #1]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	785b      	ldrb	r3, [r3, #1]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d00b      	beq.n	8001f94 <resetMaze+0x88>
 8001f7c:	7e3b      	ldrb	r3, [r7, #24]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d008      	beq.n	8001f94 <resetMaze+0x88>
 8001f82:	7e3a      	ldrb	r2, [r7, #24]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d002      	beq.n	8001f94 <resetMaze+0x88>
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f004 fe78 	bl	8006c84 <exit>
    if ((startX == 0 || startX == maze->cols-1) && (startY == 0 || startY == maze->rows-1)) exit(1);    /* start point must not be on corner of maze */
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <resetMaze+0x9a>
 8001f9a:	78fa      	ldrb	r2, [r7, #3]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	785b      	ldrb	r3, [r3, #1]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d10b      	bne.n	8001fbe <resetMaze+0xb2>
 8001fa6:	78bb      	ldrb	r3, [r7, #2]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <resetMaze+0xac>
 8001fac:	78ba      	ldrb	r2, [r7, #2]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d102      	bne.n	8001fbe <resetMaze+0xb2>
 8001fb8:	2001      	movs	r0, #1
 8001fba:	f004 fe63 	bl	8006c84 <exit>
    if ((exitX == 0 || exitX == maze->cols-1) && (exitY == 0 || exitY == maze->rows-1)) exit(1);        /* exit point must not be on corner of maze */
 8001fbe:	787b      	ldrb	r3, [r7, #1]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <resetMaze+0xc4>
 8001fc4:	787a      	ldrb	r2, [r7, #1]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	785b      	ldrb	r3, [r3, #1]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d10b      	bne.n	8001fe8 <resetMaze+0xdc>
 8001fd0:	7e3b      	ldrb	r3, [r7, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <resetMaze+0xd6>
 8001fd6:	7e3a      	ldrb	r2, [r7, #24]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d102      	bne.n	8001fe8 <resetMaze+0xdc>
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	f004 fe4e 	bl	8006c84 <exit>

    /* set attrs */
    maze->start.x = startX;
 8001fe8:	78fa      	ldrb	r2, [r7, #3]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	605a      	str	r2, [r3, #4]
    maze->start.y = startY;
 8001fee:	78ba      	ldrb	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
    maze->start.prevX = -1;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ffa:	60da      	str	r2, [r3, #12]
    maze->start.prevY = -1;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002002:	611a      	str	r2, [r3, #16]
    maze->exit.x = exitX;
 8002004:	787a      	ldrb	r2, [r7, #1]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	615a      	str	r2, [r3, #20]
    maze->exit.y = exitY;
 800200a:	7e3a      	ldrb	r2, [r7, #24]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	619a      	str	r2, [r3, #24]
    maze->exit.prevX = -1;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002016:	61da      	str	r2, [r3, #28]
    maze->exit.prevY = -1;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800201e:	621a      	str	r2, [r3, #32]

    /* init maze grid as WALLs */
    for (r = 0; r < maze->rows; r++) {
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e017      	b.n	8002056 <resetMaze+0x14a>
        for (c = 0; c < maze->cols; c++) {
 8002026:	2300      	movs	r3, #0
 8002028:	73bb      	strb	r3, [r7, #14]
 800202a:	e00c      	b.n	8002046 <resetMaze+0x13a>
            maze->grid[r][c] = WALL;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	7bbb      	ldrb	r3, [r7, #14]
 800203a:	4413      	add	r3, r2
 800203c:	2201      	movs	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]
        for (c = 0; c < maze->cols; c++) {
 8002040:	7bbb      	ldrb	r3, [r7, #14]
 8002042:	3301      	adds	r3, #1
 8002044:	73bb      	strb	r3, [r7, #14]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	785b      	ldrb	r3, [r3, #1]
 800204a:	7bba      	ldrb	r2, [r7, #14]
 800204c:	429a      	cmp	r2, r3
 800204e:	d3ed      	bcc.n	800202c <resetMaze+0x120>
    for (r = 0; r < maze->rows; r++) {
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	3301      	adds	r3, #1
 8002054:	73fb      	strb	r3, [r7, #15]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	7bfa      	ldrb	r2, [r7, #15]
 800205c:	429a      	cmp	r2, r3
 800205e:	d3e2      	bcc.n	8002026 <resetMaze+0x11a>
        }
    }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <initPath>:

void initPath(Path* path, uint16_t length) {
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	807b      	strh	r3, [r7, #2]
    path->p = (Point *) malloc(length * sizeof(Point));
 8002076:	887b      	ldrh	r3, [r7, #2]
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	4618      	mov	r0, r3
 800207c:	f004 fe14 	bl	8006ca8 <malloc>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	601a      	str	r2, [r3, #0]
    
    if (path == NULL) exit(1);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d102      	bne.n	8002094 <initPath+0x2a>
 800208e:	2001      	movs	r0, #1
 8002090:	f004 fdf8 	bl	8006c84 <exit>
    
    path->size = length;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	887a      	ldrh	r2, [r7, #2]
 8002098:	809a      	strh	r2, [r3, #4]
    resetPath(path);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f804 	bl	80020a8 <resetPath>
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <resetPath>:

void resetPath(Path* path) {
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
    for (uint16_t i = 0; i < path->size; i++) {
 80020b0:	2300      	movs	r3, #0
 80020b2:	81fb      	strh	r3, [r7, #14]
 80020b4:	e020      	b.n	80020f8 <resetPath+0x50>
        path->p[i].x = 0;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	89fb      	ldrh	r3, [r7, #14]
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	4413      	add	r3, r2
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
        path->p[i].y = 0;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	89fb      	ldrh	r3, [r7, #14]
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	4413      	add	r3, r2
 80020ce:	2200      	movs	r2, #0
 80020d0:	605a      	str	r2, [r3, #4]
        path->p[i].prevX = -1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	89fb      	ldrh	r3, [r7, #14]
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	4413      	add	r3, r2
 80020dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020e0:	609a      	str	r2, [r3, #8]
        path->p[i].prevY = -1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	89fb      	ldrh	r3, [r7, #14]
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	4413      	add	r3, r2
 80020ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020f0:	60da      	str	r2, [r3, #12]
    for (uint16_t i = 0; i < path->size; i++) {
 80020f2:	89fb      	ldrh	r3, [r7, #14]
 80020f4:	3301      	adds	r3, #1
 80020f6:	81fb      	strh	r3, [r7, #14]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	889b      	ldrh	r3, [r3, #4]
 80020fc:	89fa      	ldrh	r2, [r7, #14]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d3d9      	bcc.n	80020b6 <resetPath+0xe>
    }

    path->count = 0;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	80da      	strh	r2, [r3, #6]
}
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <initPRNG>:
#include "prng.h"

PseudoRNG rng;

/* init PRNG with a pre-generated list of random numbers */
void initPRNG(PseudoRNG* rng, int* numbers, int size) {
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
    rng->num = numbers;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	601a      	str	r2, [r3, #0]
    rng->ind = 0;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	605a      	str	r2, [r3, #4]
    rng->size = size;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	609a      	str	r2, [r3, #8]
}
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <HAL_MspInit+0x4c>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4a0f      	ldr	r2, [pc, #60]	; (800218c <HAL_MspInit+0x4c>)
 8002150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	4b0d      	ldr	r3, [pc, #52]	; (800218c <HAL_MspInit+0x4c>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	603b      	str	r3, [r7, #0]
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <HAL_MspInit+0x4c>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a08      	ldr	r2, [pc, #32]	; (800218c <HAL_MspInit+0x4c>)
 800216c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_MspInit+0x4c>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800217e:	2007      	movs	r0, #7
 8002180:	f000 fd18 	bl	8002bb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40023800 	.word	0x40023800

08002190 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a44      	ldr	r2, [pc, #272]	; (80022c0 <HAL_SPI_MspInit+0x130>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	f040 8081 	bne.w	80022b6 <HAL_SPI_MspInit+0x126>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	4b42      	ldr	r3, [pc, #264]	; (80022c4 <HAL_SPI_MspInit+0x134>)
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	4a41      	ldr	r2, [pc, #260]	; (80022c4 <HAL_SPI_MspInit+0x134>)
 80021be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c2:	6413      	str	r3, [r2, #64]	; 0x40
 80021c4:	4b3f      	ldr	r3, [pc, #252]	; (80022c4 <HAL_SPI_MspInit+0x134>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <HAL_SPI_MspInit+0x134>)
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	4a3a      	ldr	r2, [pc, #232]	; (80022c4 <HAL_SPI_MspInit+0x134>)
 80021da:	f043 0304 	orr.w	r3, r3, #4
 80021de:	6313      	str	r3, [r2, #48]	; 0x30
 80021e0:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <HAL_SPI_MspInit+0x134>)
 80021e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ec:	2300      	movs	r3, #0
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <HAL_SPI_MspInit+0x134>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	4a33      	ldr	r2, [pc, #204]	; (80022c4 <HAL_SPI_MspInit+0x134>)
 80021f6:	f043 0302 	orr.w	r3, r3, #2
 80021fa:	6313      	str	r3, [r2, #48]	; 0x30
 80021fc:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <HAL_SPI_MspInit+0x134>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002208:	2308      	movs	r3, #8
 800220a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002214:	2303      	movs	r3, #3
 8002216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002218:	2305      	movs	r3, #5
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	4619      	mov	r1, r3
 8002222:	4829      	ldr	r0, [pc, #164]	; (80022c8 <HAL_SPI_MspInit+0x138>)
 8002224:	f001 f90a 	bl	800343c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800222c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002236:	2303      	movs	r3, #3
 8002238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800223a:	2305      	movs	r3, #5
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223e:	f107 0314 	add.w	r3, r7, #20
 8002242:	4619      	mov	r1, r3
 8002244:	4821      	ldr	r0, [pc, #132]	; (80022cc <HAL_SPI_MspInit+0x13c>)
 8002246:	f001 f8f9 	bl	800343c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800224a:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <HAL_SPI_MspInit+0x140>)
 800224c:	4a21      	ldr	r2, [pc, #132]	; (80022d4 <HAL_SPI_MspInit+0x144>)
 800224e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002250:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <HAL_SPI_MspInit+0x140>)
 8002252:	2200      	movs	r2, #0
 8002254:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002256:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <HAL_SPI_MspInit+0x140>)
 8002258:	2240      	movs	r2, #64	; 0x40
 800225a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800225c:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <HAL_SPI_MspInit+0x140>)
 800225e:	2200      	movs	r2, #0
 8002260:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002262:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_SPI_MspInit+0x140>)
 8002264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002268:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_SPI_MspInit+0x140>)
 800226c:	2200      	movs	r2, #0
 800226e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <HAL_SPI_MspInit+0x140>)
 8002272:	2200      	movs	r2, #0
 8002274:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002276:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <HAL_SPI_MspInit+0x140>)
 8002278:	2200      	movs	r2, #0
 800227a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <HAL_SPI_MspInit+0x140>)
 800227e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002282:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_SPI_MspInit+0x140>)
 8002286:	2200      	movs	r2, #0
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800228a:	4811      	ldr	r0, [pc, #68]	; (80022d0 <HAL_SPI_MspInit+0x140>)
 800228c:	f000 fcd4 	bl	8002c38 <HAL_DMA_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8002296:	f7ff fde7 	bl	8001e68 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <HAL_SPI_MspInit+0x140>)
 800229e:	649a      	str	r2, [r3, #72]	; 0x48
 80022a0:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <HAL_SPI_MspInit+0x140>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	2024      	movs	r0, #36	; 0x24
 80022ac:	f000 fc8d 	bl	8002bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80022b0:	2024      	movs	r0, #36	; 0x24
 80022b2:	f000 fca6 	bl	8002c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022b6:	bf00      	nop
 80022b8:	3728      	adds	r7, #40	; 0x28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40003800 	.word	0x40003800
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40020800 	.word	0x40020800
 80022cc:	40020400 	.word	0x40020400
 80022d0:	2000011c 	.word	0x2000011c
 80022d4:	40026070 	.word	0x40026070

080022d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e8:	d145      	bne.n	8002376 <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b31      	ldr	r3, [pc, #196]	; (80023b4 <HAL_TIM_Base_MspInit+0xdc>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a30      	ldr	r2, [pc, #192]	; (80023b4 <HAL_TIM_Base_MspInit+0xdc>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
 80022fa:	4b2e      	ldr	r3, [pc, #184]	; (80023b4 <HAL_TIM_Base_MspInit+0xdc>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 8002306:	4b2c      	ldr	r3, [pc, #176]	; (80023b8 <HAL_TIM_Base_MspInit+0xe0>)
 8002308:	4a2c      	ldr	r2, [pc, #176]	; (80023bc <HAL_TIM_Base_MspInit+0xe4>)
 800230a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 800230c:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <HAL_TIM_Base_MspInit+0xe0>)
 800230e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002312:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002314:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <HAL_TIM_Base_MspInit+0xe0>)
 8002316:	2240      	movs	r2, #64	; 0x40
 8002318:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800231a:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <HAL_TIM_Base_MspInit+0xe0>)
 800231c:	2200      	movs	r2, #0
 800231e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8002320:	4b25      	ldr	r3, [pc, #148]	; (80023b8 <HAL_TIM_Base_MspInit+0xe0>)
 8002322:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002326:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002328:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <HAL_TIM_Base_MspInit+0xe0>)
 800232a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800232e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002330:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <HAL_TIM_Base_MspInit+0xe0>)
 8002332:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002336:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 8002338:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <HAL_TIM_Base_MspInit+0xe0>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800233e:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <HAL_TIM_Base_MspInit+0xe0>)
 8002340:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002344:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002346:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <HAL_TIM_Base_MspInit+0xe0>)
 8002348:	2200      	movs	r2, #0
 800234a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 800234c:	481a      	ldr	r0, [pc, #104]	; (80023b8 <HAL_TIM_Base_MspInit+0xe0>)
 800234e:	f000 fc73 	bl	8002c38 <HAL_DMA_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002358:	f7ff fd86 	bl	8001e68 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a16      	ldr	r2, [pc, #88]	; (80023b8 <HAL_TIM_Base_MspInit+0xe0>)
 8002360:	62da      	str	r2, [r3, #44]	; 0x2c
 8002362:	4a15      	ldr	r2, [pc, #84]	; (80023b8 <HAL_TIM_Base_MspInit+0xe0>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a13      	ldr	r2, [pc, #76]	; (80023b8 <HAL_TIM_Base_MspInit+0xe0>)
 800236c:	621a      	str	r2, [r3, #32]
 800236e:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <HAL_TIM_Base_MspInit+0xe0>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002374:	e01a      	b.n	80023ac <HAL_TIM_Base_MspInit+0xd4>
  else if(htim_base->Instance==TIM3)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a11      	ldr	r2, [pc, #68]	; (80023c0 <HAL_TIM_Base_MspInit+0xe8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d115      	bne.n	80023ac <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002380:	2300      	movs	r3, #0
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_TIM_Base_MspInit+0xdc>)
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <HAL_TIM_Base_MspInit+0xdc>)
 800238a:	f043 0302 	orr.w	r3, r3, #2
 800238e:	6413      	str	r3, [r2, #64]	; 0x40
 8002390:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <HAL_TIM_Base_MspInit+0xdc>)
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800239c:	2200      	movs	r2, #0
 800239e:	2100      	movs	r1, #0
 80023a0:	201d      	movs	r0, #29
 80023a2:	f000 fc12 	bl	8002bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023a6:	201d      	movs	r0, #29
 80023a8:	f000 fc2b 	bl	8002c02 <HAL_NVIC_EnableIRQ>
}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40023800 	.word	0x40023800
 80023b8:	2000020c 	.word	0x2000020c
 80023bc:	40026028 	.word	0x40026028
 80023c0:	40000400 	.word	0x40000400

080023c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e4:	d11e      	bne.n	8002424 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <HAL_TIM_MspPostInit+0x68>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a0f      	ldr	r2, [pc, #60]	; (800242c <HAL_TIM_MspPostInit+0x68>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <HAL_TIM_MspPostInit+0x68>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002406:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2300      	movs	r3, #0
 8002412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002414:	2301      	movs	r3, #1
 8002416:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002418:	f107 030c 	add.w	r3, r7, #12
 800241c:	4619      	mov	r1, r3
 800241e:	4804      	ldr	r0, [pc, #16]	; (8002430 <HAL_TIM_MspPostInit+0x6c>)
 8002420:	f001 f80c 	bl	800343c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002424:	bf00      	nop
 8002426:	3720      	adds	r7, #32
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40023800 	.word	0x40023800
 8002430:	40020400 	.word	0x40020400

08002434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08c      	sub	sp, #48	; 0x30
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 031c 	add.w	r3, r7, #28
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a3a      	ldr	r2, [pc, #232]	; (800253c <HAL_UART_MspInit+0x108>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d135      	bne.n	80024c2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	61bb      	str	r3, [r7, #24]
 800245a:	4b39      	ldr	r3, [pc, #228]	; (8002540 <HAL_UART_MspInit+0x10c>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	4a38      	ldr	r2, [pc, #224]	; (8002540 <HAL_UART_MspInit+0x10c>)
 8002460:	f043 0310 	orr.w	r3, r3, #16
 8002464:	6453      	str	r3, [r2, #68]	; 0x44
 8002466:	4b36      	ldr	r3, [pc, #216]	; (8002540 <HAL_UART_MspInit+0x10c>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	61bb      	str	r3, [r7, #24]
 8002470:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	4b32      	ldr	r3, [pc, #200]	; (8002540 <HAL_UART_MspInit+0x10c>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a31      	ldr	r2, [pc, #196]	; (8002540 <HAL_UART_MspInit+0x10c>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b2f      	ldr	r3, [pc, #188]	; (8002540 <HAL_UART_MspInit+0x10c>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800248e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249c:	2303      	movs	r3, #3
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024a0:	2307      	movs	r3, #7
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	4619      	mov	r1, r3
 80024aa:	4826      	ldr	r0, [pc, #152]	; (8002544 <HAL_UART_MspInit+0x110>)
 80024ac:	f000 ffc6 	bl	800343c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2100      	movs	r1, #0
 80024b4:	2025      	movs	r0, #37	; 0x25
 80024b6:	f000 fb88 	bl	8002bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024ba:	2025      	movs	r0, #37	; 0x25
 80024bc:	f000 fba1 	bl	8002c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024c0:	e038      	b.n	8002534 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a20      	ldr	r2, [pc, #128]	; (8002548 <HAL_UART_MspInit+0x114>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d133      	bne.n	8002534 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024cc:	2300      	movs	r3, #0
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_UART_MspInit+0x10c>)
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	4a1a      	ldr	r2, [pc, #104]	; (8002540 <HAL_UART_MspInit+0x10c>)
 80024d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024da:	6413      	str	r3, [r2, #64]	; 0x40
 80024dc:	4b18      	ldr	r3, [pc, #96]	; (8002540 <HAL_UART_MspInit+0x10c>)
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	4b14      	ldr	r3, [pc, #80]	; (8002540 <HAL_UART_MspInit+0x10c>)
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	4a13      	ldr	r2, [pc, #76]	; (8002540 <HAL_UART_MspInit+0x10c>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6313      	str	r3, [r2, #48]	; 0x30
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_UART_MspInit+0x10c>)
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002504:	230c      	movs	r3, #12
 8002506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002514:	2307      	movs	r3, #7
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002518:	f107 031c 	add.w	r3, r7, #28
 800251c:	4619      	mov	r1, r3
 800251e:	4809      	ldr	r0, [pc, #36]	; (8002544 <HAL_UART_MspInit+0x110>)
 8002520:	f000 ff8c 	bl	800343c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002524:	2200      	movs	r2, #0
 8002526:	2100      	movs	r1, #0
 8002528:	2026      	movs	r0, #38	; 0x26
 800252a:	f000 fb4e 	bl	8002bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800252e:	2026      	movs	r0, #38	; 0x26
 8002530:	f000 fb67 	bl	8002c02 <HAL_NVIC_EnableIRQ>
}
 8002534:	bf00      	nop
 8002536:	3730      	adds	r7, #48	; 0x30
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40011000 	.word	0x40011000
 8002540:	40023800 	.word	0x40023800
 8002544:	40020000 	.word	0x40020000
 8002548:	40004400 	.word	0x40004400

0800254c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <NMI_Handler+0x4>

08002552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002556:	e7fe      	b.n	8002556 <HardFault_Handler+0x4>

08002558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800255c:	e7fe      	b.n	800255c <MemManage_Handler+0x4>

0800255e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002562:	e7fe      	b.n	8002562 <BusFault_Handler+0x4>

08002564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002568:	e7fe      	b.n	8002568 <UsageFault_Handler+0x4>

0800256a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002598:	f000 f9d4 	bl	8002944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}

080025a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R_N1_Pin);
 80025a4:	2001      	movs	r0, #1
 80025a6:	f001 f8ff 	bl	80037a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}

080025ae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R_N2_Pin);
 80025b2:	2002      	movs	r0, #2
 80025b4:	f001 f8f8 	bl	80037a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80025b8:	bf00      	nop
 80025ba:	bd80      	pop	{r7, pc}

080025bc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R_N3_Pin);
 80025c0:	2004      	movs	r0, #4
 80025c2:	f001 f8f1 	bl	80037a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 80025d0:	4802      	ldr	r0, [pc, #8]	; (80025dc <DMA1_Stream1_IRQHandler+0x10>)
 80025d2:	f000 fcc9 	bl	8002f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	2000020c 	.word	0x2000020c

080025e0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <DMA1_Stream4_IRQHandler+0x10>)
 80025e6:	f000 fcbf 	bl	8002f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	2000011c 	.word	0x2000011c

080025f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <TIM3_IRQHandler+0x10>)
 80025fa:	f002 fcaf 	bl	8004f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200001c4 	.word	0x200001c4

08002608 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <SPI2_IRQHandler+0x10>)
 800260e:	f001 febb 	bl	8004388 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200000c4 	.word	0x200000c4

0800261c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002620:	4802      	ldr	r0, [pc, #8]	; (800262c <USART1_IRQHandler+0x10>)
 8002622:	f003 fc3f 	bl	8005ea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	2000026c 	.word	0x2000026c

08002630 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002634:	4802      	ldr	r0, [pc, #8]	; (8002640 <USART2_IRQHandler+0x10>)
 8002636:	f003 fc35 	bl	8005ea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200002b0 	.word	0x200002b0

08002644 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002648:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800264c:	f001 f8ac 	bl	80037a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}

08002654 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800265e:	f004 fbef 	bl	8006e40 <__errno>
 8002662:	4603      	mov	r3, r0
 8002664:	2216      	movs	r2, #22
 8002666:	601a      	str	r2, [r3, #0]
  return -1;
 8002668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <_exit>:

void _exit (int status)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800267c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ffe7 	bl	8002654 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002686:	e7fe      	b.n	8002686 <_exit+0x12>

08002688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002690:	4a14      	ldr	r2, [pc, #80]	; (80026e4 <_sbrk+0x5c>)
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <_sbrk+0x60>)
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <_sbrk+0x64>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <_sbrk+0x64>)
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <_sbrk+0x68>)
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <_sbrk+0x64>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d207      	bcs.n	80026c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026b8:	f004 fbc2 	bl	8006e40 <__errno>
 80026bc:	4603      	mov	r3, r0
 80026be:	220c      	movs	r2, #12
 80026c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026c6:	e009      	b.n	80026dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <_sbrk+0x64>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <_sbrk+0x64>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	4a05      	ldr	r2, [pc, #20]	; (80026ec <_sbrk+0x64>)
 80026d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026da:	68fb      	ldr	r3, [r7, #12]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20018000 	.word	0x20018000
 80026e8:	00000400 	.word	0x00000400
 80026ec:	200006ac 	.word	0x200006ac
 80026f0:	20006240 	.word	0x20006240

080026f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <SystemInit+0x20>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	4a05      	ldr	r2, [pc, #20]	; (8002714 <SystemInit+0x20>)
 8002700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <ws2812_init>:

uint8_t ws2812_buffer[WS2812_BUFFER_SIZE];

// set all pixels to 0 (off)
void ws2812_init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
  memset(ws2812_buffer, 0, WS2812_BUFFER_SIZE); // fill buffer with 0s
 800271e:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8002722:	2100      	movs	r1, #0
 8002724:	4809      	ldr	r0, [pc, #36]	; (800274c <ws2812_init+0x34>)
 8002726:	f004 fb73 	bl	8006e10 <memset>
  HAL_SPI_Transmit_DMA(&hspi2, ws2812_buffer, WS2812_BUFFER_SIZE); // write buffer to LEDs
 800272a:	f645 223c 	movw	r2, #23100	; 0x5a3c
 800272e:	4907      	ldr	r1, [pc, #28]	; (800274c <ws2812_init+0x34>)
 8002730:	4807      	ldr	r0, [pc, #28]	; (8002750 <ws2812_init+0x38>)
 8002732:	f001 fd73 	bl	800421c <HAL_SPI_Transmit_DMA>
  ws2812_pixel_all(&(PixelRGB_t){0, 0, 0}); // set LEDs to black
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	4618      	mov	r0, r3
 800273e:	f000 f809 	bl	8002754 <ws2812_pixel_all>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200006b0 	.word	0x200006b0
 8002750:	200000c4 	.word	0x200000c4

08002754 <ws2812_pixel_all>:
  WS2812_FILL_BUFFER(color->color.b);
}

// set all pixels to given color
void ws2812_pixel_all(PixelRGB_t* color)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint8_t* ptr = ws2812_buffer;
 800275c:	4b31      	ldr	r3, [pc, #196]	; (8002824 <ws2812_pixel_all+0xd0>)
 800275e:	617b      	str	r3, [r7, #20]
  for (uint16_t i = 0; i < WS2812_NUM_LEDS; ++i) 
 8002760:	2300      	movs	r3, #0
 8002762:	827b      	strh	r3, [r7, #18]
 8002764:	e053      	b.n	800280e <ws2812_pixel_all+0xba>
  {
    WS2812_FILL_BUFFER(color->color.g);
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	747b      	strb	r3, [r7, #17]
 800276a:	e014      	b.n	8002796 <ws2812_pixel_all+0x42>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	789a      	ldrb	r2, [r3, #2]
 8002770:	7c7b      	ldrb	r3, [r7, #17]
 8002772:	4013      	ands	r3, r2
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <ws2812_pixel_all+0x32>
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	617a      	str	r2, [r7, #20]
 8002780:	22fc      	movs	r2, #252	; 0xfc
 8002782:	701a      	strb	r2, [r3, #0]
 8002784:	e004      	b.n	8002790 <ws2812_pixel_all+0x3c>
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	617a      	str	r2, [r7, #20]
 800278c:	2280      	movs	r2, #128	; 0x80
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	7c7b      	ldrb	r3, [r7, #17]
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	747b      	strb	r3, [r7, #17]
 8002796:	7c7b      	ldrb	r3, [r7, #17]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e7      	bne.n	800276c <ws2812_pixel_all+0x18>
    WS2812_FILL_BUFFER(color->color.r);
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	743b      	strb	r3, [r7, #16]
 80027a0:	e014      	b.n	80027cc <ws2812_pixel_all+0x78>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	785a      	ldrb	r2, [r3, #1]
 80027a6:	7c3b      	ldrb	r3, [r7, #16]
 80027a8:	4013      	ands	r3, r2
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <ws2812_pixel_all+0x68>
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	617a      	str	r2, [r7, #20]
 80027b6:	22fc      	movs	r2, #252	; 0xfc
 80027b8:	701a      	strb	r2, [r3, #0]
 80027ba:	e004      	b.n	80027c6 <ws2812_pixel_all+0x72>
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	617a      	str	r2, [r7, #20]
 80027c2:	2280      	movs	r2, #128	; 0x80
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	7c3b      	ldrb	r3, [r7, #16]
 80027c8:	085b      	lsrs	r3, r3, #1
 80027ca:	743b      	strb	r3, [r7, #16]
 80027cc:	7c3b      	ldrb	r3, [r7, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1e7      	bne.n	80027a2 <ws2812_pixel_all+0x4e>
    WS2812_FILL_BUFFER(color->color.b);
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	73fb      	strb	r3, [r7, #15]
 80027d6:	e014      	b.n	8002802 <ws2812_pixel_all+0xae>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	781a      	ldrb	r2, [r3, #0]
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	4013      	ands	r3, r2
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <ws2812_pixel_all+0x9e>
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	617a      	str	r2, [r7, #20]
 80027ec:	22fc      	movs	r2, #252	; 0xfc
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	e004      	b.n	80027fc <ws2812_pixel_all+0xa8>
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	617a      	str	r2, [r7, #20]
 80027f8:	2280      	movs	r2, #128	; 0x80
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	085b      	lsrs	r3, r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1e7      	bne.n	80027d8 <ws2812_pixel_all+0x84>
  for (uint16_t i = 0; i < WS2812_NUM_LEDS; ++i) 
 8002808:	8a7b      	ldrh	r3, [r7, #18]
 800280a:	3301      	adds	r3, #1
 800280c:	827b      	strh	r3, [r7, #18]
 800280e:	8a7b      	ldrh	r3, [r7, #18]
 8002810:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8002814:	d3a7      	bcc.n	8002766 <ws2812_pixel_all+0x12>
  }
}
 8002816:	bf00      	nop
 8002818:	bf00      	nop
 800281a:	371c      	adds	r7, #28
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	200006b0 	.word	0x200006b0

08002828 <HAL_SPI_TxCpltCallback>:
    }
  }
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  // Restart transmission when buffer tx is completed
  HAL_SPI_Transmit_DMA(&hspi2, ws2812_buffer, WS2812_BUFFER_SIZE);
 8002830:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8002834:	4903      	ldr	r1, [pc, #12]	; (8002844 <HAL_SPI_TxCpltCallback+0x1c>)
 8002836:	4804      	ldr	r0, [pc, #16]	; (8002848 <HAL_SPI_TxCpltCallback+0x20>)
 8002838:	f001 fcf0 	bl	800421c <HAL_SPI_Transmit_DMA>
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	200006b0 	.word	0x200006b0
 8002848:	200000c4 	.word	0x200000c4

0800284c <Reset_Handler>:
 800284c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002884 <LoopFillZerobss+0x12>
 8002850:	480d      	ldr	r0, [pc, #52]	; (8002888 <LoopFillZerobss+0x16>)
 8002852:	490e      	ldr	r1, [pc, #56]	; (800288c <LoopFillZerobss+0x1a>)
 8002854:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <LoopFillZerobss+0x1e>)
 8002856:	2300      	movs	r3, #0
 8002858:	e002      	b.n	8002860 <LoopCopyDataInit>

0800285a <CopyDataInit>:
 800285a:	58d4      	ldr	r4, [r2, r3]
 800285c:	50c4      	str	r4, [r0, r3]
 800285e:	3304      	adds	r3, #4

08002860 <LoopCopyDataInit>:
 8002860:	18c4      	adds	r4, r0, r3
 8002862:	428c      	cmp	r4, r1
 8002864:	d3f9      	bcc.n	800285a <CopyDataInit>
 8002866:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <LoopFillZerobss+0x22>)
 8002868:	4c0b      	ldr	r4, [pc, #44]	; (8002898 <LoopFillZerobss+0x26>)
 800286a:	2300      	movs	r3, #0
 800286c:	e001      	b.n	8002872 <LoopFillZerobss>

0800286e <FillZerobss>:
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	3204      	adds	r2, #4

08002872 <LoopFillZerobss>:
 8002872:	42a2      	cmp	r2, r4
 8002874:	d3fb      	bcc.n	800286e <FillZerobss>
 8002876:	f7ff ff3d 	bl	80026f4 <SystemInit>
 800287a:	f004 fae7 	bl	8006e4c <__libc_init_array>
 800287e:	f7fe fba5 	bl	8000fcc <main>
 8002882:	4770      	bx	lr
 8002884:	20018000 	.word	0x20018000
 8002888:	20000000 	.word	0x20000000
 800288c:	200000a8 	.word	0x200000a8
 8002890:	08006efc 	.word	0x08006efc
 8002894:	200000a8 	.word	0x200000a8
 8002898:	2000623c 	.word	0x2000623c

0800289c <ADC_IRQHandler>:
 800289c:	e7fe      	b.n	800289c <ADC_IRQHandler>
	...

080028a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028a4:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <HAL_Init+0x40>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0d      	ldr	r2, [pc, #52]	; (80028e0 <HAL_Init+0x40>)
 80028aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_Init+0x40>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <HAL_Init+0x40>)
 80028b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <HAL_Init+0x40>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <HAL_Init+0x40>)
 80028c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c8:	2003      	movs	r0, #3
 80028ca:	f000 f973 	bl	8002bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f000 f808 	bl	80028e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028d4:	f7ff fc34 	bl	8002140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023c00 	.word	0x40023c00

080028e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_InitTick+0x54>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_InitTick+0x58>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4619      	mov	r1, r3
 80028f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80028fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002902:	4618      	mov	r0, r3
 8002904:	f000 f98b 	bl	8002c1e <HAL_SYSTICK_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e00e      	b.n	8002930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b0f      	cmp	r3, #15
 8002916:	d80a      	bhi.n	800292e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002918:	2200      	movs	r2, #0
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002920:	f000 f953 	bl	8002bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002924:	4a06      	ldr	r2, [pc, #24]	; (8002940 <HAL_InitTick+0x5c>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	2000004c 	.word	0x2000004c
 800293c:	20000054 	.word	0x20000054
 8002940:	20000050 	.word	0x20000050

08002944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_IncTick+0x20>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_IncTick+0x24>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4413      	add	r3, r2
 8002954:	4a04      	ldr	r2, [pc, #16]	; (8002968 <HAL_IncTick+0x24>)
 8002956:	6013      	str	r3, [r2, #0]
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20000054 	.word	0x20000054
 8002968:	200060ec 	.word	0x200060ec

0800296c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return uwTick;
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <HAL_GetTick+0x14>)
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	200060ec 	.word	0x200060ec

08002984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800298c:	f7ff ffee 	bl	800296c <HAL_GetTick>
 8002990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800299c:	d005      	beq.n	80029aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_Delay+0x44>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4413      	add	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029aa:	bf00      	nop
 80029ac:	f7ff ffde 	bl	800296c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d8f7      	bhi.n	80029ac <HAL_Delay+0x28>
  {
  }
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000054 	.word	0x20000054

080029cc <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <HAL_GetUIDw0+0x14>)
 80029d2:	681b      	ldr	r3, [r3, #0]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	1fff7a10 	.word	0x1fff7a10

080029e4 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <HAL_GetUIDw1+0x14>)
 80029ea:	681b      	ldr	r3, [r3, #0]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	1fff7a14 	.word	0x1fff7a14

080029fc <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <HAL_GetUIDw2+0x14>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	1fff7a18 	.word	0x1fff7a18

08002a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <__NVIC_SetPriorityGrouping+0x44>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a30:	4013      	ands	r3, r2
 8002a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a46:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <__NVIC_SetPriorityGrouping+0x44>)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	60d3      	str	r3, [r2, #12]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a60:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <__NVIC_GetPriorityGrouping+0x18>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	0a1b      	lsrs	r3, r3, #8
 8002a66:	f003 0307 	and.w	r3, r3, #7
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	db0b      	blt.n	8002aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	f003 021f 	and.w	r2, r3, #31
 8002a90:	4907      	ldr	r1, [pc, #28]	; (8002ab0 <__NVIC_EnableIRQ+0x38>)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	2001      	movs	r0, #1
 8002a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000e100 	.word	0xe000e100

08002ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	6039      	str	r1, [r7, #0]
 8002abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	db0a      	blt.n	8002ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	490c      	ldr	r1, [pc, #48]	; (8002b00 <__NVIC_SetPriority+0x4c>)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	0112      	lsls	r2, r2, #4
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002adc:	e00a      	b.n	8002af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4908      	ldr	r1, [pc, #32]	; (8002b04 <__NVIC_SetPriority+0x50>)
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	3b04      	subs	r3, #4
 8002aec:	0112      	lsls	r2, r2, #4
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	440b      	add	r3, r1
 8002af2:	761a      	strb	r2, [r3, #24]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000e100 	.word	0xe000e100
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	; 0x24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f1c3 0307 	rsb	r3, r3, #7
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	bf28      	it	cs
 8002b26:	2304      	movcs	r3, #4
 8002b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	2b06      	cmp	r3, #6
 8002b30:	d902      	bls.n	8002b38 <NVIC_EncodePriority+0x30>
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3b03      	subs	r3, #3
 8002b36:	e000      	b.n	8002b3a <NVIC_EncodePriority+0x32>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43da      	mvns	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5a:	43d9      	mvns	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	4313      	orrs	r3, r2
         );
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3724      	adds	r7, #36	; 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b80:	d301      	bcc.n	8002b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b82:	2301      	movs	r3, #1
 8002b84:	e00f      	b.n	8002ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b86:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <SysTick_Config+0x40>)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b8e:	210f      	movs	r1, #15
 8002b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b94:	f7ff ff8e 	bl	8002ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <SysTick_Config+0x40>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b9e:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <SysTick_Config+0x40>)
 8002ba0:	2207      	movs	r2, #7
 8002ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	e000e010 	.word	0xe000e010

08002bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff29 	bl	8002a14 <__NVIC_SetPriorityGrouping>
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bdc:	f7ff ff3e 	bl	8002a5c <__NVIC_GetPriorityGrouping>
 8002be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	6978      	ldr	r0, [r7, #20]
 8002be8:	f7ff ff8e 	bl	8002b08 <NVIC_EncodePriority>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff5d 	bl	8002ab4 <__NVIC_SetPriority>
}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	4603      	mov	r3, r0
 8002c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ff31 	bl	8002a78 <__NVIC_EnableIRQ>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff ffa2 	bl	8002b70 <SysTick_Config>
 8002c2c:	4603      	mov	r3, r0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c44:	f7ff fe92 	bl	800296c <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e099      	b.n	8002d88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c74:	e00f      	b.n	8002c96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c76:	f7ff fe79 	bl	800296c <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d908      	bls.n	8002c96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2220      	movs	r2, #32
 8002c88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e078      	b.n	8002d88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1e8      	bne.n	8002c76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4b38      	ldr	r3, [pc, #224]	; (8002d90 <HAL_DMA_Init+0x158>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d107      	bne.n	8002d00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f023 0307 	bic.w	r3, r3, #7
 8002d16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d117      	bne.n	8002d5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00e      	beq.n	8002d5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 fb01 	bl	8003344 <DMA_CheckFifoParam>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2240      	movs	r2, #64	; 0x40
 8002d4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d56:	2301      	movs	r3, #1
 8002d58:	e016      	b.n	8002d88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fab8 	bl	80032d8 <DMA_CalcBaseAndBitshift>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	223f      	movs	r2, #63	; 0x3f
 8002d72:	409a      	lsls	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	f010803f 	.word	0xf010803f

08002d94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_DMA_Start_IT+0x26>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e040      	b.n	8002e3c <HAL_DMA_Start_IT+0xa8>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d12f      	bne.n	8002e2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fa4a 	bl	800327c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	223f      	movs	r2, #63	; 0x3f
 8002dee:	409a      	lsls	r2, r3
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0216 	orr.w	r2, r2, #22
 8002e02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d007      	beq.n	8002e1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0208 	orr.w	r2, r2, #8
 8002e1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	e005      	b.n	8002e3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e36:	2302      	movs	r3, #2
 8002e38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e52:	f7ff fd8b 	bl	800296c <HAL_GetTick>
 8002e56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d008      	beq.n	8002e76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2280      	movs	r2, #128	; 0x80
 8002e68:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e052      	b.n	8002f1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0216 	bic.w	r2, r2, #22
 8002e84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d103      	bne.n	8002ea6 <HAL_DMA_Abort+0x62>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0208 	bic.w	r2, r2, #8
 8002eb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0201 	bic.w	r2, r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec6:	e013      	b.n	8002ef0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ec8:	f7ff fd50 	bl	800296c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b05      	cmp	r3, #5
 8002ed4:	d90c      	bls.n	8002ef0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2203      	movs	r2, #3
 8002ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e015      	b.n	8002f1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1e4      	bne.n	8002ec8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f02:	223f      	movs	r2, #63	; 0x3f
 8002f04:	409a      	lsls	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d004      	beq.n	8002f42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2280      	movs	r2, #128	; 0x80
 8002f3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e00c      	b.n	8002f5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2205      	movs	r2, #5
 8002f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f74:	4b8e      	ldr	r3, [pc, #568]	; (80031b0 <HAL_DMA_IRQHandler+0x248>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a8e      	ldr	r2, [pc, #568]	; (80031b4 <HAL_DMA_IRQHandler+0x24c>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	0a9b      	lsrs	r3, r3, #10
 8002f80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f92:	2208      	movs	r2, #8
 8002f94:	409a      	lsls	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d01a      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d013      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0204 	bic.w	r2, r2, #4
 8002fba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fcc:	f043 0201 	orr.w	r2, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	2201      	movs	r2, #1
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d012      	beq.n	800300a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00b      	beq.n	800300a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	f043 0202 	orr.w	r2, r3, #2
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	2204      	movs	r2, #4
 8003010:	409a      	lsls	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4013      	ands	r3, r2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d012      	beq.n	8003040 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00b      	beq.n	8003040 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302c:	2204      	movs	r2, #4
 800302e:	409a      	lsls	r2, r3
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003038:	f043 0204 	orr.w	r2, r3, #4
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003044:	2210      	movs	r2, #16
 8003046:	409a      	lsls	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d043      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d03c      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003062:	2210      	movs	r2, #16
 8003064:	409a      	lsls	r2, r3
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d018      	beq.n	80030aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d108      	bne.n	8003098 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d024      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	4798      	blx	r3
 8003096:	e01f      	b.n	80030d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01b      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	4798      	blx	r3
 80030a8:	e016      	b.n	80030d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d107      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0208 	bic.w	r2, r2, #8
 80030c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030dc:	2220      	movs	r2, #32
 80030de:	409a      	lsls	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 808f 	beq.w	8003208 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8087 	beq.w	8003208 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fe:	2220      	movs	r2, #32
 8003100:	409a      	lsls	r2, r3
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b05      	cmp	r3, #5
 8003110:	d136      	bne.n	8003180 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0216 	bic.w	r2, r2, #22
 8003120:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003130:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d103      	bne.n	8003142 <HAL_DMA_IRQHandler+0x1da>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800313e:	2b00      	cmp	r3, #0
 8003140:	d007      	beq.n	8003152 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0208 	bic.w	r2, r2, #8
 8003150:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003156:	223f      	movs	r2, #63	; 0x3f
 8003158:	409a      	lsls	r2, r3
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003172:	2b00      	cmp	r3, #0
 8003174:	d07e      	beq.n	8003274 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
        }
        return;
 800317e:	e079      	b.n	8003274 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d01d      	beq.n	80031ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10d      	bne.n	80031b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d031      	beq.n	8003208 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4798      	blx	r3
 80031ac:	e02c      	b.n	8003208 <HAL_DMA_IRQHandler+0x2a0>
 80031ae:	bf00      	nop
 80031b0:	2000004c 	.word	0x2000004c
 80031b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d023      	beq.n	8003208 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	4798      	blx	r3
 80031c8:	e01e      	b.n	8003208 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10f      	bne.n	80031f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0210 	bic.w	r2, r2, #16
 80031e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	2b00      	cmp	r3, #0
 800320e:	d032      	beq.n	8003276 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d022      	beq.n	8003262 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2205      	movs	r2, #5
 8003220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0201 	bic.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	3301      	adds	r3, #1
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	429a      	cmp	r2, r3
 800323e:	d307      	bcc.n	8003250 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f2      	bne.n	8003234 <HAL_DMA_IRQHandler+0x2cc>
 800324e:	e000      	b.n	8003252 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003250:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d005      	beq.n	8003276 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	4798      	blx	r3
 8003272:	e000      	b.n	8003276 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003274:	bf00      	nop
    }
  }
}
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003298:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b40      	cmp	r3, #64	; 0x40
 80032a8:	d108      	bne.n	80032bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032ba:	e007      	b.n	80032cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	60da      	str	r2, [r3, #12]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	3b10      	subs	r3, #16
 80032e8:	4a14      	ldr	r2, [pc, #80]	; (800333c <DMA_CalcBaseAndBitshift+0x64>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	091b      	lsrs	r3, r3, #4
 80032f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032f2:	4a13      	ldr	r2, [pc, #76]	; (8003340 <DMA_CalcBaseAndBitshift+0x68>)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b03      	cmp	r3, #3
 8003304:	d909      	bls.n	800331a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800330e:	f023 0303 	bic.w	r3, r3, #3
 8003312:	1d1a      	adds	r2, r3, #4
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	659a      	str	r2, [r3, #88]	; 0x58
 8003318:	e007      	b.n	800332a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003322:	f023 0303 	bic.w	r3, r3, #3
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	aaaaaaab 	.word	0xaaaaaaab
 8003340:	08006ee4 	.word	0x08006ee4

08003344 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d11f      	bne.n	800339e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b03      	cmp	r3, #3
 8003362:	d856      	bhi.n	8003412 <DMA_CheckFifoParam+0xce>
 8003364:	a201      	add	r2, pc, #4	; (adr r2, 800336c <DMA_CheckFifoParam+0x28>)
 8003366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	0800337d 	.word	0x0800337d
 8003370:	0800338f 	.word	0x0800338f
 8003374:	0800337d 	.word	0x0800337d
 8003378:	08003413 	.word	0x08003413
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d046      	beq.n	8003416 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800338c:	e043      	b.n	8003416 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003396:	d140      	bne.n	800341a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800339c:	e03d      	b.n	800341a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a6:	d121      	bne.n	80033ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	d837      	bhi.n	800341e <DMA_CheckFifoParam+0xda>
 80033ae:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <DMA_CheckFifoParam+0x70>)
 80033b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b4:	080033c5 	.word	0x080033c5
 80033b8:	080033cb 	.word	0x080033cb
 80033bc:	080033c5 	.word	0x080033c5
 80033c0:	080033dd 	.word	0x080033dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
      break;
 80033c8:	e030      	b.n	800342c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d025      	beq.n	8003422 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033da:	e022      	b.n	8003422 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033e4:	d11f      	bne.n	8003426 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033ea:	e01c      	b.n	8003426 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d903      	bls.n	80033fa <DMA_CheckFifoParam+0xb6>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d003      	beq.n	8003400 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033f8:	e018      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
      break;
 80033fe:	e015      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00e      	beq.n	800342a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
      break;
 8003410:	e00b      	b.n	800342a <DMA_CheckFifoParam+0xe6>
      break;
 8003412:	bf00      	nop
 8003414:	e00a      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      break;
 8003416:	bf00      	nop
 8003418:	e008      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      break;
 800341a:	bf00      	nop
 800341c:	e006      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      break;
 800341e:	bf00      	nop
 8003420:	e004      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      break;
 8003422:	bf00      	nop
 8003424:	e002      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      break;   
 8003426:	bf00      	nop
 8003428:	e000      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      break;
 800342a:	bf00      	nop
    }
  } 
  
  return status; 
 800342c:	7bfb      	ldrb	r3, [r7, #15]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop

0800343c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800343c:	b480      	push	{r7}
 800343e:	b089      	sub	sp, #36	; 0x24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
 8003456:	e159      	b.n	800370c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003458:	2201      	movs	r2, #1
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	429a      	cmp	r2, r3
 8003472:	f040 8148 	bne.w	8003706 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b01      	cmp	r3, #1
 8003480:	d005      	beq.n	800348e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800348a:	2b02      	cmp	r3, #2
 800348c:	d130      	bne.n	80034f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	2203      	movs	r2, #3
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034c4:	2201      	movs	r2, #1
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 0201 	and.w	r2, r3, #1
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d017      	beq.n	800352c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	2203      	movs	r2, #3
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d123      	bne.n	8003580 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	08da      	lsrs	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3208      	adds	r2, #8
 8003540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003544:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	220f      	movs	r2, #15
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	08da      	lsrs	r2, r3, #3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3208      	adds	r2, #8
 800357a:	69b9      	ldr	r1, [r7, #24]
 800357c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	2203      	movs	r2, #3
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4013      	ands	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 0203 	and.w	r2, r3, #3
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80a2 	beq.w	8003706 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	4b57      	ldr	r3, [pc, #348]	; (8003724 <HAL_GPIO_Init+0x2e8>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	4a56      	ldr	r2, [pc, #344]	; (8003724 <HAL_GPIO_Init+0x2e8>)
 80035cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d0:	6453      	str	r3, [r2, #68]	; 0x44
 80035d2:	4b54      	ldr	r3, [pc, #336]	; (8003724 <HAL_GPIO_Init+0x2e8>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035de:	4a52      	ldr	r2, [pc, #328]	; (8003728 <HAL_GPIO_Init+0x2ec>)
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	089b      	lsrs	r3, r3, #2
 80035e4:	3302      	adds	r3, #2
 80035e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	220f      	movs	r2, #15
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a49      	ldr	r2, [pc, #292]	; (800372c <HAL_GPIO_Init+0x2f0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d019      	beq.n	800363e <HAL_GPIO_Init+0x202>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a48      	ldr	r2, [pc, #288]	; (8003730 <HAL_GPIO_Init+0x2f4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d013      	beq.n	800363a <HAL_GPIO_Init+0x1fe>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a47      	ldr	r2, [pc, #284]	; (8003734 <HAL_GPIO_Init+0x2f8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00d      	beq.n	8003636 <HAL_GPIO_Init+0x1fa>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a46      	ldr	r2, [pc, #280]	; (8003738 <HAL_GPIO_Init+0x2fc>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d007      	beq.n	8003632 <HAL_GPIO_Init+0x1f6>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a45      	ldr	r2, [pc, #276]	; (800373c <HAL_GPIO_Init+0x300>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_GPIO_Init+0x1f2>
 800362a:	2304      	movs	r3, #4
 800362c:	e008      	b.n	8003640 <HAL_GPIO_Init+0x204>
 800362e:	2307      	movs	r3, #7
 8003630:	e006      	b.n	8003640 <HAL_GPIO_Init+0x204>
 8003632:	2303      	movs	r3, #3
 8003634:	e004      	b.n	8003640 <HAL_GPIO_Init+0x204>
 8003636:	2302      	movs	r3, #2
 8003638:	e002      	b.n	8003640 <HAL_GPIO_Init+0x204>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <HAL_GPIO_Init+0x204>
 800363e:	2300      	movs	r3, #0
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	f002 0203 	and.w	r2, r2, #3
 8003646:	0092      	lsls	r2, r2, #2
 8003648:	4093      	lsls	r3, r2
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003650:	4935      	ldr	r1, [pc, #212]	; (8003728 <HAL_GPIO_Init+0x2ec>)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	089b      	lsrs	r3, r3, #2
 8003656:	3302      	adds	r3, #2
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800365e:	4b38      	ldr	r3, [pc, #224]	; (8003740 <HAL_GPIO_Init+0x304>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	43db      	mvns	r3, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003682:	4a2f      	ldr	r2, [pc, #188]	; (8003740 <HAL_GPIO_Init+0x304>)
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003688:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <HAL_GPIO_Init+0x304>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	43db      	mvns	r3, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4013      	ands	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036ac:	4a24      	ldr	r2, [pc, #144]	; (8003740 <HAL_GPIO_Init+0x304>)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036b2:	4b23      	ldr	r3, [pc, #140]	; (8003740 <HAL_GPIO_Init+0x304>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	43db      	mvns	r3, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4013      	ands	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036d6:	4a1a      	ldr	r2, [pc, #104]	; (8003740 <HAL_GPIO_Init+0x304>)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036dc:	4b18      	ldr	r3, [pc, #96]	; (8003740 <HAL_GPIO_Init+0x304>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4013      	ands	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003700:	4a0f      	ldr	r2, [pc, #60]	; (8003740 <HAL_GPIO_Init+0x304>)
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3301      	adds	r3, #1
 800370a:	61fb      	str	r3, [r7, #28]
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b0f      	cmp	r3, #15
 8003710:	f67f aea2 	bls.w	8003458 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003714:	bf00      	nop
 8003716:	bf00      	nop
 8003718:	3724      	adds	r7, #36	; 0x24
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40023800 	.word	0x40023800
 8003728:	40013800 	.word	0x40013800
 800372c:	40020000 	.word	0x40020000
 8003730:	40020400 	.word	0x40020400
 8003734:	40020800 	.word	0x40020800
 8003738:	40020c00 	.word	0x40020c00
 800373c:	40021000 	.word	0x40021000
 8003740:	40013c00 	.word	0x40013c00

08003744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	887b      	ldrh	r3, [r7, #2]
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
 8003760:	e001      	b.n	8003766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003762:	2300      	movs	r3, #0
 8003764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003766:	7bfb      	ldrb	r3, [r7, #15]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	807b      	strh	r3, [r7, #2]
 8003780:	4613      	mov	r3, r2
 8003782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003784:	787b      	ldrb	r3, [r7, #1]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800378a:	887a      	ldrh	r2, [r7, #2]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003790:	e003      	b.n	800379a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003792:	887b      	ldrh	r3, [r7, #2]
 8003794:	041a      	lsls	r2, r3, #16
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	619a      	str	r2, [r3, #24]
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037b2:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d006      	beq.n	80037cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037be:	4a05      	ldr	r2, [pc, #20]	; (80037d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037c0:	88fb      	ldrh	r3, [r7, #6]
 80037c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd ff66 	bl	8001698 <HAL_GPIO_EXTI_Callback>
  }
}
 80037cc:	bf00      	nop
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40013c00 	.word	0x40013c00

080037d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e267      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d075      	beq.n	80038e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037f6:	4b88      	ldr	r3, [pc, #544]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d00c      	beq.n	800381c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003802:	4b85      	ldr	r3, [pc, #532]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800380a:	2b08      	cmp	r3, #8
 800380c:	d112      	bne.n	8003834 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800380e:	4b82      	ldr	r3, [pc, #520]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800381a:	d10b      	bne.n	8003834 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381c:	4b7e      	ldr	r3, [pc, #504]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d05b      	beq.n	80038e0 <HAL_RCC_OscConfig+0x108>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d157      	bne.n	80038e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e242      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383c:	d106      	bne.n	800384c <HAL_RCC_OscConfig+0x74>
 800383e:	4b76      	ldr	r3, [pc, #472]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a75      	ldr	r2, [pc, #468]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	e01d      	b.n	8003888 <HAL_RCC_OscConfig+0xb0>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003854:	d10c      	bne.n	8003870 <HAL_RCC_OscConfig+0x98>
 8003856:	4b70      	ldr	r3, [pc, #448]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a6f      	ldr	r2, [pc, #444]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 800385c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	4b6d      	ldr	r3, [pc, #436]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a6c      	ldr	r2, [pc, #432]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	e00b      	b.n	8003888 <HAL_RCC_OscConfig+0xb0>
 8003870:	4b69      	ldr	r3, [pc, #420]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a68      	ldr	r2, [pc, #416]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	4b66      	ldr	r3, [pc, #408]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a65      	ldr	r2, [pc, #404]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d013      	beq.n	80038b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7ff f86c 	bl	800296c <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003898:	f7ff f868 	bl	800296c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	; 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e207      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038aa:	4b5b      	ldr	r3, [pc, #364]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0xc0>
 80038b6:	e014      	b.n	80038e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7ff f858 	bl	800296c <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c0:	f7ff f854 	bl	800296c <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	; 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e1f3      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d2:	4b51      	ldr	r3, [pc, #324]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0xe8>
 80038de:	e000      	b.n	80038e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d063      	beq.n	80039b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ee:	4b4a      	ldr	r3, [pc, #296]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00b      	beq.n	8003912 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038fa:	4b47      	ldr	r3, [pc, #284]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003902:	2b08      	cmp	r3, #8
 8003904:	d11c      	bne.n	8003940 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003906:	4b44      	ldr	r3, [pc, #272]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d116      	bne.n	8003940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003912:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_RCC_OscConfig+0x152>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d001      	beq.n	800392a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e1c7      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392a:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4937      	ldr	r1, [pc, #220]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393e:	e03a      	b.n	80039b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d020      	beq.n	800398a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003948:	4b34      	ldr	r3, [pc, #208]	; (8003a1c <HAL_RCC_OscConfig+0x244>)
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394e:	f7ff f80d 	bl	800296c <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003956:	f7ff f809 	bl	800296c <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e1a8      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003968:	4b2b      	ldr	r3, [pc, #172]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003974:	4b28      	ldr	r3, [pc, #160]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4925      	ldr	r1, [pc, #148]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 8003984:	4313      	orrs	r3, r2
 8003986:	600b      	str	r3, [r1, #0]
 8003988:	e015      	b.n	80039b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800398a:	4b24      	ldr	r3, [pc, #144]	; (8003a1c <HAL_RCC_OscConfig+0x244>)
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7fe ffec 	bl	800296c <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003998:	f7fe ffe8 	bl	800296c <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e187      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039aa:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d036      	beq.n	8003a30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d016      	beq.n	80039f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ca:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <HAL_RCC_OscConfig+0x248>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d0:	f7fe ffcc 	bl	800296c <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d8:	f7fe ffc8 	bl	800296c <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e167      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ea:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_RCC_OscConfig+0x240>)
 80039ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x200>
 80039f6:	e01b      	b.n	8003a30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <HAL_RCC_OscConfig+0x248>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fe:	f7fe ffb5 	bl	800296c <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a04:	e00e      	b.n	8003a24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a06:	f7fe ffb1 	bl	800296c <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d907      	bls.n	8003a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e150      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	42470000 	.word	0x42470000
 8003a20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a24:	4b88      	ldr	r3, [pc, #544]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1ea      	bne.n	8003a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8097 	beq.w	8003b6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a42:	4b81      	ldr	r3, [pc, #516]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10f      	bne.n	8003a6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	4b7d      	ldr	r3, [pc, #500]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	4a7c      	ldr	r2, [pc, #496]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5e:	4b7a      	ldr	r3, [pc, #488]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6e:	4b77      	ldr	r3, [pc, #476]	; (8003c4c <HAL_RCC_OscConfig+0x474>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d118      	bne.n	8003aac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a7a:	4b74      	ldr	r3, [pc, #464]	; (8003c4c <HAL_RCC_OscConfig+0x474>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a73      	ldr	r2, [pc, #460]	; (8003c4c <HAL_RCC_OscConfig+0x474>)
 8003a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a86:	f7fe ff71 	bl	800296c <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8e:	f7fe ff6d 	bl	800296c <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e10c      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa0:	4b6a      	ldr	r3, [pc, #424]	; (8003c4c <HAL_RCC_OscConfig+0x474>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d106      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x2ea>
 8003ab4:	4b64      	ldr	r3, [pc, #400]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab8:	4a63      	ldr	r2, [pc, #396]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003aba:	f043 0301 	orr.w	r3, r3, #1
 8003abe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac0:	e01c      	b.n	8003afc <HAL_RCC_OscConfig+0x324>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b05      	cmp	r3, #5
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x30c>
 8003aca:	4b5f      	ldr	r3, [pc, #380]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	4a5e      	ldr	r2, [pc, #376]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003ad0:	f043 0304 	orr.w	r3, r3, #4
 8003ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad6:	4b5c      	ldr	r3, [pc, #368]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ada:	4a5b      	ldr	r2, [pc, #364]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae2:	e00b      	b.n	8003afc <HAL_RCC_OscConfig+0x324>
 8003ae4:	4b58      	ldr	r3, [pc, #352]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae8:	4a57      	ldr	r2, [pc, #348]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	6713      	str	r3, [r2, #112]	; 0x70
 8003af0:	4b55      	ldr	r3, [pc, #340]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af4:	4a54      	ldr	r2, [pc, #336]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003af6:	f023 0304 	bic.w	r3, r3, #4
 8003afa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d015      	beq.n	8003b30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b04:	f7fe ff32 	bl	800296c <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b0c:	f7fe ff2e 	bl	800296c <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e0cb      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b22:	4b49      	ldr	r3, [pc, #292]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0ee      	beq.n	8003b0c <HAL_RCC_OscConfig+0x334>
 8003b2e:	e014      	b.n	8003b5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b30:	f7fe ff1c 	bl	800296c <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b36:	e00a      	b.n	8003b4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b38:	f7fe ff18 	bl	800296c <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e0b5      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4e:	4b3e      	ldr	r3, [pc, #248]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1ee      	bne.n	8003b38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b5a:	7dfb      	ldrb	r3, [r7, #23]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d105      	bne.n	8003b6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b60:	4b39      	ldr	r3, [pc, #228]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	4a38      	ldr	r2, [pc, #224]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 80a1 	beq.w	8003cb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b76:	4b34      	ldr	r3, [pc, #208]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 030c 	and.w	r3, r3, #12
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d05c      	beq.n	8003c3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d141      	bne.n	8003c0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8a:	4b31      	ldr	r3, [pc, #196]	; (8003c50 <HAL_RCC_OscConfig+0x478>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fe feec 	bl	800296c <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b98:	f7fe fee8 	bl	800296c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e087      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003baa:	4b27      	ldr	r3, [pc, #156]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69da      	ldr	r2, [r3, #28]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	019b      	lsls	r3, r3, #6
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	085b      	lsrs	r3, r3, #1
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	041b      	lsls	r3, r3, #16
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	061b      	lsls	r3, r3, #24
 8003bda:	491b      	ldr	r1, [pc, #108]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be0:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <HAL_RCC_OscConfig+0x478>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be6:	f7fe fec1 	bl	800296c <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bee:	f7fe febd 	bl	800296c <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e05c      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0x416>
 8003c0c:	e054      	b.n	8003cb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0e:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <HAL_RCC_OscConfig+0x478>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fe feaa 	bl	800296c <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c1c:	f7fe fea6 	bl	800296c <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e045      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <HAL_RCC_OscConfig+0x470>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f0      	bne.n	8003c1c <HAL_RCC_OscConfig+0x444>
 8003c3a:	e03d      	b.n	8003cb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d107      	bne.n	8003c54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e038      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	40007000 	.word	0x40007000
 8003c50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c54:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <HAL_RCC_OscConfig+0x4ec>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d028      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d121      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d11a      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c84:	4013      	ands	r3, r2
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d111      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	085b      	lsrs	r3, r3, #1
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d107      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800

08003cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0cc      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b68      	ldr	r3, [pc, #416]	; (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d90c      	bls.n	8003d04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b65      	ldr	r3, [pc, #404]	; (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf2:	4b63      	ldr	r3, [pc, #396]	; (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d001      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0b8      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d020      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d1c:	4b59      	ldr	r3, [pc, #356]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4a58      	ldr	r2, [pc, #352]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d34:	4b53      	ldr	r3, [pc, #332]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4a52      	ldr	r2, [pc, #328]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d40:	4b50      	ldr	r3, [pc, #320]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	494d      	ldr	r1, [pc, #308]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d044      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d66:	4b47      	ldr	r3, [pc, #284]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d119      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e07f      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d003      	beq.n	8003d86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d107      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d86:	4b3f      	ldr	r3, [pc, #252]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e06f      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d96:	4b3b      	ldr	r3, [pc, #236]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e067      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003da6:	4b37      	ldr	r3, [pc, #220]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f023 0203 	bic.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4934      	ldr	r1, [pc, #208]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db8:	f7fe fdd8 	bl	800296c <HAL_GetTick>
 8003dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc0:	f7fe fdd4 	bl	800296c <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e04f      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	4b2b      	ldr	r3, [pc, #172]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 020c 	and.w	r2, r3, #12
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d1eb      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de8:	4b25      	ldr	r3, [pc, #148]	; (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d20c      	bcs.n	8003e10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b22      	ldr	r3, [pc, #136]	; (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfe:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e032      	b.n	8003e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e1c:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4916      	ldr	r1, [pc, #88]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d009      	beq.n	8003e4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e3a:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	490e      	ldr	r1, [pc, #56]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e4e:	f000 f821 	bl	8003e94 <HAL_RCC_GetSysClockFreq>
 8003e52:	4602      	mov	r2, r0
 8003e54:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	091b      	lsrs	r3, r3, #4
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	490a      	ldr	r1, [pc, #40]	; (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003e60:	5ccb      	ldrb	r3, [r1, r3]
 8003e62:	fa22 f303 	lsr.w	r3, r2, r3
 8003e66:	4a09      	ldr	r2, [pc, #36]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e6a:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe fd38 	bl	80028e4 <HAL_InitTick>

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40023c00 	.word	0x40023c00
 8003e84:	40023800 	.word	0x40023800
 8003e88:	08006ecc 	.word	0x08006ecc
 8003e8c:	2000004c 	.word	0x2000004c
 8003e90:	20000050 	.word	0x20000050

08003e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e98:	b094      	sub	sp, #80	; 0x50
 8003e9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eac:	4b79      	ldr	r3, [pc, #484]	; (8004094 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 030c 	and.w	r3, r3, #12
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d00d      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	f200 80e1 	bhi.w	8004080 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d003      	beq.n	8003ece <HAL_RCC_GetSysClockFreq+0x3a>
 8003ec6:	e0db      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ec8:	4b73      	ldr	r3, [pc, #460]	; (8004098 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ecc:	e0db      	b.n	8004086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ece:	4b73      	ldr	r3, [pc, #460]	; (800409c <HAL_RCC_GetSysClockFreq+0x208>)
 8003ed0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ed2:	e0d8      	b.n	8004086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ed4:	4b6f      	ldr	r3, [pc, #444]	; (8004094 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003edc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ede:	4b6d      	ldr	r3, [pc, #436]	; (8004094 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d063      	beq.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eea:	4b6a      	ldr	r3, [pc, #424]	; (8004094 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	099b      	lsrs	r3, r3, #6
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ef4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efc:	633b      	str	r3, [r7, #48]	; 0x30
 8003efe:	2300      	movs	r3, #0
 8003f00:	637b      	str	r3, [r7, #52]	; 0x34
 8003f02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f06:	4622      	mov	r2, r4
 8003f08:	462b      	mov	r3, r5
 8003f0a:	f04f 0000 	mov.w	r0, #0
 8003f0e:	f04f 0100 	mov.w	r1, #0
 8003f12:	0159      	lsls	r1, r3, #5
 8003f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f18:	0150      	lsls	r0, r2, #5
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4621      	mov	r1, r4
 8003f20:	1a51      	subs	r1, r2, r1
 8003f22:	6139      	str	r1, [r7, #16]
 8003f24:	4629      	mov	r1, r5
 8003f26:	eb63 0301 	sbc.w	r3, r3, r1
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f38:	4659      	mov	r1, fp
 8003f3a:	018b      	lsls	r3, r1, #6
 8003f3c:	4651      	mov	r1, sl
 8003f3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f42:	4651      	mov	r1, sl
 8003f44:	018a      	lsls	r2, r1, #6
 8003f46:	4651      	mov	r1, sl
 8003f48:	ebb2 0801 	subs.w	r8, r2, r1
 8003f4c:	4659      	mov	r1, fp
 8003f4e:	eb63 0901 	sbc.w	r9, r3, r1
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f66:	4690      	mov	r8, r2
 8003f68:	4699      	mov	r9, r3
 8003f6a:	4623      	mov	r3, r4
 8003f6c:	eb18 0303 	adds.w	r3, r8, r3
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	462b      	mov	r3, r5
 8003f74:	eb49 0303 	adc.w	r3, r9, r3
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f86:	4629      	mov	r1, r5
 8003f88:	024b      	lsls	r3, r1, #9
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f90:	4621      	mov	r1, r4
 8003f92:	024a      	lsls	r2, r1, #9
 8003f94:	4610      	mov	r0, r2
 8003f96:	4619      	mov	r1, r3
 8003f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fa4:	f7fc f916 	bl	80001d4 <__aeabi_uldivmod>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4613      	mov	r3, r2
 8003fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fb0:	e058      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb2:	4b38      	ldr	r3, [pc, #224]	; (8004094 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	099b      	lsrs	r3, r3, #6
 8003fb8:	2200      	movs	r2, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fc2:	623b      	str	r3, [r7, #32]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fcc:	4642      	mov	r2, r8
 8003fce:	464b      	mov	r3, r9
 8003fd0:	f04f 0000 	mov.w	r0, #0
 8003fd4:	f04f 0100 	mov.w	r1, #0
 8003fd8:	0159      	lsls	r1, r3, #5
 8003fda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fde:	0150      	lsls	r0, r2, #5
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4641      	mov	r1, r8
 8003fe6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fea:	4649      	mov	r1, r9
 8003fec:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ffc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004000:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004004:	ebb2 040a 	subs.w	r4, r2, sl
 8004008:	eb63 050b 	sbc.w	r5, r3, fp
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	00eb      	lsls	r3, r5, #3
 8004016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800401a:	00e2      	lsls	r2, r4, #3
 800401c:	4614      	mov	r4, r2
 800401e:	461d      	mov	r5, r3
 8004020:	4643      	mov	r3, r8
 8004022:	18e3      	adds	r3, r4, r3
 8004024:	603b      	str	r3, [r7, #0]
 8004026:	464b      	mov	r3, r9
 8004028:	eb45 0303 	adc.w	r3, r5, r3
 800402c:	607b      	str	r3, [r7, #4]
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	e9d7 4500 	ldrd	r4, r5, [r7]
 800403a:	4629      	mov	r1, r5
 800403c:	028b      	lsls	r3, r1, #10
 800403e:	4621      	mov	r1, r4
 8004040:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004044:	4621      	mov	r1, r4
 8004046:	028a      	lsls	r2, r1, #10
 8004048:	4610      	mov	r0, r2
 800404a:	4619      	mov	r1, r3
 800404c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800404e:	2200      	movs	r2, #0
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	61fa      	str	r2, [r7, #28]
 8004054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004058:	f7fc f8bc 	bl	80001d4 <__aeabi_uldivmod>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4613      	mov	r3, r2
 8004062:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004064:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <HAL_RCC_GetSysClockFreq+0x200>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	0c1b      	lsrs	r3, r3, #16
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	3301      	adds	r3, #1
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004074:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004078:	fbb2 f3f3 	udiv	r3, r2, r3
 800407c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800407e:	e002      	b.n	8004086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <HAL_RCC_GetSysClockFreq+0x204>)
 8004082:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004088:	4618      	mov	r0, r3
 800408a:	3750      	adds	r7, #80	; 0x50
 800408c:	46bd      	mov	sp, r7
 800408e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004092:	bf00      	nop
 8004094:	40023800 	.word	0x40023800
 8004098:	00f42400 	.word	0x00f42400
 800409c:	007a1200 	.word	0x007a1200

080040a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a4:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040a6:	681b      	ldr	r3, [r3, #0]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	2000004c 	.word	0x2000004c

080040b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040bc:	f7ff fff0 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80040c0:	4602      	mov	r2, r0
 80040c2:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	0a9b      	lsrs	r3, r3, #10
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	4903      	ldr	r1, [pc, #12]	; (80040dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ce:	5ccb      	ldrb	r3, [r1, r3]
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40023800 	.word	0x40023800
 80040dc:	08006edc 	.word	0x08006edc

080040e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040e4:	f7ff ffdc 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80040e8:	4602      	mov	r2, r0
 80040ea:	4b05      	ldr	r3, [pc, #20]	; (8004100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	0b5b      	lsrs	r3, r3, #13
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	4903      	ldr	r1, [pc, #12]	; (8004104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040f6:	5ccb      	ldrb	r3, [r1, r3]
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40023800 	.word	0x40023800
 8004104:	08006edc 	.word	0x08006edc

08004108 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e07b      	b.n	8004212 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	2b00      	cmp	r3, #0
 8004120:	d108      	bne.n	8004134 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800412a:	d009      	beq.n	8004140 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	61da      	str	r2, [r3, #28]
 8004132:	e005      	b.n	8004140 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fe f818 	bl	8002190 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004176:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c4:	ea42 0103 	orr.w	r1, r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	0c1b      	lsrs	r3, r3, #16
 80041de:	f003 0104 	and.w	r1, r3, #4
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	f003 0210 	and.w	r2, r3, #16
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004200:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	4613      	mov	r3, r2
 8004228:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_SPI_Transmit_DMA+0x20>
 8004238:	2302      	movs	r3, #2
 800423a:	e09b      	b.n	8004374 <HAL_SPI_Transmit_DMA+0x158>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	d002      	beq.n	8004256 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004250:	2302      	movs	r3, #2
 8004252:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004254:	e089      	b.n	800436a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_SPI_Transmit_DMA+0x46>
 800425c:	88fb      	ldrh	r3, [r7, #6]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d102      	bne.n	8004268 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004266:	e080      	b.n	800436a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2203      	movs	r2, #3
 800426c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	88fa      	ldrh	r2, [r7, #6]
 8004280:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	88fa      	ldrh	r2, [r7, #6]
 8004286:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ae:	d10f      	bne.n	80042d0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d4:	4a29      	ldr	r2, [pc, #164]	; (800437c <HAL_SPI_Transmit_DMA+0x160>)
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042dc:	4a28      	ldr	r2, [pc, #160]	; (8004380 <HAL_SPI_Transmit_DMA+0x164>)
 80042de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e4:	4a27      	ldr	r2, [pc, #156]	; (8004384 <HAL_SPI_Transmit_DMA+0x168>)
 80042e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ec:	2200      	movs	r2, #0
 80042ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	4619      	mov	r1, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	330c      	adds	r3, #12
 8004300:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004306:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004308:	f7fe fd44 	bl	8002d94 <HAL_DMA_Start_IT>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00c      	beq.n	800432c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004316:	f043 0210 	orr.w	r2, r3, #16
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800432a:	e01e      	b.n	800436a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b40      	cmp	r3, #64	; 0x40
 8004338:	d007      	beq.n	800434a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004348:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0220 	orr.w	r2, r2, #32
 8004358:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0202 	orr.w	r2, r2, #2
 8004368:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004372:	7dfb      	ldrb	r3, [r7, #23]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	08004641 	.word	0x08004641
 8004380:	08004599 	.word	0x08004599
 8004384:	0800465d 	.word	0x0800465d

08004388 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10e      	bne.n	80043c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d009      	beq.n	80043c8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d004      	beq.n	80043c8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	4798      	blx	r3
    return;
 80043c6:	e0ce      	b.n	8004566 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d009      	beq.n	80043e6 <HAL_SPI_IRQHandler+0x5e>
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d004      	beq.n	80043e6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	4798      	blx	r3
    return;
 80043e4:	e0bf      	b.n	8004566 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10a      	bne.n	8004406 <HAL_SPI_IRQHandler+0x7e>
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d105      	bne.n	8004406 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 80b0 	beq.w	8004566 <HAL_SPI_IRQHandler+0x1de>
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 80aa 	beq.w	8004566 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d023      	beq.n	8004464 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b03      	cmp	r3, #3
 8004426:	d011      	beq.n	800444c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442c:	f043 0204 	orr.w	r2, r3, #4
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	e00b      	b.n	8004464 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800444c:	2300      	movs	r3, #0
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	693b      	ldr	r3, [r7, #16]
        return;
 8004462:	e080      	b.n	8004566 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b00      	cmp	r3, #0
 800446c:	d014      	beq.n	8004498 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004472:	f043 0201 	orr.w	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00c      	beq.n	80044bc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a6:	f043 0208 	orr.w	r2, r3, #8
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80044ae:	2300      	movs	r3, #0
 80044b0:	60bb      	str	r3, [r7, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d04f      	beq.n	8004564 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044d2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d104      	bne.n	80044f0 <HAL_SPI_IRQHandler+0x168>
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d034      	beq.n	800455a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0203 	bic.w	r2, r2, #3
 80044fe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004504:	2b00      	cmp	r3, #0
 8004506:	d011      	beq.n	800452c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450c:	4a17      	ldr	r2, [pc, #92]	; (800456c <HAL_SPI_IRQHandler+0x1e4>)
 800450e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004514:	4618      	mov	r0, r3
 8004516:	f7fe fd05 	bl	8002f24 <HAL_DMA_Abort_IT>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004530:	2b00      	cmp	r3, #0
 8004532:	d016      	beq.n	8004562 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004538:	4a0c      	ldr	r2, [pc, #48]	; (800456c <HAL_SPI_IRQHandler+0x1e4>)
 800453a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004540:	4618      	mov	r0, r3
 8004542:	f7fe fcef 	bl	8002f24 <HAL_DMA_Abort_IT>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004550:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004558:	e003      	b.n	8004562 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f812 	bl	8004584 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004560:	e000      	b.n	8004564 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004562:	bf00      	nop
    return;
 8004564:	bf00      	nop
  }
}
 8004566:	3720      	adds	r7, #32
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	0800469d 	.word	0x0800469d

08004570 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045a6:	f7fe f9e1 	bl	800296c <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ba:	d03b      	beq.n	8004634 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0220 	bic.w	r2, r2, #32
 80045ca:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0202 	bic.w	r2, r2, #2
 80045da:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	2164      	movs	r1, #100	; 0x64
 80045e0:	6978      	ldr	r0, [r7, #20]
 80045e2:	f000 f8f7 	bl	80047d4 <SPI_EndRxTxTransaction>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f0:	f043 0220 	orr.w	r2, r3, #32
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10a      	bne.n	8004616 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2200      	movs	r2, #0
 800461a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800462c:	6978      	ldr	r0, [r7, #20]
 800462e:	f7ff ffa9 	bl	8004584 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004632:	e002      	b.n	800463a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004634:	6978      	ldr	r0, [r7, #20]
 8004636:	f7fe f8f7 	bl	8002828 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7ff ff8e 	bl	8004570 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0203 	bic.w	r2, r2, #3
 8004678:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467e:	f043 0210 	orr.w	r2, r3, #16
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f7ff ff78 	bl	8004584 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004694:	bf00      	nop
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f7ff ff64 	bl	8004584 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046bc:	bf00      	nop
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	4613      	mov	r3, r2
 80046d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046d4:	f7fe f94a 	bl	800296c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	4413      	add	r3, r2
 80046e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046e4:	f7fe f942 	bl	800296c <HAL_GetTick>
 80046e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046ea:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	015b      	lsls	r3, r3, #5
 80046f0:	0d1b      	lsrs	r3, r3, #20
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	fb02 f303 	mul.w	r3, r2, r3
 80046f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046fa:	e054      	b.n	80047a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004702:	d050      	beq.n	80047a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004704:	f7fe f932 	bl	800296c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	429a      	cmp	r2, r3
 8004712:	d902      	bls.n	800471a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d13d      	bne.n	8004796 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004728:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004732:	d111      	bne.n	8004758 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800473c:	d004      	beq.n	8004748 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004746:	d107      	bne.n	8004758 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004760:	d10f      	bne.n	8004782 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004780:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e017      	b.n	80047c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4013      	ands	r3, r2
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	bf0c      	ite	eq
 80047b6:	2301      	moveq	r3, #1
 80047b8:	2300      	movne	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	79fb      	ldrb	r3, [r7, #7]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d19b      	bne.n	80046fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3720      	adds	r7, #32
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	2000004c 	.word	0x2000004c

080047d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af02      	add	r7, sp, #8
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047e0:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <SPI_EndRxTxTransaction+0x7c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1b      	ldr	r2, [pc, #108]	; (8004854 <SPI_EndRxTxTransaction+0x80>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	0d5b      	lsrs	r3, r3, #21
 80047ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047f0:	fb02 f303 	mul.w	r3, r2, r3
 80047f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047fe:	d112      	bne.n	8004826 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2200      	movs	r2, #0
 8004808:	2180      	movs	r1, #128	; 0x80
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff ff5a 	bl	80046c4 <SPI_WaitFlagStateUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d016      	beq.n	8004844 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481a:	f043 0220 	orr.w	r2, r3, #32
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e00f      	b.n	8004846 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	3b01      	subs	r3, #1
 8004830:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483c:	2b80      	cmp	r3, #128	; 0x80
 800483e:	d0f2      	beq.n	8004826 <SPI_EndRxTxTransaction+0x52>
 8004840:	e000      	b.n	8004844 <SPI_EndRxTxTransaction+0x70>
        break;
 8004842:	bf00      	nop
  }

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	2000004c 	.word	0x2000004c
 8004854:	165e9f81 	.word	0x165e9f81

08004858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e041      	b.n	80048ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fd fd2a 	bl	80022d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3304      	adds	r3, #4
 8004894:	4619      	mov	r1, r3
 8004896:	4610      	mov	r0, r2
 8004898:	f000 fef4 	bl	8005684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	d001      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e044      	b.n	800499a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1e      	ldr	r2, [pc, #120]	; (80049a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d018      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x6c>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493a:	d013      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x6c>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1a      	ldr	r2, [pc, #104]	; (80049ac <HAL_TIM_Base_Start_IT+0xb4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00e      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x6c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a19      	ldr	r2, [pc, #100]	; (80049b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d009      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x6c>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a17      	ldr	r2, [pc, #92]	; (80049b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d004      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x6c>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a16      	ldr	r2, [pc, #88]	; (80049b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d111      	bne.n	8004988 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b06      	cmp	r3, #6
 8004974:	d010      	beq.n	8004998 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0201 	orr.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004986:	e007      	b.n	8004998 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40014000 	.word	0x40014000

080049bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e041      	b.n	8004a52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d106      	bne.n	80049e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f839 	bl	8004a5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3304      	adds	r3, #4
 80049f8:	4619      	mov	r1, r3
 80049fa:	4610      	mov	r0, r2
 80049fc:	f000 fe42 	bl	8005684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d109      	bne.n	8004a9c <HAL_TIM_PWM_Start_DMA+0x2c>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	bf0c      	ite	eq
 8004a94:	2301      	moveq	r3, #1
 8004a96:	2300      	movne	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	e022      	b.n	8004ae2 <HAL_TIM_PWM_Start_DMA+0x72>
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d109      	bne.n	8004ab6 <HAL_TIM_PWM_Start_DMA+0x46>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	bf0c      	ite	eq
 8004aae:	2301      	moveq	r3, #1
 8004ab0:	2300      	movne	r3, #0
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	e015      	b.n	8004ae2 <HAL_TIM_PWM_Start_DMA+0x72>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d109      	bne.n	8004ad0 <HAL_TIM_PWM_Start_DMA+0x60>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	bf0c      	ite	eq
 8004ac8:	2301      	moveq	r3, #1
 8004aca:	2300      	movne	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	e008      	b.n	8004ae2 <HAL_TIM_PWM_Start_DMA+0x72>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	bf0c      	ite	eq
 8004adc:	2301      	moveq	r3, #1
 8004ade:	2300      	movne	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e15d      	b.n	8004da6 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d109      	bne.n	8004b04 <HAL_TIM_PWM_Start_DMA+0x94>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	bf0c      	ite	eq
 8004afc:	2301      	moveq	r3, #1
 8004afe:	2300      	movne	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	e022      	b.n	8004b4a <HAL_TIM_PWM_Start_DMA+0xda>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d109      	bne.n	8004b1e <HAL_TIM_PWM_Start_DMA+0xae>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	bf0c      	ite	eq
 8004b16:	2301      	moveq	r3, #1
 8004b18:	2300      	movne	r3, #0
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	e015      	b.n	8004b4a <HAL_TIM_PWM_Start_DMA+0xda>
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d109      	bne.n	8004b38 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	bf0c      	ite	eq
 8004b30:	2301      	moveq	r3, #1
 8004b32:	2300      	movne	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	e008      	b.n	8004b4a <HAL_TIM_PWM_Start_DMA+0xda>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	bf0c      	ite	eq
 8004b44:	2301      	moveq	r3, #1
 8004b46:	2300      	movne	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d024      	beq.n	8004b98 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d104      	bne.n	8004b5e <HAL_TIM_PWM_Start_DMA+0xee>
 8004b54:	887b      	ldrh	r3, [r7, #2]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e123      	b.n	8004da6 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d104      	bne.n	8004b6e <HAL_TIM_PWM_Start_DMA+0xfe>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b6c:	e016      	b.n	8004b9c <HAL_TIM_PWM_Start_DMA+0x12c>
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d104      	bne.n	8004b7e <HAL_TIM_PWM_Start_DMA+0x10e>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b7c:	e00e      	b.n	8004b9c <HAL_TIM_PWM_Start_DMA+0x12c>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d104      	bne.n	8004b8e <HAL_TIM_PWM_Start_DMA+0x11e>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b8c:	e006      	b.n	8004b9c <HAL_TIM_PWM_Start_DMA+0x12c>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2202      	movs	r2, #2
 8004b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b96:	e001      	b.n	8004b9c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e104      	b.n	8004da6 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b0c      	cmp	r3, #12
 8004ba0:	f200 80ae 	bhi.w	8004d00 <HAL_TIM_PWM_Start_DMA+0x290>
 8004ba4:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004be1 	.word	0x08004be1
 8004bb0:	08004d01 	.word	0x08004d01
 8004bb4:	08004d01 	.word	0x08004d01
 8004bb8:	08004d01 	.word	0x08004d01
 8004bbc:	08004c29 	.word	0x08004c29
 8004bc0:	08004d01 	.word	0x08004d01
 8004bc4:	08004d01 	.word	0x08004d01
 8004bc8:	08004d01 	.word	0x08004d01
 8004bcc:	08004c71 	.word	0x08004c71
 8004bd0:	08004d01 	.word	0x08004d01
 8004bd4:	08004d01 	.word	0x08004d01
 8004bd8:	08004d01 	.word	0x08004d01
 8004bdc:	08004cb9 	.word	0x08004cb9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	4a72      	ldr	r2, [pc, #456]	; (8004db0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004be6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	4a71      	ldr	r2, [pc, #452]	; (8004db4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004bee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	4a70      	ldr	r2, [pc, #448]	; (8004db8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004bf6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3334      	adds	r3, #52	; 0x34
 8004c04:	461a      	mov	r2, r3
 8004c06:	887b      	ldrh	r3, [r7, #2]
 8004c08:	f7fe f8c4 	bl	8002d94 <HAL_DMA_Start_IT>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e0c7      	b.n	8004da6 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c24:	60da      	str	r2, [r3, #12]
      break;
 8004c26:	e06e      	b.n	8004d06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	4a60      	ldr	r2, [pc, #384]	; (8004db0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004c2e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c34:	4a5f      	ldr	r2, [pc, #380]	; (8004db4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004c36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3c:	4a5e      	ldr	r2, [pc, #376]	; (8004db8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004c3e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3338      	adds	r3, #56	; 0x38
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	887b      	ldrh	r3, [r7, #2]
 8004c50:	f7fe f8a0 	bl	8002d94 <HAL_DMA_Start_IT>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e0a3      	b.n	8004da6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c6c:	60da      	str	r2, [r3, #12]
      break;
 8004c6e:	e04a      	b.n	8004d06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	4a4e      	ldr	r2, [pc, #312]	; (8004db0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004c76:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	4a4d      	ldr	r2, [pc, #308]	; (8004db4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004c7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	4a4c      	ldr	r2, [pc, #304]	; (8004db8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004c86:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	333c      	adds	r3, #60	; 0x3c
 8004c94:	461a      	mov	r2, r3
 8004c96:	887b      	ldrh	r3, [r7, #2]
 8004c98:	f7fe f87c 	bl	8002d94 <HAL_DMA_Start_IT>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e07f      	b.n	8004da6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cb4:	60da      	str	r2, [r3, #12]
      break;
 8004cb6:	e026      	b.n	8004d06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	4a3c      	ldr	r2, [pc, #240]	; (8004db0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004cbe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	4a3b      	ldr	r2, [pc, #236]	; (8004db4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004cc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	4a3a      	ldr	r2, [pc, #232]	; (8004db8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004cce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3340      	adds	r3, #64	; 0x40
 8004cdc:	461a      	mov	r2, r3
 8004cde:	887b      	ldrh	r3, [r7, #2]
 8004ce0:	f7fe f858 	bl	8002d94 <HAL_DMA_Start_IT>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e05b      	b.n	8004da6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cfc:	60da      	str	r2, [r3, #12]
      break;
 8004cfe:	e002      	b.n	8004d06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	75fb      	strb	r3, [r7, #23]
      break;
 8004d04:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d14b      	bne.n	8004da4 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2201      	movs	r2, #1
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 ff5b 	bl	8005bd0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a27      	ldr	r2, [pc, #156]	; (8004dbc <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d107      	bne.n	8004d34 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d32:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a20      	ldr	r2, [pc, #128]	; (8004dbc <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d018      	beq.n	8004d70 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d46:	d013      	beq.n	8004d70 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a1c      	ldr	r2, [pc, #112]	; (8004dc0 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00e      	beq.n	8004d70 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1b      	ldr	r2, [pc, #108]	; (8004dc4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d009      	beq.n	8004d70 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a19      	ldr	r2, [pc, #100]	; (8004dc8 <HAL_TIM_PWM_Start_DMA+0x358>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d004      	beq.n	8004d70 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a18      	ldr	r2, [pc, #96]	; (8004dcc <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d111      	bne.n	8004d94 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2b06      	cmp	r3, #6
 8004d80:	d010      	beq.n	8004da4 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 0201 	orr.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d92:	e007      	b.n	8004da4 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	08005575 	.word	0x08005575
 8004db4:	0800561d 	.word	0x0800561d
 8004db8:	080054e3 	.word	0x080054e3
 8004dbc:	40010000 	.word	0x40010000
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	40000800 	.word	0x40000800
 8004dc8:	40000c00 	.word	0x40000c00
 8004dcc:	40014000 	.word	0x40014000

08004dd0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b0c      	cmp	r3, #12
 8004de2:	d855      	bhi.n	8004e90 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004de4:	a201      	add	r2, pc, #4	; (adr r2, 8004dec <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dea:	bf00      	nop
 8004dec:	08004e21 	.word	0x08004e21
 8004df0:	08004e91 	.word	0x08004e91
 8004df4:	08004e91 	.word	0x08004e91
 8004df8:	08004e91 	.word	0x08004e91
 8004dfc:	08004e3d 	.word	0x08004e3d
 8004e00:	08004e91 	.word	0x08004e91
 8004e04:	08004e91 	.word	0x08004e91
 8004e08:	08004e91 	.word	0x08004e91
 8004e0c:	08004e59 	.word	0x08004e59
 8004e10:	08004e91 	.word	0x08004e91
 8004e14:	08004e91 	.word	0x08004e91
 8004e18:	08004e91 	.word	0x08004e91
 8004e1c:	08004e75 	.word	0x08004e75
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e2e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fe f875 	bl	8002f24 <HAL_DMA_Abort_IT>
      break;
 8004e3a:	e02c      	b.n	8004e96 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e4a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fe f867 	bl	8002f24 <HAL_DMA_Abort_IT>
      break;
 8004e56:	e01e      	b.n	8004e96 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e66:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fe f859 	bl	8002f24 <HAL_DMA_Abort_IT>
      break;
 8004e72:	e010      	b.n	8004e96 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e82:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fe f84b 	bl	8002f24 <HAL_DMA_Abort_IT>
      break;
 8004e8e:	e002      	b.n	8004e96 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
      break;
 8004e94:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d157      	bne.n	8004f4c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	6839      	ldr	r1, [r7, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fe93 	bl	8005bd0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a2a      	ldr	r2, [pc, #168]	; (8004f58 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d117      	bne.n	8004ee4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6a1a      	ldr	r2, [r3, #32]
 8004eba:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10f      	bne.n	8004ee4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6a1a      	ldr	r2, [r3, #32]
 8004eca:	f240 4344 	movw	r3, #1092	; 0x444
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d107      	bne.n	8004ee4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ee2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6a1a      	ldr	r2, [r3, #32]
 8004eea:	f241 1311 	movw	r3, #4369	; 0x1111
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10f      	bne.n	8004f14 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6a1a      	ldr	r2, [r3, #32]
 8004efa:	f240 4344 	movw	r3, #1092	; 0x444
 8004efe:	4013      	ands	r3, r2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d107      	bne.n	8004f14 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0201 	bic.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d104      	bne.n	8004f24 <HAL_TIM_PWM_Stop_DMA+0x154>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f22:	e013      	b.n	8004f4c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d104      	bne.n	8004f34 <HAL_TIM_PWM_Stop_DMA+0x164>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f32:	e00b      	b.n	8004f4c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d104      	bne.n	8004f44 <HAL_TIM_PWM_Stop_DMA+0x174>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f42:	e003      	b.n	8004f4c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40010000 	.word	0x40010000

08004f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d122      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d11b      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0202 	mvn.w	r2, #2
 8004f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 fa77 	bl	8005492 <HAL_TIM_IC_CaptureCallback>
 8004fa4:	e005      	b.n	8004fb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fa69 	bl	800547e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7fb fa8f 	bl	80004d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d122      	bne.n	800500c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d11b      	bne.n	800500c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0204 	mvn.w	r2, #4
 8004fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fa4d 	bl	8005492 <HAL_TIM_IC_CaptureCallback>
 8004ff8:	e005      	b.n	8005006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fa3f 	bl	800547e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7fb fa65 	bl	80004d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b08      	cmp	r3, #8
 8005018:	d122      	bne.n	8005060 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b08      	cmp	r3, #8
 8005026:	d11b      	bne.n	8005060 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f06f 0208 	mvn.w	r2, #8
 8005030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2204      	movs	r2, #4
 8005036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fa23 	bl	8005492 <HAL_TIM_IC_CaptureCallback>
 800504c:	e005      	b.n	800505a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fa15 	bl	800547e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7fb fa3b 	bl	80004d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f003 0310 	and.w	r3, r3, #16
 800506a:	2b10      	cmp	r3, #16
 800506c:	d122      	bne.n	80050b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f003 0310 	and.w	r3, r3, #16
 8005078:	2b10      	cmp	r3, #16
 800507a:	d11b      	bne.n	80050b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f06f 0210 	mvn.w	r2, #16
 8005084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2208      	movs	r2, #8
 800508a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f9f9 	bl	8005492 <HAL_TIM_IC_CaptureCallback>
 80050a0:	e005      	b.n	80050ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f9eb 	bl	800547e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7fb fa11 	bl	80004d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d10e      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d107      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0201 	mvn.w	r2, #1
 80050d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fb fa4c 	bl	8000578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ea:	2b80      	cmp	r3, #128	; 0x80
 80050ec:	d10e      	bne.n	800510c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f8:	2b80      	cmp	r3, #128	; 0x80
 80050fa:	d107      	bne.n	800510c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fe00 	bl	8005d0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005116:	2b40      	cmp	r3, #64	; 0x40
 8005118:	d10e      	bne.n	8005138 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005124:	2b40      	cmp	r3, #64	; 0x40
 8005126:	d107      	bne.n	8005138 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f9c1 	bl	80054ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b20      	cmp	r3, #32
 8005144:	d10e      	bne.n	8005164 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0320 	and.w	r3, r3, #32
 8005150:	2b20      	cmp	r3, #32
 8005152:	d107      	bne.n	8005164 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f06f 0220 	mvn.w	r2, #32
 800515c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fdca 	bl	8005cf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005164:	bf00      	nop
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005182:	2b01      	cmp	r3, #1
 8005184:	d101      	bne.n	800518a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005186:	2302      	movs	r3, #2
 8005188:	e0ae      	b.n	80052e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b0c      	cmp	r3, #12
 8005196:	f200 809f 	bhi.w	80052d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800519a:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800519c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a0:	080051d5 	.word	0x080051d5
 80051a4:	080052d9 	.word	0x080052d9
 80051a8:	080052d9 	.word	0x080052d9
 80051ac:	080052d9 	.word	0x080052d9
 80051b0:	08005215 	.word	0x08005215
 80051b4:	080052d9 	.word	0x080052d9
 80051b8:	080052d9 	.word	0x080052d9
 80051bc:	080052d9 	.word	0x080052d9
 80051c0:	08005257 	.word	0x08005257
 80051c4:	080052d9 	.word	0x080052d9
 80051c8:	080052d9 	.word	0x080052d9
 80051cc:	080052d9 	.word	0x080052d9
 80051d0:	08005297 	.word	0x08005297
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68b9      	ldr	r1, [r7, #8]
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fad2 	bl	8005784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699a      	ldr	r2, [r3, #24]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0208 	orr.w	r2, r2, #8
 80051ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699a      	ldr	r2, [r3, #24]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0204 	bic.w	r2, r2, #4
 80051fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6999      	ldr	r1, [r3, #24]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	691a      	ldr	r2, [r3, #16]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	619a      	str	r2, [r3, #24]
      break;
 8005212:	e064      	b.n	80052de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68b9      	ldr	r1, [r7, #8]
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fb18 	bl	8005850 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699a      	ldr	r2, [r3, #24]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800522e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699a      	ldr	r2, [r3, #24]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800523e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6999      	ldr	r1, [r3, #24]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	021a      	lsls	r2, r3, #8
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	619a      	str	r2, [r3, #24]
      break;
 8005254:	e043      	b.n	80052de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68b9      	ldr	r1, [r7, #8]
 800525c:	4618      	mov	r0, r3
 800525e:	f000 fb63 	bl	8005928 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69da      	ldr	r2, [r3, #28]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0208 	orr.w	r2, r2, #8
 8005270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0204 	bic.w	r2, r2, #4
 8005280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69d9      	ldr	r1, [r3, #28]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	61da      	str	r2, [r3, #28]
      break;
 8005294:	e023      	b.n	80052de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68b9      	ldr	r1, [r7, #8]
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fbad 	bl	80059fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69da      	ldr	r2, [r3, #28]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69da      	ldr	r2, [r3, #28]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69d9      	ldr	r1, [r3, #28]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	021a      	lsls	r2, r3, #8
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	61da      	str	r2, [r3, #28]
      break;
 80052d6:	e002      	b.n	80052de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	75fb      	strb	r3, [r7, #23]
      break;
 80052dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <HAL_TIM_ConfigClockSource+0x1c>
 8005308:	2302      	movs	r3, #2
 800530a:	e0b4      	b.n	8005476 <HAL_TIM_ConfigClockSource+0x186>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800532a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005344:	d03e      	beq.n	80053c4 <HAL_TIM_ConfigClockSource+0xd4>
 8005346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800534a:	f200 8087 	bhi.w	800545c <HAL_TIM_ConfigClockSource+0x16c>
 800534e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005352:	f000 8086 	beq.w	8005462 <HAL_TIM_ConfigClockSource+0x172>
 8005356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535a:	d87f      	bhi.n	800545c <HAL_TIM_ConfigClockSource+0x16c>
 800535c:	2b70      	cmp	r3, #112	; 0x70
 800535e:	d01a      	beq.n	8005396 <HAL_TIM_ConfigClockSource+0xa6>
 8005360:	2b70      	cmp	r3, #112	; 0x70
 8005362:	d87b      	bhi.n	800545c <HAL_TIM_ConfigClockSource+0x16c>
 8005364:	2b60      	cmp	r3, #96	; 0x60
 8005366:	d050      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x11a>
 8005368:	2b60      	cmp	r3, #96	; 0x60
 800536a:	d877      	bhi.n	800545c <HAL_TIM_ConfigClockSource+0x16c>
 800536c:	2b50      	cmp	r3, #80	; 0x50
 800536e:	d03c      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0xfa>
 8005370:	2b50      	cmp	r3, #80	; 0x50
 8005372:	d873      	bhi.n	800545c <HAL_TIM_ConfigClockSource+0x16c>
 8005374:	2b40      	cmp	r3, #64	; 0x40
 8005376:	d058      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x13a>
 8005378:	2b40      	cmp	r3, #64	; 0x40
 800537a:	d86f      	bhi.n	800545c <HAL_TIM_ConfigClockSource+0x16c>
 800537c:	2b30      	cmp	r3, #48	; 0x30
 800537e:	d064      	beq.n	800544a <HAL_TIM_ConfigClockSource+0x15a>
 8005380:	2b30      	cmp	r3, #48	; 0x30
 8005382:	d86b      	bhi.n	800545c <HAL_TIM_ConfigClockSource+0x16c>
 8005384:	2b20      	cmp	r3, #32
 8005386:	d060      	beq.n	800544a <HAL_TIM_ConfigClockSource+0x15a>
 8005388:	2b20      	cmp	r3, #32
 800538a:	d867      	bhi.n	800545c <HAL_TIM_ConfigClockSource+0x16c>
 800538c:	2b00      	cmp	r3, #0
 800538e:	d05c      	beq.n	800544a <HAL_TIM_ConfigClockSource+0x15a>
 8005390:	2b10      	cmp	r3, #16
 8005392:	d05a      	beq.n	800544a <HAL_TIM_ConfigClockSource+0x15a>
 8005394:	e062      	b.n	800545c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6899      	ldr	r1, [r3, #8]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f000 fbf3 	bl	8005b90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	609a      	str	r2, [r3, #8]
      break;
 80053c2:	e04f      	b.n	8005464 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	6899      	ldr	r1, [r3, #8]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f000 fbdc 	bl	8005b90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053e6:	609a      	str	r2, [r3, #8]
      break;
 80053e8:	e03c      	b.n	8005464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6859      	ldr	r1, [r3, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	461a      	mov	r2, r3
 80053f8:	f000 fb50 	bl	8005a9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2150      	movs	r1, #80	; 0x50
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fba9 	bl	8005b5a <TIM_ITRx_SetConfig>
      break;
 8005408:	e02c      	b.n	8005464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	6859      	ldr	r1, [r3, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	461a      	mov	r2, r3
 8005418:	f000 fb6f 	bl	8005afa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2160      	movs	r1, #96	; 0x60
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fb99 	bl	8005b5a <TIM_ITRx_SetConfig>
      break;
 8005428:	e01c      	b.n	8005464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6818      	ldr	r0, [r3, #0]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	6859      	ldr	r1, [r3, #4]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	461a      	mov	r2, r3
 8005438:	f000 fb30 	bl	8005a9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2140      	movs	r1, #64	; 0x40
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fb89 	bl	8005b5a <TIM_ITRx_SetConfig>
      break;
 8005448:	e00c      	b.n	8005464 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4619      	mov	r1, r3
 8005454:	4610      	mov	r0, r2
 8005456:	f000 fb80 	bl	8005b5a <TIM_ITRx_SetConfig>
      break;
 800545a:	e003      	b.n	8005464 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	73fb      	strb	r3, [r7, #15]
      break;
 8005460:	e000      	b.n	8005464 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005462:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005474:	7bfb      	ldrb	r3, [r7, #15]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005492:	b480      	push	{r7}
 8005494:	b083      	sub	sp, #12
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d107      	bne.n	800550a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005508:	e02a      	b.n	8005560 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	429a      	cmp	r2, r3
 8005512:	d107      	bne.n	8005524 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2202      	movs	r2, #2
 8005518:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005522:	e01d      	b.n	8005560 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	429a      	cmp	r2, r3
 800552c:	d107      	bne.n	800553e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2204      	movs	r2, #4
 8005532:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800553c:	e010      	b.n	8005560 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	429a      	cmp	r2, r3
 8005546:	d107      	bne.n	8005558 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2208      	movs	r2, #8
 800554c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005556:	e003      	b.n	8005560 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f7ff ffb4 	bl	80054ce <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	771a      	strb	r2, [r3, #28]
}
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	429a      	cmp	r2, r3
 800558a:	d10b      	bne.n	80055a4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2201      	movs	r2, #1
 8005590:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d136      	bne.n	8005608 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055a2:	e031      	b.n	8005608 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d10b      	bne.n	80055c6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2202      	movs	r2, #2
 80055b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d125      	bne.n	8005608 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055c4:	e020      	b.n	8005608 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d10b      	bne.n	80055e8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2204      	movs	r2, #4
 80055d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d114      	bne.n	8005608 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055e6:	e00f      	b.n	8005608 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d10a      	bne.n	8005608 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2208      	movs	r2, #8
 80055f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d103      	bne.n	8005608 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f7fa ff61 	bl	80004d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	771a      	strb	r2, [r3, #28]
}
 8005614:	bf00      	nop
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	429a      	cmp	r2, r3
 8005632:	d103      	bne.n	800563c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	771a      	strb	r2, [r3, #28]
 800563a:	e019      	b.n	8005670 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	429a      	cmp	r2, r3
 8005644:	d103      	bne.n	800564e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2202      	movs	r2, #2
 800564a:	771a      	strb	r2, [r3, #28]
 800564c:	e010      	b.n	8005670 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	429a      	cmp	r2, r3
 8005656:	d103      	bne.n	8005660 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2204      	movs	r2, #4
 800565c:	771a      	strb	r2, [r3, #28]
 800565e:	e007      	b.n	8005670 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	429a      	cmp	r2, r3
 8005668:	d102      	bne.n	8005670 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2208      	movs	r2, #8
 800566e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7ff ff18 	bl	80054a6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	771a      	strb	r2, [r3, #28]
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a34      	ldr	r2, [pc, #208]	; (8005768 <TIM_Base_SetConfig+0xe4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00f      	beq.n	80056bc <TIM_Base_SetConfig+0x38>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a2:	d00b      	beq.n	80056bc <TIM_Base_SetConfig+0x38>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a31      	ldr	r2, [pc, #196]	; (800576c <TIM_Base_SetConfig+0xe8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d007      	beq.n	80056bc <TIM_Base_SetConfig+0x38>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a30      	ldr	r2, [pc, #192]	; (8005770 <TIM_Base_SetConfig+0xec>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_Base_SetConfig+0x38>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a2f      	ldr	r2, [pc, #188]	; (8005774 <TIM_Base_SetConfig+0xf0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d108      	bne.n	80056ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a25      	ldr	r2, [pc, #148]	; (8005768 <TIM_Base_SetConfig+0xe4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d01b      	beq.n	800570e <TIM_Base_SetConfig+0x8a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056dc:	d017      	beq.n	800570e <TIM_Base_SetConfig+0x8a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a22      	ldr	r2, [pc, #136]	; (800576c <TIM_Base_SetConfig+0xe8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d013      	beq.n	800570e <TIM_Base_SetConfig+0x8a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a21      	ldr	r2, [pc, #132]	; (8005770 <TIM_Base_SetConfig+0xec>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00f      	beq.n	800570e <TIM_Base_SetConfig+0x8a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a20      	ldr	r2, [pc, #128]	; (8005774 <TIM_Base_SetConfig+0xf0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00b      	beq.n	800570e <TIM_Base_SetConfig+0x8a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a1f      	ldr	r2, [pc, #124]	; (8005778 <TIM_Base_SetConfig+0xf4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d007      	beq.n	800570e <TIM_Base_SetConfig+0x8a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a1e      	ldr	r2, [pc, #120]	; (800577c <TIM_Base_SetConfig+0xf8>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_Base_SetConfig+0x8a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a1d      	ldr	r2, [pc, #116]	; (8005780 <TIM_Base_SetConfig+0xfc>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d108      	bne.n	8005720 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a08      	ldr	r2, [pc, #32]	; (8005768 <TIM_Base_SetConfig+0xe4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d103      	bne.n	8005754 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	615a      	str	r2, [r3, #20]
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40010000 	.word	0x40010000
 800576c:	40000400 	.word	0x40000400
 8005770:	40000800 	.word	0x40000800
 8005774:	40000c00 	.word	0x40000c00
 8005778:	40014000 	.word	0x40014000
 800577c:	40014400 	.word	0x40014400
 8005780:	40014800 	.word	0x40014800

08005784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	f023 0201 	bic.w	r2, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0303 	bic.w	r3, r3, #3
 80057ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f023 0302 	bic.w	r3, r3, #2
 80057cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a1c      	ldr	r2, [pc, #112]	; (800584c <TIM_OC1_SetConfig+0xc8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d10c      	bne.n	80057fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f023 0308 	bic.w	r3, r3, #8
 80057e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f023 0304 	bic.w	r3, r3, #4
 80057f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a13      	ldr	r2, [pc, #76]	; (800584c <TIM_OC1_SetConfig+0xc8>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d111      	bne.n	8005826 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	4313      	orrs	r3, r2
 8005824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	621a      	str	r2, [r3, #32]
}
 8005840:	bf00      	nop
 8005842:	371c      	adds	r7, #28
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	40010000 	.word	0x40010000

08005850 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	f023 0210 	bic.w	r2, r3, #16
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800587e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	021b      	lsls	r3, r3, #8
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f023 0320 	bic.w	r3, r3, #32
 800589a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a1e      	ldr	r2, [pc, #120]	; (8005924 <TIM_OC2_SetConfig+0xd4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d10d      	bne.n	80058cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	011b      	lsls	r3, r3, #4
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a15      	ldr	r2, [pc, #84]	; (8005924 <TIM_OC2_SetConfig+0xd4>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d113      	bne.n	80058fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	621a      	str	r2, [r3, #32]
}
 8005916:	bf00      	nop
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40010000 	.word	0x40010000

08005928 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0303 	bic.w	r3, r3, #3
 800595e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a1d      	ldr	r2, [pc, #116]	; (80059f8 <TIM_OC3_SetConfig+0xd0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d10d      	bne.n	80059a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800598c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a14      	ldr	r2, [pc, #80]	; (80059f8 <TIM_OC3_SetConfig+0xd0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d113      	bne.n	80059d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	621a      	str	r2, [r3, #32]
}
 80059ec:	bf00      	nop
 80059ee:	371c      	adds	r7, #28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	40010000 	.word	0x40010000

080059fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	021b      	lsls	r3, r3, #8
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	031b      	lsls	r3, r3, #12
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a10      	ldr	r2, [pc, #64]	; (8005a98 <TIM_OC4_SetConfig+0x9c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d109      	bne.n	8005a70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	019b      	lsls	r3, r3, #6
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	621a      	str	r2, [r3, #32]
}
 8005a8a:	bf00      	nop
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40010000 	.word	0x40010000

08005a9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	f023 0201 	bic.w	r2, r3, #1
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	011b      	lsls	r3, r3, #4
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f023 030a 	bic.w	r3, r3, #10
 8005ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	621a      	str	r2, [r3, #32]
}
 8005aee:	bf00      	nop
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b087      	sub	sp, #28
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	60f8      	str	r0, [r7, #12]
 8005b02:	60b9      	str	r1, [r7, #8]
 8005b04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f023 0210 	bic.w	r2, r3, #16
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	031b      	lsls	r3, r3, #12
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	621a      	str	r2, [r3, #32]
}
 8005b4e:	bf00      	nop
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b085      	sub	sp, #20
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	f043 0307 	orr.w	r3, r3, #7
 8005b7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	609a      	str	r2, [r3, #8]
}
 8005b84:	bf00      	nop
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005baa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	021a      	lsls	r2, r3, #8
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	609a      	str	r2, [r3, #8]
}
 8005bc4:	bf00      	nop
 8005bc6:	371c      	adds	r7, #28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f003 031f 	and.w	r3, r3, #31
 8005be2:	2201      	movs	r2, #1
 8005be4:	fa02 f303 	lsl.w	r3, r2, r3
 8005be8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a1a      	ldr	r2, [r3, #32]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	43db      	mvns	r3, r3
 8005bf2:	401a      	ands	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a1a      	ldr	r2, [r3, #32]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f003 031f 	and.w	r3, r3, #31
 8005c02:	6879      	ldr	r1, [r7, #4]
 8005c04:	fa01 f303 	lsl.w	r3, r1, r3
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	621a      	str	r2, [r3, #32]
}
 8005c0e:	bf00      	nop
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
	...

08005c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e050      	b.n	8005cd6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a1c      	ldr	r2, [pc, #112]	; (8005ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d018      	beq.n	8005caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c80:	d013      	beq.n	8005caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a18      	ldr	r2, [pc, #96]	; (8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d00e      	beq.n	8005caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a16      	ldr	r2, [pc, #88]	; (8005cec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d009      	beq.n	8005caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a15      	ldr	r2, [pc, #84]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d004      	beq.n	8005caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a13      	ldr	r2, [pc, #76]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d10c      	bne.n	8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40010000 	.word	0x40010000
 8005ce8:	40000400 	.word	0x40000400
 8005cec:	40000800 	.word	0x40000800
 8005cf0:	40000c00 	.word	0x40000c00
 8005cf4:	40014000 	.word	0x40014000

08005cf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e03f      	b.n	8005db2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7fc fb74 	bl	8002434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2224      	movs	r2, #36	; 0x24
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fd19 	bl	800679c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	691a      	ldr	r2, [r3, #16]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695a      	ldr	r2, [r3, #20]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b085      	sub	sp, #20
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d130      	bne.n	8005e36 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <HAL_UART_Transmit_IT+0x26>
 8005dda:	88fb      	ldrh	r3, [r7, #6]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e029      	b.n	8005e38 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <HAL_UART_Transmit_IT+0x38>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e022      	b.n	8005e38 <HAL_UART_Transmit_IT+0x7e>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	88fa      	ldrh	r2, [r7, #6]
 8005e04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	88fa      	ldrh	r2, [r7, #6]
 8005e0a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2221      	movs	r2, #33	; 0x21
 8005e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68da      	ldr	r2, [r3, #12]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e30:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	e000      	b.n	8005e38 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005e36:	2302      	movs	r3, #2
  }
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d11d      	bne.n	8005e9a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <HAL_UART_Receive_IT+0x26>
 8005e64:	88fb      	ldrh	r3, [r7, #6]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e016      	b.n	8005e9c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <HAL_UART_Receive_IT+0x38>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e00f      	b.n	8005e9c <HAL_UART_Receive_IT+0x58>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	68b9      	ldr	r1, [r7, #8]
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 faab 	bl	80063ec <UART_Start_Receive_IT>
 8005e96:	4603      	mov	r3, r0
 8005e98:	e000      	b.n	8005e9c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005e9a:	2302      	movs	r3, #2
  }
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b0ba      	sub	sp, #232	; 0xe8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005ee2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10f      	bne.n	8005f0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eee:	f003 0320 	and.w	r3, r3, #32
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d009      	beq.n	8005f0a <HAL_UART_IRQHandler+0x66>
 8005ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005efa:	f003 0320 	and.w	r3, r3, #32
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fb8f 	bl	8006626 <UART_Receive_IT>
      return;
 8005f08:	e256      	b.n	80063b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 80de 	beq.w	80060d0 <HAL_UART_IRQHandler+0x22c>
 8005f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d106      	bne.n	8005f2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 80d1 	beq.w	80060d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00b      	beq.n	8005f52 <HAL_UART_IRQHandler+0xae>
 8005f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	f043 0201 	orr.w	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f56:	f003 0304 	and.w	r3, r3, #4
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00b      	beq.n	8005f76 <HAL_UART_IRQHandler+0xd2>
 8005f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	f043 0202 	orr.w	r2, r3, #2
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <HAL_UART_IRQHandler+0xf6>
 8005f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	f043 0204 	orr.w	r2, r3, #4
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9e:	f003 0308 	and.w	r3, r3, #8
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d011      	beq.n	8005fca <HAL_UART_IRQHandler+0x126>
 8005fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d105      	bne.n	8005fbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d005      	beq.n	8005fca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	f043 0208 	orr.w	r2, r3, #8
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 81ed 	beq.w	80063ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd8:	f003 0320 	and.w	r3, r3, #32
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d008      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x14e>
 8005fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe4:	f003 0320 	and.w	r3, r3, #32
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fb1a 	bl	8006626 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffc:	2b40      	cmp	r3, #64	; 0x40
 8005ffe:	bf0c      	ite	eq
 8006000:	2301      	moveq	r3, #1
 8006002:	2300      	movne	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d103      	bne.n	800601e <HAL_UART_IRQHandler+0x17a>
 8006016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800601a:	2b00      	cmp	r3, #0
 800601c:	d04f      	beq.n	80060be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fa22 	bl	8006468 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602e:	2b40      	cmp	r3, #64	; 0x40
 8006030:	d141      	bne.n	80060b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3314      	adds	r3, #20
 8006038:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006048:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800604c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006050:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3314      	adds	r3, #20
 800605a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800605e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006062:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006066:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800606a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1d9      	bne.n	8006032 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	2b00      	cmp	r3, #0
 8006084:	d013      	beq.n	80060ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608a:	4a7d      	ldr	r2, [pc, #500]	; (8006280 <HAL_UART_IRQHandler+0x3dc>)
 800608c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006092:	4618      	mov	r0, r3
 8006094:	f7fc ff46 	bl	8002f24 <HAL_DMA_Abort_IT>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d016      	beq.n	80060cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060a8:	4610      	mov	r0, r2
 80060aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ac:	e00e      	b.n	80060cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f986 	bl	80063c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b4:	e00a      	b.n	80060cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f982 	bl	80063c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060bc:	e006      	b.n	80060cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f97e 	bl	80063c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80060ca:	e170      	b.n	80063ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060cc:	bf00      	nop
    return;
 80060ce:	e16e      	b.n	80063ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	f040 814a 	bne.w	800636e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80060da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060de:	f003 0310 	and.w	r3, r3, #16
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 8143 	beq.w	800636e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 813c 	beq.w	800636e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060f6:	2300      	movs	r3, #0
 80060f8:	60bb      	str	r3, [r7, #8]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	60bb      	str	r3, [r7, #8]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	60bb      	str	r3, [r7, #8]
 800610a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006116:	2b40      	cmp	r3, #64	; 0x40
 8006118:	f040 80b4 	bne.w	8006284 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006128:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 8140 	beq.w	80063b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800613a:	429a      	cmp	r2, r3
 800613c:	f080 8139 	bcs.w	80063b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006146:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006152:	f000 8088 	beq.w	8006266 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	330c      	adds	r3, #12
 800615c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800616c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	330c      	adds	r3, #12
 800617e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006182:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006186:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800618e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800619a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1d9      	bne.n	8006156 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3314      	adds	r3, #20
 80061a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061b4:	f023 0301 	bic.w	r3, r3, #1
 80061b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3314      	adds	r3, #20
 80061c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e1      	bne.n	80061a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3314      	adds	r3, #20
 80061e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3314      	adds	r3, #20
 80061fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006202:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006204:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006208:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e3      	bne.n	80061de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2220      	movs	r2, #32
 800621a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	330c      	adds	r3, #12
 800622a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800622e:	e853 3f00 	ldrex	r3, [r3]
 8006232:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006236:	f023 0310 	bic.w	r3, r3, #16
 800623a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	330c      	adds	r3, #12
 8006244:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006248:	65ba      	str	r2, [r7, #88]	; 0x58
 800624a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800624e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006250:	e841 2300 	strex	r3, r2, [r1]
 8006254:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e3      	bne.n	8006224 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006260:	4618      	mov	r0, r3
 8006262:	f7fc fdef 	bl	8002e44 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800626e:	b29b      	uxth	r3, r3
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	b29b      	uxth	r3, r3
 8006274:	4619      	mov	r1, r3
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f8ac 	bl	80063d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800627c:	e099      	b.n	80063b2 <HAL_UART_IRQHandler+0x50e>
 800627e:	bf00      	nop
 8006280:	0800652f 	.word	0x0800652f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800628c:	b29b      	uxth	r3, r3
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006298:	b29b      	uxth	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 808b 	beq.w	80063b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80062a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 8086 	beq.w	80063b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	330c      	adds	r3, #12
 80062b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b4:	e853 3f00 	ldrex	r3, [r3]
 80062b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	330c      	adds	r3, #12
 80062ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80062ce:	647a      	str	r2, [r7, #68]	; 0x44
 80062d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062d6:	e841 2300 	strex	r3, r2, [r1]
 80062da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1e3      	bne.n	80062aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3314      	adds	r3, #20
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	623b      	str	r3, [r7, #32]
   return(result);
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	f023 0301 	bic.w	r3, r3, #1
 80062f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3314      	adds	r3, #20
 8006302:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006306:	633a      	str	r2, [r7, #48]	; 0x30
 8006308:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800630c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e3      	bne.n	80062e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2220      	movs	r2, #32
 800631e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	330c      	adds	r3, #12
 800632e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	e853 3f00 	ldrex	r3, [r3]
 8006336:	60fb      	str	r3, [r7, #12]
   return(result);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0310 	bic.w	r3, r3, #16
 800633e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	330c      	adds	r3, #12
 8006348:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800634c:	61fa      	str	r2, [r7, #28]
 800634e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006350:	69b9      	ldr	r1, [r7, #24]
 8006352:	69fa      	ldr	r2, [r7, #28]
 8006354:	e841 2300 	strex	r3, r2, [r1]
 8006358:	617b      	str	r3, [r7, #20]
   return(result);
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1e3      	bne.n	8006328 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006364:	4619      	mov	r1, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f834 	bl	80063d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800636c:	e023      	b.n	80063b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800636e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006376:	2b00      	cmp	r3, #0
 8006378:	d009      	beq.n	800638e <HAL_UART_IRQHandler+0x4ea>
 800637a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800637e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f8e5 	bl	8006556 <UART_Transmit_IT>
    return;
 800638c:	e014      	b.n	80063b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800638e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00e      	beq.n	80063b8 <HAL_UART_IRQHandler+0x514>
 800639a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800639e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d008      	beq.n	80063b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f925 	bl	80065f6 <UART_EndTransmit_IT>
    return;
 80063ac:	e004      	b.n	80063b8 <HAL_UART_IRQHandler+0x514>
    return;
 80063ae:	bf00      	nop
 80063b0:	e002      	b.n	80063b8 <HAL_UART_IRQHandler+0x514>
      return;
 80063b2:	bf00      	nop
 80063b4:	e000      	b.n	80063b8 <HAL_UART_IRQHandler+0x514>
      return;
 80063b6:	bf00      	nop
  }
}
 80063b8:	37e8      	adds	r7, #232	; 0xe8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop

080063c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	4613      	mov	r3, r2
 80063f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	88fa      	ldrh	r2, [r7, #6]
 8006404:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	88fa      	ldrh	r2, [r7, #6]
 800640a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2222      	movs	r2, #34	; 0x22
 8006416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d007      	beq.n	800643a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006438:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	695a      	ldr	r2, [r3, #20]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0201 	orr.w	r2, r2, #1
 8006448:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f042 0220 	orr.w	r2, r2, #32
 8006458:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006468:	b480      	push	{r7}
 800646a:	b095      	sub	sp, #84	; 0x54
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	330c      	adds	r3, #12
 8006476:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006482:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	330c      	adds	r3, #12
 800648e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006490:	643a      	str	r2, [r7, #64]	; 0x40
 8006492:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006496:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e5      	bne.n	8006470 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3314      	adds	r3, #20
 80064aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	e853 3f00 	ldrex	r3, [r3]
 80064b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	f023 0301 	bic.w	r3, r3, #1
 80064ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3314      	adds	r3, #20
 80064c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e5      	bne.n	80064a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d119      	bne.n	8006514 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	330c      	adds	r3, #12
 80064e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	e853 3f00 	ldrex	r3, [r3]
 80064ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f023 0310 	bic.w	r3, r3, #16
 80064f6:	647b      	str	r3, [r7, #68]	; 0x44
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	330c      	adds	r3, #12
 80064fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006500:	61ba      	str	r2, [r7, #24]
 8006502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006504:	6979      	ldr	r1, [r7, #20]
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	e841 2300 	strex	r3, r2, [r1]
 800650c:	613b      	str	r3, [r7, #16]
   return(result);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e5      	bne.n	80064e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2220      	movs	r2, #32
 8006518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006522:	bf00      	nop
 8006524:	3754      	adds	r7, #84	; 0x54
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b084      	sub	sp, #16
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7ff ff39 	bl	80063c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800654e:	bf00      	nop
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006556:	b480      	push	{r7}
 8006558:	b085      	sub	sp, #20
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b21      	cmp	r3, #33	; 0x21
 8006568:	d13e      	bne.n	80065e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006572:	d114      	bne.n	800659e <UART_Transmit_IT+0x48>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d110      	bne.n	800659e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	461a      	mov	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006590:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	1c9a      	adds	r2, r3, #2
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	621a      	str	r2, [r3, #32]
 800659c:	e008      	b.n	80065b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	1c59      	adds	r1, r3, #1
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6211      	str	r1, [r2, #32]
 80065a8:	781a      	ldrb	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	4619      	mov	r1, r3
 80065be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10f      	bne.n	80065e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68da      	ldr	r2, [r3, #12]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	e000      	b.n	80065ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065e8:	2302      	movs	r3, #2
  }
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68da      	ldr	r2, [r3, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800660c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fb f82e 	bl	8001678 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b08c      	sub	sp, #48	; 0x30
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b22      	cmp	r3, #34	; 0x22
 8006638:	f040 80ab 	bne.w	8006792 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006644:	d117      	bne.n	8006676 <UART_Receive_IT+0x50>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d113      	bne.n	8006676 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800664e:	2300      	movs	r3, #0
 8006650:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006664:	b29a      	uxth	r2, r3
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666e:	1c9a      	adds	r2, r3, #2
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	629a      	str	r2, [r3, #40]	; 0x28
 8006674:	e026      	b.n	80066c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800667c:	2300      	movs	r3, #0
 800667e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006688:	d007      	beq.n	800669a <UART_Receive_IT+0x74>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10a      	bne.n	80066a8 <UART_Receive_IT+0x82>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	e008      	b.n	80066ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	3b01      	subs	r3, #1
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	4619      	mov	r1, r3
 80066d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d15a      	bne.n	800678e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0220 	bic.w	r2, r2, #32
 80066e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	695a      	ldr	r2, [r3, #20]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0201 	bic.w	r2, r2, #1
 8006706:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006714:	2b01      	cmp	r3, #1
 8006716:	d135      	bne.n	8006784 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	330c      	adds	r3, #12
 8006724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	613b      	str	r3, [r7, #16]
   return(result);
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f023 0310 	bic.w	r3, r3, #16
 8006734:	627b      	str	r3, [r7, #36]	; 0x24
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	330c      	adds	r3, #12
 800673c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800673e:	623a      	str	r2, [r7, #32]
 8006740:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	69f9      	ldr	r1, [r7, #28]
 8006744:	6a3a      	ldr	r2, [r7, #32]
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	61bb      	str	r3, [r7, #24]
   return(result);
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e5      	bne.n	800671e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0310 	and.w	r3, r3, #16
 800675c:	2b10      	cmp	r3, #16
 800675e:	d10a      	bne.n	8006776 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7ff fe29 	bl	80063d4 <HAL_UARTEx_RxEventCallback>
 8006782:	e002      	b.n	800678a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7fa ff47 	bl	8001618 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	e002      	b.n	8006794 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	e000      	b.n	8006794 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006792:	2302      	movs	r3, #2
  }
}
 8006794:	4618      	mov	r0, r3
 8006796:	3730      	adds	r7, #48	; 0x30
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800679c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067a0:	b0c0      	sub	sp, #256	; 0x100
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b8:	68d9      	ldr	r1, [r3, #12]
 80067ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	ea40 0301 	orr.w	r3, r0, r1
 80067c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	431a      	orrs	r2, r3
 80067d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	431a      	orrs	r2, r3
 80067dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80067f4:	f021 010c 	bic.w	r1, r1, #12
 80067f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006802:	430b      	orrs	r3, r1
 8006804:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006816:	6999      	ldr	r1, [r3, #24]
 8006818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	ea40 0301 	orr.w	r3, r0, r1
 8006822:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	4b8f      	ldr	r3, [pc, #572]	; (8006a68 <UART_SetConfig+0x2cc>)
 800682c:	429a      	cmp	r2, r3
 800682e:	d005      	beq.n	800683c <UART_SetConfig+0xa0>
 8006830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	4b8d      	ldr	r3, [pc, #564]	; (8006a6c <UART_SetConfig+0x2d0>)
 8006838:	429a      	cmp	r2, r3
 800683a:	d104      	bne.n	8006846 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800683c:	f7fd fc50 	bl	80040e0 <HAL_RCC_GetPCLK2Freq>
 8006840:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006844:	e003      	b.n	800684e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006846:	f7fd fc37 	bl	80040b8 <HAL_RCC_GetPCLK1Freq>
 800684a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800684e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006858:	f040 810c 	bne.w	8006a74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800685c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006860:	2200      	movs	r2, #0
 8006862:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006866:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800686a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800686e:	4622      	mov	r2, r4
 8006870:	462b      	mov	r3, r5
 8006872:	1891      	adds	r1, r2, r2
 8006874:	65b9      	str	r1, [r7, #88]	; 0x58
 8006876:	415b      	adcs	r3, r3
 8006878:	65fb      	str	r3, [r7, #92]	; 0x5c
 800687a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800687e:	4621      	mov	r1, r4
 8006880:	eb12 0801 	adds.w	r8, r2, r1
 8006884:	4629      	mov	r1, r5
 8006886:	eb43 0901 	adc.w	r9, r3, r1
 800688a:	f04f 0200 	mov.w	r2, #0
 800688e:	f04f 0300 	mov.w	r3, #0
 8006892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800689a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800689e:	4690      	mov	r8, r2
 80068a0:	4699      	mov	r9, r3
 80068a2:	4623      	mov	r3, r4
 80068a4:	eb18 0303 	adds.w	r3, r8, r3
 80068a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068ac:	462b      	mov	r3, r5
 80068ae:	eb49 0303 	adc.w	r3, r9, r3
 80068b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80068c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80068ca:	460b      	mov	r3, r1
 80068cc:	18db      	adds	r3, r3, r3
 80068ce:	653b      	str	r3, [r7, #80]	; 0x50
 80068d0:	4613      	mov	r3, r2
 80068d2:	eb42 0303 	adc.w	r3, r2, r3
 80068d6:	657b      	str	r3, [r7, #84]	; 0x54
 80068d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80068dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80068e0:	f7f9 fc78 	bl	80001d4 <__aeabi_uldivmod>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4b61      	ldr	r3, [pc, #388]	; (8006a70 <UART_SetConfig+0x2d4>)
 80068ea:	fba3 2302 	umull	r2, r3, r3, r2
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	011c      	lsls	r4, r3, #4
 80068f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006900:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006904:	4642      	mov	r2, r8
 8006906:	464b      	mov	r3, r9
 8006908:	1891      	adds	r1, r2, r2
 800690a:	64b9      	str	r1, [r7, #72]	; 0x48
 800690c:	415b      	adcs	r3, r3
 800690e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006910:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006914:	4641      	mov	r1, r8
 8006916:	eb12 0a01 	adds.w	sl, r2, r1
 800691a:	4649      	mov	r1, r9
 800691c:	eb43 0b01 	adc.w	fp, r3, r1
 8006920:	f04f 0200 	mov.w	r2, #0
 8006924:	f04f 0300 	mov.w	r3, #0
 8006928:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800692c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006930:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006934:	4692      	mov	sl, r2
 8006936:	469b      	mov	fp, r3
 8006938:	4643      	mov	r3, r8
 800693a:	eb1a 0303 	adds.w	r3, sl, r3
 800693e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006942:	464b      	mov	r3, r9
 8006944:	eb4b 0303 	adc.w	r3, fp, r3
 8006948:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800694c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006958:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800695c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006960:	460b      	mov	r3, r1
 8006962:	18db      	adds	r3, r3, r3
 8006964:	643b      	str	r3, [r7, #64]	; 0x40
 8006966:	4613      	mov	r3, r2
 8006968:	eb42 0303 	adc.w	r3, r2, r3
 800696c:	647b      	str	r3, [r7, #68]	; 0x44
 800696e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006972:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006976:	f7f9 fc2d 	bl	80001d4 <__aeabi_uldivmod>
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	4611      	mov	r1, r2
 8006980:	4b3b      	ldr	r3, [pc, #236]	; (8006a70 <UART_SetConfig+0x2d4>)
 8006982:	fba3 2301 	umull	r2, r3, r3, r1
 8006986:	095b      	lsrs	r3, r3, #5
 8006988:	2264      	movs	r2, #100	; 0x64
 800698a:	fb02 f303 	mul.w	r3, r2, r3
 800698e:	1acb      	subs	r3, r1, r3
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006996:	4b36      	ldr	r3, [pc, #216]	; (8006a70 <UART_SetConfig+0x2d4>)
 8006998:	fba3 2302 	umull	r2, r3, r3, r2
 800699c:	095b      	lsrs	r3, r3, #5
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069a4:	441c      	add	r4, r3
 80069a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80069b8:	4642      	mov	r2, r8
 80069ba:	464b      	mov	r3, r9
 80069bc:	1891      	adds	r1, r2, r2
 80069be:	63b9      	str	r1, [r7, #56]	; 0x38
 80069c0:	415b      	adcs	r3, r3
 80069c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069c8:	4641      	mov	r1, r8
 80069ca:	1851      	adds	r1, r2, r1
 80069cc:	6339      	str	r1, [r7, #48]	; 0x30
 80069ce:	4649      	mov	r1, r9
 80069d0:	414b      	adcs	r3, r1
 80069d2:	637b      	str	r3, [r7, #52]	; 0x34
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80069e0:	4659      	mov	r1, fp
 80069e2:	00cb      	lsls	r3, r1, #3
 80069e4:	4651      	mov	r1, sl
 80069e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ea:	4651      	mov	r1, sl
 80069ec:	00ca      	lsls	r2, r1, #3
 80069ee:	4610      	mov	r0, r2
 80069f0:	4619      	mov	r1, r3
 80069f2:	4603      	mov	r3, r0
 80069f4:	4642      	mov	r2, r8
 80069f6:	189b      	adds	r3, r3, r2
 80069f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069fc:	464b      	mov	r3, r9
 80069fe:	460a      	mov	r2, r1
 8006a00:	eb42 0303 	adc.w	r3, r2, r3
 8006a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	18db      	adds	r3, r3, r3
 8006a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a22:	4613      	mov	r3, r2
 8006a24:	eb42 0303 	adc.w	r3, r2, r3
 8006a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a32:	f7f9 fbcf 	bl	80001d4 <__aeabi_uldivmod>
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4b0d      	ldr	r3, [pc, #52]	; (8006a70 <UART_SetConfig+0x2d4>)
 8006a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a40:	095b      	lsrs	r3, r3, #5
 8006a42:	2164      	movs	r1, #100	; 0x64
 8006a44:	fb01 f303 	mul.w	r3, r1, r3
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	3332      	adds	r3, #50	; 0x32
 8006a4e:	4a08      	ldr	r2, [pc, #32]	; (8006a70 <UART_SetConfig+0x2d4>)
 8006a50:	fba2 2303 	umull	r2, r3, r2, r3
 8006a54:	095b      	lsrs	r3, r3, #5
 8006a56:	f003 0207 	and.w	r2, r3, #7
 8006a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4422      	add	r2, r4
 8006a62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a64:	e106      	b.n	8006c74 <UART_SetConfig+0x4d8>
 8006a66:	bf00      	nop
 8006a68:	40011000 	.word	0x40011000
 8006a6c:	40011400 	.word	0x40011400
 8006a70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a86:	4642      	mov	r2, r8
 8006a88:	464b      	mov	r3, r9
 8006a8a:	1891      	adds	r1, r2, r2
 8006a8c:	6239      	str	r1, [r7, #32]
 8006a8e:	415b      	adcs	r3, r3
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
 8006a92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a96:	4641      	mov	r1, r8
 8006a98:	1854      	adds	r4, r2, r1
 8006a9a:	4649      	mov	r1, r9
 8006a9c:	eb43 0501 	adc.w	r5, r3, r1
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	f04f 0300 	mov.w	r3, #0
 8006aa8:	00eb      	lsls	r3, r5, #3
 8006aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aae:	00e2      	lsls	r2, r4, #3
 8006ab0:	4614      	mov	r4, r2
 8006ab2:	461d      	mov	r5, r3
 8006ab4:	4643      	mov	r3, r8
 8006ab6:	18e3      	adds	r3, r4, r3
 8006ab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006abc:	464b      	mov	r3, r9
 8006abe:	eb45 0303 	adc.w	r3, r5, r3
 8006ac2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ad2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ad6:	f04f 0200 	mov.w	r2, #0
 8006ada:	f04f 0300 	mov.w	r3, #0
 8006ade:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	008b      	lsls	r3, r1, #2
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aec:	4621      	mov	r1, r4
 8006aee:	008a      	lsls	r2, r1, #2
 8006af0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006af4:	f7f9 fb6e 	bl	80001d4 <__aeabi_uldivmod>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4b60      	ldr	r3, [pc, #384]	; (8006c80 <UART_SetConfig+0x4e4>)
 8006afe:	fba3 2302 	umull	r2, r3, r3, r2
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	011c      	lsls	r4, r3, #4
 8006b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b18:	4642      	mov	r2, r8
 8006b1a:	464b      	mov	r3, r9
 8006b1c:	1891      	adds	r1, r2, r2
 8006b1e:	61b9      	str	r1, [r7, #24]
 8006b20:	415b      	adcs	r3, r3
 8006b22:	61fb      	str	r3, [r7, #28]
 8006b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b28:	4641      	mov	r1, r8
 8006b2a:	1851      	adds	r1, r2, r1
 8006b2c:	6139      	str	r1, [r7, #16]
 8006b2e:	4649      	mov	r1, r9
 8006b30:	414b      	adcs	r3, r1
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	f04f 0300 	mov.w	r3, #0
 8006b3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b40:	4659      	mov	r1, fp
 8006b42:	00cb      	lsls	r3, r1, #3
 8006b44:	4651      	mov	r1, sl
 8006b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b4a:	4651      	mov	r1, sl
 8006b4c:	00ca      	lsls	r2, r1, #3
 8006b4e:	4610      	mov	r0, r2
 8006b50:	4619      	mov	r1, r3
 8006b52:	4603      	mov	r3, r0
 8006b54:	4642      	mov	r2, r8
 8006b56:	189b      	adds	r3, r3, r2
 8006b58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b5c:	464b      	mov	r3, r9
 8006b5e:	460a      	mov	r2, r1
 8006b60:	eb42 0303 	adc.w	r3, r2, r3
 8006b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b74:	f04f 0200 	mov.w	r2, #0
 8006b78:	f04f 0300 	mov.w	r3, #0
 8006b7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b80:	4649      	mov	r1, r9
 8006b82:	008b      	lsls	r3, r1, #2
 8006b84:	4641      	mov	r1, r8
 8006b86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b8a:	4641      	mov	r1, r8
 8006b8c:	008a      	lsls	r2, r1, #2
 8006b8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b92:	f7f9 fb1f 	bl	80001d4 <__aeabi_uldivmod>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	4b38      	ldr	r3, [pc, #224]	; (8006c80 <UART_SetConfig+0x4e4>)
 8006b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	2264      	movs	r2, #100	; 0x64
 8006ba6:	fb02 f303 	mul.w	r3, r2, r3
 8006baa:	1acb      	subs	r3, r1, r3
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	3332      	adds	r3, #50	; 0x32
 8006bb0:	4a33      	ldr	r2, [pc, #204]	; (8006c80 <UART_SetConfig+0x4e4>)
 8006bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bbc:	441c      	add	r4, r3
 8006bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	673b      	str	r3, [r7, #112]	; 0x70
 8006bc6:	677a      	str	r2, [r7, #116]	; 0x74
 8006bc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006bcc:	4642      	mov	r2, r8
 8006bce:	464b      	mov	r3, r9
 8006bd0:	1891      	adds	r1, r2, r2
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	415b      	adcs	r3, r3
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bdc:	4641      	mov	r1, r8
 8006bde:	1851      	adds	r1, r2, r1
 8006be0:	6039      	str	r1, [r7, #0]
 8006be2:	4649      	mov	r1, r9
 8006be4:	414b      	adcs	r3, r1
 8006be6:	607b      	str	r3, [r7, #4]
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	f04f 0300 	mov.w	r3, #0
 8006bf0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bf4:	4659      	mov	r1, fp
 8006bf6:	00cb      	lsls	r3, r1, #3
 8006bf8:	4651      	mov	r1, sl
 8006bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bfe:	4651      	mov	r1, sl
 8006c00:	00ca      	lsls	r2, r1, #3
 8006c02:	4610      	mov	r0, r2
 8006c04:	4619      	mov	r1, r3
 8006c06:	4603      	mov	r3, r0
 8006c08:	4642      	mov	r2, r8
 8006c0a:	189b      	adds	r3, r3, r2
 8006c0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c0e:	464b      	mov	r3, r9
 8006c10:	460a      	mov	r2, r1
 8006c12:	eb42 0303 	adc.w	r3, r2, r3
 8006c16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	663b      	str	r3, [r7, #96]	; 0x60
 8006c22:	667a      	str	r2, [r7, #100]	; 0x64
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	f04f 0300 	mov.w	r3, #0
 8006c2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c30:	4649      	mov	r1, r9
 8006c32:	008b      	lsls	r3, r1, #2
 8006c34:	4641      	mov	r1, r8
 8006c36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c3a:	4641      	mov	r1, r8
 8006c3c:	008a      	lsls	r2, r1, #2
 8006c3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c42:	f7f9 fac7 	bl	80001d4 <__aeabi_uldivmod>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4b0d      	ldr	r3, [pc, #52]	; (8006c80 <UART_SetConfig+0x4e4>)
 8006c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c50:	095b      	lsrs	r3, r3, #5
 8006c52:	2164      	movs	r1, #100	; 0x64
 8006c54:	fb01 f303 	mul.w	r3, r1, r3
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	3332      	adds	r3, #50	; 0x32
 8006c5e:	4a08      	ldr	r2, [pc, #32]	; (8006c80 <UART_SetConfig+0x4e4>)
 8006c60:	fba2 2303 	umull	r2, r3, r2, r3
 8006c64:	095b      	lsrs	r3, r3, #5
 8006c66:	f003 020f 	and.w	r2, r3, #15
 8006c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4422      	add	r2, r4
 8006c72:	609a      	str	r2, [r3, #8]
}
 8006c74:	bf00      	nop
 8006c76:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c80:	51eb851f 	.word	0x51eb851f

08006c84 <exit>:
 8006c84:	b508      	push	{r3, lr}
 8006c86:	4b06      	ldr	r3, [pc, #24]	; (8006ca0 <exit+0x1c>)
 8006c88:	4604      	mov	r4, r0
 8006c8a:	b113      	cbz	r3, 8006c92 <exit+0xe>
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	f3af 8000 	nop.w
 8006c92:	4b04      	ldr	r3, [pc, #16]	; (8006ca4 <exit+0x20>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	b103      	cbz	r3, 8006c9a <exit+0x16>
 8006c98:	4798      	blx	r3
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f7fb fcea 	bl	8002674 <_exit>
 8006ca0:	00000000 	.word	0x00000000
 8006ca4:	20006230 	.word	0x20006230

08006ca8 <malloc>:
 8006ca8:	4b02      	ldr	r3, [pc, #8]	; (8006cb4 <malloc+0xc>)
 8006caa:	4601      	mov	r1, r0
 8006cac:	6818      	ldr	r0, [r3, #0]
 8006cae:	f000 b823 	b.w	8006cf8 <_malloc_r>
 8006cb2:	bf00      	nop
 8006cb4:	200000a4 	.word	0x200000a4

08006cb8 <sbrk_aligned>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	4e0e      	ldr	r6, [pc, #56]	; (8006cf4 <sbrk_aligned+0x3c>)
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	6831      	ldr	r1, [r6, #0]
 8006cc0:	4605      	mov	r5, r0
 8006cc2:	b911      	cbnz	r1, 8006cca <sbrk_aligned+0x12>
 8006cc4:	f000 f8ac 	bl	8006e20 <_sbrk_r>
 8006cc8:	6030      	str	r0, [r6, #0]
 8006cca:	4621      	mov	r1, r4
 8006ccc:	4628      	mov	r0, r5
 8006cce:	f000 f8a7 	bl	8006e20 <_sbrk_r>
 8006cd2:	1c43      	adds	r3, r0, #1
 8006cd4:	d00a      	beq.n	8006cec <sbrk_aligned+0x34>
 8006cd6:	1cc4      	adds	r4, r0, #3
 8006cd8:	f024 0403 	bic.w	r4, r4, #3
 8006cdc:	42a0      	cmp	r0, r4
 8006cde:	d007      	beq.n	8006cf0 <sbrk_aligned+0x38>
 8006ce0:	1a21      	subs	r1, r4, r0
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	f000 f89c 	bl	8006e20 <_sbrk_r>
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d101      	bne.n	8006cf0 <sbrk_aligned+0x38>
 8006cec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	bd70      	pop	{r4, r5, r6, pc}
 8006cf4:	200060f4 	.word	0x200060f4

08006cf8 <_malloc_r>:
 8006cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cfc:	1ccd      	adds	r5, r1, #3
 8006cfe:	f025 0503 	bic.w	r5, r5, #3
 8006d02:	3508      	adds	r5, #8
 8006d04:	2d0c      	cmp	r5, #12
 8006d06:	bf38      	it	cc
 8006d08:	250c      	movcc	r5, #12
 8006d0a:	2d00      	cmp	r5, #0
 8006d0c:	4607      	mov	r7, r0
 8006d0e:	db01      	blt.n	8006d14 <_malloc_r+0x1c>
 8006d10:	42a9      	cmp	r1, r5
 8006d12:	d905      	bls.n	8006d20 <_malloc_r+0x28>
 8006d14:	230c      	movs	r3, #12
 8006d16:	603b      	str	r3, [r7, #0]
 8006d18:	2600      	movs	r6, #0
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006df4 <_malloc_r+0xfc>
 8006d24:	f000 f868 	bl	8006df8 <__malloc_lock>
 8006d28:	f8d8 3000 	ldr.w	r3, [r8]
 8006d2c:	461c      	mov	r4, r3
 8006d2e:	bb5c      	cbnz	r4, 8006d88 <_malloc_r+0x90>
 8006d30:	4629      	mov	r1, r5
 8006d32:	4638      	mov	r0, r7
 8006d34:	f7ff ffc0 	bl	8006cb8 <sbrk_aligned>
 8006d38:	1c43      	adds	r3, r0, #1
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	d155      	bne.n	8006dea <_malloc_r+0xf2>
 8006d3e:	f8d8 4000 	ldr.w	r4, [r8]
 8006d42:	4626      	mov	r6, r4
 8006d44:	2e00      	cmp	r6, #0
 8006d46:	d145      	bne.n	8006dd4 <_malloc_r+0xdc>
 8006d48:	2c00      	cmp	r4, #0
 8006d4a:	d048      	beq.n	8006dde <_malloc_r+0xe6>
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	4631      	mov	r1, r6
 8006d50:	4638      	mov	r0, r7
 8006d52:	eb04 0903 	add.w	r9, r4, r3
 8006d56:	f000 f863 	bl	8006e20 <_sbrk_r>
 8006d5a:	4581      	cmp	r9, r0
 8006d5c:	d13f      	bne.n	8006dde <_malloc_r+0xe6>
 8006d5e:	6821      	ldr	r1, [r4, #0]
 8006d60:	1a6d      	subs	r5, r5, r1
 8006d62:	4629      	mov	r1, r5
 8006d64:	4638      	mov	r0, r7
 8006d66:	f7ff ffa7 	bl	8006cb8 <sbrk_aligned>
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	d037      	beq.n	8006dde <_malloc_r+0xe6>
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	442b      	add	r3, r5
 8006d72:	6023      	str	r3, [r4, #0]
 8006d74:	f8d8 3000 	ldr.w	r3, [r8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d038      	beq.n	8006dee <_malloc_r+0xf6>
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	42a2      	cmp	r2, r4
 8006d80:	d12b      	bne.n	8006dda <_malloc_r+0xe2>
 8006d82:	2200      	movs	r2, #0
 8006d84:	605a      	str	r2, [r3, #4]
 8006d86:	e00f      	b.n	8006da8 <_malloc_r+0xb0>
 8006d88:	6822      	ldr	r2, [r4, #0]
 8006d8a:	1b52      	subs	r2, r2, r5
 8006d8c:	d41f      	bmi.n	8006dce <_malloc_r+0xd6>
 8006d8e:	2a0b      	cmp	r2, #11
 8006d90:	d917      	bls.n	8006dc2 <_malloc_r+0xca>
 8006d92:	1961      	adds	r1, r4, r5
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	6025      	str	r5, [r4, #0]
 8006d98:	bf18      	it	ne
 8006d9a:	6059      	strne	r1, [r3, #4]
 8006d9c:	6863      	ldr	r3, [r4, #4]
 8006d9e:	bf08      	it	eq
 8006da0:	f8c8 1000 	streq.w	r1, [r8]
 8006da4:	5162      	str	r2, [r4, r5]
 8006da6:	604b      	str	r3, [r1, #4]
 8006da8:	4638      	mov	r0, r7
 8006daa:	f104 060b 	add.w	r6, r4, #11
 8006dae:	f000 f829 	bl	8006e04 <__malloc_unlock>
 8006db2:	f026 0607 	bic.w	r6, r6, #7
 8006db6:	1d23      	adds	r3, r4, #4
 8006db8:	1af2      	subs	r2, r6, r3
 8006dba:	d0ae      	beq.n	8006d1a <_malloc_r+0x22>
 8006dbc:	1b9b      	subs	r3, r3, r6
 8006dbe:	50a3      	str	r3, [r4, r2]
 8006dc0:	e7ab      	b.n	8006d1a <_malloc_r+0x22>
 8006dc2:	42a3      	cmp	r3, r4
 8006dc4:	6862      	ldr	r2, [r4, #4]
 8006dc6:	d1dd      	bne.n	8006d84 <_malloc_r+0x8c>
 8006dc8:	f8c8 2000 	str.w	r2, [r8]
 8006dcc:	e7ec      	b.n	8006da8 <_malloc_r+0xb0>
 8006dce:	4623      	mov	r3, r4
 8006dd0:	6864      	ldr	r4, [r4, #4]
 8006dd2:	e7ac      	b.n	8006d2e <_malloc_r+0x36>
 8006dd4:	4634      	mov	r4, r6
 8006dd6:	6876      	ldr	r6, [r6, #4]
 8006dd8:	e7b4      	b.n	8006d44 <_malloc_r+0x4c>
 8006dda:	4613      	mov	r3, r2
 8006ddc:	e7cc      	b.n	8006d78 <_malloc_r+0x80>
 8006dde:	230c      	movs	r3, #12
 8006de0:	603b      	str	r3, [r7, #0]
 8006de2:	4638      	mov	r0, r7
 8006de4:	f000 f80e 	bl	8006e04 <__malloc_unlock>
 8006de8:	e797      	b.n	8006d1a <_malloc_r+0x22>
 8006dea:	6025      	str	r5, [r4, #0]
 8006dec:	e7dc      	b.n	8006da8 <_malloc_r+0xb0>
 8006dee:	605b      	str	r3, [r3, #4]
 8006df0:	deff      	udf	#255	; 0xff
 8006df2:	bf00      	nop
 8006df4:	200060f0 	.word	0x200060f0

08006df8 <__malloc_lock>:
 8006df8:	4801      	ldr	r0, [pc, #4]	; (8006e00 <__malloc_lock+0x8>)
 8006dfa:	f000 b84b 	b.w	8006e94 <__retarget_lock_acquire_recursive>
 8006dfe:	bf00      	nop
 8006e00:	20006238 	.word	0x20006238

08006e04 <__malloc_unlock>:
 8006e04:	4801      	ldr	r0, [pc, #4]	; (8006e0c <__malloc_unlock+0x8>)
 8006e06:	f000 b846 	b.w	8006e96 <__retarget_lock_release_recursive>
 8006e0a:	bf00      	nop
 8006e0c:	20006238 	.word	0x20006238

08006e10 <memset>:
 8006e10:	4402      	add	r2, r0
 8006e12:	4603      	mov	r3, r0
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d100      	bne.n	8006e1a <memset+0xa>
 8006e18:	4770      	bx	lr
 8006e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e1e:	e7f9      	b.n	8006e14 <memset+0x4>

08006e20 <_sbrk_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4d06      	ldr	r5, [pc, #24]	; (8006e3c <_sbrk_r+0x1c>)
 8006e24:	2300      	movs	r3, #0
 8006e26:	4604      	mov	r4, r0
 8006e28:	4608      	mov	r0, r1
 8006e2a:	602b      	str	r3, [r5, #0]
 8006e2c:	f7fb fc2c 	bl	8002688 <_sbrk>
 8006e30:	1c43      	adds	r3, r0, #1
 8006e32:	d102      	bne.n	8006e3a <_sbrk_r+0x1a>
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	b103      	cbz	r3, 8006e3a <_sbrk_r+0x1a>
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	bd38      	pop	{r3, r4, r5, pc}
 8006e3c:	20006234 	.word	0x20006234

08006e40 <__errno>:
 8006e40:	4b01      	ldr	r3, [pc, #4]	; (8006e48 <__errno+0x8>)
 8006e42:	6818      	ldr	r0, [r3, #0]
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	200000a4 	.word	0x200000a4

08006e4c <__libc_init_array>:
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	4d0d      	ldr	r5, [pc, #52]	; (8006e84 <__libc_init_array+0x38>)
 8006e50:	4c0d      	ldr	r4, [pc, #52]	; (8006e88 <__libc_init_array+0x3c>)
 8006e52:	1b64      	subs	r4, r4, r5
 8006e54:	10a4      	asrs	r4, r4, #2
 8006e56:	2600      	movs	r6, #0
 8006e58:	42a6      	cmp	r6, r4
 8006e5a:	d109      	bne.n	8006e70 <__libc_init_array+0x24>
 8006e5c:	4d0b      	ldr	r5, [pc, #44]	; (8006e8c <__libc_init_array+0x40>)
 8006e5e:	4c0c      	ldr	r4, [pc, #48]	; (8006e90 <__libc_init_array+0x44>)
 8006e60:	f000 f81a 	bl	8006e98 <_init>
 8006e64:	1b64      	subs	r4, r4, r5
 8006e66:	10a4      	asrs	r4, r4, #2
 8006e68:	2600      	movs	r6, #0
 8006e6a:	42a6      	cmp	r6, r4
 8006e6c:	d105      	bne.n	8006e7a <__libc_init_array+0x2e>
 8006e6e:	bd70      	pop	{r4, r5, r6, pc}
 8006e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e74:	4798      	blx	r3
 8006e76:	3601      	adds	r6, #1
 8006e78:	e7ee      	b.n	8006e58 <__libc_init_array+0xc>
 8006e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e7e:	4798      	blx	r3
 8006e80:	3601      	adds	r6, #1
 8006e82:	e7f2      	b.n	8006e6a <__libc_init_array+0x1e>
 8006e84:	08006ef4 	.word	0x08006ef4
 8006e88:	08006ef4 	.word	0x08006ef4
 8006e8c:	08006ef4 	.word	0x08006ef4
 8006e90:	08006ef8 	.word	0x08006ef8

08006e94 <__retarget_lock_acquire_recursive>:
 8006e94:	4770      	bx	lr

08006e96 <__retarget_lock_release_recursive>:
 8006e96:	4770      	bx	lr

08006e98 <_init>:
 8006e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9a:	bf00      	nop
 8006e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e9e:	bc08      	pop	{r3}
 8006ea0:	469e      	mov	lr, r3
 8006ea2:	4770      	bx	lr

08006ea4 <_fini>:
 8006ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea6:	bf00      	nop
 8006ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eaa:	bc08      	pop	{r3}
 8006eac:	469e      	mov	lr, r3
 8006eae:	4770      	bx	lr
