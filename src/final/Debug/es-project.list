
es-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008678  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  08008810  08008810  00018810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ffc  08008ffc  000210c0  2**0
                  CONTENTS
  4 .ARM          00000008  08008ffc  08008ffc  00018ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009004  08009004  000210c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009004  08009004  00019004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009008  08009008  00019008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000010c0  20000000  0800900c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000619c  200010c0  0800a0cc  000210c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000725c  0800a0cc  0002725c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000210c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000210f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a06  00000000  00000000  00021133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002937  00000000  00000000  00032b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  00035470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d69  00000000  00000000  000365c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018197  00000000  00000000  00037329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a20  00000000  00000000  0004f4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091b26  00000000  00000000  00062ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cdc  00000000  00000000  000f4a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000f96e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200010c0 	.word	0x200010c0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080087f8 	.word	0x080087f8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200010c4 	.word	0x200010c4
 80001d4:	080087f8 	.word	0x080087f8

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2uiz>:
 80007a4:	004a      	lsls	r2, r1, #1
 80007a6:	d211      	bcs.n	80007cc <__aeabi_d2uiz+0x28>
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d211      	bcs.n	80007d2 <__aeabi_d2uiz+0x2e>
 80007ae:	d50d      	bpl.n	80007cc <__aeabi_d2uiz+0x28>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d40e      	bmi.n	80007d8 <__aeabi_d2uiz+0x34>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d102      	bne.n	80007de <__aeabi_d2uiz+0x3a>
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_uldivmod>:
 80007e4:	b953      	cbnz	r3, 80007fc <__aeabi_uldivmod+0x18>
 80007e6:	b94a      	cbnz	r2, 80007fc <__aeabi_uldivmod+0x18>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	bf08      	it	eq
 80007ec:	2800      	cmpeq	r0, #0
 80007ee:	bf1c      	itt	ne
 80007f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80007f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80007f8:	f000 b970 	b.w	8000adc <__aeabi_idiv0>
 80007fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000804:	f000 f806 	bl	8000814 <__udivmoddi4>
 8000808:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <__udivmoddi4>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	9e08      	ldr	r6, [sp, #32]
 800081a:	460d      	mov	r5, r1
 800081c:	4604      	mov	r4, r0
 800081e:	460f      	mov	r7, r1
 8000820:	2b00      	cmp	r3, #0
 8000822:	d14a      	bne.n	80008ba <__udivmoddi4+0xa6>
 8000824:	428a      	cmp	r2, r1
 8000826:	4694      	mov	ip, r2
 8000828:	d965      	bls.n	80008f6 <__udivmoddi4+0xe2>
 800082a:	fab2 f382 	clz	r3, r2
 800082e:	b143      	cbz	r3, 8000842 <__udivmoddi4+0x2e>
 8000830:	fa02 fc03 	lsl.w	ip, r2, r3
 8000834:	f1c3 0220 	rsb	r2, r3, #32
 8000838:	409f      	lsls	r7, r3
 800083a:	fa20 f202 	lsr.w	r2, r0, r2
 800083e:	4317      	orrs	r7, r2
 8000840:	409c      	lsls	r4, r3
 8000842:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000846:	fa1f f58c 	uxth.w	r5, ip
 800084a:	fbb7 f1fe 	udiv	r1, r7, lr
 800084e:	0c22      	lsrs	r2, r4, #16
 8000850:	fb0e 7711 	mls	r7, lr, r1, r7
 8000854:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000858:	fb01 f005 	mul.w	r0, r1, r5
 800085c:	4290      	cmp	r0, r2
 800085e:	d90a      	bls.n	8000876 <__udivmoddi4+0x62>
 8000860:	eb1c 0202 	adds.w	r2, ip, r2
 8000864:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000868:	f080 811c 	bcs.w	8000aa4 <__udivmoddi4+0x290>
 800086c:	4290      	cmp	r0, r2
 800086e:	f240 8119 	bls.w	8000aa4 <__udivmoddi4+0x290>
 8000872:	3902      	subs	r1, #2
 8000874:	4462      	add	r2, ip
 8000876:	1a12      	subs	r2, r2, r0
 8000878:	b2a4      	uxth	r4, r4
 800087a:	fbb2 f0fe 	udiv	r0, r2, lr
 800087e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000882:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000886:	fb00 f505 	mul.w	r5, r0, r5
 800088a:	42a5      	cmp	r5, r4
 800088c:	d90a      	bls.n	80008a4 <__udivmoddi4+0x90>
 800088e:	eb1c 0404 	adds.w	r4, ip, r4
 8000892:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000896:	f080 8107 	bcs.w	8000aa8 <__udivmoddi4+0x294>
 800089a:	42a5      	cmp	r5, r4
 800089c:	f240 8104 	bls.w	8000aa8 <__udivmoddi4+0x294>
 80008a0:	4464      	add	r4, ip
 80008a2:	3802      	subs	r0, #2
 80008a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008a8:	1b64      	subs	r4, r4, r5
 80008aa:	2100      	movs	r1, #0
 80008ac:	b11e      	cbz	r6, 80008b6 <__udivmoddi4+0xa2>
 80008ae:	40dc      	lsrs	r4, r3
 80008b0:	2300      	movs	r3, #0
 80008b2:	e9c6 4300 	strd	r4, r3, [r6]
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d908      	bls.n	80008d0 <__udivmoddi4+0xbc>
 80008be:	2e00      	cmp	r6, #0
 80008c0:	f000 80ed 	beq.w	8000a9e <__udivmoddi4+0x28a>
 80008c4:	2100      	movs	r1, #0
 80008c6:	e9c6 0500 	strd	r0, r5, [r6]
 80008ca:	4608      	mov	r0, r1
 80008cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d0:	fab3 f183 	clz	r1, r3
 80008d4:	2900      	cmp	r1, #0
 80008d6:	d149      	bne.n	800096c <__udivmoddi4+0x158>
 80008d8:	42ab      	cmp	r3, r5
 80008da:	d302      	bcc.n	80008e2 <__udivmoddi4+0xce>
 80008dc:	4282      	cmp	r2, r0
 80008de:	f200 80f8 	bhi.w	8000ad2 <__udivmoddi4+0x2be>
 80008e2:	1a84      	subs	r4, r0, r2
 80008e4:	eb65 0203 	sbc.w	r2, r5, r3
 80008e8:	2001      	movs	r0, #1
 80008ea:	4617      	mov	r7, r2
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d0e2      	beq.n	80008b6 <__udivmoddi4+0xa2>
 80008f0:	e9c6 4700 	strd	r4, r7, [r6]
 80008f4:	e7df      	b.n	80008b6 <__udivmoddi4+0xa2>
 80008f6:	b902      	cbnz	r2, 80008fa <__udivmoddi4+0xe6>
 80008f8:	deff      	udf	#255	; 0xff
 80008fa:	fab2 f382 	clz	r3, r2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f040 8090 	bne.w	8000a24 <__udivmoddi4+0x210>
 8000904:	1a8a      	subs	r2, r1, r2
 8000906:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800090a:	fa1f fe8c 	uxth.w	lr, ip
 800090e:	2101      	movs	r1, #1
 8000910:	fbb2 f5f7 	udiv	r5, r2, r7
 8000914:	fb07 2015 	mls	r0, r7, r5, r2
 8000918:	0c22      	lsrs	r2, r4, #16
 800091a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800091e:	fb0e f005 	mul.w	r0, lr, r5
 8000922:	4290      	cmp	r0, r2
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0x124>
 8000926:	eb1c 0202 	adds.w	r2, ip, r2
 800092a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800092e:	d202      	bcs.n	8000936 <__udivmoddi4+0x122>
 8000930:	4290      	cmp	r0, r2
 8000932:	f200 80cb 	bhi.w	8000acc <__udivmoddi4+0x2b8>
 8000936:	4645      	mov	r5, r8
 8000938:	1a12      	subs	r2, r2, r0
 800093a:	b2a4      	uxth	r4, r4
 800093c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000940:	fb07 2210 	mls	r2, r7, r0, r2
 8000944:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000948:	fb0e fe00 	mul.w	lr, lr, r0
 800094c:	45a6      	cmp	lr, r4
 800094e:	d908      	bls.n	8000962 <__udivmoddi4+0x14e>
 8000950:	eb1c 0404 	adds.w	r4, ip, r4
 8000954:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000958:	d202      	bcs.n	8000960 <__udivmoddi4+0x14c>
 800095a:	45a6      	cmp	lr, r4
 800095c:	f200 80bb 	bhi.w	8000ad6 <__udivmoddi4+0x2c2>
 8000960:	4610      	mov	r0, r2
 8000962:	eba4 040e 	sub.w	r4, r4, lr
 8000966:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800096a:	e79f      	b.n	80008ac <__udivmoddi4+0x98>
 800096c:	f1c1 0720 	rsb	r7, r1, #32
 8000970:	408b      	lsls	r3, r1
 8000972:	fa22 fc07 	lsr.w	ip, r2, r7
 8000976:	ea4c 0c03 	orr.w	ip, ip, r3
 800097a:	fa05 f401 	lsl.w	r4, r5, r1
 800097e:	fa20 f307 	lsr.w	r3, r0, r7
 8000982:	40fd      	lsrs	r5, r7
 8000984:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000988:	4323      	orrs	r3, r4
 800098a:	fbb5 f8f9 	udiv	r8, r5, r9
 800098e:	fa1f fe8c 	uxth.w	lr, ip
 8000992:	fb09 5518 	mls	r5, r9, r8, r5
 8000996:	0c1c      	lsrs	r4, r3, #16
 8000998:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800099c:	fb08 f50e 	mul.w	r5, r8, lr
 80009a0:	42a5      	cmp	r5, r4
 80009a2:	fa02 f201 	lsl.w	r2, r2, r1
 80009a6:	fa00 f001 	lsl.w	r0, r0, r1
 80009aa:	d90b      	bls.n	80009c4 <__udivmoddi4+0x1b0>
 80009ac:	eb1c 0404 	adds.w	r4, ip, r4
 80009b0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80009b4:	f080 8088 	bcs.w	8000ac8 <__udivmoddi4+0x2b4>
 80009b8:	42a5      	cmp	r5, r4
 80009ba:	f240 8085 	bls.w	8000ac8 <__udivmoddi4+0x2b4>
 80009be:	f1a8 0802 	sub.w	r8, r8, #2
 80009c2:	4464      	add	r4, ip
 80009c4:	1b64      	subs	r4, r4, r5
 80009c6:	b29d      	uxth	r5, r3
 80009c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80009cc:	fb09 4413 	mls	r4, r9, r3, r4
 80009d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009d4:	fb03 fe0e 	mul.w	lr, r3, lr
 80009d8:	45a6      	cmp	lr, r4
 80009da:	d908      	bls.n	80009ee <__udivmoddi4+0x1da>
 80009dc:	eb1c 0404 	adds.w	r4, ip, r4
 80009e0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80009e4:	d26c      	bcs.n	8000ac0 <__udivmoddi4+0x2ac>
 80009e6:	45a6      	cmp	lr, r4
 80009e8:	d96a      	bls.n	8000ac0 <__udivmoddi4+0x2ac>
 80009ea:	3b02      	subs	r3, #2
 80009ec:	4464      	add	r4, ip
 80009ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009f2:	fba3 9502 	umull	r9, r5, r3, r2
 80009f6:	eba4 040e 	sub.w	r4, r4, lr
 80009fa:	42ac      	cmp	r4, r5
 80009fc:	46c8      	mov	r8, r9
 80009fe:	46ae      	mov	lr, r5
 8000a00:	d356      	bcc.n	8000ab0 <__udivmoddi4+0x29c>
 8000a02:	d053      	beq.n	8000aac <__udivmoddi4+0x298>
 8000a04:	b156      	cbz	r6, 8000a1c <__udivmoddi4+0x208>
 8000a06:	ebb0 0208 	subs.w	r2, r0, r8
 8000a0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a12:	40ca      	lsrs	r2, r1
 8000a14:	40cc      	lsrs	r4, r1
 8000a16:	4317      	orrs	r7, r2
 8000a18:	e9c6 7400 	strd	r7, r4, [r6]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	2100      	movs	r1, #0
 8000a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a24:	f1c3 0120 	rsb	r1, r3, #32
 8000a28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a30:	fa25 f101 	lsr.w	r1, r5, r1
 8000a34:	409d      	lsls	r5, r3
 8000a36:	432a      	orrs	r2, r5
 8000a38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3c:	fa1f fe8c 	uxth.w	lr, ip
 8000a40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a44:	fb07 1510 	mls	r5, r7, r0, r1
 8000a48:	0c11      	lsrs	r1, r2, #16
 8000a4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000a52:	428d      	cmp	r5, r1
 8000a54:	fa04 f403 	lsl.w	r4, r4, r3
 8000a58:	d908      	bls.n	8000a6c <__udivmoddi4+0x258>
 8000a5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000a5e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a62:	d22f      	bcs.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a64:	428d      	cmp	r5, r1
 8000a66:	d92d      	bls.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a68:	3802      	subs	r0, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	1b49      	subs	r1, r1, r5
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a74:	fb07 1115 	mls	r1, r7, r5, r1
 8000a78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000a80:	4291      	cmp	r1, r2
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x282>
 8000a84:	eb1c 0202 	adds.w	r2, ip, r2
 8000a88:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000a8c:	d216      	bcs.n	8000abc <__udivmoddi4+0x2a8>
 8000a8e:	4291      	cmp	r1, r2
 8000a90:	d914      	bls.n	8000abc <__udivmoddi4+0x2a8>
 8000a92:	3d02      	subs	r5, #2
 8000a94:	4462      	add	r2, ip
 8000a96:	1a52      	subs	r2, r2, r1
 8000a98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a9c:	e738      	b.n	8000910 <__udivmoddi4+0xfc>
 8000a9e:	4631      	mov	r1, r6
 8000aa0:	4630      	mov	r0, r6
 8000aa2:	e708      	b.n	80008b6 <__udivmoddi4+0xa2>
 8000aa4:	4639      	mov	r1, r7
 8000aa6:	e6e6      	b.n	8000876 <__udivmoddi4+0x62>
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	e6fb      	b.n	80008a4 <__udivmoddi4+0x90>
 8000aac:	4548      	cmp	r0, r9
 8000aae:	d2a9      	bcs.n	8000a04 <__udivmoddi4+0x1f0>
 8000ab0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ab4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	e7a3      	b.n	8000a04 <__udivmoddi4+0x1f0>
 8000abc:	4645      	mov	r5, r8
 8000abe:	e7ea      	b.n	8000a96 <__udivmoddi4+0x282>
 8000ac0:	462b      	mov	r3, r5
 8000ac2:	e794      	b.n	80009ee <__udivmoddi4+0x1da>
 8000ac4:	4640      	mov	r0, r8
 8000ac6:	e7d1      	b.n	8000a6c <__udivmoddi4+0x258>
 8000ac8:	46d0      	mov	r8, sl
 8000aca:	e77b      	b.n	80009c4 <__udivmoddi4+0x1b0>
 8000acc:	3d02      	subs	r5, #2
 8000ace:	4462      	add	r2, ip
 8000ad0:	e732      	b.n	8000938 <__udivmoddi4+0x124>
 8000ad2:	4608      	mov	r0, r1
 8000ad4:	e70a      	b.n	80008ec <__udivmoddi4+0xd8>
 8000ad6:	4464      	add	r4, ip
 8000ad8:	3802      	subs	r0, #2
 8000ada:	e742      	b.n	8000962 <__udivmoddi4+0x14e>

08000adc <__aeabi_idiv0>:
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <initLookupTable>:
#include "lookup_table.h"

LookupTable lookupTable;

void initLookupTable(LookupTable* lookupTable, uint16_t rows, uint16_t cols) {
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	807b      	strh	r3, [r7, #2]
 8000aec:	4613      	mov	r3, r2
 8000aee:	803b      	strh	r3, [r7, #0]
    uint16_t r, c; /* index variables */

    /* check input */
    if (rows <= 0) exit(1); /* number of rows must be greater than 0 */
 8000af0:	887b      	ldrh	r3, [r7, #2]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d102      	bne.n	8000afc <initLookupTable+0x1c>
 8000af6:	2001      	movs	r0, #1
 8000af8:	f007 fd20 	bl	800853c <exit>
    if (cols <= 0) exit(1); /* number of cols must be greater than 0 */
 8000afc:	883b      	ldrh	r3, [r7, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d102      	bne.n	8000b08 <initLookupTable+0x28>
 8000b02:	2001      	movs	r0, #1
 8000b04:	f007 fd1a 	bl	800853c <exit>

    /* allocate memory */
    lookupTable->index = (uint16_t**) malloc(rows * sizeof(uint16_t*));
 8000b08:	887b      	ldrh	r3, [r7, #2]
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f007 fd27 	bl	8008560 <malloc>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461a      	mov	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	605a      	str	r2, [r3, #4]
    for (r = 0; r < rows; r++) {
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	81fb      	strh	r3, [r7, #14]
 8000b1e:	e00e      	b.n	8000b3e <initLookupTable+0x5e>
        lookupTable->index[r] = (uint16_t*) malloc(cols * sizeof(uint16_t));
 8000b20:	883b      	ldrh	r3, [r7, #0]
 8000b22:	0059      	lsls	r1, r3, #1
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	89fb      	ldrh	r3, [r7, #14]
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	18d4      	adds	r4, r2, r3
 8000b2e:	4608      	mov	r0, r1
 8000b30:	f007 fd16 	bl	8008560 <malloc>
 8000b34:	4603      	mov	r3, r0
 8000b36:	6023      	str	r3, [r4, #0]
    for (r = 0; r < rows; r++) {
 8000b38:	89fb      	ldrh	r3, [r7, #14]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	81fb      	strh	r3, [r7, #14]
 8000b3e:	89fa      	ldrh	r2, [r7, #14]
 8000b40:	887b      	ldrh	r3, [r7, #2]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d3ec      	bcc.n	8000b20 <initLookupTable+0x40>
    }

    /* set attrs */
    lookupTable->rows = rows;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	887a      	ldrh	r2, [r7, #2]
 8000b4a:	801a      	strh	r2, [r3, #0]
    lookupTable->cols = cols;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	883a      	ldrh	r2, [r7, #0]
 8000b50:	805a      	strh	r2, [r3, #2]

    for (r = 0; r < rows; r++) {
 8000b52:	2300      	movs	r3, #0
 8000b54:	81fb      	strh	r3, [r7, #14]
 8000b56:	e017      	b.n	8000b88 <initLookupTable+0xa8>
        for (c = 0; c < cols; c++) {
 8000b58:	2300      	movs	r3, #0
 8000b5a:	81bb      	strh	r3, [r7, #12]
 8000b5c:	e00d      	b.n	8000b7a <initLookupTable+0x9a>
            lookupTable->index[r][c] = 0;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685a      	ldr	r2, [r3, #4]
 8000b62:	89fb      	ldrh	r3, [r7, #14]
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	89bb      	ldrh	r3, [r7, #12]
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	4413      	add	r3, r2
 8000b70:	2200      	movs	r2, #0
 8000b72:	801a      	strh	r2, [r3, #0]
        for (c = 0; c < cols; c++) {
 8000b74:	89bb      	ldrh	r3, [r7, #12]
 8000b76:	3301      	adds	r3, #1
 8000b78:	81bb      	strh	r3, [r7, #12]
 8000b7a:	89ba      	ldrh	r2, [r7, #12]
 8000b7c:	883b      	ldrh	r3, [r7, #0]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d3ed      	bcc.n	8000b5e <initLookupTable+0x7e>
    for (r = 0; r < rows; r++) {
 8000b82:	89fb      	ldrh	r3, [r7, #14]
 8000b84:	3301      	adds	r3, #1
 8000b86:	81fb      	strh	r3, [r7, #14]
 8000b88:	89fa      	ldrh	r2, [r7, #14]
 8000b8a:	887b      	ldrh	r3, [r7, #2]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d3e3      	bcc.n	8000b58 <initLookupTable+0x78>
        }
    }
}
 8000b90:	bf00      	nop
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd90      	pop	{r4, r7, pc}

08000b9a <HAL_TIM_PWM_PulseFinishedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* LED stuff */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 8000ba2:	2108      	movs	r1, #8
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f005 fd51 	bl	800664c <HAL_TIM_PWM_Stop_DMA>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <writeLEDs>:

void writeLEDs(PixelRGB_t* pixel){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	int i,j;

	pBuff = dmaBuffer;
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <writeLEDs+0x84>)
 8000bbe:	4a1f      	ldr	r2, [pc, #124]	; (8000c3c <writeLEDs+0x88>)
 8000bc0:	601a      	str	r2, [r3, #0]
	  for (i = 0; i < NUM_PIXELS; i++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	e025      	b.n	8000c14 <writeLEDs+0x60>
	  {
		 for (j = 23; j >= 0; j--)
 8000bc8:	2317      	movs	r3, #23
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	e01c      	b.n	8000c08 <writeLEDs+0x54>
		 {
		   if ((pixel[i].data >> j) & 0x01)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	fa22 f303 	lsr.w	r3, r2, r3
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d004      	beq.n	8000bf0 <writeLEDs+0x3c>
		   {
			 *pBuff = NEOPIXEL_ONE;
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <writeLEDs+0x84>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2243      	movs	r2, #67	; 0x43
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	e003      	b.n	8000bf8 <writeLEDs+0x44>
		   }
		   else
		   {
			 *pBuff = NEOPIXEL_ZERO;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <writeLEDs+0x84>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2222      	movs	r2, #34	; 0x22
 8000bf6:	601a      	str	r2, [r3, #0]
		   }
		   pBuff++;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <writeLEDs+0x84>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <writeLEDs+0x84>)
 8000c00:	6013      	str	r3, [r2, #0]
		 for (j = 23; j >= 0; j--)
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	dadf      	bge.n	8000bce <writeLEDs+0x1a>
	  for (i = 0; i < NUM_PIXELS; i++)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	3301      	adds	r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2b07      	cmp	r3, #7
 8000c18:	ddd6      	ble.n	8000bc8 <writeLEDs+0x14>
	   }
	  }
	  dmaBuffer[DMA_BUFF_SIZE - 1] = 0; // last element must be 0!
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <writeLEDs+0x88>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

	  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, dmaBuffer, DMA_BUFF_SIZE);
 8000c22:	23c1      	movs	r3, #193	; 0xc1
 8000c24:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <writeLEDs+0x88>)
 8000c26:	2108      	movs	r1, #8
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <writeLEDs+0x8c>)
 8000c2a:	f005 fb5f 	bl	80062ec <HAL_TIM_PWM_Start_DMA>
}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20001648 	.word	0x20001648
 8000c3c:	20001344 	.word	0x20001344
 8000c40:	2000119c 	.word	0x2000119c

08000c44 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d102      	bne.n	8000c5c <HAL_TIM_PeriodElapsedCallback+0x18>
		timer_irq = TRUE;
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
	}
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	40000400 	.word	0x40000400
 8000c6c:	2000166c 	.word	0x2000166c

08000c70 <stateProcessing>:
//* Packet forwarding begin *//
// DFD processes //
void stateProcessing(void){
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
	state = 0;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <stateProcessing+0x14>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	2000166d 	.word	0x2000166d

08000c88 <stateAwait>:
void stateAwait(void){
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
	state = 1;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <stateAwait+0x14>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	2000166d 	.word	0x2000166d

08000ca0 <stateReceived>:
void stateReceived(void){
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
	state = 2;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <stateReceived+0x14>)
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	701a      	strb	r2, [r3, #0]
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	2000166d 	.word	0x2000166d

08000cb8 <stateSent>:
void stateSent(void){
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
	state = 3;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <stateSent+0x14>)
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	701a      	strb	r2, [r3, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	2000166d 	.word	0x2000166d

08000cd0 <stateFailure>:
void stateFailure(void){
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
	state = 4;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <stateFailure+0x14>)
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	701a      	strb	r2, [r3, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	2000166d 	.word	0x2000166d

08000ce8 <handleStore>:
void handleStore(void){
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
	int i;

	// copy Lager to tempLager
	for(i = 0; i < LAGER_SIZE; i++){
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	e00b      	b.n	8000d0c <handleStore+0x24>
		tempLager[i] = Lager[i];
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <handleStore+0x6c>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	7819      	ldrb	r1, [r3, #0]
 8000cfc:	4a16      	ldr	r2, [pc, #88]	; (8000d58 <handleStore+0x70>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	460a      	mov	r2, r1
 8000d04:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < LAGER_SIZE; i++){
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b05      	cmp	r3, #5
 8000d10:	ddf0      	ble.n	8000cf4 <handleStore+0xc>
	}


	// put package in first free spot (0) in tempLager
	for(i = 0; i < LAGER_SIZE; i++){
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	e010      	b.n	8000d3a <handleStore+0x52>
		if(tempLager[i] == 0){
 8000d18:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <handleStore+0x70>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d107      	bne.n	8000d34 <handleStore+0x4c>
			tempLager[i] = packageId;
 8000d24:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <handleStore+0x74>)
 8000d26:	7819      	ldrb	r1, [r3, #0]
 8000d28:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <handleStore+0x70>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	460a      	mov	r2, r1
 8000d30:	701a      	strb	r2, [r3, #0]
			break;
 8000d32:	e005      	b.n	8000d40 <handleStore+0x58>
	for(i = 0; i < LAGER_SIZE; i++){
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3301      	adds	r3, #1
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b05      	cmp	r3, #5
 8000d3e:	ddeb      	ble.n	8000d18 <handleStore+0x30>
		}
	}

	finishedStore = TRUE;
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <handleStore+0x78>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20001674 	.word	0x20001674
 8000d58:	2000167c 	.word	0x2000167c
 8000d5c:	20001670 	.word	0x20001670
 8000d60:	2000168a 	.word	0x2000168a

08000d64 <handleSend>:
void handleSend(void){
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
	int i;

	// copy Lager to tempLager
	for(i = 0; i < LAGER_SIZE; i++){
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	e00b      	b.n	8000d88 <handleSend+0x24>
		tempLager[i] = Lager[i];
 8000d70:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <handleSend+0x6c>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	7819      	ldrb	r1, [r3, #0]
 8000d78:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <handleSend+0x70>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	460a      	mov	r2, r1
 8000d80:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < LAGER_SIZE; i++){
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3301      	adds	r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b05      	cmp	r3, #5
 8000d8c:	ddf0      	ble.n	8000d70 <handleSend+0xc>
	}


	// delete package out of tempLager
	for(i = 0; i < LAGER_SIZE; i++){
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	e010      	b.n	8000db6 <handleSend+0x52>
		if(tempLager[i] == packageId){
 8000d94:	4a0f      	ldr	r2, [pc, #60]	; (8000dd4 <handleSend+0x70>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	781a      	ldrb	r2, [r3, #0]
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <handleSend+0x74>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d105      	bne.n	8000db0 <handleSend+0x4c>
			tempLager[i] = 0;
 8000da4:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <handleSend+0x70>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
			break;
 8000dae:	e005      	b.n	8000dbc <handleSend+0x58>
	for(i = 0; i < LAGER_SIZE; i++){
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3301      	adds	r3, #1
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b05      	cmp	r3, #5
 8000dba:	ddeb      	ble.n	8000d94 <handleSend+0x30>
		}
	}

	finishedSend = TRUE;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <handleSend+0x78>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20001674 	.word	0x20001674
 8000dd4:	2000167c 	.word	0x2000167c
 8000dd8:	20001670 	.word	0x20001670
 8000ddc:	20001689 	.word	0x20001689

08000de0 <updateLager>:
void updateLager(void){
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
	int i;

	// copy tempLager to Lager
	for(i = 0; i < LAGER_SIZE; i++){
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	e00b      	b.n	8000e04 <updateLager+0x24>
		Lager[i] = tempLager[i];
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <updateLager+0x38>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	7819      	ldrb	r1, [r3, #0]
 8000df4:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <updateLager+0x3c>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	460a      	mov	r2, r1
 8000dfc:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < LAGER_SIZE; i++){
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3301      	adds	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b05      	cmp	r3, #5
 8000e08:	ddf0      	ble.n	8000dec <updateLager+0xc>
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	2000167c 	.word	0x2000167c
 8000e1c:	20001674 	.word	0x20001674

08000e20 <animateSend>:
void animateSend(void){
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af02      	add	r7, sp, #8
	BOOL on = FALSE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	73fb      	strb	r3, [r7, #15]
	BOOL wait = FALSE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	73bb      	strb	r3, [r7, #14]
    int i = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
	uint16_t x, y = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	80bb      	strh	r3, [r7, #4]

    uint8_t startX, startY, exitX, exitY = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	70fb      	strb	r3, [r7, #3]
    startX = STORAGE_OUTBOUND_X;
 8000e3a:	2315      	movs	r3, #21
 8000e3c:	70bb      	strb	r3, [r7, #2]
    startY = STORAGE_OUTBOUND_Y;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	707b      	strb	r3, [r7, #1]

    // find partnerId in neighbourIDs to set exit
    for(i = 0; i < 4; i++){
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	e00a      	b.n	8000e5e <animateSend+0x3e>
    	if(neighbourIDs[i] == partnerId){
 8000e48:	4a8b      	ldr	r2, [pc, #556]	; (8001078 <animateSend+0x258>)
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	781a      	ldrb	r2, [r3, #0]
 8000e50:	4b8a      	ldr	r3, [pc, #552]	; (800107c <animateSend+0x25c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d006      	beq.n	8000e66 <animateSend+0x46>
    for(i = 0; i < 4; i++){
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	ddf1      	ble.n	8000e48 <animateSend+0x28>
 8000e64:	e000      	b.n	8000e68 <animateSend+0x48>
    		break;
 8000e66:	bf00      	nop
    	}
    }
    exitX = neighbourPoints[i].x;
 8000e68:	4a85      	ldr	r2, [pc, #532]	; (8001080 <animateSend+0x260>)
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	011b      	lsls	r3, r3, #4
 8000e6e:	4413      	add	r3, r2
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	703b      	strb	r3, [r7, #0]
    exitY = neighbourPoints[i].y;
 8000e74:	4a82      	ldr	r2, [pc, #520]	; (8001080 <animateSend+0x260>)
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	011b      	lsls	r3, r3, #4
 8000e7a:	4413      	add	r3, r2
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	70fb      	strb	r3, [r7, #3]

    // reset maze
    resetMaze(&maze, startX, startY, exitX, exitY);
 8000e82:	7838      	ldrb	r0, [r7, #0]
 8000e84:	787a      	ldrb	r2, [r7, #1]
 8000e86:	78b9      	ldrb	r1, [r7, #2]
 8000e88:	78fb      	ldrb	r3, [r7, #3]
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	487d      	ldr	r0, [pc, #500]	; (8001084 <animateSend+0x264>)
 8000e90:	f002 f908 	bl	80030a4 <resetMaze>
    resetPath(&path);
 8000e94:	487c      	ldr	r0, [pc, #496]	; (8001088 <animateSend+0x268>)
 8000e96:	f002 f9d3 	bl	8003240 <resetPath>

    // generate and write maze
  	ws2812_pixel_all(&color[C_BLACK]);
 8000e9a:	487c      	ldr	r0, [pc, #496]	; (800108c <animateSend+0x26c>)
 8000e9c:	f003 f88c 	bl	8003fb8 <ws2812_pixel_all>
    generateMaze(&maze);
 8000ea0:	4878      	ldr	r0, [pc, #480]	; (8001084 <animateSend+0x264>)
 8000ea2:	f002 fad5 	bl	8003450 <generateMaze>
	solveMaze(&maze, &path);
 8000ea6:	4978      	ldr	r1, [pc, #480]	; (8001088 <animateSend+0x268>)
 8000ea8:	4876      	ldr	r0, [pc, #472]	; (8001084 <animateSend+0x264>)
 8000eaa:	f002 fb0d 	bl	80034c8 <solveMaze>
	for (x = 0; x < MAZE_WIDTH; x++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	80fb      	strh	r3, [r7, #6]
 8000eb2:	e01e      	b.n	8000ef2 <animateSend+0xd2>
	{
	  for (y = 0; y < MAZE_HEIGHT; y++)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	80bb      	strh	r3, [r7, #4]
 8000eb8:	e015      	b.n	8000ee6 <animateSend+0xc6>
	  {
	    if (maze.grid[y][x] == WALL) ws2812_pixel(x, y, &color[C_WALL]);
 8000eba:	4b72      	ldr	r3, [pc, #456]	; (8001084 <animateSend+0x264>)
 8000ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ebe:	88bb      	ldrh	r3, [r7, #4]
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d107      	bne.n	8000ee0 <animateSend+0xc0>
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	88ba      	ldrh	r2, [r7, #4]
 8000ed6:	b2d1      	uxtb	r1, r2
 8000ed8:	4a6d      	ldr	r2, [pc, #436]	; (8001090 <animateSend+0x270>)
 8000eda:	4618      	mov	r0, r3
 8000edc:	f002 fffc 	bl	8003ed8 <ws2812_pixel>
	  for (y = 0; y < MAZE_HEIGHT; y++)
 8000ee0:	88bb      	ldrh	r3, [r7, #4]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	80bb      	strh	r3, [r7, #4]
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	2b16      	cmp	r3, #22
 8000eea:	d9e6      	bls.n	8000eba <animateSend+0x9a>
	for (x = 0; x < MAZE_WIDTH; x++)
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	80fb      	strh	r3, [r7, #6]
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	2b26      	cmp	r3, #38	; 0x26
 8000ef6:	d9dd      	bls.n	8000eb4 <animateSend+0x94>
	  }
	}

	// find index of Lager, were packageId was stored //TODO: SA/RT Lager noch rein!!
	for(i = 0; i < LAGER_SIZE; i++){
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	e00a      	b.n	8000f14 <animateSend+0xf4>
		if(Lager[i] == packageId){
 8000efe:	4a65      	ldr	r2, [pc, #404]	; (8001094 <animateSend+0x274>)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4413      	add	r3, r2
 8000f04:	781a      	ldrb	r2, [r3, #0]
 8000f06:	4b64      	ldr	r3, [pc, #400]	; (8001098 <animateSend+0x278>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d006      	beq.n	8000f1c <animateSend+0xfc>
	for(i = 0; i < LAGER_SIZE; i++){
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	3301      	adds	r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	2b05      	cmp	r3, #5
 8000f18:	ddf1      	ble.n	8000efe <animateSend+0xde>
 8000f1a:	e000      	b.n	8000f1e <animateSend+0xfe>
			break;
 8000f1c:	bf00      	nop
		}
	}

	// turn off corresponding LED
	pixels[i+1].color.g = 0; // TODO: SA/RT
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	3301      	adds	r3, #1
 8000f22:	4a5e      	ldr	r2, [pc, #376]	; (800109c <animateSend+0x27c>)
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	2200      	movs	r2, #0
 8000f2a:	709a      	strb	r2, [r3, #2]
	pixels[i+1].color.r = 0;
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	4a5a      	ldr	r2, [pc, #360]	; (800109c <animateSend+0x27c>)
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	2200      	movs	r2, #0
 8000f38:	705a      	strb	r2, [r3, #1]
	pixels[i+1].color.b = 0;
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	4a57      	ldr	r2, [pc, #348]	; (800109c <animateSend+0x27c>)
 8000f40:	2100      	movs	r1, #0
 8000f42:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	writeLEDs(pixels);
 8000f46:	4855      	ldr	r0, [pc, #340]	; (800109c <animateSend+0x27c>)
 8000f48:	f7ff fe34 	bl	8000bb4 <writeLEDs>

	// blink last (outgoing) LED once
	timer_irq = FALSE;
 8000f4c:	4b54      	ldr	r3, [pc, #336]	; (80010a0 <animateSend+0x280>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
	while(1){
		if(timer_irq && !on && !wait){
 8000f52:	4b53      	ldr	r3, [pc, #332]	; (80010a0 <animateSend+0x280>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d060      	beq.n	800101c <animateSend+0x1fc>
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d15d      	bne.n	800101c <animateSend+0x1fc>
 8000f60:	7bbb      	ldrb	r3, [r7, #14]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d15a      	bne.n	800101c <animateSend+0x1fc>
			timer_irq = FALSE;
 8000f66:	4b4e      	ldr	r3, [pc, #312]	; (80010a0 <animateSend+0x280>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
			on = TRUE;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
			pixels[7].color.g = (uint8_t)LEDColors[packageId][1]*0.1; // TODO: SA/RT
 8000f70:	4b49      	ldr	r3, [pc, #292]	; (8001098 <animateSend+0x278>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	4a4b      	ldr	r2, [pc, #300]	; (80010a4 <animateSend+0x284>)
 8000f78:	460b      	mov	r3, r1
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	440b      	add	r3, r1
 8000f7e:	4413      	add	r3, r2
 8000f80:	3301      	adds	r3, #1
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fba3 	bl	80006d0 <__aeabi_i2d>
 8000f8a:	a339      	add	r3, pc, #228	; (adr r3, 8001070 <animateSend+0x250>)
 8000f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f90:	f7ff f922 	bl	80001d8 <__aeabi_dmul>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4610      	mov	r0, r2
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff fc02 	bl	80007a4 <__aeabi_d2uiz>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b3d      	ldr	r3, [pc, #244]	; (800109c <animateSend+0x27c>)
 8000fa6:	779a      	strb	r2, [r3, #30]
			pixels[7].color.r = (uint8_t)LEDColors[packageId][0]*0.1;
 8000fa8:	4b3b      	ldr	r3, [pc, #236]	; (8001098 <animateSend+0x278>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4a3d      	ldr	r2, [pc, #244]	; (80010a4 <animateSend+0x284>)
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	440b      	add	r3, r1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fb88 	bl	80006d0 <__aeabi_i2d>
 8000fc0:	a32b      	add	r3, pc, #172	; (adr r3, 8001070 <animateSend+0x250>)
 8000fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc6:	f7ff f907 	bl	80001d8 <__aeabi_dmul>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4610      	mov	r0, r2
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f7ff fbe7 	bl	80007a4 <__aeabi_d2uiz>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b30      	ldr	r3, [pc, #192]	; (800109c <animateSend+0x27c>)
 8000fdc:	775a      	strb	r2, [r3, #29]
			pixels[7].color.b = (uint8_t)LEDColors[packageId][2]*0.1;
 8000fde:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <animateSend+0x278>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4a2f      	ldr	r2, [pc, #188]	; (80010a4 <animateSend+0x284>)
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	440b      	add	r3, r1
 8000fec:	4413      	add	r3, r2
 8000fee:	3302      	adds	r3, #2
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fb6c 	bl	80006d0 <__aeabi_i2d>
 8000ff8:	a31d      	add	r3, pc, #116	; (adr r3, 8001070 <animateSend+0x250>)
 8000ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffe:	f7ff f8eb 	bl	80001d8 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f7ff fbcb 	bl	80007a4 <__aeabi_d2uiz>
 800100e:	4603      	mov	r3, r0
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b22      	ldr	r3, [pc, #136]	; (800109c <animateSend+0x27c>)
 8001014:	771a      	strb	r2, [r3, #28]
			writeLEDs(pixels);
 8001016:	4821      	ldr	r0, [pc, #132]	; (800109c <animateSend+0x27c>)
 8001018:	f7ff fdcc 	bl	8000bb4 <writeLEDs>
		}
		if(timer_irq && on && !wait){
 800101c:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <animateSend+0x280>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d016      	beq.n	8001052 <animateSend+0x232>
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d013      	beq.n	8001052 <animateSend+0x232>
 800102a:	7bbb      	ldrb	r3, [r7, #14]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d110      	bne.n	8001052 <animateSend+0x232>
			timer_irq = FALSE;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <animateSend+0x280>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
			wait = TRUE;
 8001036:	2301      	movs	r3, #1
 8001038:	73bb      	strb	r3, [r7, #14]
			pixels[7].color.g = 0; // TODO: SA/RT
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <animateSend+0x27c>)
 800103c:	2200      	movs	r2, #0
 800103e:	779a      	strb	r2, [r3, #30]
			pixels[7].color.r = 0;
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <animateSend+0x27c>)
 8001042:	2200      	movs	r2, #0
 8001044:	775a      	strb	r2, [r3, #29]
			pixels[7].color.b = 0;
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <animateSend+0x27c>)
 8001048:	2200      	movs	r2, #0
 800104a:	771a      	strb	r2, [r3, #28]
			writeLEDs(pixels);
 800104c:	4813      	ldr	r0, [pc, #76]	; (800109c <animateSend+0x27c>)
 800104e:	f7ff fdb1 	bl	8000bb4 <writeLEDs>
		}
		if(timer_irq && wait){
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <animateSend+0x280>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f43f af7b 	beq.w	8000f52 <animateSend+0x132>
 800105c:	7bbb      	ldrb	r3, [r7, #14]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d100      	bne.n	8001064 <animateSend+0x244>
		if(timer_irq && !on && !wait){
 8001062:	e776      	b.n	8000f52 <animateSend+0x132>
			break;
 8001064:	bf00      	nop
		}
	}

	// display current Lager
	for(i = 0; i < LAGER_SIZE; i++){
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	e086      	b.n	800117a <animateSend+0x35a>
 800106c:	f3af 8000 	nop.w
 8001070:	9999999a 	.word	0x9999999a
 8001074:	3fb99999 	.word	0x3fb99999
 8001078:	08008818 	.word	0x08008818
 800107c:	2000166f 	.word	0x2000166f
 8001080:	0800881c 	.word	0x0800881c
 8001084:	20001690 	.word	0x20001690
 8001088:	200016b8 	.word	0x200016b8
 800108c:	20000038 	.word	0x20000038
 8001090:	2000007c 	.word	0x2000007c
 8001094:	20001674 	.word	0x20001674
 8001098:	20001670 	.word	0x20001670
 800109c:	2000164c 	.word	0x2000164c
 80010a0:	2000166c 	.word	0x2000166c
 80010a4:	20000004 	.word	0x20000004
		pixels[i+1].color.g = (uint8_t)LEDColors[tempLager[i]][1]*0.1;
 80010a8:	4a6d      	ldr	r2, [pc, #436]	; (8001260 <animateSend+0x440>)
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	4413      	add	r3, r2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	4a6c      	ldr	r2, [pc, #432]	; (8001264 <animateSend+0x444>)
 80010b4:	460b      	mov	r3, r1
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	440b      	add	r3, r1
 80010ba:	4413      	add	r3, r2
 80010bc:	3301      	adds	r3, #1
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fb05 	bl	80006d0 <__aeabi_i2d>
 80010c6:	a364      	add	r3, pc, #400	; (adr r3, 8001258 <animateSend+0x438>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	f7ff f884 	bl	80001d8 <__aeabi_dmul>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4610      	mov	r0, r2
 80010d6:	4619      	mov	r1, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	1c5c      	adds	r4, r3, #1
 80010dc:	f7ff fb62 	bl	80007a4 <__aeabi_d2uiz>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b2d9      	uxtb	r1, r3
 80010e4:	4a60      	ldr	r2, [pc, #384]	; (8001268 <animateSend+0x448>)
 80010e6:	00a3      	lsls	r3, r4, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	460a      	mov	r2, r1
 80010ec:	709a      	strb	r2, [r3, #2]
		pixels[i+1].color.r = (uint8_t)LEDColors[tempLager[i]][0]*0.1;
 80010ee:	4a5c      	ldr	r2, [pc, #368]	; (8001260 <animateSend+0x440>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4413      	add	r3, r2
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	4619      	mov	r1, r3
 80010f8:	4a5a      	ldr	r2, [pc, #360]	; (8001264 <animateSend+0x444>)
 80010fa:	460b      	mov	r3, r1
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	440b      	add	r3, r1
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fae3 	bl	80006d0 <__aeabi_i2d>
 800110a:	a353      	add	r3, pc, #332	; (adr r3, 8001258 <animateSend+0x438>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f7ff f862 	bl	80001d8 <__aeabi_dmul>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	1c5c      	adds	r4, r3, #1
 8001120:	f7ff fb40 	bl	80007a4 <__aeabi_d2uiz>
 8001124:	4603      	mov	r3, r0
 8001126:	b2d9      	uxtb	r1, r3
 8001128:	4a4f      	ldr	r2, [pc, #316]	; (8001268 <animateSend+0x448>)
 800112a:	00a3      	lsls	r3, r4, #2
 800112c:	4413      	add	r3, r2
 800112e:	460a      	mov	r2, r1
 8001130:	705a      	strb	r2, [r3, #1]
		pixels[i+1].color.b = (uint8_t)LEDColors[tempLager[i]][2]*0.1;
 8001132:	4a4b      	ldr	r2, [pc, #300]	; (8001260 <animateSend+0x440>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	4413      	add	r3, r2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4619      	mov	r1, r3
 800113c:	4a49      	ldr	r2, [pc, #292]	; (8001264 <animateSend+0x444>)
 800113e:	460b      	mov	r3, r1
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	440b      	add	r3, r1
 8001144:	4413      	add	r3, r2
 8001146:	3302      	adds	r3, #2
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fac0 	bl	80006d0 <__aeabi_i2d>
 8001150:	a341      	add	r3, pc, #260	; (adr r3, 8001258 <animateSend+0x438>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff f83f 	bl	80001d8 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1c5c      	adds	r4, r3, #1
 8001166:	f7ff fb1d 	bl	80007a4 <__aeabi_d2uiz>
 800116a:	4603      	mov	r3, r0
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <animateSend+0x448>)
 8001170:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
	for(i = 0; i < LAGER_SIZE; i++){
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	3301      	adds	r3, #1
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	2b05      	cmp	r3, #5
 800117e:	dd93      	ble.n	80010a8 <animateSend+0x288>

	}
	writeLEDs(pixels);
 8001180:	4839      	ldr	r0, [pc, #228]	; (8001268 <animateSend+0x448>)
 8001182:	f7ff fd17 	bl	8000bb4 <writeLEDs>

    // write maze solution
    // HOTFIX: write start point at first iteration since it missing in path
    ws2812_pixel(startX, startY, &color[packageId]);
 8001186:	4b39      	ldr	r3, [pc, #228]	; (800126c <animateSend+0x44c>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4a38      	ldr	r2, [pc, #224]	; (8001270 <animateSend+0x450>)
 800118e:	441a      	add	r2, r3
 8001190:	7879      	ldrb	r1, [r7, #1]
 8001192:	78bb      	ldrb	r3, [r7, #2]
 8001194:	4618      	mov	r0, r3
 8001196:	f002 fe9f 	bl	8003ed8 <ws2812_pixel>
    HAL_Delay(ANIMATION_DELAY_MS);
 800119a:	203c      	movs	r0, #60	; 0x3c
 800119c:	f003 f848 	bl	8004230 <HAL_Delay>
    ws2812_pixel(startX, startY, &darkColor[packageId]);
 80011a0:	4b32      	ldr	r3, [pc, #200]	; (800126c <animateSend+0x44c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4a33      	ldr	r2, [pc, #204]	; (8001274 <animateSend+0x454>)
 80011a8:	441a      	add	r2, r3
 80011aa:	7879      	ldrb	r1, [r7, #1]
 80011ac:	78bb      	ldrb	r3, [r7, #2]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 fe92 	bl	8003ed8 <ws2812_pixel>
    for (i = path.size - 1; i > -1; i--)
 80011b4:	4b30      	ldr	r3, [pc, #192]	; (8001278 <animateSend+0x458>)
 80011b6:	889b      	ldrh	r3, [r3, #4]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	e041      	b.n	8001242 <animateSend+0x422>
	{
      if (!(path.p[i].x == 0 && path.p[i].y == 0)) // (0, 0)s are invalid points for solution
 80011be:	4b2e      	ldr	r3, [pc, #184]	; (8001278 <animateSend+0x458>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	4413      	add	r3, r2
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d107      	bne.n	80011de <animateSend+0x3be>
 80011ce:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <animateSend+0x458>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	4413      	add	r3, r2
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d02e      	beq.n	800123c <animateSend+0x41c>
      {
        ws2812_pixel(path.p[i].x, path.p[i].y, &color[packageId]); // TODO: start point is not in path
 80011de:	4b26      	ldr	r3, [pc, #152]	; (8001278 <animateSend+0x458>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	4413      	add	r3, r2
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	b2d8      	uxtb	r0, r3
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <animateSend+0x458>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	4413      	add	r3, r2
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	b2d9      	uxtb	r1, r3
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <animateSend+0x44c>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <animateSend+0x450>)
 8001202:	4413      	add	r3, r2
 8001204:	461a      	mov	r2, r3
 8001206:	f002 fe67 	bl	8003ed8 <ws2812_pixel>
        HAL_Delay(ANIMATION_DELAY_MS);
 800120a:	203c      	movs	r0, #60	; 0x3c
 800120c:	f003 f810 	bl	8004230 <HAL_Delay>
        ws2812_pixel(path.p[i].x, path.p[i].y, &darkColor[packageId]);
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <animateSend+0x458>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	4413      	add	r3, r2
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	b2d8      	uxtb	r0, r3
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <animateSend+0x458>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	4413      	add	r3, r2
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	b2d9      	uxtb	r1, r3
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <animateSend+0x44c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4a10      	ldr	r2, [pc, #64]	; (8001274 <animateSend+0x454>)
 8001234:	4413      	add	r3, r2
 8001236:	461a      	mov	r2, r3
 8001238:	f002 fe4e 	bl	8003ed8 <ws2812_pixel>
    for (i = path.size - 1; i > -1; i--)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	3b01      	subs	r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	2b00      	cmp	r3, #0
 8001246:	daba      	bge.n	80011be <animateSend+0x39e>
      }
	}

    HAL_Delay(200);
 8001248:	20c8      	movs	r0, #200	; 0xc8
 800124a:	f002 fff1 	bl	8004230 <HAL_Delay>
}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bd90      	pop	{r4, r7, pc}
 8001256:	bf00      	nop
 8001258:	9999999a 	.word	0x9999999a
 800125c:	3fb99999 	.word	0x3fb99999
 8001260:	2000167c 	.word	0x2000167c
 8001264:	20000004 	.word	0x20000004
 8001268:	2000164c 	.word	0x2000164c
 800126c:	20001670 	.word	0x20001670
 8001270:	20000038 	.word	0x20000038
 8001274:	20000080 	.word	0x20000080
 8001278:	200016b8 	.word	0x200016b8
 800127c:	00000000 	.word	0x00000000

08001280 <animateReceive>:

void animateReceive(void){
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b087      	sub	sp, #28
 8001284:	af02      	add	r7, sp, #8
  	BOOL on = FALSE;
 8001286:	2300      	movs	r3, #0
 8001288:	73fb      	strb	r3, [r7, #15]
	BOOL wait = FALSE;
 800128a:	2300      	movs	r3, #0
 800128c:	73bb      	strb	r3, [r7, #14]
    int i = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
	uint16_t x, y = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	80bb      	strh	r3, [r7, #4]

    uint8_t startX, startY, exitX, exitY = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	70fb      	strb	r3, [r7, #3]

    // find partnerId in neighbourIDs to set exit
    for(i = 0; i < 4; i++){
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	e00a      	b.n	80012b6 <animateReceive+0x36>
    	if(neighbourIDs[i] == partnerId){
 80012a0:	4aa7      	ldr	r2, [pc, #668]	; (8001540 <animateReceive+0x2c0>)
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	4413      	add	r3, r2
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	4ba6      	ldr	r3, [pc, #664]	; (8001544 <animateReceive+0x2c4>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d006      	beq.n	80012be <animateReceive+0x3e>
    for(i = 0; i < 4; i++){
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	3301      	adds	r3, #1
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	ddf1      	ble.n	80012a0 <animateReceive+0x20>
 80012bc:	e000      	b.n	80012c0 <animateReceive+0x40>
    		break;
 80012be:	bf00      	nop
    	}
    }
    startX = neighbourPoints[i].x;
 80012c0:	4aa1      	ldr	r2, [pc, #644]	; (8001548 <animateReceive+0x2c8>)
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	4413      	add	r3, r2
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	70bb      	strb	r3, [r7, #2]
    startY = neighbourPoints[i].y;
 80012cc:	4a9e      	ldr	r2, [pc, #632]	; (8001548 <animateReceive+0x2c8>)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	4413      	add	r3, r2
 80012d4:	3304      	adds	r3, #4
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	707b      	strb	r3, [r7, #1]

    exitX = STORAGE_INBOUND_X;
 80012da:	2311      	movs	r3, #17
 80012dc:	703b      	strb	r3, [r7, #0]
    exitY = STORAGE_INBOUND_Y;
 80012de:	2300      	movs	r3, #0
 80012e0:	70fb      	strb	r3, [r7, #3]

    // reset maze
    resetMaze(&maze, startX, startY, exitX, exitY);
 80012e2:	7838      	ldrb	r0, [r7, #0]
 80012e4:	787a      	ldrb	r2, [r7, #1]
 80012e6:	78b9      	ldrb	r1, [r7, #2]
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	4603      	mov	r3, r0
 80012ee:	4897      	ldr	r0, [pc, #604]	; (800154c <animateReceive+0x2cc>)
 80012f0:	f001 fed8 	bl	80030a4 <resetMaze>
    resetPath(&path);
 80012f4:	4896      	ldr	r0, [pc, #600]	; (8001550 <animateReceive+0x2d0>)
 80012f6:	f001 ffa3 	bl	8003240 <resetPath>

    // generate and write maze
  	ws2812_pixel_all(&color[C_BLACK]);
 80012fa:	4896      	ldr	r0, [pc, #600]	; (8001554 <animateReceive+0x2d4>)
 80012fc:	f002 fe5c 	bl	8003fb8 <ws2812_pixel_all>
    generateMaze(&maze);
 8001300:	4892      	ldr	r0, [pc, #584]	; (800154c <animateReceive+0x2cc>)
 8001302:	f002 f8a5 	bl	8003450 <generateMaze>
	solveMaze(&maze, &path);
 8001306:	4992      	ldr	r1, [pc, #584]	; (8001550 <animateReceive+0x2d0>)
 8001308:	4890      	ldr	r0, [pc, #576]	; (800154c <animateReceive+0x2cc>)
 800130a:	f002 f8dd 	bl	80034c8 <solveMaze>
	for (x = 0; x < MAZE_WIDTH; x++)
 800130e:	2300      	movs	r3, #0
 8001310:	80fb      	strh	r3, [r7, #6]
 8001312:	e01e      	b.n	8001352 <animateReceive+0xd2>
	{
	  for (y = 0; y < MAZE_HEIGHT; y++)
 8001314:	2300      	movs	r3, #0
 8001316:	80bb      	strh	r3, [r7, #4]
 8001318:	e015      	b.n	8001346 <animateReceive+0xc6>
	  {
	    if (maze.grid[y][x] == WALL) ws2812_pixel(x, y, &color[C_WALL]);
 800131a:	4b8c      	ldr	r3, [pc, #560]	; (800154c <animateReceive+0x2cc>)
 800131c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800131e:	88bb      	ldrh	r3, [r7, #4]
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d107      	bne.n	8001340 <animateReceive+0xc0>
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	88ba      	ldrh	r2, [r7, #4]
 8001336:	b2d1      	uxtb	r1, r2
 8001338:	4a87      	ldr	r2, [pc, #540]	; (8001558 <animateReceive+0x2d8>)
 800133a:	4618      	mov	r0, r3
 800133c:	f002 fdcc 	bl	8003ed8 <ws2812_pixel>
	  for (y = 0; y < MAZE_HEIGHT; y++)
 8001340:	88bb      	ldrh	r3, [r7, #4]
 8001342:	3301      	adds	r3, #1
 8001344:	80bb      	strh	r3, [r7, #4]
 8001346:	88bb      	ldrh	r3, [r7, #4]
 8001348:	2b16      	cmp	r3, #22
 800134a:	d9e6      	bls.n	800131a <animateReceive+0x9a>
	for (x = 0; x < MAZE_WIDTH; x++)
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	3301      	adds	r3, #1
 8001350:	80fb      	strh	r3, [r7, #6]
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	2b26      	cmp	r3, #38	; 0x26
 8001356:	d9dd      	bls.n	8001314 <animateReceive+0x94>
	  }
	}

    // write maze solution
    // HOTFIX: write start point at first iteration since it missing in path
    ws2812_pixel(startX, startY, &color[packageId]);
 8001358:	4b80      	ldr	r3, [pc, #512]	; (800155c <animateReceive+0x2dc>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4a7d      	ldr	r2, [pc, #500]	; (8001554 <animateReceive+0x2d4>)
 8001360:	441a      	add	r2, r3
 8001362:	7879      	ldrb	r1, [r7, #1]
 8001364:	78bb      	ldrb	r3, [r7, #2]
 8001366:	4618      	mov	r0, r3
 8001368:	f002 fdb6 	bl	8003ed8 <ws2812_pixel>
    HAL_Delay(ANIMATION_DELAY_MS);
 800136c:	203c      	movs	r0, #60	; 0x3c
 800136e:	f002 ff5f 	bl	8004230 <HAL_Delay>
    ws2812_pixel(startX, startY, &darkColor[packageId]);
 8001372:	4b7a      	ldr	r3, [pc, #488]	; (800155c <animateReceive+0x2dc>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4a79      	ldr	r2, [pc, #484]	; (8001560 <animateReceive+0x2e0>)
 800137a:	441a      	add	r2, r3
 800137c:	7879      	ldrb	r1, [r7, #1]
 800137e:	78bb      	ldrb	r3, [r7, #2]
 8001380:	4618      	mov	r0, r3
 8001382:	f002 fda9 	bl	8003ed8 <ws2812_pixel>
    for (i = path.size - 1; i > -1; i--)
 8001386:	4b72      	ldr	r3, [pc, #456]	; (8001550 <animateReceive+0x2d0>)
 8001388:	889b      	ldrh	r3, [r3, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	e041      	b.n	8001414 <animateReceive+0x194>
	{
      if (!(path.p[i].x == 0 && path.p[i].y == 0)) // (0, 0)s are invalid points for solution
 8001390:	4b6f      	ldr	r3, [pc, #444]	; (8001550 <animateReceive+0x2d0>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	4413      	add	r3, r2
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d107      	bne.n	80013b0 <animateReceive+0x130>
 80013a0:	4b6b      	ldr	r3, [pc, #428]	; (8001550 <animateReceive+0x2d0>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	4413      	add	r3, r2
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d02e      	beq.n	800140e <animateReceive+0x18e>
      {
        ws2812_pixel(path.p[i].x, path.p[i].y, &color[packageId]); // TODO: start point is not in path
 80013b0:	4b67      	ldr	r3, [pc, #412]	; (8001550 <animateReceive+0x2d0>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	4413      	add	r3, r2
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	b2d8      	uxtb	r0, r3
 80013be:	4b64      	ldr	r3, [pc, #400]	; (8001550 <animateReceive+0x2d0>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	4413      	add	r3, r2
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	b2d9      	uxtb	r1, r3
 80013cc:	4b63      	ldr	r3, [pc, #396]	; (800155c <animateReceive+0x2dc>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4a60      	ldr	r2, [pc, #384]	; (8001554 <animateReceive+0x2d4>)
 80013d4:	4413      	add	r3, r2
 80013d6:	461a      	mov	r2, r3
 80013d8:	f002 fd7e 	bl	8003ed8 <ws2812_pixel>
        HAL_Delay(ANIMATION_DELAY_MS);
 80013dc:	203c      	movs	r0, #60	; 0x3c
 80013de:	f002 ff27 	bl	8004230 <HAL_Delay>
        ws2812_pixel(path.p[i].x, path.p[i].y, &darkColor[packageId]);
 80013e2:	4b5b      	ldr	r3, [pc, #364]	; (8001550 <animateReceive+0x2d0>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	4413      	add	r3, r2
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	b2d8      	uxtb	r0, r3
 80013f0:	4b57      	ldr	r3, [pc, #348]	; (8001550 <animateReceive+0x2d0>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	4413      	add	r3, r2
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	b2d9      	uxtb	r1, r3
 80013fe:	4b57      	ldr	r3, [pc, #348]	; (800155c <animateReceive+0x2dc>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4a56      	ldr	r2, [pc, #344]	; (8001560 <animateReceive+0x2e0>)
 8001406:	4413      	add	r3, r2
 8001408:	461a      	mov	r2, r3
 800140a:	f002 fd65 	bl	8003ed8 <ws2812_pixel>
    for (i = path.size - 1; i > -1; i--)
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	3b01      	subs	r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	daba      	bge.n	8001390 <animateReceive+0x110>
      }
	}

	// blink first (incoming) LED once
	timer_irq = FALSE;
 800141a:	4b52      	ldr	r3, [pc, #328]	; (8001564 <animateReceive+0x2e4>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
	while(1){
		if(timer_irq && !on && !wait){
 8001420:	4b50      	ldr	r3, [pc, #320]	; (8001564 <animateReceive+0x2e4>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d060      	beq.n	80014ea <animateReceive+0x26a>
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d15d      	bne.n	80014ea <animateReceive+0x26a>
 800142e:	7bbb      	ldrb	r3, [r7, #14]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d15a      	bne.n	80014ea <animateReceive+0x26a>
			timer_irq = FALSE;
 8001434:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <animateReceive+0x2e4>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
			on = TRUE;
 800143a:	2301      	movs	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
			pixels[0].color.g = (uint8_t)LEDColors[packageId][1]*0.1; // TODO: SA/RT
 800143e:	4b47      	ldr	r3, [pc, #284]	; (800155c <animateReceive+0x2dc>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	4619      	mov	r1, r3
 8001444:	4a48      	ldr	r2, [pc, #288]	; (8001568 <animateReceive+0x2e8>)
 8001446:	460b      	mov	r3, r1
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	440b      	add	r3, r1
 800144c:	4413      	add	r3, r2
 800144e:	3301      	adds	r3, #1
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f93c 	bl	80006d0 <__aeabi_i2d>
 8001458:	a337      	add	r3, pc, #220	; (adr r3, 8001538 <animateReceive+0x2b8>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7fe febb 	bl	80001d8 <__aeabi_dmul>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff f99b 	bl	80007a4 <__aeabi_d2uiz>
 800146e:	4603      	mov	r3, r0
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b3e      	ldr	r3, [pc, #248]	; (800156c <animateReceive+0x2ec>)
 8001474:	709a      	strb	r2, [r3, #2]
			pixels[0].color.r = (uint8_t)LEDColors[packageId][0]*0.1;
 8001476:	4b39      	ldr	r3, [pc, #228]	; (800155c <animateReceive+0x2dc>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	4619      	mov	r1, r3
 800147c:	4a3a      	ldr	r2, [pc, #232]	; (8001568 <animateReceive+0x2e8>)
 800147e:	460b      	mov	r3, r1
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	440b      	add	r3, r1
 8001484:	4413      	add	r3, r2
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f921 	bl	80006d0 <__aeabi_i2d>
 800148e:	a32a      	add	r3, pc, #168	; (adr r3, 8001538 <animateReceive+0x2b8>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7fe fea0 	bl	80001d8 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff f980 	bl	80007a4 <__aeabi_d2uiz>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	4b30      	ldr	r3, [pc, #192]	; (800156c <animateReceive+0x2ec>)
 80014aa:	705a      	strb	r2, [r3, #1]
			pixels[0].color.b = (uint8_t)LEDColors[packageId][2]*0.1;
 80014ac:	4b2b      	ldr	r3, [pc, #172]	; (800155c <animateReceive+0x2dc>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	4a2d      	ldr	r2, [pc, #180]	; (8001568 <animateReceive+0x2e8>)
 80014b4:	460b      	mov	r3, r1
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	440b      	add	r3, r1
 80014ba:	4413      	add	r3, r2
 80014bc:	3302      	adds	r3, #2
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f905 	bl	80006d0 <__aeabi_i2d>
 80014c6:	a31c      	add	r3, pc, #112	; (adr r3, 8001538 <animateReceive+0x2b8>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7fe fe84 	bl	80001d8 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff f964 	bl	80007a4 <__aeabi_d2uiz>
 80014dc:	4603      	mov	r3, r0
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <animateReceive+0x2ec>)
 80014e2:	701a      	strb	r2, [r3, #0]
			writeLEDs(pixels);
 80014e4:	4821      	ldr	r0, [pc, #132]	; (800156c <animateReceive+0x2ec>)
 80014e6:	f7ff fb65 	bl	8000bb4 <writeLEDs>
		}
		if(timer_irq && on && !wait){
 80014ea:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <animateReceive+0x2e4>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d016      	beq.n	8001520 <animateReceive+0x2a0>
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <animateReceive+0x2a0>
 80014f8:	7bbb      	ldrb	r3, [r7, #14]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d110      	bne.n	8001520 <animateReceive+0x2a0>
			timer_irq = FALSE;
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <animateReceive+0x2e4>)
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
			wait = TRUE;
 8001504:	2301      	movs	r3, #1
 8001506:	73bb      	strb	r3, [r7, #14]
			pixels[0].color.g = 0; // TODO: SA/RT
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <animateReceive+0x2ec>)
 800150a:	2200      	movs	r2, #0
 800150c:	709a      	strb	r2, [r3, #2]
			pixels[0].color.r = 0;
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <animateReceive+0x2ec>)
 8001510:	2200      	movs	r2, #0
 8001512:	705a      	strb	r2, [r3, #1]
			pixels[0].color.b = 0;
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <animateReceive+0x2ec>)
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
			writeLEDs(pixels);
 800151a:	4814      	ldr	r0, [pc, #80]	; (800156c <animateReceive+0x2ec>)
 800151c:	f7ff fb4a 	bl	8000bb4 <writeLEDs>
		}
		if(timer_irq && wait){
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <animateReceive+0x2e4>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	f43f af7b 	beq.w	8001420 <animateReceive+0x1a0>
 800152a:	7bbb      	ldrb	r3, [r7, #14]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d11f      	bne.n	8001570 <animateReceive+0x2f0>
		if(timer_irq && !on && !wait){
 8001530:	e776      	b.n	8001420 <animateReceive+0x1a0>
 8001532:	bf00      	nop
 8001534:	f3af 8000 	nop.w
 8001538:	9999999a 	.word	0x9999999a
 800153c:	3fb99999 	.word	0x3fb99999
 8001540:	08008818 	.word	0x08008818
 8001544:	2000166f 	.word	0x2000166f
 8001548:	0800881c 	.word	0x0800881c
 800154c:	20001690 	.word	0x20001690
 8001550:	200016b8 	.word	0x200016b8
 8001554:	20000038 	.word	0x20000038
 8001558:	2000007c 	.word	0x2000007c
 800155c:	20001670 	.word	0x20001670
 8001560:	20000080 	.word	0x20000080
 8001564:	2000166c 	.word	0x2000166c
 8001568:	20000004 	.word	0x20000004
 800156c:	2000164c 	.word	0x2000164c
			break;
 8001570:	bf00      	nop
		}
	}

	// display current Lager
	for(i = 0; i < LAGER_SIZE; i++){
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	e068      	b.n	800164a <animateReceive+0x3ca>
		pixels[i+1].color.g = (uint8_t)LEDColors[tempLager[i]][1]*0.1;
 8001578:	4a3d      	ldr	r2, [pc, #244]	; (8001670 <animateReceive+0x3f0>)
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	4413      	add	r3, r2
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	4a3c      	ldr	r2, [pc, #240]	; (8001674 <animateReceive+0x3f4>)
 8001584:	460b      	mov	r3, r1
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	440b      	add	r3, r1
 800158a:	4413      	add	r3, r2
 800158c:	3301      	adds	r3, #1
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff f89d 	bl	80006d0 <__aeabi_i2d>
 8001596:	a334      	add	r3, pc, #208	; (adr r3, 8001668 <animateReceive+0x3e8>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7fe fe1c 	bl	80001d8 <__aeabi_dmul>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	1c5c      	adds	r4, r3, #1
 80015ac:	f7ff f8fa 	bl	80007a4 <__aeabi_d2uiz>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b2d9      	uxtb	r1, r3
 80015b4:	4a30      	ldr	r2, [pc, #192]	; (8001678 <animateReceive+0x3f8>)
 80015b6:	00a3      	lsls	r3, r4, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	460a      	mov	r2, r1
 80015bc:	709a      	strb	r2, [r3, #2]
		pixels[i+1].color.r = (uint8_t)LEDColors[tempLager[i]][0]*0.1;
 80015be:	4a2c      	ldr	r2, [pc, #176]	; (8001670 <animateReceive+0x3f0>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4413      	add	r3, r2
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4a2a      	ldr	r2, [pc, #168]	; (8001674 <animateReceive+0x3f4>)
 80015ca:	460b      	mov	r3, r1
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	440b      	add	r3, r1
 80015d0:	4413      	add	r3, r2
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff f87b 	bl	80006d0 <__aeabi_i2d>
 80015da:	a323      	add	r3, pc, #140	; (adr r3, 8001668 <animateReceive+0x3e8>)
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7fe fdfa 	bl	80001d8 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	1c5c      	adds	r4, r3, #1
 80015f0:	f7ff f8d8 	bl	80007a4 <__aeabi_d2uiz>
 80015f4:	4603      	mov	r3, r0
 80015f6:	b2d9      	uxtb	r1, r3
 80015f8:	4a1f      	ldr	r2, [pc, #124]	; (8001678 <animateReceive+0x3f8>)
 80015fa:	00a3      	lsls	r3, r4, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	460a      	mov	r2, r1
 8001600:	705a      	strb	r2, [r3, #1]
		pixels[i+1].color.b = (uint8_t)LEDColors[tempLager[i]][2]*0.1;
 8001602:	4a1b      	ldr	r2, [pc, #108]	; (8001670 <animateReceive+0x3f0>)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4413      	add	r3, r2
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	4619      	mov	r1, r3
 800160c:	4a19      	ldr	r2, [pc, #100]	; (8001674 <animateReceive+0x3f4>)
 800160e:	460b      	mov	r3, r1
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	440b      	add	r3, r1
 8001614:	4413      	add	r3, r2
 8001616:	3302      	adds	r3, #2
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff f858 	bl	80006d0 <__aeabi_i2d>
 8001620:	a311      	add	r3, pc, #68	; (adr r3, 8001668 <animateReceive+0x3e8>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7fe fdd7 	bl	80001d8 <__aeabi_dmul>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	1c5c      	adds	r4, r3, #1
 8001636:	f7ff f8b5 	bl	80007a4 <__aeabi_d2uiz>
 800163a:	4603      	mov	r3, r0
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <animateReceive+0x3f8>)
 8001640:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
	for(i = 0; i < LAGER_SIZE; i++){
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	3301      	adds	r3, #1
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	2b05      	cmp	r3, #5
 800164e:	dd93      	ble.n	8001578 <animateReceive+0x2f8>

	}
	writeLEDs(pixels);
 8001650:	4809      	ldr	r0, [pc, #36]	; (8001678 <animateReceive+0x3f8>)
 8001652:	f7ff faaf 	bl	8000bb4 <writeLEDs>

    HAL_Delay(200);
 8001656:	20c8      	movs	r0, #200	; 0xc8
 8001658:	f002 fdea 	bl	8004230 <HAL_Delay>
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	bd90      	pop	{r4, r7, pc}
 8001664:	f3af 8000 	nop.w
 8001668:	9999999a 	.word	0x9999999a
 800166c:	3fb99999 	.word	0x3fb99999
 8001670:	2000167c 	.word	0x2000167c
 8001674:	20000004 	.word	0x20000004
 8001678:	2000164c 	.word	0x2000164c
 800167c:	00000000 	.word	0x00000000

08001680 <animateCreate>:

void animateCreate(void){
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0

	BOOL on = FALSE;
 8001686:	2300      	movs	r3, #0
 8001688:	71fb      	strb	r3, [r7, #7]
	BOOL wait = FALSE;
 800168a:	2300      	movs	r3, #0
 800168c:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	717b      	strb	r3, [r7, #5]

	// find index of tempLager, were packageId is stored
	for(i = 0; i < LAGER_SIZE; i++){
 8001692:	2300      	movs	r3, #0
 8001694:	717b      	strb	r3, [r7, #5]
 8001696:	e009      	b.n	80016ac <animateCreate+0x2c>
		if(tempLager[i] == packageId){
 8001698:	797b      	ldrb	r3, [r7, #5]
 800169a:	4a95      	ldr	r2, [pc, #596]	; (80018f0 <animateCreate+0x270>)
 800169c:	5cd2      	ldrb	r2, [r2, r3]
 800169e:	4b95      	ldr	r3, [pc, #596]	; (80018f4 <animateCreate+0x274>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d006      	beq.n	80016b4 <animateCreate+0x34>
	for(i = 0; i < LAGER_SIZE; i++){
 80016a6:	797b      	ldrb	r3, [r7, #5]
 80016a8:	3301      	adds	r3, #1
 80016aa:	717b      	strb	r3, [r7, #5]
 80016ac:	797b      	ldrb	r3, [r7, #5]
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d9f2      	bls.n	8001698 <animateCreate+0x18>
 80016b2:	e000      	b.n	80016b6 <animateCreate+0x36>
			break;
 80016b4:	bf00      	nop
		}
	}

	// blink corresponding LED once
	timer_irq = FALSE;
 80016b6:	4b90      	ldr	r3, [pc, #576]	; (80018f8 <animateCreate+0x278>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
	while(1){
		if(timer_irq && !on && !wait){
 80016bc:	4b8e      	ldr	r3, [pc, #568]	; (80018f8 <animateCreate+0x278>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d06d      	beq.n	80017a0 <animateCreate+0x120>
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d16a      	bne.n	80017a0 <animateCreate+0x120>
 80016ca:	79bb      	ldrb	r3, [r7, #6]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d167      	bne.n	80017a0 <animateCreate+0x120>
			timer_irq = FALSE;
 80016d0:	4b89      	ldr	r3, [pc, #548]	; (80018f8 <animateCreate+0x278>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
			on = TRUE;
 80016d6:	2301      	movs	r3, #1
 80016d8:	71fb      	strb	r3, [r7, #7]
			pixels[i+1].color.g = (uint8_t)LEDColors[packageId][1]*0.1; // TODO: SA/RT
 80016da:	4b86      	ldr	r3, [pc, #536]	; (80018f4 <animateCreate+0x274>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	4619      	mov	r1, r3
 80016e0:	4a86      	ldr	r2, [pc, #536]	; (80018fc <animateCreate+0x27c>)
 80016e2:	460b      	mov	r3, r1
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	440b      	add	r3, r1
 80016e8:	4413      	add	r3, r2
 80016ea:	3301      	adds	r3, #1
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ffee 	bl	80006d0 <__aeabi_i2d>
 80016f4:	a37c      	add	r3, pc, #496	; (adr r3, 80018e8 <animateCreate+0x268>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f7fe fd6d 	bl	80001d8 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	797b      	ldrb	r3, [r7, #5]
 8001708:	1c5c      	adds	r4, r3, #1
 800170a:	f7ff f84b 	bl	80007a4 <__aeabi_d2uiz>
 800170e:	4603      	mov	r3, r0
 8001710:	b2d9      	uxtb	r1, r3
 8001712:	4a7b      	ldr	r2, [pc, #492]	; (8001900 <animateCreate+0x280>)
 8001714:	00a3      	lsls	r3, r4, #2
 8001716:	4413      	add	r3, r2
 8001718:	460a      	mov	r2, r1
 800171a:	709a      	strb	r2, [r3, #2]
			pixels[i+1].color.r = (uint8_t)LEDColors[packageId][0]*0.1;
 800171c:	4b75      	ldr	r3, [pc, #468]	; (80018f4 <animateCreate+0x274>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	4a76      	ldr	r2, [pc, #472]	; (80018fc <animateCreate+0x27c>)
 8001724:	460b      	mov	r3, r1
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	440b      	add	r3, r1
 800172a:	4413      	add	r3, r2
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe ffce 	bl	80006d0 <__aeabi_i2d>
 8001734:	a36c      	add	r3, pc, #432	; (adr r3, 80018e8 <animateCreate+0x268>)
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	f7fe fd4d 	bl	80001d8 <__aeabi_dmul>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	797b      	ldrb	r3, [r7, #5]
 8001748:	1c5c      	adds	r4, r3, #1
 800174a:	f7ff f82b 	bl	80007a4 <__aeabi_d2uiz>
 800174e:	4603      	mov	r3, r0
 8001750:	b2d9      	uxtb	r1, r3
 8001752:	4a6b      	ldr	r2, [pc, #428]	; (8001900 <animateCreate+0x280>)
 8001754:	00a3      	lsls	r3, r4, #2
 8001756:	4413      	add	r3, r2
 8001758:	460a      	mov	r2, r1
 800175a:	705a      	strb	r2, [r3, #1]
			pixels[i+1].color.b = (uint8_t)LEDColors[packageId][2]*0.1;
 800175c:	4b65      	ldr	r3, [pc, #404]	; (80018f4 <animateCreate+0x274>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	4a66      	ldr	r2, [pc, #408]	; (80018fc <animateCreate+0x27c>)
 8001764:	460b      	mov	r3, r1
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	440b      	add	r3, r1
 800176a:	4413      	add	r3, r2
 800176c:	3302      	adds	r3, #2
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe ffad 	bl	80006d0 <__aeabi_i2d>
 8001776:	a35c      	add	r3, pc, #368	; (adr r3, 80018e8 <animateCreate+0x268>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe fd2c 	bl	80001d8 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	797b      	ldrb	r3, [r7, #5]
 800178a:	1c5c      	adds	r4, r3, #1
 800178c:	f7ff f80a 	bl	80007a4 <__aeabi_d2uiz>
 8001790:	4603      	mov	r3, r0
 8001792:	b2da      	uxtb	r2, r3
 8001794:	4b5a      	ldr	r3, [pc, #360]	; (8001900 <animateCreate+0x280>)
 8001796:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
			writeLEDs(pixels);
 800179a:	4859      	ldr	r0, [pc, #356]	; (8001900 <animateCreate+0x280>)
 800179c:	f7ff fa0a 	bl	8000bb4 <writeLEDs>
		}
		if(timer_irq && on && !wait){
 80017a0:	4b55      	ldr	r3, [pc, #340]	; (80018f8 <animateCreate+0x278>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d021      	beq.n	80017ec <animateCreate+0x16c>
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d01e      	beq.n	80017ec <animateCreate+0x16c>
 80017ae:	79bb      	ldrb	r3, [r7, #6]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d11b      	bne.n	80017ec <animateCreate+0x16c>
			timer_irq = FALSE;
 80017b4:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <animateCreate+0x278>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
			wait = TRUE;
 80017ba:	2301      	movs	r3, #1
 80017bc:	71bb      	strb	r3, [r7, #6]
			pixels[i+1].color.g = 0; // TODO: SA/RT
 80017be:	797b      	ldrb	r3, [r7, #5]
 80017c0:	3301      	adds	r3, #1
 80017c2:	4a4f      	ldr	r2, [pc, #316]	; (8001900 <animateCreate+0x280>)
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	2200      	movs	r2, #0
 80017ca:	709a      	strb	r2, [r3, #2]
			pixels[i+1].color.r = 0;
 80017cc:	797b      	ldrb	r3, [r7, #5]
 80017ce:	3301      	adds	r3, #1
 80017d0:	4a4b      	ldr	r2, [pc, #300]	; (8001900 <animateCreate+0x280>)
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	2200      	movs	r2, #0
 80017d8:	705a      	strb	r2, [r3, #1]
			pixels[i+1].color.b = 0;
 80017da:	797b      	ldrb	r3, [r7, #5]
 80017dc:	3301      	adds	r3, #1
 80017de:	4a48      	ldr	r2, [pc, #288]	; (8001900 <animateCreate+0x280>)
 80017e0:	2100      	movs	r1, #0
 80017e2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
			writeLEDs(pixels);
 80017e6:	4846      	ldr	r0, [pc, #280]	; (8001900 <animateCreate+0x280>)
 80017e8:	f7ff f9e4 	bl	8000bb4 <writeLEDs>
		}
		if(timer_irq && wait){
 80017ec:	4b42      	ldr	r3, [pc, #264]	; (80018f8 <animateCreate+0x278>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f43f af63 	beq.w	80016bc <animateCreate+0x3c>
 80017f6:	79bb      	ldrb	r3, [r7, #6]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d100      	bne.n	80017fe <animateCreate+0x17e>
		if(timer_irq && !on && !wait){
 80017fc:	e75e      	b.n	80016bc <animateCreate+0x3c>
			break;
 80017fe:	bf00      	nop
		}

	}

	// display current Lager
	for(i = 0; i < LAGER_SIZE; i++){
 8001800:	2300      	movs	r3, #0
 8001802:	717b      	strb	r3, [r7, #5]
 8001804:	e065      	b.n	80018d2 <animateCreate+0x252>
		pixels[i+1].color.g = (uint8_t)LEDColors[tempLager[i]][1]*0.1; //TODO: greift auch auf temp
 8001806:	797b      	ldrb	r3, [r7, #5]
 8001808:	4a39      	ldr	r2, [pc, #228]	; (80018f0 <animateCreate+0x270>)
 800180a:	5cd3      	ldrb	r3, [r2, r3]
 800180c:	4619      	mov	r1, r3
 800180e:	4a3b      	ldr	r2, [pc, #236]	; (80018fc <animateCreate+0x27c>)
 8001810:	460b      	mov	r3, r1
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	440b      	add	r3, r1
 8001816:	4413      	add	r3, r2
 8001818:	3301      	adds	r3, #1
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe ff57 	bl	80006d0 <__aeabi_i2d>
 8001822:	a331      	add	r3, pc, #196	; (adr r3, 80018e8 <animateCreate+0x268>)
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	f7fe fcd6 	bl	80001d8 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	797b      	ldrb	r3, [r7, #5]
 8001836:	1c5c      	adds	r4, r3, #1
 8001838:	f7fe ffb4 	bl	80007a4 <__aeabi_d2uiz>
 800183c:	4603      	mov	r3, r0
 800183e:	b2d9      	uxtb	r1, r3
 8001840:	4a2f      	ldr	r2, [pc, #188]	; (8001900 <animateCreate+0x280>)
 8001842:	00a3      	lsls	r3, r4, #2
 8001844:	4413      	add	r3, r2
 8001846:	460a      	mov	r2, r1
 8001848:	709a      	strb	r2, [r3, #2]
		pixels[i+1].color.r = (uint8_t)LEDColors[tempLager[i]][0]*0.1;
 800184a:	797b      	ldrb	r3, [r7, #5]
 800184c:	4a28      	ldr	r2, [pc, #160]	; (80018f0 <animateCreate+0x270>)
 800184e:	5cd3      	ldrb	r3, [r2, r3]
 8001850:	4619      	mov	r1, r3
 8001852:	4a2a      	ldr	r2, [pc, #168]	; (80018fc <animateCreate+0x27c>)
 8001854:	460b      	mov	r3, r1
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	440b      	add	r3, r1
 800185a:	4413      	add	r3, r2
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe ff36 	bl	80006d0 <__aeabi_i2d>
 8001864:	a320      	add	r3, pc, #128	; (adr r3, 80018e8 <animateCreate+0x268>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f7fe fcb5 	bl	80001d8 <__aeabi_dmul>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	797b      	ldrb	r3, [r7, #5]
 8001878:	1c5c      	adds	r4, r3, #1
 800187a:	f7fe ff93 	bl	80007a4 <__aeabi_d2uiz>
 800187e:	4603      	mov	r3, r0
 8001880:	b2d9      	uxtb	r1, r3
 8001882:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <animateCreate+0x280>)
 8001884:	00a3      	lsls	r3, r4, #2
 8001886:	4413      	add	r3, r2
 8001888:	460a      	mov	r2, r1
 800188a:	705a      	strb	r2, [r3, #1]
		pixels[i+1].color.b = (uint8_t)LEDColors[tempLager[i]][2]*0.1;
 800188c:	797b      	ldrb	r3, [r7, #5]
 800188e:	4a18      	ldr	r2, [pc, #96]	; (80018f0 <animateCreate+0x270>)
 8001890:	5cd3      	ldrb	r3, [r2, r3]
 8001892:	4619      	mov	r1, r3
 8001894:	4a19      	ldr	r2, [pc, #100]	; (80018fc <animateCreate+0x27c>)
 8001896:	460b      	mov	r3, r1
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	440b      	add	r3, r1
 800189c:	4413      	add	r3, r2
 800189e:	3302      	adds	r3, #2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe ff14 	bl	80006d0 <__aeabi_i2d>
 80018a8:	a30f      	add	r3, pc, #60	; (adr r3, 80018e8 <animateCreate+0x268>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	f7fe fc93 	bl	80001d8 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	797b      	ldrb	r3, [r7, #5]
 80018bc:	1c5c      	adds	r4, r3, #1
 80018be:	f7fe ff71 	bl	80007a4 <__aeabi_d2uiz>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <animateCreate+0x280>)
 80018c8:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
	for(i = 0; i < LAGER_SIZE; i++){
 80018cc:	797b      	ldrb	r3, [r7, #5]
 80018ce:	3301      	adds	r3, #1
 80018d0:	717b      	strb	r3, [r7, #5]
 80018d2:	797b      	ldrb	r3, [r7, #5]
 80018d4:	2b05      	cmp	r3, #5
 80018d6:	d996      	bls.n	8001806 <animateCreate+0x186>

	}
	writeLEDs(pixels);
 80018d8:	4809      	ldr	r0, [pc, #36]	; (8001900 <animateCreate+0x280>)
 80018da:	f7ff f96b 	bl	8000bb4 <writeLEDs>
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd90      	pop	{r4, r7, pc}
 80018e6:	bf00      	nop
 80018e8:	9999999a 	.word	0x9999999a
 80018ec:	3fb99999 	.word	0x3fb99999
 80018f0:	2000167c 	.word	0x2000167c
 80018f4:	20001670 	.word	0x20001670
 80018f8:	2000166c 	.word	0x2000166c
 80018fc:	20000004 	.word	0x20000004
 8001900:	2000164c 	.word	0x2000164c
 8001904:	00000000 	.word	0x00000000

08001908 <animateDeliver>:
void animateDeliver(void){
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
	BOOL on = FALSE;
 800190e:	2300      	movs	r3, #0
 8001910:	71fb      	strb	r3, [r7, #7]
	BOOL wait = FALSE;
 8001912:	2300      	movs	r3, #0
 8001914:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	717b      	strb	r3, [r7, #5]

	// find index of Lager, were packageId was stored //TODO: SA/RT Lager noch rein!!
	for(i = 0; i < LAGER_SIZE; i++){
 800191a:	2300      	movs	r3, #0
 800191c:	717b      	strb	r3, [r7, #5]
 800191e:	e009      	b.n	8001934 <animateDeliver+0x2c>
		if(Lager[i] == packageId){
 8001920:	797b      	ldrb	r3, [r7, #5]
 8001922:	4a97      	ldr	r2, [pc, #604]	; (8001b80 <animateDeliver+0x278>)
 8001924:	5cd2      	ldrb	r2, [r2, r3]
 8001926:	4b97      	ldr	r3, [pc, #604]	; (8001b84 <animateDeliver+0x27c>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d006      	beq.n	800193c <animateDeliver+0x34>
	for(i = 0; i < LAGER_SIZE; i++){
 800192e:	797b      	ldrb	r3, [r7, #5]
 8001930:	3301      	adds	r3, #1
 8001932:	717b      	strb	r3, [r7, #5]
 8001934:	797b      	ldrb	r3, [r7, #5]
 8001936:	2b05      	cmp	r3, #5
 8001938:	d9f2      	bls.n	8001920 <animateDeliver+0x18>
 800193a:	e000      	b.n	800193e <animateDeliver+0x36>
			break;
 800193c:	bf00      	nop
		}
	}

	// blink corresponding LED once
	timer_irq = FALSE;
 800193e:	4b92      	ldr	r3, [pc, #584]	; (8001b88 <animateDeliver+0x280>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
	while(1){
		if(timer_irq && !on && !wait){
 8001944:	4b90      	ldr	r3, [pc, #576]	; (8001b88 <animateDeliver+0x280>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d06d      	beq.n	8001a28 <animateDeliver+0x120>
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d16a      	bne.n	8001a28 <animateDeliver+0x120>
 8001952:	79bb      	ldrb	r3, [r7, #6]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d167      	bne.n	8001a28 <animateDeliver+0x120>
			timer_irq = FALSE;
 8001958:	4b8b      	ldr	r3, [pc, #556]	; (8001b88 <animateDeliver+0x280>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
			on = TRUE;
 800195e:	2301      	movs	r3, #1
 8001960:	71fb      	strb	r3, [r7, #7]
			pixels[i+1].color.g = (uint8_t)LEDColors[packageId][1]*0.1; // TODO: SA/RT
 8001962:	4b88      	ldr	r3, [pc, #544]	; (8001b84 <animateDeliver+0x27c>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	4619      	mov	r1, r3
 8001968:	4a88      	ldr	r2, [pc, #544]	; (8001b8c <animateDeliver+0x284>)
 800196a:	460b      	mov	r3, r1
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	440b      	add	r3, r1
 8001970:	4413      	add	r3, r2
 8001972:	3301      	adds	r3, #1
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe feaa 	bl	80006d0 <__aeabi_i2d>
 800197c:	a37e      	add	r3, pc, #504	; (adr r3, 8001b78 <animateDeliver+0x270>)
 800197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001982:	f7fe fc29 	bl	80001d8 <__aeabi_dmul>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	797b      	ldrb	r3, [r7, #5]
 8001990:	1c5c      	adds	r4, r3, #1
 8001992:	f7fe ff07 	bl	80007a4 <__aeabi_d2uiz>
 8001996:	4603      	mov	r3, r0
 8001998:	b2d9      	uxtb	r1, r3
 800199a:	4a7d      	ldr	r2, [pc, #500]	; (8001b90 <animateDeliver+0x288>)
 800199c:	00a3      	lsls	r3, r4, #2
 800199e:	4413      	add	r3, r2
 80019a0:	460a      	mov	r2, r1
 80019a2:	709a      	strb	r2, [r3, #2]
			pixels[i+1].color.r = (uint8_t)LEDColors[packageId][0]*0.1;
 80019a4:	4b77      	ldr	r3, [pc, #476]	; (8001b84 <animateDeliver+0x27c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	4a78      	ldr	r2, [pc, #480]	; (8001b8c <animateDeliver+0x284>)
 80019ac:	460b      	mov	r3, r1
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	440b      	add	r3, r1
 80019b2:	4413      	add	r3, r2
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fe8a 	bl	80006d0 <__aeabi_i2d>
 80019bc:	a36e      	add	r3, pc, #440	; (adr r3, 8001b78 <animateDeliver+0x270>)
 80019be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c2:	f7fe fc09 	bl	80001d8 <__aeabi_dmul>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	797b      	ldrb	r3, [r7, #5]
 80019d0:	1c5c      	adds	r4, r3, #1
 80019d2:	f7fe fee7 	bl	80007a4 <__aeabi_d2uiz>
 80019d6:	4603      	mov	r3, r0
 80019d8:	b2d9      	uxtb	r1, r3
 80019da:	4a6d      	ldr	r2, [pc, #436]	; (8001b90 <animateDeliver+0x288>)
 80019dc:	00a3      	lsls	r3, r4, #2
 80019de:	4413      	add	r3, r2
 80019e0:	460a      	mov	r2, r1
 80019e2:	705a      	strb	r2, [r3, #1]
			pixels[i+1].color.b = (uint8_t)LEDColors[packageId][2]*0.1;
 80019e4:	4b67      	ldr	r3, [pc, #412]	; (8001b84 <animateDeliver+0x27c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	4a68      	ldr	r2, [pc, #416]	; (8001b8c <animateDeliver+0x284>)
 80019ec:	460b      	mov	r3, r1
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	440b      	add	r3, r1
 80019f2:	4413      	add	r3, r2
 80019f4:	3302      	adds	r3, #2
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fe69 	bl	80006d0 <__aeabi_i2d>
 80019fe:	a35e      	add	r3, pc, #376	; (adr r3, 8001b78 <animateDeliver+0x270>)
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	f7fe fbe8 	bl	80001d8 <__aeabi_dmul>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	797b      	ldrb	r3, [r7, #5]
 8001a12:	1c5c      	adds	r4, r3, #1
 8001a14:	f7fe fec6 	bl	80007a4 <__aeabi_d2uiz>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b5c      	ldr	r3, [pc, #368]	; (8001b90 <animateDeliver+0x288>)
 8001a1e:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
			writeLEDs(pixels);
 8001a22:	485b      	ldr	r0, [pc, #364]	; (8001b90 <animateDeliver+0x288>)
 8001a24:	f7ff f8c6 	bl	8000bb4 <writeLEDs>
		}
		if(timer_irq && on && !wait){
 8001a28:	4b57      	ldr	r3, [pc, #348]	; (8001b88 <animateDeliver+0x280>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d021      	beq.n	8001a74 <animateDeliver+0x16c>
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d01e      	beq.n	8001a74 <animateDeliver+0x16c>
 8001a36:	79bb      	ldrb	r3, [r7, #6]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d11b      	bne.n	8001a74 <animateDeliver+0x16c>
			timer_irq = FALSE;
 8001a3c:	4b52      	ldr	r3, [pc, #328]	; (8001b88 <animateDeliver+0x280>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
			wait = TRUE;
 8001a42:	2301      	movs	r3, #1
 8001a44:	71bb      	strb	r3, [r7, #6]
			pixels[i+1].color.g = 0; // TODO: SA/RT
 8001a46:	797b      	ldrb	r3, [r7, #5]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	4a51      	ldr	r2, [pc, #324]	; (8001b90 <animateDeliver+0x288>)
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	2200      	movs	r2, #0
 8001a52:	709a      	strb	r2, [r3, #2]
			pixels[i+1].color.r = 0;
 8001a54:	797b      	ldrb	r3, [r7, #5]
 8001a56:	3301      	adds	r3, #1
 8001a58:	4a4d      	ldr	r2, [pc, #308]	; (8001b90 <animateDeliver+0x288>)
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	2200      	movs	r2, #0
 8001a60:	705a      	strb	r2, [r3, #1]
			pixels[i+1].color.b = 0;
 8001a62:	797b      	ldrb	r3, [r7, #5]
 8001a64:	3301      	adds	r3, #1
 8001a66:	4a4a      	ldr	r2, [pc, #296]	; (8001b90 <animateDeliver+0x288>)
 8001a68:	2100      	movs	r1, #0
 8001a6a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
			writeLEDs(pixels);
 8001a6e:	4848      	ldr	r0, [pc, #288]	; (8001b90 <animateDeliver+0x288>)
 8001a70:	f7ff f8a0 	bl	8000bb4 <writeLEDs>
		}
		if(timer_irq && wait){
 8001a74:	4b44      	ldr	r3, [pc, #272]	; (8001b88 <animateDeliver+0x280>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f43f af63 	beq.w	8001944 <animateDeliver+0x3c>
 8001a7e:	79bb      	ldrb	r3, [r7, #6]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d100      	bne.n	8001a86 <animateDeliver+0x17e>
		if(timer_irq && !on && !wait){
 8001a84:	e75e      	b.n	8001944 <animateDeliver+0x3c>
			break;
 8001a86:	bf00      	nop
		}

	}

	// display current Lager
	for(int i = 0; i < LAGER_SIZE; i++){
 8001a88:	2300      	movs	r3, #0
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	e068      	b.n	8001b60 <animateDeliver+0x258>
		pixels[i+1].color.g = (uint8_t)LEDColors[tempLager[i]][1]*0.1;
 8001a8e:	4a41      	ldr	r2, [pc, #260]	; (8001b94 <animateDeliver+0x28c>)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	4619      	mov	r1, r3
 8001a98:	4a3c      	ldr	r2, [pc, #240]	; (8001b8c <animateDeliver+0x284>)
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	440b      	add	r3, r1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fe12 	bl	80006d0 <__aeabi_i2d>
 8001aac:	a332      	add	r3, pc, #200	; (adr r3, 8001b78 <animateDeliver+0x270>)
 8001aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab2:	f7fe fb91 	bl	80001d8 <__aeabi_dmul>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	1c5c      	adds	r4, r3, #1
 8001ac2:	f7fe fe6f 	bl	80007a4 <__aeabi_d2uiz>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b2d9      	uxtb	r1, r3
 8001aca:	4a31      	ldr	r2, [pc, #196]	; (8001b90 <animateDeliver+0x288>)
 8001acc:	00a3      	lsls	r3, r4, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	709a      	strb	r2, [r3, #2]
		pixels[i+1].color.r = (uint8_t)LEDColors[tempLager[i]][0]*0.1;
 8001ad4:	4a2f      	ldr	r2, [pc, #188]	; (8001b94 <animateDeliver+0x28c>)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	4413      	add	r3, r2
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	4a2b      	ldr	r2, [pc, #172]	; (8001b8c <animateDeliver+0x284>)
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	440b      	add	r3, r1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fdf0 	bl	80006d0 <__aeabi_i2d>
 8001af0:	a321      	add	r3, pc, #132	; (adr r3, 8001b78 <animateDeliver+0x270>)
 8001af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af6:	f7fe fb6f 	bl	80001d8 <__aeabi_dmul>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	1c5c      	adds	r4, r3, #1
 8001b06:	f7fe fe4d 	bl	80007a4 <__aeabi_d2uiz>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	b2d9      	uxtb	r1, r3
 8001b0e:	4a20      	ldr	r2, [pc, #128]	; (8001b90 <animateDeliver+0x288>)
 8001b10:	00a3      	lsls	r3, r4, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	460a      	mov	r2, r1
 8001b16:	705a      	strb	r2, [r3, #1]
		pixels[i+1].color.b = (uint8_t)LEDColors[tempLager[i]][2]*0.1;
 8001b18:	4a1e      	ldr	r2, [pc, #120]	; (8001b94 <animateDeliver+0x28c>)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	4a1a      	ldr	r2, [pc, #104]	; (8001b8c <animateDeliver+0x284>)
 8001b24:	460b      	mov	r3, r1
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	440b      	add	r3, r1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fdcd 	bl	80006d0 <__aeabi_i2d>
 8001b36:	a310      	add	r3, pc, #64	; (adr r3, 8001b78 <animateDeliver+0x270>)
 8001b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3c:	f7fe fb4c 	bl	80001d8 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	1c5c      	adds	r4, r3, #1
 8001b4c:	f7fe fe2a 	bl	80007a4 <__aeabi_d2uiz>
 8001b50:	4603      	mov	r3, r0
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <animateDeliver+0x288>)
 8001b56:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
	for(int i = 0; i < LAGER_SIZE; i++){
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	2b05      	cmp	r3, #5
 8001b64:	dd93      	ble.n	8001a8e <animateDeliver+0x186>

	}
	writeLEDs(pixels);
 8001b66:	480a      	ldr	r0, [pc, #40]	; (8001b90 <animateDeliver+0x288>)
 8001b68:	f7ff f824 	bl	8000bb4 <writeLEDs>
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd90      	pop	{r4, r7, pc}
 8001b74:	f3af 8000 	nop.w
 8001b78:	9999999a 	.word	0x9999999a
 8001b7c:	3fb99999 	.word	0x3fb99999
 8001b80:	20001674 	.word	0x20001674
 8001b84:	20001670 	.word	0x20001670
 8001b88:	2000166c 	.word	0x2000166c
 8001b8c:	20000004 	.word	0x20000004
 8001b90:	2000164c 	.word	0x2000164c
 8001b94:	2000167c 	.word	0x2000167c

08001b98 <pulse>:
void pulse(void){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
	uint8_t partnerNumber = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	71bb      	strb	r3, [r7, #6]

	// find out number of partner
	for(i = 0; i < NUM_NEIGHBOURS; i++){
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	71bb      	strb	r3, [r7, #6]
 8001baa:	e00c      	b.n	8001bc6 <pulse+0x2e>
		if(neighbourIDs[i] == partnerId){
 8001bac:	79bb      	ldrb	r3, [r7, #6]
 8001bae:	4a14      	ldr	r2, [pc, #80]	; (8001c00 <pulse+0x68>)
 8001bb0:	5cd2      	ldrb	r2, [r2, r3]
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <pulse+0x6c>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d102      	bne.n	8001bc0 <pulse+0x28>
			partnerNumber = i;
 8001bba:	79bb      	ldrb	r3, [r7, #6]
 8001bbc:	71fb      	strb	r3, [r7, #7]
			break;
 8001bbe:	e005      	b.n	8001bcc <pulse+0x34>
	for(i = 0; i < NUM_NEIGHBOURS; i++){
 8001bc0:	79bb      	ldrb	r3, [r7, #6]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	71bb      	strb	r3, [r7, #6]
 8001bc6:	79bb      	ldrb	r3, [r7, #6]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d9ef      	bls.n	8001bac <pulse+0x14>
		}
	}

	// toggle corresponding pin for 1ms // TODO: actually implement pulse with a state between passOn and sent (passOnPulse or something) and a timer
	HAL_GPIO_WritePin (GPIOC, neighbourSendPins[partnerNumber], GPIO_PIN_SET);
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <pulse+0x70>)
 8001bd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	480c      	ldr	r0, [pc, #48]	; (8001c0c <pulse+0x74>)
 8001bda:	f003 fa09 	bl	8004ff0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001bde:	2005      	movs	r0, #5
 8001be0:	f002 fb26 	bl	8004230 <HAL_Delay>
	HAL_GPIO_WritePin (GPIOC, neighbourSendPins[partnerNumber], GPIO_PIN_RESET);
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <pulse+0x70>)
 8001be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bec:	2200      	movs	r2, #0
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4806      	ldr	r0, [pc, #24]	; (8001c0c <pulse+0x74>)
 8001bf2:	f003 f9fd 	bl	8004ff0 <HAL_GPIO_WritePin>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	08008818 	.word	0x08008818
 8001c04:	2000166f 	.word	0x2000166f
 8001c08:	08008810 	.word	0x08008810
 8001c0c:	40020800 	.word	0x40020800

08001c10 <checkFailure>:
void checkFailure(void){
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
	BOOL lagerFull = TRUE;
 8001c16:	2301      	movs	r3, #1
 8001c18:	73fb      	strb	r3, [r7, #15]
	BOOL packetInLager = FALSE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73bb      	strb	r3, [r7, #14]
	BOOL packetNoExist = TRUE;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	737b      	strb	r3, [r7, #13]
	BOOL unknownNeighbour = TRUE;
 8001c22:	2301      	movs	r3, #1
 8001c24:	733b      	strb	r3, [r7, #12]
	BOOL unknownPacket = FALSE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	72fb      	strb	r3, [r7, #11]

	int i;

	// check if neighbour is known
	if(partnerId == 0){ //TODO: fixed with idle in processing, but that should not be there
 8001c2a:	4b4e      	ldr	r3, [pc, #312]	; (8001d64 <checkFailure+0x154>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <checkFailure+0x26>
		unknownNeighbour = FALSE; // neighbourId is valid
 8001c32:	2300      	movs	r3, #0
 8001c34:	733b      	strb	r3, [r7, #12]
	}
	for(i = 0; i < NUM_NEIGHBOURS; i++){
 8001c36:	2300      	movs	r3, #0
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	e00d      	b.n	8001c58 <checkFailure+0x48>
		if(partnerId == neighbourIDs[i]){
 8001c3c:	4a4a      	ldr	r2, [pc, #296]	; (8001d68 <checkFailure+0x158>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	781a      	ldrb	r2, [r3, #0]
 8001c44:	4b47      	ldr	r3, [pc, #284]	; (8001d64 <checkFailure+0x154>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d102      	bne.n	8001c52 <checkFailure+0x42>
			unknownNeighbour = FALSE; // neighbourId is valid
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	733b      	strb	r3, [r7, #12]
			break;
 8001c50:	e005      	b.n	8001c5e <checkFailure+0x4e>
	for(i = 0; i < NUM_NEIGHBOURS; i++){
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3301      	adds	r3, #1
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	ddee      	ble.n	8001c3c <checkFailure+0x2c>
		}
	}

	if(ApNr == 42){ // create or await is set
 8001c5e:	4b43      	ldr	r3, [pc, #268]	; (8001d6c <checkFailure+0x15c>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b2a      	cmp	r3, #42	; 0x2a
 8001c64:	d127      	bne.n	8001cb6 <checkFailure+0xa6>
		// check if Lager is already completely filled
		for(i = 0; i < LAGER_SIZE; i++){
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	e00b      	b.n	8001c84 <checkFailure+0x74>
			if(Lager[i] == 0){
 8001c6c:	4a40      	ldr	r2, [pc, #256]	; (8001d70 <checkFailure+0x160>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d102      	bne.n	8001c7e <checkFailure+0x6e>
				lagerFull = FALSE; // Lager is not completely filled
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]
				break;
 8001c7c:	e005      	b.n	8001c8a <checkFailure+0x7a>
		for(i = 0; i < LAGER_SIZE; i++){
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3301      	adds	r3, #1
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	ddf0      	ble.n	8001c6c <checkFailure+0x5c>
			}
		}

		packetNoExist = FALSE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	737b      	strb	r3, [r7, #13]
		// check if packageId is already stored in Lager
		for(i = 0; i < LAGER_SIZE; i++){
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	e00d      	b.n	8001cb0 <checkFailure+0xa0>
			if(Lager[i] == packageId){
 8001c94:	4a36      	ldr	r2, [pc, #216]	; (8001d70 <checkFailure+0x160>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	781a      	ldrb	r2, [r3, #0]
 8001c9c:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <checkFailure+0x164>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d102      	bne.n	8001caa <checkFailure+0x9a>
				packetInLager = TRUE; // packageId already exists in Lager
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	73bb      	strb	r3, [r7, #14]
				break;
 8001ca8:	e005      	b.n	8001cb6 <checkFailure+0xa6>
		for(i = 0; i < LAGER_SIZE; i++){
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3301      	adds	r3, #1
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b05      	cmp	r3, #5
 8001cb4:	ddee      	ble.n	8001c94 <checkFailure+0x84>
			}
		}
	}

	if(ApNr == 43){ // deliver or passOn is set
 8001cb6:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <checkFailure+0x15c>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b2b      	cmp	r3, #43	; 0x2b
 8001cbc:	d114      	bne.n	8001ce8 <checkFailure+0xd8>
		lagerFull = FALSE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	73fb      	strb	r3, [r7, #15]

		// Check if packageId exists in Lager
		for(i = 0; i < LAGER_SIZE; i++){
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	e00c      	b.n	8001ce2 <checkFailure+0xd2>
			if(Lager[i] == packageId){
 8001cc8:	4a29      	ldr	r2, [pc, #164]	; (8001d70 <checkFailure+0x160>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	781a      	ldrb	r2, [r3, #0]
 8001cd0:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <checkFailure+0x164>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d101      	bne.n	8001cdc <checkFailure+0xcc>
				packetNoExist = FALSE; // packageId does exist in Lager
 8001cd8:	2300      	movs	r3, #0
 8001cda:	737b      	strb	r3, [r7, #13]
		for(i = 0; i < LAGER_SIZE; i++){
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	ddef      	ble.n	8001cc8 <checkFailure+0xb8>
			}
		}
	}

	// check if package has a valid number
	if((packageId < 0) || (packageId > 16)){
 8001ce8:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <checkFailure+0x164>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b10      	cmp	r3, #16
 8001cee:	d901      	bls.n	8001cf4 <checkFailure+0xe4>
		unknownPacket = TRUE;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	72fb      	strb	r3, [r7, #11]
	}


	// set errorId according to failure
	if(packetInLager){
 8001cf4:	7bbb      	ldrb	r3, [r7, #14]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d006      	beq.n	8001d08 <checkFailure+0xf8>
		failure = TRUE;
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <checkFailure+0x168>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
		errorId = 1;
 8001d00:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <checkFailure+0x16c>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
	}
	else if(unknownPacket){
		failure = TRUE;
		errorId = 5; //TODO: Minispezifikation
	}
}
 8001d06:	e026      	b.n	8001d56 <checkFailure+0x146>
	else if(lagerFull){
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d006      	beq.n	8001d1c <checkFailure+0x10c>
		failure = TRUE;
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <checkFailure+0x168>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]
		errorId = 2;
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <checkFailure+0x16c>)
 8001d16:	2202      	movs	r2, #2
 8001d18:	701a      	strb	r2, [r3, #0]
}
 8001d1a:	e01c      	b.n	8001d56 <checkFailure+0x146>
	else if(packetNoExist){
 8001d1c:	7b7b      	ldrb	r3, [r7, #13]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d006      	beq.n	8001d30 <checkFailure+0x120>
		failure = TRUE;
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <checkFailure+0x168>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	701a      	strb	r2, [r3, #0]
		errorId = 3;
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <checkFailure+0x16c>)
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	701a      	strb	r2, [r3, #0]
}
 8001d2e:	e012      	b.n	8001d56 <checkFailure+0x146>
	else if(unknownNeighbour){
 8001d30:	7b3b      	ldrb	r3, [r7, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d006      	beq.n	8001d44 <checkFailure+0x134>
		failure = TRUE;
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <checkFailure+0x168>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
		errorId = 4;
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <checkFailure+0x16c>)
 8001d3e:	2204      	movs	r2, #4
 8001d40:	701a      	strb	r2, [r3, #0]
}
 8001d42:	e008      	b.n	8001d56 <checkFailure+0x146>
	else if(unknownPacket){
 8001d44:	7afb      	ldrb	r3, [r7, #11]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <checkFailure+0x146>
		failure = TRUE;
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <checkFailure+0x168>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
		errorId = 5; //TODO: Minispezifikation
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <checkFailure+0x16c>)
 8001d52:	2205      	movs	r2, #5
 8001d54:	701a      	strb	r2, [r3, #0]
}
 8001d56:	bf00      	nop
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	2000166f 	.word	0x2000166f
 8001d68:	08008818 	.word	0x08008818
 8001d6c:	20001682 	.word	0x20001682
 8001d70:	20001674 	.word	0x20001674
 8001d74:	20001670 	.word	0x20001670
 8001d78:	2000168b 	.word	0x2000168b
 8001d7c:	2000166e 	.word	0x2000166e

08001d80 <resetData>:
void resetData(){
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
	packageId = 0;
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <resetData+0x68>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
	partnerId = 0;
 8001d8a:	4b18      	ldr	r3, [pc, #96]	; (8001dec <resetData+0x6c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
	errorId = 0;
 8001d90:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <resetData+0x70>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
	receive = FALSE;
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <resetData+0x74>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
	passOn = FALSE;
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <resetData+0x78>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
	create = FALSE;
 8001da2:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <resetData+0x7c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
	deliver = FALSE;
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <resetData+0x80>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
	poll = FALSE;
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <resetData+0x84>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
	await = FALSE;
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <resetData+0x88>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
	ApNr = 0;
 8001dba:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <resetData+0x8c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
	failure = FALSE;
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <resetData+0x90>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
	finishedStore = FALSE;
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <resetData+0x94>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
	finishedSend = FALSE;
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <resetData+0x98>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
	receivedSDU = FALSE;
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <resetData+0x9c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
	GPIO_neighbour_in = FALSE;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <resetData+0xa0>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	20001670 	.word	0x20001670
 8001dec:	2000166f 	.word	0x2000166f
 8001df0:	2000166e 	.word	0x2000166e
 8001df4:	20001683 	.word	0x20001683
 8001df8:	20001684 	.word	0x20001684
 8001dfc:	20001685 	.word	0x20001685
 8001e00:	20001686 	.word	0x20001686
 8001e04:	20001687 	.word	0x20001687
 8001e08:	20001688 	.word	0x20001688
 8001e0c:	20001682 	.word	0x20001682
 8001e10:	2000168b 	.word	0x2000168b
 8001e14:	2000168a 	.word	0x2000168a
 8001e18:	20001689 	.word	0x20001689
 8001e1c:	2000168c 	.word	0x2000168c
 8001e20:	2000168d 	.word	0x2000168d

08001e24 <std>:

// STD
void std(void){
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
	switch(zustand){
 8001e28:	4b9a      	ldr	r3, [pc, #616]	; (8002094 <std+0x270>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b07      	cmp	r3, #7
 8001e2e:	f200 812b 	bhi.w	8002088 <std+0x264>
 8001e32:	a201      	add	r2, pc, #4	; (adr r2, 8001e38 <std+0x14>)
 8001e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e38:	08001e59 	.word	0x08001e59
 8001e3c:	08001e95 	.word	0x08001e95
 8001e40:	08001f39 	.word	0x08001f39
 8001e44:	08001f57 	.word	0x08001f57
 8001e48:	08001f7f 	.word	0x08001f7f
 8001e4c:	08001fa3 	.word	0x08001fa3
 8001e50:	08001fbf 	.word	0x08001fbf
 8001e54:	0800203f 	.word	0x0800203f
	case Z_idle:
		if (receivedSDU){
 8001e58:	4b8f      	ldr	r3, [pc, #572]	; (8002098 <std+0x274>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d009      	beq.n	8001e74 <std+0x50>
			aktion = A_checkFailure;
 8001e60:	4b8e      	ldr	r3, [pc, #568]	; (800209c <std+0x278>)
 8001e62:	220c      	movs	r2, #12
 8001e64:	701a      	strb	r2, [r3, #0]
			zustand = Z_processing;
 8001e66:	4b8b      	ldr	r3, [pc, #556]	; (8002094 <std+0x270>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
			receivedSDU = FALSE; //*
 8001e6c:	4b8a      	ldr	r3, [pc, #552]	; (8002098 <std+0x274>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
		}
		else if(poll || (!receivedSDU)){ //TODO: SA/RT
			aktion = A_idle;
			poll = FALSE; //*
		}
		break;
 8001e72:	e0fa      	b.n	800206a <std+0x246>
		else if(poll || (!receivedSDU)){ //TODO: SA/RT
 8001e74:	4b8a      	ldr	r3, [pc, #552]	; (80020a0 <std+0x27c>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d104      	bne.n	8001e86 <std+0x62>
 8001e7c:	4b86      	ldr	r3, [pc, #536]	; (8002098 <std+0x274>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f040 80f2 	bne.w	800206a <std+0x246>
			aktion = A_idle;
 8001e86:	4b85      	ldr	r3, [pc, #532]	; (800209c <std+0x278>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8001e8c:	4b84      	ldr	r3, [pc, #528]	; (80020a0 <std+0x27c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
		break;
 8001e92:	e0ea      	b.n	800206a <std+0x246>


	case Z_processing:
		if (create && (!failure)){ // no poll (transient state), because processing + packageId should only be reported in modes passOn and deliver
 8001e94:	4b83      	ldr	r3, [pc, #524]	; (80020a4 <std+0x280>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00d      	beq.n	8001eb8 <std+0x94>
 8001e9c:	4b82      	ldr	r3, [pc, #520]	; (80020a8 <std+0x284>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d109      	bne.n	8001eb8 <std+0x94>
			aktion = A_create;
 8001ea4:	4b7d      	ldr	r3, [pc, #500]	; (800209c <std+0x278>)
 8001ea6:	2208      	movs	r2, #8
 8001ea8:	701a      	strb	r2, [r3, #0]
			zustand = Z_awaiting;
 8001eaa:	4b7a      	ldr	r3, [pc, #488]	; (8002094 <std+0x270>)
 8001eac:	2206      	movs	r2, #6
 8001eae:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8001eb0:	4b7b      	ldr	r3, [pc, #492]	; (80020a0 <std+0x27c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	e03e      	b.n	8001f36 <std+0x112>
		}
		else if (await && (!failure)){ // no poll (transient state), because processing + packageId should only be reported in modes passOn and deliver
 8001eb8:	4b7c      	ldr	r3, [pc, #496]	; (80020ac <std+0x288>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00d      	beq.n	8001edc <std+0xb8>
 8001ec0:	4b79      	ldr	r3, [pc, #484]	; (80020a8 <std+0x284>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d109      	bne.n	8001edc <std+0xb8>
			aktion = A_await;
 8001ec8:	4b74      	ldr	r3, [pc, #464]	; (800209c <std+0x278>)
 8001eca:	2207      	movs	r2, #7
 8001ecc:	701a      	strb	r2, [r3, #0]
			zustand = Z_awaiting;
 8001ece:	4b71      	ldr	r3, [pc, #452]	; (8002094 <std+0x270>)
 8001ed0:	2206      	movs	r2, #6
 8001ed2:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8001ed4:	4b72      	ldr	r3, [pc, #456]	; (80020a0 <std+0x27c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
 8001eda:	e02c      	b.n	8001f36 <std+0x112>
		}
		else if (deliver && (!failure)){
 8001edc:	4b74      	ldr	r3, [pc, #464]	; (80020b0 <std+0x28c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00a      	beq.n	8001efa <std+0xd6>
 8001ee4:	4b70      	ldr	r3, [pc, #448]	; (80020a8 <std+0x284>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d106      	bne.n	8001efa <std+0xd6>
			aktion = A_deliver;
 8001eec:	4b6b      	ldr	r3, [pc, #428]	; (800209c <std+0x278>)
 8001eee:	2202      	movs	r2, #2
 8001ef0:	701a      	strb	r2, [r3, #0]
			zustand = Z_deliver;
 8001ef2:	4b68      	ldr	r3, [pc, #416]	; (8002094 <std+0x270>)
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	701a      	strb	r2, [r3, #0]
 8001ef8:	e01d      	b.n	8001f36 <std+0x112>
		}
		else if (passOn && (!failure)){
 8001efa:	4b6e      	ldr	r3, [pc, #440]	; (80020b4 <std+0x290>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <std+0xf4>
 8001f02:	4b69      	ldr	r3, [pc, #420]	; (80020a8 <std+0x284>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d106      	bne.n	8001f18 <std+0xf4>
			aktion = A_passOn;
 8001f0a:	4b64      	ldr	r3, [pc, #400]	; (800209c <std+0x278>)
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	701a      	strb	r2, [r3, #0]
			zustand = Z_passOn;
 8001f10:	4b60      	ldr	r3, [pc, #384]	; (8002094 <std+0x270>)
 8001f12:	2204      	movs	r2, #4
 8001f14:	701a      	strb	r2, [r3, #0]
 8001f16:	e00e      	b.n	8001f36 <std+0x112>
		}
		else if (failure){
 8001f18:	4b63      	ldr	r3, [pc, #396]	; (80020a8 <std+0x284>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80a6 	beq.w	800206e <std+0x24a>
			aktion = A_failure;
 8001f22:	4b5e      	ldr	r3, [pc, #376]	; (800209c <std+0x278>)
 8001f24:	2204      	movs	r2, #4
 8001f26:	701a      	strb	r2, [r3, #0]
			zustand = Z_failure;
 8001f28:	4b5a      	ldr	r3, [pc, #360]	; (8002094 <std+0x270>)
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8001f2e:	4b5c      	ldr	r3, [pc, #368]	; (80020a0 <std+0x27c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001f34:	e09b      	b.n	800206e <std+0x24a>
 8001f36:	e09a      	b.n	800206e <std+0x24a>

	case Z_failure:
		if(poll){
 8001f38:	4b59      	ldr	r3, [pc, #356]	; (80020a0 <std+0x27c>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 8098 	beq.w	8002072 <std+0x24e>
			aktion = A_setup;
 8001f42:	4b56      	ldr	r3, [pc, #344]	; (800209c <std+0x278>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
			zustand = Z_idle;
 8001f48:	4b52      	ldr	r3, [pc, #328]	; (8002094 <std+0x270>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8001f4e:	4b54      	ldr	r3, [pc, #336]	; (80020a0 <std+0x27c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001f54:	e08d      	b.n	8002072 <std+0x24e>

	case Z_deliver:
		if (poll && finishedSend){
 8001f56:	4b52      	ldr	r3, [pc, #328]	; (80020a0 <std+0x27c>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 808b 	beq.w	8002076 <std+0x252>
 8001f60:	4b55      	ldr	r3, [pc, #340]	; (80020b8 <std+0x294>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 8086 	beq.w	8002076 <std+0x252>
			aktion = A_updateLager;
 8001f6a:	4b4c      	ldr	r3, [pc, #304]	; (800209c <std+0x278>)
 8001f6c:	2206      	movs	r2, #6
 8001f6e:	701a      	strb	r2, [r3, #0]
			zustand = Z_sent;
 8001f70:	4b48      	ldr	r3, [pc, #288]	; (8002094 <std+0x270>)
 8001f72:	2205      	movs	r2, #5
 8001f74:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8001f76:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <std+0x27c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001f7c:	e07b      	b.n	8002076 <std+0x252>

	case Z_passOn:
		if (poll && finishedSend){
 8001f7e:	4b48      	ldr	r3, [pc, #288]	; (80020a0 <std+0x27c>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d079      	beq.n	800207a <std+0x256>
 8001f86:	4b4c      	ldr	r3, [pc, #304]	; (80020b8 <std+0x294>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d075      	beq.n	800207a <std+0x256>
			aktion = A_pulse;
 8001f8e:	4b43      	ldr	r3, [pc, #268]	; (800209c <std+0x278>)
 8001f90:	2205      	movs	r2, #5
 8001f92:	701a      	strb	r2, [r3, #0]
			zustand = Z_sent;
 8001f94:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <std+0x270>)
 8001f96:	2205      	movs	r2, #5
 8001f98:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8001f9a:	4b41      	ldr	r3, [pc, #260]	; (80020a0 <std+0x27c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001fa0:	e06b      	b.n	800207a <std+0x256>

	case Z_sent:
		if (poll){
 8001fa2:	4b3f      	ldr	r3, [pc, #252]	; (80020a0 <std+0x27c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d069      	beq.n	800207e <std+0x25a>
			aktion = A_setup;
 8001faa:	4b3c      	ldr	r3, [pc, #240]	; (800209c <std+0x278>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
			zustand = Z_idle;
 8001fb0:	4b38      	ldr	r3, [pc, #224]	; (8002094 <std+0x270>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8001fb6:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <std+0x27c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001fbc:	e05f      	b.n	800207e <std+0x25a>

	case Z_awaiting: // TODO: no GPIO needed for going from awating to send?? maybe something to do with pull up, but it used to work?
		if (GPIO_neighbour_in && await && !finishedStore){ //TODO: SA/RT finished store
 8001fbe:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <std+0x298>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00e      	beq.n	8001fe4 <std+0x1c0>
 8001fc6:	4b39      	ldr	r3, [pc, #228]	; (80020ac <std+0x288>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00a      	beq.n	8001fe4 <std+0x1c0>
 8001fce:	4b3c      	ldr	r3, [pc, #240]	; (80020c0 <std+0x29c>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <std+0x1c0>
			aktion = A_handleStore;
 8001fd6:	4b31      	ldr	r3, [pc, #196]	; (800209c <std+0x278>)
 8001fd8:	2209      	movs	r2, #9
 8001fda:	701a      	strb	r2, [r3, #0]
			GPIO_neighbour_in = FALSE; //*
 8001fdc:	4b37      	ldr	r3, [pc, #220]	; (80020bc <std+0x298>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	e02b      	b.n	800203c <std+0x218>
		}
		else if (poll && finishedStore && await){
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <std+0x27c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d011      	beq.n	8002010 <std+0x1ec>
 8001fec:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <std+0x29c>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00d      	beq.n	8002010 <std+0x1ec>
 8001ff4:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <std+0x288>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d009      	beq.n	8002010 <std+0x1ec>
			aktion = A_storeAwait;
 8001ffc:	4b27      	ldr	r3, [pc, #156]	; (800209c <std+0x278>)
 8001ffe:	220a      	movs	r2, #10
 8002000:	701a      	strb	r2, [r3, #0]
			zustand = Z_received;
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <std+0x270>)
 8002004:	2207      	movs	r2, #7
 8002006:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8002008:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <std+0x27c>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
 800200e:	e015      	b.n	800203c <std+0x218>
		}
		else if (poll && finishedStore && create){ //else if (poll && finishedStore && create && count	){
 8002010:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <std+0x27c>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d034      	beq.n	8002082 <std+0x25e>
 8002018:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <std+0x29c>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d030      	beq.n	8002082 <std+0x25e>
 8002020:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <std+0x280>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d02c      	beq.n	8002082 <std+0x25e>
			aktion = A_storeCreate;
 8002028:	4b1c      	ldr	r3, [pc, #112]	; (800209c <std+0x278>)
 800202a:	220b      	movs	r2, #11
 800202c:	701a      	strb	r2, [r3, #0]
			zustand = Z_received;
 800202e:	4b19      	ldr	r3, [pc, #100]	; (8002094 <std+0x270>)
 8002030:	2207      	movs	r2, #7
 8002032:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8002034:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <std+0x27c>)
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
			//count = FALSE;
		}
		break;
 800203a:	e022      	b.n	8002082 <std+0x25e>
 800203c:	e021      	b.n	8002082 <std+0x25e>

	case Z_received:
		if (poll){
 800203e:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <std+0x27c>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <std+0x236>
			aktion = A_setup;
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <std+0x278>)
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
			zustand = Z_idle;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <std+0x270>)
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
			poll = FALSE; //*
 8002052:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <std+0x27c>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
		}
		else if(!poll){
			aktion = A_idle; //*
		}
		break;
 8002058:	e015      	b.n	8002086 <std+0x262>
		else if(!poll){
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <std+0x27c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d111      	bne.n	8002086 <std+0x262>
			aktion = A_idle; //*
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <std+0x278>)
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
		break;
 8002068:	e00d      	b.n	8002086 <std+0x262>
		break;
 800206a:	bf00      	nop
 800206c:	e00c      	b.n	8002088 <std+0x264>
		break;
 800206e:	bf00      	nop
 8002070:	e00a      	b.n	8002088 <std+0x264>
		break;
 8002072:	bf00      	nop
 8002074:	e008      	b.n	8002088 <std+0x264>
		break;
 8002076:	bf00      	nop
 8002078:	e006      	b.n	8002088 <std+0x264>
		break;
 800207a:	bf00      	nop
 800207c:	e004      	b.n	8002088 <std+0x264>
		break;
 800207e:	bf00      	nop
 8002080:	e002      	b.n	8002088 <std+0x264>
		break;
 8002082:	bf00      	nop
 8002084:	e000      	b.n	8002088 <std+0x264>
		break;
 8002086:	bf00      	nop
	}
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	2000168e 	.word	0x2000168e
 8002098:	2000168c 	.word	0x2000168c
 800209c:	2000168f 	.word	0x2000168f
 80020a0:	20001687 	.word	0x20001687
 80020a4:	20001685 	.word	0x20001685
 80020a8:	2000168b 	.word	0x2000168b
 80020ac:	20001688 	.word	0x20001688
 80020b0:	20001686 	.word	0x20001686
 80020b4:	20001684 	.word	0x20001684
 80020b8:	20001689 	.word	0x20001689
 80020bc:	2000168d 	.word	0x2000168d
 80020c0:	2000168a 	.word	0x2000168a

080020c4 <pat>:

//* Kontrollflüsse werden im Interrupt gesetzt und müssen deshalb hier zurückgesetzt werden

// PAT
void pat(void){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
	switch(aktion){
 80020c8:	4b32      	ldr	r3, [pc, #200]	; (8002194 <pat+0xd0>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b0c      	cmp	r3, #12
 80020ce:	d85e      	bhi.n	800218e <pat+0xca>
 80020d0:	a201      	add	r2, pc, #4	; (adr r2, 80020d8 <pat+0x14>)
 80020d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d6:	bf00      	nop
 80020d8:	0800218d 	.word	0x0800218d
 80020dc:	0800210d 	.word	0x0800210d
 80020e0:	08002117 	.word	0x08002117
 80020e4:	08002121 	.word	0x08002121
 80020e8:	0800212b 	.word	0x0800212b
 80020ec:	08002131 	.word	0x08002131
 80020f0:	08002143 	.word	0x08002143
 80020f4:	08002151 	.word	0x08002151
 80020f8:	08002157 	.word	0x08002157
 80020fc:	08002161 	.word	0x08002161
 8002100:	08002167 	.word	0x08002167
 8002104:	08002175 	.word	0x08002175
 8002108:	08002183 	.word	0x08002183
	case A_setup:
		resetData(); // TODO: SA/RT
 800210c:	f7ff fe38 	bl	8001d80 <resetData>
		stateProcessing();
 8002110:	f7fe fdae 	bl	8000c70 <stateProcessing>
		break;
 8002114:	e03b      	b.n	800218e <pat+0xca>
	case A_deliver: // TODO: A_deliver and A_passOn are identical
		stateProcessing();
 8002116:	f7fe fdab 	bl	8000c70 <stateProcessing>
		handleSend();
 800211a:	f7fe fe23 	bl	8000d64 <handleSend>
		break;
 800211e:	e036      	b.n	800218e <pat+0xca>
	case A_passOn:
		stateProcessing();
 8002120:	f7fe fda6 	bl	8000c70 <stateProcessing>
		handleSend();
 8002124:	f7fe fe1e 	bl	8000d64 <handleSend>
		break;
 8002128:	e031      	b.n	800218e <pat+0xca>
	case A_failure:
		stateFailure();
 800212a:	f7fe fdd1 	bl	8000cd0 <stateFailure>
		break;
 800212e:	e02e      	b.n	800218e <pat+0xca>
	case A_pulse:
		animateSend();
 8002130:	f7fe fe76 	bl	8000e20 <animateSend>
		//PixelRGB_t pixel;
		//// Access the members through the color struct
		//pixel.color.r = 0;
		//pixel.color.g = 20;
		//pixel.color.b = 20;
		pulse();
 8002134:	f7ff fd30 	bl	8001b98 <pulse>
		//ws2812_pixel_all(&pixel);
		//HAL_Delay(1000);
		updateLager();
 8002138:	f7fe fe52 	bl	8000de0 <updateLager>
		stateSent();
 800213c:	f7fe fdbc 	bl	8000cb8 <stateSent>
		break;
 8002140:	e025      	b.n	800218e <pat+0xca>
	case A_updateLager:
		animateDeliver();
 8002142:	f7ff fbe1 	bl	8001908 <animateDeliver>
		updateLager();
 8002146:	f7fe fe4b 	bl	8000de0 <updateLager>
		stateSent();
 800214a:	f7fe fdb5 	bl	8000cb8 <stateSent>
		break;
 800214e:	e01e      	b.n	800218e <pat+0xca>
	case A_await:
		stateAwait();
 8002150:	f7fe fd9a 	bl	8000c88 <stateAwait>
		break;
 8002154:	e01b      	b.n	800218e <pat+0xca>
	case A_create:
		stateAwait();
 8002156:	f7fe fd97 	bl	8000c88 <stateAwait>
		handleStore();
 800215a:	f7fe fdc5 	bl	8000ce8 <handleStore>
		break;
 800215e:	e016      	b.n	800218e <pat+0xca>
	case A_handleStore:
		handleStore();
 8002160:	f7fe fdc2 	bl	8000ce8 <handleStore>
		break;
 8002164:	e013      	b.n	800218e <pat+0xca>
	case A_storeAwait:
		animateReceive();
 8002166:	f7ff f88b 	bl	8001280 <animateReceive>
		updateLager();
 800216a:	f7fe fe39 	bl	8000de0 <updateLager>
		stateReceived();
 800216e:	f7fe fd97 	bl	8000ca0 <stateReceived>
		break;
 8002172:	e00c      	b.n	800218e <pat+0xca>
	case A_storeCreate:
		animateCreate();
 8002174:	f7ff fa84 	bl	8001680 <animateCreate>
		updateLager();
 8002178:	f7fe fe32 	bl	8000de0 <updateLager>
		stateReceived();
 800217c:	f7fe fd90 	bl	8000ca0 <stateReceived>
		break;
 8002180:	e005      	b.n	800218e <pat+0xca>
	case A_checkFailure:
		checkFailure();
 8002182:	f7ff fd45 	bl	8001c10 <checkFailure>
		stateProcessing();
 8002186:	f7fe fd73 	bl	8000c70 <stateProcessing>
		break;
 800218a:	e000      	b.n	800218e <pat+0xca>

	//TODO: SA/RT
	case A_idle:
		break;
 800218c:	bf00      	nop
	}
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	2000168f 	.word	0x2000168f

08002198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800219e:	f001 ffd5 	bl	800414c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021a2:	f000 f875 	bl	8002290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021a6:	f000 fa53 	bl	8002650 <MX_GPIO_Init>
  MX_DMA_Init();
 80021aa:	f000 fa29 	bl	8002600 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80021ae:	f000 f9fd 	bl	80025ac <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80021b2:	f000 f9d1 	bl	8002558 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80021b6:	f000 f90d 	bl	80023d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80021ba:	f000 f97f 	bl	80024bc <MX_TIM3_Init>
  MX_SPI2_Init();
 80021be:	f000 f8d3 	bl	8002368 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, rx_buf, L1_PDU_size);
 80021c2:	2210      	movs	r2, #16
 80021c4:	4927      	ldr	r1, [pc, #156]	; (8002264 <main+0xcc>)
 80021c6:	4828      	ldr	r0, [pc, #160]	; (8002268 <main+0xd0>)
 80021c8:	f005 fa7a 	bl	80076c0 <HAL_UART_Receive_IT>
    HAL_TIM_Base_Start_IT(&htim3);
 80021cc:	4827      	ldr	r0, [pc, #156]	; (800226c <main+0xd4>)
 80021ce:	f003 ffd1 	bl	8006174 <HAL_TIM_Base_Start_IT>
    ws2812_init();
 80021d2:	f001 fe63 	bl	8003e9c <ws2812_init>
    initMaze(&maze, MAZE_HEIGHT, MAZE_WIDTH, 1, 0, MAZE_WIDTH - 2, MAZE_HEIGHT - 1);
 80021d6:	2316      	movs	r3, #22
 80021d8:	9302      	str	r3, [sp, #8]
 80021da:	2325      	movs	r3, #37	; 0x25
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	2300      	movs	r3, #0
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2301      	movs	r3, #1
 80021e4:	2227      	movs	r2, #39	; 0x27
 80021e6:	2117      	movs	r1, #23
 80021e8:	4821      	ldr	r0, [pc, #132]	; (8002270 <main+0xd8>)
 80021ea:	f000 ff0e 	bl	800300a <initMaze>
    initPath(&path, MAZE_WIDTH * MAZE_HEIGHT);
 80021ee:	f240 3181 	movw	r1, #897	; 0x381
 80021f2:	4820      	ldr	r0, [pc, #128]	; (8002274 <main+0xdc>)
 80021f4:	f001 f805 	bl	8003202 <initPath>
    initPRNG(&rng, numbers, SIZE_NUMBERS);
 80021f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021fc:	491e      	ldr	r1, [pc, #120]	; (8002278 <main+0xe0>)
 80021fe:	481f      	ldr	r0, [pc, #124]	; (800227c <main+0xe4>)
 8002200:	f001 fb4a 	bl	8003898 <initPRNG>
    initLookupTable(&lookupTable, WS2812_NUM_LEDS_Y, WS2812_NUM_LEDS_X);
 8002204:	2228      	movs	r2, #40	; 0x28
 8002206:	2118      	movs	r1, #24
 8002208:	481d      	ldr	r0, [pc, #116]	; (8002280 <main+0xe8>)
 800220a:	f7fe fc69 	bl	8000ae0 <initLookupTable>
	// Reset LEDs
	for(int i = 0; i < NUM_PIXELS; i++){
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	e013      	b.n	800223c <main+0xa4>
		pixels[i].color.g = 0;
 8002214:	4a1b      	ldr	r2, [pc, #108]	; (8002284 <main+0xec>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	2200      	movs	r2, #0
 800221e:	709a      	strb	r2, [r3, #2]
		pixels[i].color.r = 0;
 8002220:	4a18      	ldr	r2, [pc, #96]	; (8002284 <main+0xec>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	2200      	movs	r2, #0
 800222a:	705a      	strb	r2, [r3, #1]
		pixels[i].color.b = 0;
 800222c:	4a15      	ldr	r2, [pc, #84]	; (8002284 <main+0xec>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2100      	movs	r1, #0
 8002232:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUM_PIXELS; i++){
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3301      	adds	r3, #1
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b07      	cmp	r3, #7
 8002240:	dde8      	ble.n	8002214 <main+0x7c>
	}
	writeLEDs(pixels);
 8002242:	4810      	ldr	r0, [pc, #64]	; (8002284 <main+0xec>)
 8002244:	f7fe fcb6 	bl	8000bb4 <writeLEDs>
	// Zustandsuebergangsdiagramm reset
	zustand = Z_idle;
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <main+0xf0>)
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
	aktion = A_idle;
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <main+0xf4>)
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
	pat();
 8002254:	f7ff ff36 	bl	80020c4 <pat>
	{

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  std();
 8002258:	f7ff fde4 	bl	8001e24 <std>
	  pat();
 800225c:	f7ff ff32 	bl	80020c4 <pat>
	  std();
 8002260:	e7fa      	b.n	8002258 <main+0xc0>
 8002262:	bf00      	nop
 8002264:	20001318 	.word	0x20001318
 8002268:	2000128c 	.word	0x2000128c
 800226c:	200011e4 	.word	0x200011e4
 8002270:	20001690 	.word	0x20001690
 8002274:	200016b8 	.word	0x200016b8
 8002278:	200000c8 	.word	0x200000c8
 800227c:	200016c0 	.word	0x200016c0
 8002280:	200010dc 	.word	0x200010dc
 8002284:	2000164c 	.word	0x2000164c
 8002288:	2000168e 	.word	0x2000168e
 800228c:	2000168f 	.word	0x2000168f

08002290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b094      	sub	sp, #80	; 0x50
 8002294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002296:	f107 0320 	add.w	r3, r7, #32
 800229a:	2230      	movs	r2, #48	; 0x30
 800229c:	2100      	movs	r1, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	f006 fa1a 	bl	80086d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b4:	2300      	movs	r3, #0
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	4b29      	ldr	r3, [pc, #164]	; (8002360 <SystemClock_Config+0xd0>)
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	4a28      	ldr	r2, [pc, #160]	; (8002360 <SystemClock_Config+0xd0>)
 80022be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c2:	6413      	str	r3, [r2, #64]	; 0x40
 80022c4:	4b26      	ldr	r3, [pc, #152]	; (8002360 <SystemClock_Config+0xd0>)
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80022d0:	2300      	movs	r3, #0
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	4b23      	ldr	r3, [pc, #140]	; (8002364 <SystemClock_Config+0xd4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80022dc:	4a21      	ldr	r2, [pc, #132]	; (8002364 <SystemClock_Config+0xd4>)
 80022de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <SystemClock_Config+0xd4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022f0:	2302      	movs	r3, #2
 80022f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022f4:	2301      	movs	r3, #1
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022f8:	2310      	movs	r3, #16
 80022fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022fc:	2302      	movs	r3, #2
 80022fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002300:	2300      	movs	r3, #0
 8002302:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002304:	2310      	movs	r3, #16
 8002306:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002308:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800230c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800230e:	2304      	movs	r3, #4
 8002310:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002312:	2307      	movs	r3, #7
 8002314:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002316:	f107 0320 	add.w	r3, r7, #32
 800231a:	4618      	mov	r0, r3
 800231c:	f002 fe9a 	bl	8005054 <HAL_RCC_OscConfig>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002326:	f000 fe6b 	bl	8003000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800232a:	230f      	movs	r3, #15
 800232c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800232e:	2302      	movs	r3, #2
 8002330:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800233a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	2102      	movs	r1, #2
 8002346:	4618      	mov	r0, r3
 8002348:	f003 f8fc 	bl	8005544 <HAL_RCC_ClockConfig>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002352:	f000 fe55 	bl	8003000 <Error_Handler>
  }
}
 8002356:	bf00      	nop
 8002358:	3750      	adds	r7, #80	; 0x50
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	40007000 	.word	0x40007000

08002368 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800236c:	4b17      	ldr	r3, [pc, #92]	; (80023cc <MX_SPI2_Init+0x64>)
 800236e:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <MX_SPI2_Init+0x68>)
 8002370:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002372:	4b16      	ldr	r3, [pc, #88]	; (80023cc <MX_SPI2_Init+0x64>)
 8002374:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002378:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800237a:	4b14      	ldr	r3, [pc, #80]	; (80023cc <MX_SPI2_Init+0x64>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002380:	4b12      	ldr	r3, [pc, #72]	; (80023cc <MX_SPI2_Init+0x64>)
 8002382:	2200      	movs	r2, #0
 8002384:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <MX_SPI2_Init+0x64>)
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <MX_SPI2_Init+0x64>)
 800238e:	2200      	movs	r2, #0
 8002390:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <MX_SPI2_Init+0x64>)
 8002394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002398:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800239a:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <MX_SPI2_Init+0x64>)
 800239c:	2218      	movs	r2, #24
 800239e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023a0:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <MX_SPI2_Init+0x64>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <MX_SPI2_Init+0x64>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ac:	4b07      	ldr	r3, [pc, #28]	; (80023cc <MX_SPI2_Init+0x64>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80023b2:	4b06      	ldr	r3, [pc, #24]	; (80023cc <MX_SPI2_Init+0x64>)
 80023b4:	220a      	movs	r2, #10
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80023b8:	4804      	ldr	r0, [pc, #16]	; (80023cc <MX_SPI2_Init+0x64>)
 80023ba:	f003 fae3 	bl	8005984 <HAL_SPI_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80023c4:	f000 fe1c 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	200010e4 	.word	0x200010e4
 80023d0:	40003800 	.word	0x40003800

080023d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08e      	sub	sp, #56	; 0x38
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e8:	f107 0320 	add.w	r3, r7, #32
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
 8002400:	615a      	str	r2, [r3, #20]
 8002402:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002404:	4b2c      	ldr	r3, [pc, #176]	; (80024b8 <MX_TIM2_Init+0xe4>)
 8002406:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800240a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800240c:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <MX_TIM2_Init+0xe4>)
 800240e:	2200      	movs	r2, #0
 8002410:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002412:	4b29      	ldr	r3, [pc, #164]	; (80024b8 <MX_TIM2_Init+0xe4>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002418:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <MX_TIM2_Init+0xe4>)
 800241a:	2264      	movs	r2, #100	; 0x64
 800241c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <MX_TIM2_Init+0xe4>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002424:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <MX_TIM2_Init+0xe4>)
 8002426:	2200      	movs	r2, #0
 8002428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800242a:	4823      	ldr	r0, [pc, #140]	; (80024b8 <MX_TIM2_Init+0xe4>)
 800242c:	f003 fe52 	bl	80060d4 <HAL_TIM_Base_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002436:	f000 fde3 	bl	8003000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800243a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002440:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002444:	4619      	mov	r1, r3
 8002446:	481c      	ldr	r0, [pc, #112]	; (80024b8 <MX_TIM2_Init+0xe4>)
 8002448:	f004 fb90 	bl	8006b6c <HAL_TIM_ConfigClockSource>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002452:	f000 fdd5 	bl	8003000 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002456:	4818      	ldr	r0, [pc, #96]	; (80024b8 <MX_TIM2_Init+0xe4>)
 8002458:	f003 feee 	bl	8006238 <HAL_TIM_PWM_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002462:	f000 fdcd 	bl	8003000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800246e:	f107 0320 	add.w	r3, r7, #32
 8002472:	4619      	mov	r1, r3
 8002474:	4810      	ldr	r0, [pc, #64]	; (80024b8 <MX_TIM2_Init+0xe4>)
 8002476:	f005 f80f 	bl	8007498 <HAL_TIMEx_MasterConfigSynchronization>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002480:	f000 fdbe 	bl	8003000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002484:	2360      	movs	r3, #96	; 0x60
 8002486:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	2208      	movs	r2, #8
 8002498:	4619      	mov	r1, r3
 800249a:	4807      	ldr	r0, [pc, #28]	; (80024b8 <MX_TIM2_Init+0xe4>)
 800249c:	f004 faa4 	bl	80069e8 <HAL_TIM_PWM_ConfigChannel>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80024a6:	f000 fdab 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024aa:	4803      	ldr	r0, [pc, #12]	; (80024b8 <MX_TIM2_Init+0xe4>)
 80024ac:	f001 fb46 	bl	8003b3c <HAL_TIM_MspPostInit>

}
 80024b0:	bf00      	nop
 80024b2:	3738      	adds	r7, #56	; 0x38
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	2000119c 	.word	0x2000119c

080024bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024c2:	f107 0308 	add.w	r3, r7, #8
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d0:	463b      	mov	r3, r7
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <MX_TIM3_Init+0x94>)
 80024da:	4a1e      	ldr	r2, [pc, #120]	; (8002554 <MX_TIM3_Init+0x98>)
 80024dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 80024de:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <MX_TIM3_Init+0x94>)
 80024e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80024e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <MX_TIM3_Init+0x94>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4200;
 80024ec:	4b18      	ldr	r3, [pc, #96]	; (8002550 <MX_TIM3_Init+0x94>)
 80024ee:	f241 0268 	movw	r2, #4200	; 0x1068
 80024f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f4:	4b16      	ldr	r3, [pc, #88]	; (8002550 <MX_TIM3_Init+0x94>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <MX_TIM3_Init+0x94>)
 80024fc:	2280      	movs	r2, #128	; 0x80
 80024fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002500:	4813      	ldr	r0, [pc, #76]	; (8002550 <MX_TIM3_Init+0x94>)
 8002502:	f003 fde7 	bl	80060d4 <HAL_TIM_Base_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800250c:	f000 fd78 	bl	8003000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002514:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002516:	f107 0308 	add.w	r3, r7, #8
 800251a:	4619      	mov	r1, r3
 800251c:	480c      	ldr	r0, [pc, #48]	; (8002550 <MX_TIM3_Init+0x94>)
 800251e:	f004 fb25 	bl	8006b6c <HAL_TIM_ConfigClockSource>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002528:	f000 fd6a 	bl	8003000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800252c:	2300      	movs	r3, #0
 800252e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002534:	463b      	mov	r3, r7
 8002536:	4619      	mov	r1, r3
 8002538:	4805      	ldr	r0, [pc, #20]	; (8002550 <MX_TIM3_Init+0x94>)
 800253a:	f004 ffad 	bl	8007498 <HAL_TIMEx_MasterConfigSynchronization>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002544:	f000 fd5c 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002548:	bf00      	nop
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	200011e4 	.word	0x200011e4
 8002554:	40000400 	.word	0x40000400

08002558 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <MX_USART1_UART_Init+0x4c>)
 800255e:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <MX_USART1_UART_Init+0x50>)
 8002560:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <MX_USART1_UART_Init+0x4c>)
 8002564:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002568:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <MX_USART1_UART_Init+0x4c>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <MX_USART1_UART_Init+0x4c>)
 8002572:	2200      	movs	r2, #0
 8002574:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <MX_USART1_UART_Init+0x4c>)
 8002578:	2200      	movs	r2, #0
 800257a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <MX_USART1_UART_Init+0x4c>)
 800257e:	220c      	movs	r2, #12
 8002580:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <MX_USART1_UART_Init+0x4c>)
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <MX_USART1_UART_Init+0x4c>)
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800258e:	4805      	ldr	r0, [pc, #20]	; (80025a4 <MX_USART1_UART_Init+0x4c>)
 8002590:	f005 f804 	bl	800759c <HAL_UART_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800259a:	f000 fd31 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	2000128c 	.word	0x2000128c
 80025a8:	40011000 	.word	0x40011000

080025ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <MX_USART2_UART_Init+0x4c>)
 80025b2:	4a12      	ldr	r2, [pc, #72]	; (80025fc <MX_USART2_UART_Init+0x50>)
 80025b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <MX_USART2_UART_Init+0x4c>)
 80025b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <MX_USART2_UART_Init+0x4c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <MX_USART2_UART_Init+0x4c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <MX_USART2_UART_Init+0x4c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <MX_USART2_UART_Init+0x4c>)
 80025d2:	220c      	movs	r2, #12
 80025d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <MX_USART2_UART_Init+0x4c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <MX_USART2_UART_Init+0x4c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025e2:	4805      	ldr	r0, [pc, #20]	; (80025f8 <MX_USART2_UART_Init+0x4c>)
 80025e4:	f004 ffda 	bl	800759c <HAL_UART_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025ee:	f000 fd07 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	200012d0 	.word	0x200012d0
 80025fc:	40004400 	.word	0x40004400

08002600 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <MX_DMA_Init+0x4c>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a0f      	ldr	r2, [pc, #60]	; (800264c <MX_DMA_Init+0x4c>)
 8002610:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <MX_DMA_Init+0x4c>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	200c      	movs	r0, #12
 8002628:	f001 ff25 	bl	8004476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800262c:	200c      	movs	r0, #12
 800262e:	f001 ff3e 	bl	80044ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	200f      	movs	r0, #15
 8002638:	f001 ff1d 	bl	8004476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800263c:	200f      	movs	r0, #15
 800263e:	f001 ff36 	bl	80044ae <HAL_NVIC_EnableIRQ>

}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800

08002650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002656:	f107 0314 	add.w	r3, r7, #20
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	605a      	str	r2, [r3, #4]
 8002660:	609a      	str	r2, [r3, #8]
 8002662:	60da      	str	r2, [r3, #12]
 8002664:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	4b52      	ldr	r3, [pc, #328]	; (80027b4 <MX_GPIO_Init+0x164>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	4a51      	ldr	r2, [pc, #324]	; (80027b4 <MX_GPIO_Init+0x164>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	6313      	str	r3, [r2, #48]	; 0x30
 8002676:	4b4f      	ldr	r3, [pc, #316]	; (80027b4 <MX_GPIO_Init+0x164>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <MX_GPIO_Init+0x164>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a4a      	ldr	r2, [pc, #296]	; (80027b4 <MX_GPIO_Init+0x164>)
 800268c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b48      	ldr	r3, [pc, #288]	; (80027b4 <MX_GPIO_Init+0x164>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	4b44      	ldr	r3, [pc, #272]	; (80027b4 <MX_GPIO_Init+0x164>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a43      	ldr	r2, [pc, #268]	; (80027b4 <MX_GPIO_Init+0x164>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b41      	ldr	r3, [pc, #260]	; (80027b4 <MX_GPIO_Init+0x164>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <MX_GPIO_Init+0x164>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a3c      	ldr	r2, [pc, #240]	; (80027b4 <MX_GPIO_Init+0x164>)
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <MX_GPIO_Init+0x164>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	607b      	str	r3, [r7, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80026d6:	2200      	movs	r2, #0
 80026d8:	2120      	movs	r1, #32
 80026da:	4837      	ldr	r0, [pc, #220]	; (80027b8 <MX_GPIO_Init+0x168>)
 80026dc:	f002 fc88 	bl	8004ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_N1_Pin|S_N2_Pin|S_N3_Pin|S_N4_Pin, GPIO_PIN_RESET);
 80026e0:	2200      	movs	r2, #0
 80026e2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80026e6:	4835      	ldr	r0, [pc, #212]	; (80027bc <MX_GPIO_Init+0x16c>)
 80026e8:	f002 fc82 	bl	8004ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80026ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80026f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	4619      	mov	r1, r3
 8002702:	482e      	ldr	r0, [pc, #184]	; (80027bc <MX_GPIO_Init+0x16c>)
 8002704:	f002 faf0 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_N1_Pin R_N2_Pin R_N3_Pin R_N4_Pin */
  GPIO_InitStruct.Pin = R_N1_Pin|R_N2_Pin|R_N3_Pin|R_N4_Pin;
 8002708:	230f      	movs	r3, #15
 800270a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800270c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002712:	2302      	movs	r3, #2
 8002714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	4619      	mov	r1, r3
 800271c:	4827      	ldr	r0, [pc, #156]	; (80027bc <MX_GPIO_Init+0x16c>)
 800271e:	f002 fae3 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002722:	2320      	movs	r3, #32
 8002724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002726:	2301      	movs	r3, #1
 8002728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272e:	2300      	movs	r3, #0
 8002730:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002732:	f107 0314 	add.w	r3, r7, #20
 8002736:	4619      	mov	r1, r3
 8002738:	481f      	ldr	r0, [pc, #124]	; (80027b8 <MX_GPIO_Init+0x168>)
 800273a:	f002 fad5 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : S_N1_Pin S_N2_Pin S_N3_Pin S_N4_Pin */
  GPIO_InitStruct.Pin = S_N1_Pin|S_N2_Pin|S_N3_Pin|S_N4_Pin;
 800273e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002744:	2301      	movs	r3, #1
 8002746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274c:	2300      	movs	r3, #0
 800274e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4619      	mov	r1, r3
 8002756:	4819      	ldr	r0, [pc, #100]	; (80027bc <MX_GPIO_Init+0x16c>)
 8002758:	f002 fac6 	bl	8004ce8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800275c:	2200      	movs	r2, #0
 800275e:	2100      	movs	r1, #0
 8002760:	2006      	movs	r0, #6
 8002762:	f001 fe88 	bl	8004476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002766:	2006      	movs	r0, #6
 8002768:	f001 fea1 	bl	80044ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800276c:	2200      	movs	r2, #0
 800276e:	2100      	movs	r1, #0
 8002770:	2007      	movs	r0, #7
 8002772:	f001 fe80 	bl	8004476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002776:	2007      	movs	r0, #7
 8002778:	f001 fe99 	bl	80044ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800277c:	2200      	movs	r2, #0
 800277e:	2100      	movs	r1, #0
 8002780:	2008      	movs	r0, #8
 8002782:	f001 fe78 	bl	8004476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002786:	2008      	movs	r0, #8
 8002788:	f001 fe91 	bl	80044ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800278c:	2200      	movs	r2, #0
 800278e:	2100      	movs	r1, #0
 8002790:	2009      	movs	r0, #9
 8002792:	f001 fe70 	bl	8004476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002796:	2009      	movs	r0, #9
 8002798:	f001 fe89 	bl	80044ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800279c:	2200      	movs	r2, #0
 800279e:	2100      	movs	r1, #0
 80027a0:	2028      	movs	r0, #40	; 0x28
 80027a2:	f001 fe68 	bl	8004476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027a6:	2028      	movs	r0, #40	; 0x28
 80027a8:	f001 fe81 	bl	80044ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027ac:	bf00      	nop
 80027ae:	3728      	adds	r7, #40	; 0x28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40020000 	.word	0x40020000
 80027bc:	40020800 	.word	0x40020800

080027c0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Rx Transfer completed callbacks.
// Gets called when HAL_UART_Receive_IT receive is completed
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){ // check if something was received on UART1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a10      	ldr	r2, [pc, #64]	; (8002810 <HAL_UART_RxCpltCallback+0x50>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d111      	bne.n	80027f6 <HAL_UART_RxCpltCallback+0x36>
		for(int i = 0; i < L1_PDU_size; i++){ // copy received packet from buffer
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	e00b      	b.n	80027f0 <HAL_UART_RxCpltCallback+0x30>
			L1_PDU[i] = rx_buf[i];
 80027d8:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <HAL_UART_RxCpltCallback+0x54>)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4413      	add	r3, r2
 80027de:	7819      	ldrb	r1, [r3, #0]
 80027e0:	4a0d      	ldr	r2, [pc, #52]	; (8002818 <HAL_UART_RxCpltCallback+0x58>)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4413      	add	r3, r2
 80027e6:	460a      	mov	r2, r1
 80027e8:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < L1_PDU_size; i++){ // copy received packet from buffer
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	3301      	adds	r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b0f      	cmp	r3, #15
 80027f4:	ddf0      	ble.n	80027d8 <HAL_UART_RxCpltCallback+0x18>
		}
	}
  HAL_UART_Receive_IT(&huart1, rx_buf, L1_PDU_size); // Attach interrupt to receive L1_PDU from USART
 80027f6:	2210      	movs	r2, #16
 80027f8:	4906      	ldr	r1, [pc, #24]	; (8002814 <HAL_UART_RxCpltCallback+0x54>)
 80027fa:	4808      	ldr	r0, [pc, #32]	; (800281c <HAL_UART_RxCpltCallback+0x5c>)
 80027fc:	f004 ff60 	bl	80076c0 <HAL_UART_Receive_IT>
  L1_receive(L1_PDU); // Pass L1_PDU to protocol stack
 8002800:	4805      	ldr	r0, [pc, #20]	; (8002818 <HAL_UART_RxCpltCallback+0x58>)
 8002802:	f000 f877 	bl	80028f4 <L1_receive>
}
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40011000 	.word	0x40011000
 8002814:	20001318 	.word	0x20001318
 8002818:	20001328 	.word	0x20001328
 800281c:	2000128c 	.word	0x2000128c

08002820 <HAL_UART_TxCpltCallback>:

// Tx Transfer completed callbacks.
// Gets called when HAL_UART_Transmit_IT transmission is completed
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	tx_complete = 1; // packet received
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <HAL_UART_TxCpltCallback+0x1c>)
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20001314 	.word	0x20001314

08002840 <HAL_GPIO_EXTI_Callback>:

// GPIO interrupt callback
// increments button press counter
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	80fb      	strh	r3, [r7, #6]
	// rising edge at button pin was detected and DEBOUNCE_INTERVAL has elapsed since last rising edge
	if (GPIO_Pin == B1_Pin){
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002850:	d115      	bne.n	800287e <HAL_GPIO_EXTI_Callback+0x3e>
		millis = HAL_GetTick(); // get current elapsed time in milliseconds
 8002852:	f001 fce1 	bl	8004218 <HAL_GetTick>
 8002856:	4603      	mov	r3, r0
 8002858:	4a21      	ldr	r2, [pc, #132]	; (80028e0 <HAL_GPIO_EXTI_Callback+0xa0>)
 800285a:	6013      	str	r3, [r2, #0]
		if((millis - lastPress) > DEBOUNCE_INTERVAL){
 800285c:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <HAL_GPIO_EXTI_Callback+0xa0>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b0a      	cmp	r3, #10
 8002868:	d909      	bls.n	800287e <HAL_GPIO_EXTI_Callback+0x3e>
			cnt++;
 800286a:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	3301      	adds	r3, #1
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002874:	701a      	strb	r2, [r3, #0]
			lastPress = millis;
 8002876:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1a      	ldr	r2, [pc, #104]	; (80028e4 <HAL_GPIO_EXTI_Callback+0xa4>)
 800287c:	6013      	str	r3, [r2, #0]
		}
	}

	// rising edge at neighbour receive pin 1 was detected and packet should be received from neighbour 1
	if((GPIO_Pin == R_N1_Pin) && (neighbourIDs[0] == partnerId)){
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d107      	bne.n	8002894 <HAL_GPIO_EXTI_Callback+0x54>
 8002884:	2200      	movs	r2, #0
 8002886:	4b19      	ldr	r3, [pc, #100]	; (80028ec <HAL_GPIO_EXTI_Callback+0xac>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d102      	bne.n	8002894 <HAL_GPIO_EXTI_Callback+0x54>
		GPIO_neighbour_in = TRUE;
 800288e:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
	}

	// rising edge at neighbour receive pin 1 was detected and packet should be received from neighbour 1
	if((GPIO_Pin == R_N2_Pin) && (neighbourIDs[1] == partnerId)){
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d107      	bne.n	80028aa <HAL_GPIO_EXTI_Callback+0x6a>
 800289a:	2201      	movs	r2, #1
 800289c:	4b13      	ldr	r3, [pc, #76]	; (80028ec <HAL_GPIO_EXTI_Callback+0xac>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d102      	bne.n	80028aa <HAL_GPIO_EXTI_Callback+0x6a>
		GPIO_neighbour_in = TRUE;
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_GPIO_EXTI_Callback+0xb0>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]
	}

	// rising edge at neighbour receive pin 1 was detected and packet should be received from neighbour 1
	if((GPIO_Pin == R_N3_Pin) && (neighbourIDs[2] == partnerId)){
 80028aa:	88fb      	ldrh	r3, [r7, #6]
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d107      	bne.n	80028c0 <HAL_GPIO_EXTI_Callback+0x80>
 80028b0:	2200      	movs	r2, #0
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <HAL_GPIO_EXTI_Callback+0xac>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d102      	bne.n	80028c0 <HAL_GPIO_EXTI_Callback+0x80>
		GPIO_neighbour_in = TRUE;
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <HAL_GPIO_EXTI_Callback+0xb0>)
 80028bc:	2201      	movs	r2, #1
 80028be:	701a      	strb	r2, [r3, #0]
	}

	// rising edge at neighbour receive pin 1 was detected and packet should be received from neighbour 1
	if((GPIO_Pin == R_N4_Pin) && (neighbourIDs[3] == partnerId)){
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d107      	bne.n	80028d6 <HAL_GPIO_EXTI_Callback+0x96>
 80028c6:	2200      	movs	r2, #0
 80028c8:	4b08      	ldr	r3, [pc, #32]	; (80028ec <HAL_GPIO_EXTI_Callback+0xac>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d102      	bne.n	80028d6 <HAL_GPIO_EXTI_Callback+0x96>
		GPIO_neighbour_in = TRUE;
 80028d0:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <HAL_GPIO_EXTI_Callback+0xb0>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	701a      	strb	r2, [r3, #0]
	}

}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	2000133c 	.word	0x2000133c
 80028e4:	20001340 	.word	0x20001340
 80028e8:	20001338 	.word	0x20001338
 80028ec:	2000166f 	.word	0x2000166f
 80028f0:	2000168d 	.word	0x2000168d

080028f4 <L1_receive>:

/* protocol stack functions begin */
void L1_receive(uint8_t L1_PDU[]){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	// remove first (SOF) and last (EOF) byte from packet to get L1_SDU
	uint8_t L1_SDU[L1_SDU_size] = {0};
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	f107 0310 	add.w	r3, r7, #16
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	811a      	strh	r2, [r3, #8]

	for(int i = 0; i < L1_SDU_size; i++){
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	e00d      	b.n	800292e <L1_receive+0x3a>
		L1_SDU[i] = L1_PDU[i+1];
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3301      	adds	r3, #1
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	7819      	ldrb	r1, [r3, #0]
 800291c:	f107 020c 	add.w	r2, r7, #12
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	4413      	add	r3, r2
 8002924:	460a      	mov	r2, r1
 8002926:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L1_SDU_size; i++){
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	3301      	adds	r3, #1
 800292c:	61fb      	str	r3, [r7, #28]
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	2b0d      	cmp	r3, #13
 8002932:	ddee      	ble.n	8002912 <L1_receive+0x1e>
	}
	L2_receive(L1_SDU); // L1_SDU = L2_PDU
 8002934:	f107 030c 	add.w	r3, r7, #12
 8002938:	4618      	mov	r0, r3
 800293a:	f000 f805 	bl	8002948 <L2_receive>
}
 800293e:	bf00      	nop
 8002940:	3720      	adds	r7, #32
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <L2_receive>:

void L2_receive(uint8_t L2_PDU[]){
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	uint8_t L2_SDU[L2_SDU_size] = {0};
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	f107 0310 	add.w	r3, r7, #16
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	721a      	strb	r2, [r3, #8]
	uint8_t checksum = L2_PDU[13]; // last byte is checksum
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	7b5b      	ldrb	r3, [r3, #13]
 8002964:	76fb      	strb	r3, [r7, #27]

	for(int i = 0; i < L2_SDU_size; i++){ // remove last byte (checksum) to get L2_SDU
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
 800296a:	e00c      	b.n	8002986 <L2_receive+0x3e>
		L2_SDU[i] = L2_PDU[i];
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	7819      	ldrb	r1, [r3, #0]
 8002974:	f107 020c 	add.w	r2, r7, #12
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	4413      	add	r3, r2
 800297c:	460a      	mov	r2, r1
 800297e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L2_SDU_size; i++){ // remove last byte (checksum) to get L2_SDU
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	3301      	adds	r3, #1
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	2b0c      	cmp	r3, #12
 800298a:	ddef      	ble.n	800296c <L2_receive+0x24>
	}

	if(crcSlow(L2_SDU, L2_SDU_size) == checksum){ // checksum is valid -> pass packet to next Layer
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	210d      	movs	r1, #13
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fafc 	bl	8002f90 <crcSlow>
 8002998:	4603      	mov	r3, r0
 800299a:	461a      	mov	r2, r3
 800299c:	7efb      	ldrb	r3, [r7, #27]
 800299e:	4293      	cmp	r3, r2
 80029a0:	d105      	bne.n	80029ae <L2_receive+0x66>
		L3_receive(L2_SDU); // L2_SDU = L3_PDU
 80029a2:	f107 030c 	add.w	r3, r7, #12
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f80a 	bl	80029c0 <L3_receive>
	} else { // checksum is invalid -> discard packet
		tx_complete = 1;
	}
}
 80029ac:	e002      	b.n	80029b4 <L2_receive+0x6c>
		tx_complete = 1;
 80029ae:	4b03      	ldr	r3, [pc, #12]	; (80029bc <L2_receive+0x74>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
}
 80029b4:	bf00      	nop
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20001314 	.word	0x20001314

080029c0 <L3_receive>:

void L3_receive(uint8_t L3_PDU[]){
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	uint8_t L3_SDU[L3_SDU_size] = {0};
 80029c8:	2300      	movs	r3, #0
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	f107 030c 	add.w	r3, r7, #12
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	711a      	strb	r2, [r3, #4]

	for(int i = 0; i < L3_SDU_size; i++){ // remove first 4 bytes (To, From, Vers, Hops) tp get L3_SDU
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	e00d      	b.n	80029f8 <L3_receive+0x38>
		L3_SDU[i] = L3_PDU[i+4];
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	3304      	adds	r3, #4
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	7819      	ldrb	r1, [r3, #0]
 80029e6:	f107 0208 	add.w	r2, r7, #8
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	4413      	add	r3, r2
 80029ee:	460a      	mov	r2, r1
 80029f0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L3_SDU_size; i++){ // remove first 4 bytes (To, From, Vers, Hops) tp get L3_SDU
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	3301      	adds	r3, #1
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	ddee      	ble.n	80029dc <L3_receive+0x1c>
	}
	if(L3_PDU[0] != MMCP_MASTER_ADDRESS && L3_PDU[1] == MMCP_MASTER_ADDRESS && L3_PDU[2] == MMCP_VERSION){ // packet is not addressed to master, is from master and version is correct -> packet is valid
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d014      	beq.n	8002a30 <L3_receive+0x70>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10f      	bne.n	8002a30 <L3_receive+0x70>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3302      	adds	r3, #2
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b05      	cmp	r3, #5
 8002a18:	d10a      	bne.n	8002a30 <L3_receive+0x70>
		if(L3_PDU[0] == myAddress){ // packet is addressed to this device -> pass packet to next Layer
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <L3_receive+0xc4>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d104      	bne.n	8002a30 <L3_receive+0x70>
			L7_receive(L3_SDU); // L3_SDU = L7_PDU)
 8002a26:	f107 0308 	add.w	r3, r7, #8
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f82e 	bl	8002a8c <L7_receive>
		}
	}
	if(L3_PDU[0] != myAddress && L3_PDU[2] == MMCP_VERSION){ // packet is addressed to different device -> forward packet
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	781a      	ldrb	r2, [r3, #0]
 8002a34:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <L3_receive+0xc4>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d00e      	beq.n	8002a5a <L3_receive+0x9a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3302      	adds	r3, #2
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b05      	cmp	r3, #5
 8002a44:	d109      	bne.n	8002a5a <L3_receive+0x9a>
		L3_PDU[3]++; // increment hop-counter
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3303      	adds	r3, #3
 8002a4a:	781a      	ldrb	r2, [r3, #0]
 8002a4c:	3201      	adds	r2, #1
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]
		L2_send(L3_PDU);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f918 	bl	8002c88 <L2_send>
	}
	else if(L3_PDU[0] == MMCP_MASTER_ADDRESS && L3_PDU[1] == MMCP_MASTER_ADDRESS && L3_PDU[2] == MMCP_VERSION){ // packet is addressed from master to master (invalid) -> discard packet
		tx_complete = 1;
	}
}
 8002a58:	e010      	b.n	8002a7c <L3_receive+0xbc>
	else if(L3_PDU[0] == MMCP_MASTER_ADDRESS && L3_PDU[1] == MMCP_MASTER_ADDRESS && L3_PDU[2] == MMCP_VERSION){ // packet is addressed from master to master (invalid) -> discard packet
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10c      	bne.n	8002a7c <L3_receive+0xbc>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3301      	adds	r3, #1
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d107      	bne.n	8002a7c <L3_receive+0xbc>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3302      	adds	r3, #2
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d102      	bne.n	8002a7c <L3_receive+0xbc>
		tx_complete = 1;
 8002a76:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <L3_receive+0xc8>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000000 	.word	0x20000000
 8002a88:	20001314 	.word	0x20001314

08002a8c <L7_receive>:

void L7_receive(uint8_t L7_PDU[]){
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	uint8_t L7_SDU[L7_SDU_size] = {0};
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61bb      	str	r3, [r7, #24]
	uint8_t L7_SDU_send[L7_SDU_size] = {0}; // information to send back
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < L7_SDU_size; i++){ // remove first byte (ApNr) to get L7_SDU
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61fb      	str	r3, [r7, #28]
 8002aa8:	e00d      	b.n	8002ac6 <L7_receive+0x3a>
		L7_SDU[i] = L7_PDU[i+1];
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3301      	adds	r3, #1
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	7819      	ldrb	r1, [r3, #0]
 8002ab4:	f107 0214 	add.w	r2, r7, #20
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	4413      	add	r3, r2
 8002abc:	460a      	mov	r2, r1
 8002abe:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L7_SDU_size; i++){ // remove first byte (ApNr) to get L7_SDU
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	2b07      	cmp	r3, #7
 8002aca:	ddee      	ble.n	8002aaa <L7_receive+0x1e>
	}

	// ApNr 42
	// await / create package
	// send back received L7_SDU
	if(L7_PDU[0] == 42){
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ad2:	d10d      	bne.n	8002af0 <L7_receive+0x64>
		ApNr_42(L7_SDU, L7_SDU_send);
 8002ad4:	f107 020c 	add.w	r2, r7, #12
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	4611      	mov	r1, r2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f92c 	bl	8002d3c <ApNr_42>
		L7_send(42, L7_SDU_send);
 8002ae4:	f107 030c 	add.w	r3, r7, #12
 8002ae8:	4619      	mov	r1, r3
 8002aea:	202a      	movs	r0, #42	; 0x2a
 8002aec:	f000 f86c 	bl	8002bc8 <L7_send>
	}

	// ApNr 43
	// pass on / deliver package
	// send back received L7_SDU
	if(L7_PDU[0] == 43){
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b2b      	cmp	r3, #43	; 0x2b
 8002af6:	d10d      	bne.n	8002b14 <L7_receive+0x88>
		ApNr_43(L7_SDU, L7_SDU_send);
 8002af8:	f107 020c 	add.w	r2, r7, #12
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f95c 	bl	8002dc0 <ApNr_43>
		L7_send(43, L7_SDU_send);
 8002b08:	f107 030c 	add.w	r3, r7, #12
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	202b      	movs	r0, #43	; 0x2b
 8002b10:	f000 f85a 	bl	8002bc8 <L7_send>
	}

	// ApNr 50
	// poll status
	if(L7_PDU[0] == 50){
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b32      	cmp	r3, #50	; 0x32
 8002b1a:	d10d      	bne.n	8002b38 <L7_receive+0xac>
		ApNr_50(L7_SDU, L7_SDU_send);
 8002b1c:	f107 020c 	add.w	r2, r7, #12
 8002b20:	f107 0314 	add.w	r3, r7, #20
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f98c 	bl	8002e44 <ApNr_50>
		L7_send(50, L7_SDU_send);
 8002b2c:	f107 030c 	add.w	r3, r7, #12
 8002b30:	4619      	mov	r1, r3
 8002b32:	2032      	movs	r0, #50	; 0x32
 8002b34:	f000 f848 	bl	8002bc8 <L7_send>
	}

	// ApNr 100
	// turn on onboard LED if last byte of L7_SDU is not 0
	// send back received L7_SDU
	if(L7_PDU[0] == 100){
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b64      	cmp	r3, #100	; 0x64
 8002b3e:	d10d      	bne.n	8002b5c <L7_receive+0xd0>
		ApNr_100(L7_SDU, L7_SDU_send);
 8002b40:	f107 020c 	add.w	r2, r7, #12
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 f9b8 	bl	8002ec0 <ApNr_100>
		L7_send(100, L7_SDU_send);
 8002b50:	f107 030c 	add.w	r3, r7, #12
 8002b54:	4619      	mov	r1, r3
 8002b56:	2064      	movs	r0, #100	; 0x64
 8002b58:	f000 f836 	bl	8002bc8 <L7_send>
	}

	// ApNr 101
	// ignore information in L7_SDU
	// send back button presses counter in L7_SDU[7], reset counter
	if(L7_PDU[0] == 101){
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b65      	cmp	r3, #101	; 0x65
 8002b62:	d10a      	bne.n	8002b7a <L7_receive+0xee>
		ApNr_101(L7_SDU_send);
 8002b64:	f107 030c 	add.w	r3, r7, #12
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 f9d7 	bl	8002f1c <ApNr_101>
		L7_send(101, L7_SDU_send);
 8002b6e:	f107 030c 	add.w	r3, r7, #12
 8002b72:	4619      	mov	r1, r3
 8002b74:	2065      	movs	r0, #101	; 0x65
 8002b76:	f000 f827 	bl	8002bc8 <L7_send>
	}

	// ApNr 102
	// ignore information in L7_SDU
	// send back lower 64 bits of device UID
	if(L7_PDU[0] == 102){
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b66      	cmp	r3, #102	; 0x66
 8002b80:	d10a      	bne.n	8002b98 <L7_receive+0x10c>
		ApNr_102(L7_SDU_send);
 8002b82:	f107 030c 	add.w	r3, r7, #12
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f9dc 	bl	8002f44 <ApNr_102>
		L7_send(102, L7_SDU_send);
 8002b8c:	f107 030c 	add.w	r3, r7, #12
 8002b90:	4619      	mov	r1, r3
 8002b92:	2066      	movs	r0, #102	; 0x66
 8002b94:	f000 f818 	bl	8002bc8 <L7_send>
	}

	// ApNr 103
	// ignore information in L7_SDU
	// send back upper bits 64 to 95 of device UID
	if(L7_PDU[0] == 103){
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b67      	cmp	r3, #103	; 0x67
 8002b9e:	d10a      	bne.n	8002bb6 <L7_receive+0x12a>
		ApNr_103(L7_SDU_send);
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 f9e4 	bl	8002f72 <ApNr_103>
		L7_send(103, L7_SDU_send);
 8002baa:	f107 030c 	add.w	r3, r7, #12
 8002bae:	4619      	mov	r1, r3
 8002bb0:	2067      	movs	r0, #103	; 0x67
 8002bb2:	f000 f809 	bl	8002bc8 <L7_send>
	}

	tx_complete = 1;  // ApNr invalid (unknown) -> discard packet
 8002bb6:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <L7_receive+0x138>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Receive_IT(&huart1, rx_buf, L1_PDU_size); // Attach interrupt to receive L1_PDU from USART
}
 8002bbc:	bf00      	nop
 8002bbe:	3720      	adds	r7, #32
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20001314 	.word	0x20001314

08002bc8 <L7_send>:

void L7_send(uint8_t ApNr, uint8_t L7_SDU[]){
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	6039      	str	r1, [r7, #0]
 8002bd2:	71fb      	strb	r3, [r7, #7]
	uint8_t L7_PDU[L7_PDU_size] = {0};
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	f107 030c 	add.w	r3, r7, #12
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	711a      	strb	r2, [r3, #4]

	// copy ApNr and L7_SDU to get L7_PDU
	L7_PDU[0] = ApNr;
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	723b      	strb	r3, [r7, #8]
	for(int i = 0; i < L7_SDU_size; i++){
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	e00c      	b.n	8002c06 <L7_send+0x3e>
		L7_PDU[i+1] = L7_SDU[i];
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	441a      	add	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	7812      	ldrb	r2, [r2, #0]
 8002bf8:	3318      	adds	r3, #24
 8002bfa:	443b      	add	r3, r7
 8002bfc:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(int i = 0; i < L7_SDU_size; i++){
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	3301      	adds	r3, #1
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2b07      	cmp	r3, #7
 8002c0a:	ddef      	ble.n	8002bec <L7_send+0x24>
	}

	L3_send(L7_PDU); // L7_PDU = l3_SDU
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 f805 	bl	8002c20 <L3_send>
}
 8002c16:	bf00      	nop
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <L3_send>:

void L3_send(uint8_t L3_SDU[]){
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
	uint8_t L3_PDU[L3_PDU_size] = {0};
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	f107 0310 	add.w	r3, r7, #16
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	721a      	strb	r2, [r3, #8]

	L3_PDU[0] = MMCP_MASTER_ADDRESS; // To: Master
 8002c38:	2300      	movs	r3, #0
 8002c3a:	733b      	strb	r3, [r7, #12]
	L3_PDU[1] = myAddress; // From: device
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <L3_send+0x64>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	737b      	strb	r3, [r7, #13]
	L3_PDU[2] = MMCP_VERSION; // protocol version
 8002c42:	2305      	movs	r3, #5
 8002c44:	73bb      	strb	r3, [r7, #14]
	L3_PDU[3] = 0; // Hops: 0
 8002c46:	2300      	movs	r3, #0
 8002c48:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < L3_SDU_size; i++){
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	e00c      	b.n	8002c6a <L3_send+0x4a>
		L3_PDU[i+L3_PCI_size] = L3_SDU[i];
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	441a      	add	r2, r3
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	7812      	ldrb	r2, [r2, #0]
 8002c5c:	3320      	adds	r3, #32
 8002c5e:	443b      	add	r3, r7
 8002c60:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(int i = 0; i < L3_SDU_size; i++){
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	3301      	adds	r3, #1
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	ddef      	ble.n	8002c50 <L3_send+0x30>
	}

	L2_send(L3_PDU); // L3_PDU = L2_SDU
 8002c70:	f107 030c 	add.w	r3, r7, #12
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 f807 	bl	8002c88 <L2_send>
}
 8002c7a:	bf00      	nop
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000000 	.word	0x20000000

08002c88 <L2_send>:

void L2_send(uint8_t L2_SDU[]){
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	uint8_t L2_PDU[L2_PDU_size] = {0};
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	f107 0310 	add.w	r3, r7, #16
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	811a      	strh	r2, [r3, #8]
	uint8_t checksum = 42;
 8002ca0:	232a      	movs	r3, #42	; 0x2a
 8002ca2:	76fb      	strb	r3, [r7, #27]

	// copy L2_SDU to first 13 bytes of L2_PDU
	for(int i = 0; i < L2_SDU_size; i++){
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61fb      	str	r3, [r7, #28]
 8002ca8:	e00c      	b.n	8002cc4 <L2_send+0x3c>
		L2_PDU[i] = L2_SDU[i];
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	4413      	add	r3, r2
 8002cb0:	7819      	ldrb	r1, [r3, #0]
 8002cb2:	f107 020c 	add.w	r2, r7, #12
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	4413      	add	r3, r2
 8002cba:	460a      	mov	r2, r1
 8002cbc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L2_SDU_size; i++){
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	61fb      	str	r3, [r7, #28]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	ddef      	ble.n	8002caa <L2_send+0x22>
	}

	checksum = crcSlow(L2_SDU, L2_SDU_size); // calculate checksum
 8002cca:	210d      	movs	r1, #13
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f95f 	bl	8002f90 <crcSlow>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	76fb      	strb	r3, [r7, #27]
	L2_PDU[13] = checksum; // last bit is checksum
 8002cd6:	7efb      	ldrb	r3, [r7, #27]
 8002cd8:	767b      	strb	r3, [r7, #25]

	L1_send(L2_PDU);
 8002cda:	f107 030c 	add.w	r3, r7, #12
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 f804 	bl	8002cec <L1_send>
}
 8002ce4:	bf00      	nop
 8002ce6:	3720      	adds	r7, #32
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <L1_send>:

void L1_send(uint8_t L1_SDU[]){
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	L1_PDU[0] = 0; // SOF: 0
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <L1_send+0x48>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	701a      	strb	r2, [r3, #0]
	// copy L1_SDU to bytes 1...15 of L1_PDU
	for(int i = 0; i < L1_SDU_size; i++){
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	e00a      	b.n	8002d16 <L1_send+0x2a>
		L1_PDU[i+1] = L1_SDU[i];
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	441a      	add	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	7811      	ldrb	r1, [r2, #0]
 8002d0c:	4a09      	ldr	r2, [pc, #36]	; (8002d34 <L1_send+0x48>)
 8002d0e:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < L1_SDU_size; i++){
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	3301      	adds	r3, #1
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b0d      	cmp	r3, #13
 8002d1a:	ddf1      	ble.n	8002d00 <L1_send+0x14>
	}
	L1_PDU[15] = 0; // EOF: 0
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <L1_send+0x48>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	73da      	strb	r2, [r3, #15]

	HAL_UART_Transmit_IT(&huart1, L1_PDU, L1_PDU_size); // send L1_PDU over USART2 (non-blocking)
 8002d22:	2210      	movs	r2, #16
 8002d24:	4903      	ldr	r1, [pc, #12]	; (8002d34 <L1_send+0x48>)
 8002d26:	4804      	ldr	r0, [pc, #16]	; (8002d38 <L1_send+0x4c>)
 8002d28:	f004 fc85 	bl	8007636 <HAL_UART_Transmit_IT>
}
 8002d2c:	bf00      	nop
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20001328 	.word	0x20001328
 8002d38:	2000128c 	.word	0x2000128c

08002d3c <ApNr_42>:
/* protocol stack functions end */
// ApNr 42
// await / create package
// send back received L7_SDU
void ApNr_42(uint8_t L7_SDU[], uint8_t L7_SDU_send[]){
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
	packageId = L7_SDU[0];
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	781a      	ldrb	r2, [r3, #0]
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <ApNr_42+0x6c>)
 8002d4c:	701a      	strb	r2, [r3, #0]
	partnerId = L7_SDU[1];
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	785a      	ldrb	r2, [r3, #1]
 8002d52:	4b16      	ldr	r3, [pc, #88]	; (8002dac <ApNr_42+0x70>)
 8002d54:	701a      	strb	r2, [r3, #0]

	receivedSDU = TRUE;
 8002d56:	4b16      	ldr	r3, [pc, #88]	; (8002db0 <ApNr_42+0x74>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
	ApNr = 42;
 8002d5c:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <ApNr_42+0x78>)
 8002d5e:	222a      	movs	r2, #42	; 0x2a
 8002d60:	701a      	strb	r2, [r3, #0]

	if(partnerId != 0){ // partnerId is not 0 -> await new package
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <ApNr_42+0x70>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <ApNr_42+0x36>
		await = TRUE;
 8002d6a:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <ApNr_42+0x7c>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
 8002d70:	e002      	b.n	8002d78 <ApNr_42+0x3c>
	} else { // partnerId is 0 -> create new package
		create = TRUE;
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <ApNr_42+0x80>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < L7_SDU_size; i++){ // copy L7_SDU to L7_SDU_send
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	e00a      	b.n	8002d94 <ApNr_42+0x58>
		L7_SDU_send[i] = L7_SDU[i];
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	441a      	add	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6839      	ldr	r1, [r7, #0]
 8002d88:	440b      	add	r3, r1
 8002d8a:	7812      	ldrb	r2, [r2, #0]
 8002d8c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L7_SDU_size; i++){ // copy L7_SDU to L7_SDU_send
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3301      	adds	r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b07      	cmp	r3, #7
 8002d98:	ddf1      	ble.n	8002d7e <ApNr_42+0x42>
	}
}
 8002d9a:	bf00      	nop
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	20001670 	.word	0x20001670
 8002dac:	2000166f 	.word	0x2000166f
 8002db0:	2000168c 	.word	0x2000168c
 8002db4:	20001682 	.word	0x20001682
 8002db8:	20001688 	.word	0x20001688
 8002dbc:	20001685 	.word	0x20001685

08002dc0 <ApNr_43>:

// ApNr 43
// pass on / deliver package
// send back received L7_SDU
void ApNr_43(uint8_t L7_SDU[], uint8_t L7_SDU_send[]){
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
	packageId = L7_SDU[0];
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	781a      	ldrb	r2, [r3, #0]
 8002dce:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <ApNr_43+0x6c>)
 8002dd0:	701a      	strb	r2, [r3, #0]
	partnerId = L7_SDU[1];
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	785a      	ldrb	r2, [r3, #1]
 8002dd6:	4b16      	ldr	r3, [pc, #88]	; (8002e30 <ApNr_43+0x70>)
 8002dd8:	701a      	strb	r2, [r3, #0]

	receivedSDU = TRUE;
 8002dda:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <ApNr_43+0x74>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
	ApNr = 43;
 8002de0:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <ApNr_43+0x78>)
 8002de2:	222b      	movs	r2, #43	; 0x2b
 8002de4:	701a      	strb	r2, [r3, #0]

	if(partnerId != 0){ // partnerId is not 0 -> passOn package
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <ApNr_43+0x70>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <ApNr_43+0x36>
		passOn = TRUE;
 8002dee:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <ApNr_43+0x7c>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	701a      	strb	r2, [r3, #0]
 8002df4:	e002      	b.n	8002dfc <ApNr_43+0x3c>
	} else { // partnerId is 0 -> deliver package
		deliver = TRUE;
 8002df6:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <ApNr_43+0x80>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < L7_SDU_size; i++){ // copy L7_SDU to L7_SDU_send
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	e00a      	b.n	8002e18 <ApNr_43+0x58>
		L7_SDU_send[i] = L7_SDU[i];
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	441a      	add	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6839      	ldr	r1, [r7, #0]
 8002e0c:	440b      	add	r3, r1
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < L7_SDU_size; i++){ // copy L7_SDU to L7_SDU_send
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3301      	adds	r3, #1
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b07      	cmp	r3, #7
 8002e1c:	ddf1      	ble.n	8002e02 <ApNr_43+0x42>
	}
}
 8002e1e:	bf00      	nop
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	20001670 	.word	0x20001670
 8002e30:	2000166f 	.word	0x2000166f
 8002e34:	2000168c 	.word	0x2000168c
 8002e38:	20001682 	.word	0x20001682
 8002e3c:	20001684 	.word	0x20001684
 8002e40:	20001686 	.word	0x20001686

08002e44 <ApNr_50>:

// ApNr 50
// poll status
void ApNr_50(uint8_t L7_SDU[], uint8_t L7_SDU_send[]){
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
	poll = TRUE;
 8002e4e:	4b17      	ldr	r3, [pc, #92]	; (8002eac <ApNr_50+0x68>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	701a      	strb	r2, [r3, #0]

	L7_SDU_send[0] = state;
 8002e54:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <ApNr_50+0x6c>)
 8002e56:	781a      	ldrb	r2, [r3, #0]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	701a      	strb	r2, [r3, #0]
	if(state == 4){ // state is failure, send errorId instead of packageId
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <ApNr_50+0x6c>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d105      	bne.n	8002e70 <ApNr_50+0x2c>
		L7_SDU_send[1] = errorId;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	3301      	adds	r3, #1
 8002e68:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <ApNr_50+0x70>)
 8002e6a:	7812      	ldrb	r2, [r2, #0]
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	e004      	b.n	8002e7a <ApNr_50+0x36>
	} else {
		L7_SDU_send[1] = packageId;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	4a10      	ldr	r2, [pc, #64]	; (8002eb8 <ApNr_50+0x74>)
 8002e76:	7812      	ldrb	r2, [r2, #0]
 8002e78:	701a      	strb	r2, [r3, #0]
	}
	for(int i = 2; i < L7_SDU_size; i++){ // copy Lager to L7_SDU_send, index 2 to 7 //TODO: adapt to Lager size constant
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	e00a      	b.n	8002e96 <ApNr_50+0x52>
		L7_SDU_send[i] = Lager[i-2];
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1e9a      	subs	r2, r3, #2
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6839      	ldr	r1, [r7, #0]
 8002e88:	440b      	add	r3, r1
 8002e8a:	490c      	ldr	r1, [pc, #48]	; (8002ebc <ApNr_50+0x78>)
 8002e8c:	5c8a      	ldrb	r2, [r1, r2]
 8002e8e:	701a      	strb	r2, [r3, #0]
	for(int i = 2; i < L7_SDU_size; i++){ // copy Lager to L7_SDU_send, index 2 to 7 //TODO: adapt to Lager size constant
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3301      	adds	r3, #1
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b07      	cmp	r3, #7
 8002e9a:	ddf1      	ble.n	8002e80 <ApNr_50+0x3c>
	}
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20001687 	.word	0x20001687
 8002eb0:	2000166d 	.word	0x2000166d
 8002eb4:	2000166e 	.word	0x2000166e
 8002eb8:	20001670 	.word	0x20001670
 8002ebc:	20001674 	.word	0x20001674

08002ec0 <ApNr_100>:

// ApNr 100
// turn on onboard LED, if last byte of L7_SDU is not 0
// send back received L7_SDU
void ApNr_100(uint8_t L7_SDU[], uint8_t L7_SDU_send[]){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
	if(L7_SDU[7] != 0){
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3307      	adds	r3, #7
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <ApNr_100+0x20>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	2120      	movs	r1, #32
 8002ed8:	480f      	ldr	r0, [pc, #60]	; (8002f18 <ApNr_100+0x58>)
 8002eda:	f002 f889 	bl	8004ff0 <HAL_GPIO_WritePin>
 8002ede:	e004      	b.n	8002eea <ApNr_100+0x2a>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2120      	movs	r1, #32
 8002ee4:	480c      	ldr	r0, [pc, #48]	; (8002f18 <ApNr_100+0x58>)
 8002ee6:	f002 f883 	bl	8004ff0 <HAL_GPIO_WritePin>
		}

		for(int i = 0; i < L7_SDU_size; i++){ // copy L7_SDU to L7_SDU_send
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	e00a      	b.n	8002f06 <ApNr_100+0x46>
			L7_SDU_send[i] = L7_SDU[i];
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	441a      	add	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6839      	ldr	r1, [r7, #0]
 8002efa:	440b      	add	r3, r1
 8002efc:	7812      	ldrb	r2, [r2, #0]
 8002efe:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < L7_SDU_size; i++){ // copy L7_SDU to L7_SDU_send
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3301      	adds	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b07      	cmp	r3, #7
 8002f0a:	ddf1      	ble.n	8002ef0 <ApNr_100+0x30>
		}
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40020000 	.word	0x40020000

08002f1c <ApNr_101>:

// ApNr 101
// ignore information in L7_SDU
// send back button presses counter in L7_SDU[7], reset counter
void ApNr_101(uint8_t L7_SDU_send[]){
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	L7_SDU_send[7] = cnt; // store button presses
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3307      	adds	r3, #7
 8002f28:	4a05      	ldr	r2, [pc, #20]	; (8002f40 <ApNr_101+0x24>)
 8002f2a:	7812      	ldrb	r2, [r2, #0]
 8002f2c:	701a      	strb	r2, [r3, #0]
	cnt = 0; // reset counter
 8002f2e:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <ApNr_101+0x24>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	20001338 	.word	0x20001338

08002f44 <ApNr_102>:

// ignore information in L7_SDU
// send back lower 64 bits of device UID
void ApNr_102(uint8_t L7_SDU_send[]){
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	uint32_t UIDw0 = HAL_GetUIDw0(); // get bits 0 to 31
 8002f4c:	f001 f994 	bl	8004278 <HAL_GetUIDw0>
 8002f50:	4603      	mov	r3, r0
 8002f52:	60fb      	str	r3, [r7, #12]
	uint32_t UIDw1 = HAL_GetUIDw1(); // get bits 32 to 63
 8002f54:	f001 f99c 	bl	8004290 <HAL_GetUIDw1>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68fa      	ldr	r2, [r7, #12]

	memcpy(L7_SDU_send, &UIDw0, 4); // copy bits 0 to 31
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	601a      	str	r2, [r3, #0]
	memcpy(L7_SDU_send+4, &UIDw1, 4); // copy bits 32 to 63
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3304      	adds	r3, #4
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	601a      	str	r2, [r3, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <ApNr_103>:

// ignore information in L7_SDU
// send back upper bits 64 to 95 of device UID
void ApNr_103(uint8_t L7_SDU_send[]){
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
	uint32_t UIDw2 = HAL_GetUIDw2(); // get bits 64 to 95
 8002f7a:	f001 f995 	bl	80042a8 <HAL_GetUIDw2>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	68fa      	ldr	r2, [r7, #12]

	memcpy(L7_SDU_send, &UIDw2, 4); // copy bits 64 to 95
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	601a      	str	r2, [r3, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <crcSlow>:

// crc algorithm
// source: https://barrgroup.com/embedded-systems/how-to/crc-calculation-c-code
crc crcSlow(uint8_t const message[], int nBytes) {
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
    crc  remainder = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	75fb      	strb	r3, [r7, #23]

    // perform modulo-2 division, a byte at a time.
    for (int byte = 0; byte < nBytes; ++byte){
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	e022      	b.n	8002fea <crcSlow+0x5a>

        // bring the next byte into the remainder.
        remainder ^= (message[byte] << (WIDTH - 8));
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	4413      	add	r3, r2
 8002faa:	781a      	ldrb	r2, [r3, #0]
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	4053      	eors	r3, r2
 8002fb0:	75fb      	strb	r3, [r7, #23]

        // perform modulo-2 division, a bit at a time.
        for (uint8_t bit = 8; bit > 0; --bit){
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	73fb      	strb	r3, [r7, #15]
 8002fb6:	e012      	b.n	8002fde <crcSlow+0x4e>
            // try to divide the current data bit.
            if (remainder & TOPBIT){
 8002fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	da08      	bge.n	8002fd2 <crcSlow+0x42>
                remainder = (remainder << 1) ^ POLYNOMIAL;
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	b25b      	sxtb	r3, r3
 8002fc6:	f083 0364 	eor.w	r3, r3, #100	; 0x64
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	b25b      	sxtb	r3, r3
 8002fce:	75fb      	strb	r3, [r7, #23]
 8002fd0:	e002      	b.n	8002fd8 <crcSlow+0x48>
            } else {
                remainder = (remainder << 1);
 8002fd2:	7dfb      	ldrb	r3, [r7, #23]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	75fb      	strb	r3, [r7, #23]
        for (uint8_t bit = 8; bit > 0; --bit){
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e9      	bne.n	8002fb8 <crcSlow+0x28>
    for (int byte = 0; byte < nBytes; ++byte){
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	dbd8      	blt.n	8002fa4 <crcSlow+0x14>
            }
        }
    }

    // The final remainder is the CRC result.
    return (remainder);
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003004:	b672      	cpsid	i
}
 8003006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003008:	e7fe      	b.n	8003008 <Error_Handler+0x8>

0800300a <initMaze>:
#include "prng.h"

Maze maze;
Path path;

void initMaze(Maze* maze, uint8_t rows, uint8_t cols, uint8_t startX, uint8_t startY, uint8_t exitX, uint8_t exitY) {
 800300a:	b590      	push	{r4, r7, lr}
 800300c:	b087      	sub	sp, #28
 800300e:	af02      	add	r7, sp, #8
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	4608      	mov	r0, r1
 8003014:	4611      	mov	r1, r2
 8003016:	461a      	mov	r2, r3
 8003018:	4603      	mov	r3, r0
 800301a:	70fb      	strb	r3, [r7, #3]
 800301c:	460b      	mov	r3, r1
 800301e:	70bb      	strb	r3, [r7, #2]
 8003020:	4613      	mov	r3, r2
 8003022:	707b      	strb	r3, [r7, #1]
    uint8_t r; /* index variable */

    /* check input */
    if (rows <= 0) exit(1); /* number of rows must be greater than 0 */
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <initMaze+0x26>
 800302a:	2001      	movs	r0, #1
 800302c:	f005 fa86 	bl	800853c <exit>
    if (cols <= 0) exit(1); /* number of cols must be greater than 0 */
 8003030:	78bb      	ldrb	r3, [r7, #2]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <initMaze+0x32>
 8003036:	2001      	movs	r0, #1
 8003038:	f005 fa80 	bl	800853c <exit>

    /* allocate memory */
    maze->grid = (uint8_t**) malloc(rows * sizeof(uint8_t*));
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4618      	mov	r0, r3
 8003042:	f005 fa8d 	bl	8008560 <malloc>
 8003046:	4603      	mov	r3, r0
 8003048:	461a      	mov	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	625a      	str	r2, [r3, #36]	; 0x24
    for (r = 0; r < rows; r++) {
 800304e:	2300      	movs	r3, #0
 8003050:	73fb      	strb	r3, [r7, #15]
 8003052:	e00d      	b.n	8003070 <initMaze+0x66>
        maze->grid[r] = (uint8_t*) malloc(cols * sizeof(uint8_t));
 8003054:	78b9      	ldrb	r1, [r7, #2]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	18d4      	adds	r4, r2, r3
 8003060:	4608      	mov	r0, r1
 8003062:	f005 fa7d 	bl	8008560 <malloc>
 8003066:	4603      	mov	r3, r0
 8003068:	6023      	str	r3, [r4, #0]
    for (r = 0; r < rows; r++) {
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	3301      	adds	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	429a      	cmp	r2, r3
 8003076:	d3ed      	bcc.n	8003054 <initMaze+0x4a>
    }

    /* set attrs */
    maze->rows = rows;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	701a      	strb	r2, [r3, #0]
    maze->cols = cols;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	78ba      	ldrb	r2, [r7, #2]
 8003082:	705a      	strb	r2, [r3, #1]
    resetMaze(maze, startX, startY, exitX, exitY);
 8003084:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8003088:	f897 2020 	ldrb.w	r2, [r7, #32]
 800308c:	7879      	ldrb	r1, [r7, #1]
 800308e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	4603      	mov	r3, r0
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f804 	bl	80030a4 <resetMaze>
}
 800309c:	bf00      	nop
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd90      	pop	{r4, r7, pc}

080030a4 <resetMaze>:

void resetMaze(Maze* maze, uint8_t startX, uint8_t startY, uint8_t exitX, uint8_t exitY) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	4608      	mov	r0, r1
 80030ae:	4611      	mov	r1, r2
 80030b0:	461a      	mov	r2, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	70fb      	strb	r3, [r7, #3]
 80030b6:	460b      	mov	r3, r1
 80030b8:	70bb      	strb	r3, [r7, #2]
 80030ba:	4613      	mov	r3, r2
 80030bc:	707b      	strb	r3, [r7, #1]
    uint8_t r, c; /* index variables */

    /* check input */
    if (exitX >= maze->cols || exitY >= maze->rows) exit(1);                                            /* exit point has to be inside the maze */
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	785b      	ldrb	r3, [r3, #1]
 80030c2:	787a      	ldrb	r2, [r7, #1]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d204      	bcs.n	80030d2 <resetMaze+0x2e>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	7e3a      	ldrb	r2, [r7, #24]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <resetMaze+0x34>
 80030d2:	2001      	movs	r0, #1
 80030d4:	f005 fa32 	bl	800853c <exit>
    if (!((startX == 0 || startX == maze->cols-1) || (startY == 0 || startY == maze->rows-1))) exit(1); /* start point has to be on edge of maze */
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d011      	beq.n	8003102 <resetMaze+0x5e>
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	785b      	ldrb	r3, [r3, #1]
 80030e4:	3b01      	subs	r3, #1
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d00b      	beq.n	8003102 <resetMaze+0x5e>
 80030ea:	78bb      	ldrb	r3, [r7, #2]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <resetMaze+0x5e>
 80030f0:	78ba      	ldrb	r2, [r7, #2]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d002      	beq.n	8003102 <resetMaze+0x5e>
 80030fc:	2001      	movs	r0, #1
 80030fe:	f005 fa1d 	bl	800853c <exit>
    if (!((exitX == 0 || exitX == maze->cols-1) || (exitY == 0 || exitY == maze->rows-1))) exit(1);     /* exit point has to be on edge of maze */
 8003102:	787b      	ldrb	r3, [r7, #1]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d011      	beq.n	800312c <resetMaze+0x88>
 8003108:	787a      	ldrb	r2, [r7, #1]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	785b      	ldrb	r3, [r3, #1]
 800310e:	3b01      	subs	r3, #1
 8003110:	429a      	cmp	r2, r3
 8003112:	d00b      	beq.n	800312c <resetMaze+0x88>
 8003114:	7e3b      	ldrb	r3, [r7, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d008      	beq.n	800312c <resetMaze+0x88>
 800311a:	7e3a      	ldrb	r2, [r7, #24]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	3b01      	subs	r3, #1
 8003122:	429a      	cmp	r2, r3
 8003124:	d002      	beq.n	800312c <resetMaze+0x88>
 8003126:	2001      	movs	r0, #1
 8003128:	f005 fa08 	bl	800853c <exit>
    if ((startX == 0 || startX == maze->cols-1) && (startY == 0 || startY == maze->rows-1)) exit(1);    /* start point must not be on corner of maze */
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <resetMaze+0x9a>
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	785b      	ldrb	r3, [r3, #1]
 8003138:	3b01      	subs	r3, #1
 800313a:	429a      	cmp	r2, r3
 800313c:	d10b      	bne.n	8003156 <resetMaze+0xb2>
 800313e:	78bb      	ldrb	r3, [r7, #2]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <resetMaze+0xac>
 8003144:	78ba      	ldrb	r2, [r7, #2]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	3b01      	subs	r3, #1
 800314c:	429a      	cmp	r2, r3
 800314e:	d102      	bne.n	8003156 <resetMaze+0xb2>
 8003150:	2001      	movs	r0, #1
 8003152:	f005 f9f3 	bl	800853c <exit>
    if ((exitX == 0 || exitX == maze->cols-1) && (exitY == 0 || exitY == maze->rows-1)) exit(1);        /* exit point must not be on corner of maze */
 8003156:	787b      	ldrb	r3, [r7, #1]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <resetMaze+0xc4>
 800315c:	787a      	ldrb	r2, [r7, #1]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	785b      	ldrb	r3, [r3, #1]
 8003162:	3b01      	subs	r3, #1
 8003164:	429a      	cmp	r2, r3
 8003166:	d10b      	bne.n	8003180 <resetMaze+0xdc>
 8003168:	7e3b      	ldrb	r3, [r7, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <resetMaze+0xd6>
 800316e:	7e3a      	ldrb	r2, [r7, #24]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	3b01      	subs	r3, #1
 8003176:	429a      	cmp	r2, r3
 8003178:	d102      	bne.n	8003180 <resetMaze+0xdc>
 800317a:	2001      	movs	r0, #1
 800317c:	f005 f9de 	bl	800853c <exit>

    /* set attrs */
    maze->start.x = startX;
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	605a      	str	r2, [r3, #4]
    maze->start.y = startY;
 8003186:	78ba      	ldrb	r2, [r7, #2]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	609a      	str	r2, [r3, #8]
    maze->start.prevX = -1;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003192:	60da      	str	r2, [r3, #12]
    maze->start.prevY = -1;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800319a:	611a      	str	r2, [r3, #16]
    maze->exit.x = exitX;
 800319c:	787a      	ldrb	r2, [r7, #1]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	615a      	str	r2, [r3, #20]
    maze->exit.y = exitY;
 80031a2:	7e3a      	ldrb	r2, [r7, #24]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	619a      	str	r2, [r3, #24]
    maze->exit.prevX = -1;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031ae:	61da      	str	r2, [r3, #28]
    maze->exit.prevY = -1;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031b6:	621a      	str	r2, [r3, #32]

    /* init maze grid as WALLs */
    for (r = 0; r < maze->rows; r++) {
 80031b8:	2300      	movs	r3, #0
 80031ba:	73fb      	strb	r3, [r7, #15]
 80031bc:	e017      	b.n	80031ee <resetMaze+0x14a>
        for (c = 0; c < maze->cols; c++) {
 80031be:	2300      	movs	r3, #0
 80031c0:	73bb      	strb	r3, [r7, #14]
 80031c2:	e00c      	b.n	80031de <resetMaze+0x13a>
            maze->grid[r][c] = WALL;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	7bbb      	ldrb	r3, [r7, #14]
 80031d2:	4413      	add	r3, r2
 80031d4:	2201      	movs	r2, #1
 80031d6:	701a      	strb	r2, [r3, #0]
        for (c = 0; c < maze->cols; c++) {
 80031d8:	7bbb      	ldrb	r3, [r7, #14]
 80031da:	3301      	adds	r3, #1
 80031dc:	73bb      	strb	r3, [r7, #14]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	785b      	ldrb	r3, [r3, #1]
 80031e2:	7bba      	ldrb	r2, [r7, #14]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d3ed      	bcc.n	80031c4 <resetMaze+0x120>
    for (r = 0; r < maze->rows; r++) {
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	3301      	adds	r3, #1
 80031ec:	73fb      	strb	r3, [r7, #15]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d3e2      	bcc.n	80031be <resetMaze+0x11a>
        }
    }
}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <initPath>:

void initPath(Path* path, uint16_t length) {
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	460b      	mov	r3, r1
 800320c:	807b      	strh	r3, [r7, #2]
    path->p = (Point *) malloc(length * sizeof(Point));
 800320e:	887b      	ldrh	r3, [r7, #2]
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	4618      	mov	r0, r3
 8003214:	f005 f9a4 	bl	8008560 <malloc>
 8003218:	4603      	mov	r3, r0
 800321a:	461a      	mov	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	601a      	str	r2, [r3, #0]
    
    if (path == NULL) exit(1);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d102      	bne.n	800322c <initPath+0x2a>
 8003226:	2001      	movs	r0, #1
 8003228:	f005 f988 	bl	800853c <exit>
    
    path->size = length;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	809a      	strh	r2, [r3, #4]
    resetPath(path);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f804 	bl	8003240 <resetPath>
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <resetPath>:

void resetPath(Path* path) {
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
    for (uint16_t i = 0; i < path->size; i++) {
 8003248:	2300      	movs	r3, #0
 800324a:	81fb      	strh	r3, [r7, #14]
 800324c:	e020      	b.n	8003290 <resetPath+0x50>
        path->p[i].x = 0;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	89fb      	ldrh	r3, [r7, #14]
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	4413      	add	r3, r2
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
        path->p[i].y = 0;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	89fb      	ldrh	r3, [r7, #14]
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	4413      	add	r3, r2
 8003266:	2200      	movs	r2, #0
 8003268:	605a      	str	r2, [r3, #4]
        path->p[i].prevX = -1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	89fb      	ldrh	r3, [r7, #14]
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	4413      	add	r3, r2
 8003274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003278:	609a      	str	r2, [r3, #8]
        path->p[i].prevY = -1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	89fb      	ldrh	r3, [r7, #14]
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	4413      	add	r3, r2
 8003284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003288:	60da      	str	r2, [r3, #12]
    for (uint16_t i = 0; i < path->size; i++) {
 800328a:	89fb      	ldrh	r3, [r7, #14]
 800328c:	3301      	adds	r3, #1
 800328e:	81fb      	strh	r3, [r7, #14]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	889b      	ldrh	r3, [r3, #4]
 8003294:	89fa      	ldrh	r2, [r7, #14]
 8003296:	429a      	cmp	r2, r3
 8003298:	d3d9      	bcc.n	800324e <resetPath+0xe>
    }

    path->count = 0;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	80da      	strh	r2, [r3, #6]
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <pathPush>:

void pathPush(Path* path, Point* point) {
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
    if (path->count >= path->size) exit(1);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	88da      	ldrh	r2, [r3, #6]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	889b      	ldrh	r3, [r3, #4]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d302      	bcc.n	80032c8 <pathPush+0x1c>
 80032c2:	2001      	movs	r0, #1
 80032c4:	f005 f93a 	bl	800853c <exit>

    path->p[path->count++] = *point;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	88db      	ldrh	r3, [r3, #6]
 80032d0:	1c59      	adds	r1, r3, #1
 80032d2:	b288      	uxth	r0, r1
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	80c8      	strh	r0, [r1, #6]
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	441a      	add	r2, r3
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	4614      	mov	r4, r2
 80032e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd90      	pop	{r4, r7, pc}
	...

080032f0 <carveMaze>:

void carveMaze(Maze *maze, uint8_t x, uint8_t y) {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	; 0x28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	70fb      	strb	r3, [r7, #3]
 80032fc:	4613      	mov	r3, r2
 80032fe:	70bb      	strb	r3, [r7, #2]
    int x1, y1; /* coords of next cell */
    int x2, y2; /* coords of cell after next cell */
    int dx, dy; /* direction deltas */
    int dir = 0; /* direction. 0 = right; 1 = down; 2 = left; else = up */
 8003300:	2300      	movs	r3, #0
 8003302:	61fb      	str	r3, [r7, #28]
    int count = 0; /* counts directions failed */
 8003304:	2300      	movs	r3, #0
 8003306:	61bb      	str	r3, [r7, #24]

    /* get initial direction */
    dir = getRand(&rng) % 4;
 8003308:	4850      	ldr	r0, [pc, #320]	; (800344c <carveMaze+0x15c>)
 800330a:	f000 fada 	bl	80038c2 <getRand>
 800330e:	4603      	mov	r3, r0
 8003310:	425a      	negs	r2, r3
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	f002 0203 	and.w	r2, r2, #3
 800331a:	bf58      	it	pl
 800331c:	4253      	negpl	r3, r2
 800331e:	61fb      	str	r3, [r7, #28]

    /* try all 4 directions */
    while (count < 4) {
 8003320:	e08a      	b.n	8003438 <carveMaze+0x148>
        /* reset directions */
        dx = 0; dy = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
 8003326:	2300      	movs	r3, #0
 8003328:	623b      	str	r3, [r7, #32]

        /* translate dir to direction deltas */
        switch (dir) {
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d00f      	beq.n	8003350 <carveMaze+0x60>
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b02      	cmp	r3, #2
 8003334:	dc10      	bgt.n	8003358 <carveMaze+0x68>
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <carveMaze+0x54>
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d003      	beq.n	800334a <carveMaze+0x5a>
 8003342:	e009      	b.n	8003358 <carveMaze+0x68>
            case 0:  dx = 1;  break; /* right */
 8003344:	2301      	movs	r3, #1
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
 8003348:	e00a      	b.n	8003360 <carveMaze+0x70>
            case 1:  dy = 1;  break; /* down */
 800334a:	2301      	movs	r3, #1
 800334c:	623b      	str	r3, [r7, #32]
 800334e:	e007      	b.n	8003360 <carveMaze+0x70>
            case 2:  dx = -1; break; /* left */
 8003350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
 8003356:	e003      	b.n	8003360 <carveMaze+0x70>
            default: dy = -1; break; /* up */
 8003358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800335c:	623b      	str	r3, [r7, #32]
 800335e:	bf00      	nop
        }

        /* calculate new positions based on direction */
        x1 = x + dx;
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003364:	4413      	add	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
        y1 = y + dy;
 8003368:	78bb      	ldrb	r3, [r7, #2]
 800336a:	6a3a      	ldr	r2, [r7, #32]
 800336c:	4413      	add	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        x2 = x1 + dx;
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	4413      	add	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
        y2 = y1 + dy;
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	4413      	add	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]
        
        /* check if next two cells are in bounds and are walls */
        if (x2 >= 0 && x2 < maze->cols /* next cell in bounds? */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	db4b      	blt.n	800341e <carveMaze+0x12e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	785b      	ldrb	r3, [r3, #1]
 800338a:	461a      	mov	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4293      	cmp	r3, r2
 8003390:	da45      	bge.n	800341e <carveMaze+0x12e>
         && y2 >= 0 && y2 < maze->rows /* next next cell in bounds? */
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	db42      	blt.n	800341e <carveMaze+0x12e>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4293      	cmp	r3, r2
 80033a2:	da3c      	bge.n	800341e <carveMaze+0x12e>
         && maze->grid[y1][x1] == WALL /* next cell wall? */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	4413      	add	r3, r2
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d131      	bne.n	800341e <carveMaze+0x12e>
         && maze->grid[y2][x2] == WALL) { /* next next cell wall? */   
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4413      	add	r3, r2
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d126      	bne.n	800341e <carveMaze+0x12e>

            /* carve path */
            maze->grid[y1][x1] = PATH;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	4413      	add	r3, r2
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
            maze->grid[y2][x2] = PATH;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4413      	add	r3, r2
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]

            /* move to new position */
            x = x2; y = y2;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	70fb      	strb	r3, [r7, #3]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	70bb      	strb	r3, [r7, #2]

            /* get new direction and reset counter */
            dir = getRand(&rng) % 4;
 8003400:	4812      	ldr	r0, [pc, #72]	; (800344c <carveMaze+0x15c>)
 8003402:	f000 fa5e 	bl	80038c2 <getRand>
 8003406:	4603      	mov	r3, r0
 8003408:	425a      	negs	r2, r3
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	f002 0203 	and.w	r2, r2, #3
 8003412:	bf58      	it	pl
 8003414:	4253      	negpl	r3, r2
 8003416:	61fb      	str	r3, [r7, #28]
            count = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	e00c      	b.n	8003438 <carveMaze+0x148>
        } else {
            /* change direction and increment counter if carving not possible */
            dir = (dir + 1) % 4;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3301      	adds	r3, #1
 8003422:	425a      	negs	r2, r3
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	f002 0203 	and.w	r2, r2, #3
 800342c:	bf58      	it	pl
 800342e:	4253      	negpl	r3, r2
 8003430:	61fb      	str	r3, [r7, #28]
            count++;
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	3301      	adds	r3, #1
 8003436:	61bb      	str	r3, [r7, #24]
    while (count < 4) {
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	2b03      	cmp	r3, #3
 800343c:	f77f af71 	ble.w	8003322 <carveMaze+0x32>
        }
    }
}
 8003440:	bf00      	nop
 8003442:	bf00      	nop
 8003444:	3728      	adds	r7, #40	; 0x28
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	200016c0 	.word	0x200016c0

08003450 <generateMaze>:

void generateMaze(Maze* maze) {
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
    uint8_t x, y;
    
    /* carve the maze */
    for(y = 1; y < maze->rows; y += 2) {
 8003458:	2301      	movs	r3, #1
 800345a:	73bb      	strb	r3, [r7, #14]
 800345c:	e013      	b.n	8003486 <generateMaze+0x36>
        for(x = 1; x < maze->cols; x += 2) {
 800345e:	2301      	movs	r3, #1
 8003460:	73fb      	strb	r3, [r7, #15]
 8003462:	e008      	b.n	8003476 <generateMaze+0x26>
            carveMaze(maze, x, y);
 8003464:	7bba      	ldrb	r2, [r7, #14]
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff ff40 	bl	80032f0 <carveMaze>
        for(x = 1; x < maze->cols; x += 2) {
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	3302      	adds	r3, #2
 8003474:	73fb      	strb	r3, [r7, #15]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	785b      	ldrb	r3, [r3, #1]
 800347a:	7bfa      	ldrb	r2, [r7, #15]
 800347c:	429a      	cmp	r2, r3
 800347e:	d3f1      	bcc.n	8003464 <generateMaze+0x14>
    for(y = 1; y < maze->rows; y += 2) {
 8003480:	7bbb      	ldrb	r3, [r7, #14]
 8003482:	3302      	adds	r3, #2
 8003484:	73bb      	strb	r3, [r7, #14]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	7bba      	ldrb	r2, [r7, #14]
 800348c:	429a      	cmp	r2, r3
 800348e:	d3e6      	bcc.n	800345e <generateMaze+0xe>
        }
    }
    
    /* set start and exit. */
    maze->grid[maze->start.y][maze->start.x] = START;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6852      	ldr	r2, [r2, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	2202      	movs	r2, #2
 80034a6:	701a      	strb	r2, [r3, #0]
    maze->grid[maze->exit.y][maze->exit.x] = EXIT;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6952      	ldr	r2, [r2, #20]
 80034ba:	4413      	add	r3, r2
 80034bc:	2203      	movs	r2, #3
 80034be:	701a      	strb	r2, [r3, #0]
}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <solveMaze>:

void solveMaze(Maze* maze, Path* path) {
 80034c8:	b590      	push	{r4, r7, lr}
 80034ca:	b0b3      	sub	sp, #204	; 0xcc
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]

    if (maze == NULL || maze->grid == NULL || path == NULL) exit(1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d006      	beq.n	80034e6 <solveMaze+0x1e>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <solveMaze+0x1e>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d102      	bne.n	80034ec <solveMaze+0x24>
 80034e6:	2001      	movs	r0, #1
 80034e8:	f005 f828 	bl	800853c <exit>

    Point current; /* current point in maze */
    Point next; /* next point to move to */
    Point directions[4]; /* possible points to reach from current */
    uint16_t i = 0; /* index var */
 80034ec:	2300      	movs	r3, #0
 80034ee:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6

    /* keep track of visited cells */
    bool** visited = malloc(maze->rows * sizeof(bool*));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f005 f831 	bl	8008560 <malloc>
 80034fe:	4603      	mov	r3, r0
 8003500:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    for (i = 0; i < maze->rows; i++) {
 8003504:	2300      	movs	r3, #0
 8003506:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800350a:	e012      	b.n	8003532 <solveMaze+0x6a>
        visited[i] = calloc(maze->cols, sizeof(bool));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	785b      	ldrb	r3, [r3, #1]
 8003510:	4618      	mov	r0, r3
 8003512:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800351c:	18d4      	adds	r4, r2, r3
 800351e:	2101      	movs	r1, #1
 8003520:	f004 ffee 	bl	8008500 <calloc>
 8003524:	4603      	mov	r3, r0
 8003526:	6023      	str	r3, [r4, #0]
    for (i = 0; i < maze->rows; i++) {
 8003528:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800352c:	3301      	adds	r3, #1
 800352e:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 800353c:	429a      	cmp	r2, r3
 800353e:	d3e5      	bcc.n	800350c <solveMaze+0x44>
    }

    /* queue stores next possible points during BFS */
    Point* queue = malloc(maze->rows * maze->cols * sizeof(Point));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	785b      	ldrb	r3, [r3, #1]
 800354a:	fb02 f303 	mul.w	r3, r2, r3
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	4618      	mov	r0, r3
 8003552:	f005 f805 	bl	8008560 <malloc>
 8003556:	4603      	mov	r3, r0
 8003558:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    uint16_t front = 0; /* start of queue where elements are removed */
 800355c:	2300      	movs	r3, #0
 800355e:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
    uint16_t rear = 0; /* end of queue where new elements are added */
 8003562:	2300      	movs	r3, #0
 8003564:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2

    /* enqueue start point and mark it as visited */
    //pathPush(path, &(maze->start));
    queue[rear++] = maze->start;
 8003568:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	f8a7 20c2 	strh.w	r2, [r7, #194]	; 0xc2
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003578:	441a      	add	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4614      	mov	r4, r2
 800357e:	3304      	adds	r3, #4
 8003580:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003582:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    visited[maze->start.y][maze->start.x] = true;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003590:	4413      	add	r3, r2
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6852      	ldr	r2, [r2, #4]
 8003598:	4413      	add	r3, r2
 800359a:	2201      	movs	r2, #1
 800359c:	701a      	strb	r2, [r3, #0]

    /* BFS loop */
    while (front < rear) {
 800359e:	e14c      	b.n	800383a <solveMaze+0x372>
        /* dequeue point */
        current = queue[front++];
 80035a0:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	f8a7 20c4 	strh.w	r2, [r7, #196]	; 0xc4
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80035b0:	4413      	add	r3, r2
 80035b2:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80035b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        /* exit found? */
        if (maze->grid[current.y][current.x] == EXIT) {
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80035ce:	4413      	add	r3, r2
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d17b      	bne.n	80036ce <solveMaze+0x206>
            /* backtrack */
            while (!(current.x == maze->start.x && current.y == maze->start.y)) {
 80035d6:	e055      	b.n	8003684 <solveMaze+0x1bc>
                maze->grid[current.y][current.x] = SOLUTION; /* mark point as solution */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80035ea:	4413      	add	r3, r2
 80035ec:	2204      	movs	r2, #4
 80035ee:	701a      	strb	r2, [r3, #0]
                pathPush(path, &(Point){current.x, current.y, -1, -1}); /* add point to solution path */
 80035f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	f107 0308 	add.w	r3, r7, #8
 800360c:	4619      	mov	r1, r3
 800360e:	6838      	ldr	r0, [r7, #0]
 8003610:	f7ff fe4c 	bl	80032ac <pathPush>

                /* find previous point in path */
                for (i = 0; i < rear; i++) {
 8003614:	2300      	movs	r3, #0
 8003616:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800361a:	e02d      	b.n	8003678 <solveMaze+0x1b0>
                    if (queue[i].x == current.x && queue[i].y == current.y) {
 800361c:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003626:	4413      	add	r3, r2
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800362e:	429a      	cmp	r2, r3
 8003630:	d11d      	bne.n	800366e <solveMaze+0x1a6>
 8003632:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800363c:	4413      	add	r3, r2
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003644:	429a      	cmp	r2, r3
 8003646:	d112      	bne.n	800366e <solveMaze+0x1a6>
                        current.x = queue[i].prevX;
 8003648:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003652:	4413      	add	r3, r2
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                        current.y = queue[i].prevY;
 800365a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003664:	4413      	add	r3, r2
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                        break;
 800366c:	e00a      	b.n	8003684 <solveMaze+0x1bc>
                for (i = 0; i < rear; i++) {
 800366e:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8003672:	3301      	adds	r3, #1
 8003674:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8003678:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 800367c:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8003680:	429a      	cmp	r2, r3
 8003682:	d3cb      	bcc.n	800361c <solveMaze+0x154>
            while (!(current.x == maze->start.x && current.y == maze->start.y)) {
 8003684:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	429a      	cmp	r2, r3
 800368e:	d1a3      	bne.n	80035d8 <solveMaze+0x110>
 8003690:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	429a      	cmp	r2, r3
 800369a:	d19d      	bne.n	80035d8 <solveMaze+0x110>
                    }
                }
            }

            /* mark start and exit in maze */
            maze->grid[maze->start.y][maze->start.x] = START;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6852      	ldr	r2, [r2, #4]
 80036ae:	4413      	add	r3, r2
 80036b0:	2202      	movs	r2, #2
 80036b2:	701a      	strb	r2, [r3, #0]
            maze->grid[maze->exit.y][maze->exit.x] = EXIT;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6952      	ldr	r2, [r2, #20]
 80036c6:	4413      	add	r3, r2
 80036c8:	2203      	movs	r2, #3
 80036ca:	701a      	strb	r2, [r3, #0]

            break; /* exit found and path traced */
 80036cc:	e0be      	b.n	800384c <solveMaze+0x384>
        }

        /* add adjacent cells to queue if they are valid */
        directions[0] = (Point){current.x + 1, current.y, current.x, current.y}; /* right */
 80036ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036d2:	1c58      	adds	r0, r3, #1
 80036d4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80036d8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036e0:	65b8      	str	r0, [r7, #88]	; 0x58
 80036e2:	65f9      	str	r1, [r7, #92]	; 0x5c
 80036e4:	663a      	str	r2, [r7, #96]	; 0x60
 80036e6:	667b      	str	r3, [r7, #100]	; 0x64
        directions[1] = (Point){current.x - 1, current.y, current.x, current.y}; /* left */
 80036e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036ec:	1e58      	subs	r0, r3, #1
 80036ee:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80036f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036fa:	66b8      	str	r0, [r7, #104]	; 0x68
 80036fc:	66f9      	str	r1, [r7, #108]	; 0x6c
 80036fe:	673a      	str	r2, [r7, #112]	; 0x70
 8003700:	677b      	str	r3, [r7, #116]	; 0x74
        directions[2] = (Point){current.x, current.y + 1, current.x, current.y}; /* down */
 8003702:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800370a:	1c59      	adds	r1, r3, #1
 800370c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003710:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003714:	67b8      	str	r0, [r7, #120]	; 0x78
 8003716:	67f9      	str	r1, [r7, #124]	; 0x7c
 8003718:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800371c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        directions[3] = (Point){current.x, current.y - 1, current.x, current.y}; /* up */
 8003720:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003728:	1e59      	subs	r1, r3, #1
 800372a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800372e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003732:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8003736:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 800373a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800373e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

        for (i = 0; i < 4; i++) {
 8003742:	2300      	movs	r3, #0
 8003744:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8003748:	e068      	b.n	800381c <solveMaze+0x354>
            next = directions[i];
 800374a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	33c8      	adds	r3, #200	; 0xc8
 8003752:	443b      	add	r3, r7
 8003754:	3b70      	subs	r3, #112	; 0x70
 8003756:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800375a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800375c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (next.x >= 0 && next.x < maze->cols && next.y >= 0 && next.y < maze->rows) { /* in bounds? */
 8003760:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003764:	2b00      	cmp	r3, #0
 8003766:	db54      	blt.n	8003812 <solveMaze+0x34a>
 8003768:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	7852      	ldrb	r2, [r2, #1]
 8003770:	4293      	cmp	r3, r2
 8003772:	da4e      	bge.n	8003812 <solveMaze+0x34a>
 8003774:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003778:	2b00      	cmp	r3, #0
 800377a:	db4a      	blt.n	8003812 <solveMaze+0x34a>
 800377c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	7812      	ldrb	r2, [r2, #0]
 8003784:	4293      	cmp	r3, r2
 8003786:	da44      	bge.n	8003812 <solveMaze+0x34a>
                if (!visited[next.y][next.x] && (maze->grid[next.y][next.x] == PATH || maze->grid[next.y][next.x] == EXIT)) {
 8003788:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003792:	4413      	add	r3, r2
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800379a:	4413      	add	r3, r2
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	f083 0301 	eor.w	r3, r3, #1
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d034      	beq.n	8003812 <solveMaze+0x34a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80037ba:	4413      	add	r3, r2
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00c      	beq.n	80037dc <solveMaze+0x314>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80037d4:	4413      	add	r3, r2
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d11a      	bne.n	8003812 <solveMaze+0x34a>
                    queue[rear++] = next;  /* enqueue valid adjacent cell */
 80037dc:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	f8a7 20c2 	strh.w	r2, [r7, #194]	; 0xc2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80037ec:	4413      	add	r3, r2
 80037ee:	461c      	mov	r4, r3
 80037f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80037f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    visited[next.y][next.x] = true;
 80037fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003804:	4413      	add	r3, r2
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800380c:	4413      	add	r3, r2
 800380e:	2201      	movs	r2, #1
 8003810:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < 4; i++) {
 8003812:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8003816:	3301      	adds	r3, #1
 8003818:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800381c:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8003820:	2b03      	cmp	r3, #3
 8003822:	d992      	bls.n	800374a <solveMaze+0x282>
                }
            }
        }
        /* break if writing beyond allocated memory */
        if (rear >= maze->rows * maze->cols) break;
 8003824:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	4619      	mov	r1, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	785b      	ldrb	r3, [r3, #1]
 8003832:	fb01 f303 	mul.w	r3, r1, r3
 8003836:	429a      	cmp	r2, r3
 8003838:	da07      	bge.n	800384a <solveMaze+0x382>
    while (front < rear) {
 800383a:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 800383e:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8003842:	429a      	cmp	r2, r3
 8003844:	f4ff aeac 	bcc.w	80035a0 <solveMaze+0xd8>
 8003848:	e000      	b.n	800384c <solveMaze+0x384>
        if (rear >= maze->rows * maze->cols) break;
 800384a:	bf00      	nop
    }

    /* clean up */
    for (i = 0; i < maze->rows; i++) {
 800384c:	2300      	movs	r3, #0
 800384e:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8003852:	e00e      	b.n	8003872 <solveMaze+0x3aa>
        free(visited[i]);
 8003854:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800385e:	4413      	add	r3, r2
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f004 fe84 	bl	8008570 <free>
    for (i = 0; i < maze->rows; i++) {
 8003868:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800386c:	3301      	adds	r3, #1
 800386e:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	b29b      	uxth	r3, r3
 8003878:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 800387c:	429a      	cmp	r2, r3
 800387e:	d3e9      	bcc.n	8003854 <solveMaze+0x38c>
    }
    free(visited);
 8003880:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8003884:	f004 fe74 	bl	8008570 <free>
    free(queue);
 8003888:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800388c:	f004 fe70 	bl	8008570 <free>
}
 8003890:	bf00      	nop
 8003892:	37cc      	adds	r7, #204	; 0xcc
 8003894:	46bd      	mov	sp, r7
 8003896:	bd90      	pop	{r4, r7, pc}

08003898 <initPRNG>:
#include "prng.h"

PseudoRNG rng;

/* init PRNG with a pre-generated list of random numbers */
void initPRNG(PseudoRNG* rng, int* numbers, int size) {
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
    rng->num = numbers;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	601a      	str	r2, [r3, #0]
    rng->ind = 0;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	605a      	str	r2, [r3, #4]
    rng->size = size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	609a      	str	r2, [r3, #8]
}
 80038b6:	bf00      	nop
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <getRand>:

/* get next random number */
int getRand(PseudoRNG *rng) {
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
    rng->ind = (rng->ind + 1) % rng->size;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	3301      	adds	r3, #1
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6892      	ldr	r2, [r2, #8]
 80038d4:	fb93 f1f2 	sdiv	r1, r3, r2
 80038d8:	fb01 f202 	mul.w	r2, r1, r2
 80038dc:	1a9a      	subs	r2, r3, r2
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	605a      	str	r2, [r3, #4]
    return rng->num[rng->ind];
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	4b10      	ldr	r3, [pc, #64]	; (8003948 <HAL_MspInit+0x4c>)
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	4a0f      	ldr	r2, [pc, #60]	; (8003948 <HAL_MspInit+0x4c>)
 800390c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003910:	6453      	str	r3, [r2, #68]	; 0x44
 8003912:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <HAL_MspInit+0x4c>)
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800391a:	607b      	str	r3, [r7, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	4b09      	ldr	r3, [pc, #36]	; (8003948 <HAL_MspInit+0x4c>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	4a08      	ldr	r2, [pc, #32]	; (8003948 <HAL_MspInit+0x4c>)
 8003928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392c:	6413      	str	r3, [r2, #64]	; 0x40
 800392e:	4b06      	ldr	r3, [pc, #24]	; (8003948 <HAL_MspInit+0x4c>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800393a:	2007      	movs	r0, #7
 800393c:	f000 fd90 	bl	8004460 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003940:	bf00      	nop
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40023800 	.word	0x40023800

0800394c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	; 0x28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003954:	f107 0314 	add.w	r3, r7, #20
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	605a      	str	r2, [r3, #4]
 800395e:	609a      	str	r2, [r3, #8]
 8003960:	60da      	str	r2, [r3, #12]
 8003962:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a34      	ldr	r2, [pc, #208]	; (8003a3c <HAL_SPI_MspInit+0xf0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d162      	bne.n	8003a34 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	4b33      	ldr	r3, [pc, #204]	; (8003a40 <HAL_SPI_MspInit+0xf4>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	4a32      	ldr	r2, [pc, #200]	; (8003a40 <HAL_SPI_MspInit+0xf4>)
 8003978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800397c:	6413      	str	r3, [r2, #64]	; 0x40
 800397e:	4b30      	ldr	r3, [pc, #192]	; (8003a40 <HAL_SPI_MspInit+0xf4>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	4b2c      	ldr	r3, [pc, #176]	; (8003a40 <HAL_SPI_MspInit+0xf4>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	4a2b      	ldr	r2, [pc, #172]	; (8003a40 <HAL_SPI_MspInit+0xf4>)
 8003994:	f043 0302 	orr.w	r3, r3, #2
 8003998:	6313      	str	r3, [r2, #48]	; 0x30
 800399a:	4b29      	ldr	r3, [pc, #164]	; (8003a40 <HAL_SPI_MspInit+0xf4>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80039a6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80039aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ac:	2302      	movs	r3, #2
 80039ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b4:	2303      	movs	r3, #3
 80039b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80039b8:	2305      	movs	r3, #5
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039bc:	f107 0314 	add.w	r3, r7, #20
 80039c0:	4619      	mov	r1, r3
 80039c2:	4820      	ldr	r0, [pc, #128]	; (8003a44 <HAL_SPI_MspInit+0xf8>)
 80039c4:	f001 f990 	bl	8004ce8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80039c8:	4b1f      	ldr	r3, [pc, #124]	; (8003a48 <HAL_SPI_MspInit+0xfc>)
 80039ca:	4a20      	ldr	r2, [pc, #128]	; (8003a4c <HAL_SPI_MspInit+0x100>)
 80039cc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80039ce:	4b1e      	ldr	r3, [pc, #120]	; (8003a48 <HAL_SPI_MspInit+0xfc>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039d4:	4b1c      	ldr	r3, [pc, #112]	; (8003a48 <HAL_SPI_MspInit+0xfc>)
 80039d6:	2240      	movs	r2, #64	; 0x40
 80039d8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039da:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <HAL_SPI_MspInit+0xfc>)
 80039dc:	2200      	movs	r2, #0
 80039de:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039e0:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <HAL_SPI_MspInit+0xfc>)
 80039e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039e6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039e8:	4b17      	ldr	r3, [pc, #92]	; (8003a48 <HAL_SPI_MspInit+0xfc>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <HAL_SPI_MspInit+0xfc>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80039f4:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <HAL_SPI_MspInit+0xfc>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80039fa:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <HAL_SPI_MspInit+0xfc>)
 80039fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003a00:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a02:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <HAL_SPI_MspInit+0xfc>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003a08:	480f      	ldr	r0, [pc, #60]	; (8003a48 <HAL_SPI_MspInit+0xfc>)
 8003a0a:	f000 fd6b 	bl	80044e4 <HAL_DMA_Init>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8003a14:	f7ff faf4 	bl	8003000 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a0b      	ldr	r2, [pc, #44]	; (8003a48 <HAL_SPI_MspInit+0xfc>)
 8003a1c:	649a      	str	r2, [r3, #72]	; 0x48
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <HAL_SPI_MspInit+0xfc>)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003a24:	2200      	movs	r2, #0
 8003a26:	2100      	movs	r1, #0
 8003a28:	2024      	movs	r0, #36	; 0x24
 8003a2a:	f000 fd24 	bl	8004476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003a2e:	2024      	movs	r0, #36	; 0x24
 8003a30:	f000 fd3d 	bl	80044ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003a34:	bf00      	nop
 8003a36:	3728      	adds	r7, #40	; 0x28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40003800 	.word	0x40003800
 8003a40:	40023800 	.word	0x40023800
 8003a44:	40020400 	.word	0x40020400
 8003a48:	2000113c 	.word	0x2000113c
 8003a4c:	40026070 	.word	0x40026070

08003a50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a60:	d145      	bne.n	8003aee <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	4b31      	ldr	r3, [pc, #196]	; (8003b2c <HAL_TIM_Base_MspInit+0xdc>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	4a30      	ldr	r2, [pc, #192]	; (8003b2c <HAL_TIM_Base_MspInit+0xdc>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	6413      	str	r3, [r2, #64]	; 0x40
 8003a72:	4b2e      	ldr	r3, [pc, #184]	; (8003b2c <HAL_TIM_Base_MspInit+0xdc>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 8003a7e:	4b2c      	ldr	r3, [pc, #176]	; (8003b30 <HAL_TIM_Base_MspInit+0xe0>)
 8003a80:	4a2c      	ldr	r2, [pc, #176]	; (8003b34 <HAL_TIM_Base_MspInit+0xe4>)
 8003a82:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 8003a84:	4b2a      	ldr	r3, [pc, #168]	; (8003b30 <HAL_TIM_Base_MspInit+0xe0>)
 8003a86:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003a8a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a8c:	4b28      	ldr	r3, [pc, #160]	; (8003b30 <HAL_TIM_Base_MspInit+0xe0>)
 8003a8e:	2240      	movs	r2, #64	; 0x40
 8003a90:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a92:	4b27      	ldr	r3, [pc, #156]	; (8003b30 <HAL_TIM_Base_MspInit+0xe0>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8003a98:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <HAL_TIM_Base_MspInit+0xe0>)
 8003a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a9e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003aa0:	4b23      	ldr	r3, [pc, #140]	; (8003b30 <HAL_TIM_Base_MspInit+0xe0>)
 8003aa2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003aa6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003aa8:	4b21      	ldr	r3, [pc, #132]	; (8003b30 <HAL_TIM_Base_MspInit+0xe0>)
 8003aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003aae:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 8003ab0:	4b1f      	ldr	r3, [pc, #124]	; (8003b30 <HAL_TIM_Base_MspInit+0xe0>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003ab6:	4b1e      	ldr	r3, [pc, #120]	; (8003b30 <HAL_TIM_Base_MspInit+0xe0>)
 8003ab8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003abc:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003abe:	4b1c      	ldr	r3, [pc, #112]	; (8003b30 <HAL_TIM_Base_MspInit+0xe0>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 8003ac4:	481a      	ldr	r0, [pc, #104]	; (8003b30 <HAL_TIM_Base_MspInit+0xe0>)
 8003ac6:	f000 fd0d 	bl	80044e4 <HAL_DMA_Init>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8003ad0:	f7ff fa96 	bl	8003000 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a16      	ldr	r2, [pc, #88]	; (8003b30 <HAL_TIM_Base_MspInit+0xe0>)
 8003ad8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ada:	4a15      	ldr	r2, [pc, #84]	; (8003b30 <HAL_TIM_Base_MspInit+0xe0>)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a13      	ldr	r2, [pc, #76]	; (8003b30 <HAL_TIM_Base_MspInit+0xe0>)
 8003ae4:	621a      	str	r2, [r3, #32]
 8003ae6:	4a12      	ldr	r2, [pc, #72]	; (8003b30 <HAL_TIM_Base_MspInit+0xe0>)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003aec:	e01a      	b.n	8003b24 <HAL_TIM_Base_MspInit+0xd4>
  else if(htim_base->Instance==TIM3)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a11      	ldr	r2, [pc, #68]	; (8003b38 <HAL_TIM_Base_MspInit+0xe8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d115      	bne.n	8003b24 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003af8:	2300      	movs	r3, #0
 8003afa:	60bb      	str	r3, [r7, #8]
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_TIM_Base_MspInit+0xdc>)
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	4a0a      	ldr	r2, [pc, #40]	; (8003b2c <HAL_TIM_Base_MspInit+0xdc>)
 8003b02:	f043 0302 	orr.w	r3, r3, #2
 8003b06:	6413      	str	r3, [r2, #64]	; 0x40
 8003b08:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <HAL_TIM_Base_MspInit+0xdc>)
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b14:	2200      	movs	r2, #0
 8003b16:	2100      	movs	r1, #0
 8003b18:	201d      	movs	r0, #29
 8003b1a:	f000 fcac 	bl	8004476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b1e:	201d      	movs	r0, #29
 8003b20:	f000 fcc5 	bl	80044ae <HAL_NVIC_EnableIRQ>
}
 8003b24:	bf00      	nop
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	2000122c 	.word	0x2000122c
 8003b34:	40026028 	.word	0x40026028
 8003b38:	40000400 	.word	0x40000400

08003b3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b44:	f107 030c 	add.w	r3, r7, #12
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	609a      	str	r2, [r3, #8]
 8003b50:	60da      	str	r2, [r3, #12]
 8003b52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5c:	d11e      	bne.n	8003b9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <HAL_TIM_MspPostInit+0x68>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	4a0f      	ldr	r2, [pc, #60]	; (8003ba4 <HAL_TIM_MspPostInit+0x68>)
 8003b68:	f043 0302 	orr.w	r3, r3, #2
 8003b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ba4 <HAL_TIM_MspPostInit+0x68>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b80:	2302      	movs	r3, #2
 8003b82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b90:	f107 030c 	add.w	r3, r7, #12
 8003b94:	4619      	mov	r1, r3
 8003b96:	4804      	ldr	r0, [pc, #16]	; (8003ba8 <HAL_TIM_MspPostInit+0x6c>)
 8003b98:	f001 f8a6 	bl	8004ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003b9c:	bf00      	nop
 8003b9e:	3720      	adds	r7, #32
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	40020400 	.word	0x40020400

08003bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08c      	sub	sp, #48	; 0x30
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb4:	f107 031c 	add.w	r3, r7, #28
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	609a      	str	r2, [r3, #8]
 8003bc0:	60da      	str	r2, [r3, #12]
 8003bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a3a      	ldr	r2, [pc, #232]	; (8003cb4 <HAL_UART_MspInit+0x108>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d135      	bne.n	8003c3a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	4b39      	ldr	r3, [pc, #228]	; (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	4a38      	ldr	r2, [pc, #224]	; (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003bd8:	f043 0310 	orr.w	r3, r3, #16
 8003bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bde:	4b36      	ldr	r3, [pc, #216]	; (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	f003 0310 	and.w	r3, r3, #16
 8003be6:	61bb      	str	r3, [r7, #24]
 8003be8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	4b32      	ldr	r3, [pc, #200]	; (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	4a31      	ldr	r2, [pc, #196]	; (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfa:	4b2f      	ldr	r3, [pc, #188]	; (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c14:	2303      	movs	r3, #3
 8003c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c18:	2307      	movs	r3, #7
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c1c:	f107 031c 	add.w	r3, r7, #28
 8003c20:	4619      	mov	r1, r3
 8003c22:	4826      	ldr	r0, [pc, #152]	; (8003cbc <HAL_UART_MspInit+0x110>)
 8003c24:	f001 f860 	bl	8004ce8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	2025      	movs	r0, #37	; 0x25
 8003c2e:	f000 fc22 	bl	8004476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c32:	2025      	movs	r0, #37	; 0x25
 8003c34:	f000 fc3b 	bl	80044ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c38:	e038      	b.n	8003cac <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a20      	ldr	r2, [pc, #128]	; (8003cc0 <HAL_UART_MspInit+0x114>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d133      	bne.n	8003cac <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c44:	2300      	movs	r3, #0
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	4a1a      	ldr	r2, [pc, #104]	; (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c52:	6413      	str	r3, [r2, #64]	; 0x40
 8003c54:	4b18      	ldr	r3, [pc, #96]	; (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	4b14      	ldr	r3, [pc, #80]	; (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	4a13      	ldr	r2, [pc, #76]	; (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003c70:	4b11      	ldr	r3, [pc, #68]	; (8003cb8 <HAL_UART_MspInit+0x10c>)
 8003c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003c7c:	230c      	movs	r3, #12
 8003c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c80:	2302      	movs	r3, #2
 8003c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c8c:	2307      	movs	r3, #7
 8003c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c90:	f107 031c 	add.w	r3, r7, #28
 8003c94:	4619      	mov	r1, r3
 8003c96:	4809      	ldr	r0, [pc, #36]	; (8003cbc <HAL_UART_MspInit+0x110>)
 8003c98:	f001 f826 	bl	8004ce8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	2026      	movs	r0, #38	; 0x26
 8003ca2:	f000 fbe8 	bl	8004476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ca6:	2026      	movs	r0, #38	; 0x26
 8003ca8:	f000 fc01 	bl	80044ae <HAL_NVIC_EnableIRQ>
}
 8003cac:	bf00      	nop
 8003cae:	3730      	adds	r7, #48	; 0x30
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40011000 	.word	0x40011000
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	40020000 	.word	0x40020000
 8003cc0:	40004400 	.word	0x40004400

08003cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cc8:	e7fe      	b.n	8003cc8 <NMI_Handler+0x4>

08003cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cce:	e7fe      	b.n	8003cce <HardFault_Handler+0x4>

08003cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cd4:	e7fe      	b.n	8003cd4 <MemManage_Handler+0x4>

08003cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cda:	e7fe      	b.n	8003cda <BusFault_Handler+0x4>

08003cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ce0:	e7fe      	b.n	8003ce0 <UsageFault_Handler+0x4>

08003ce2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ce6:	bf00      	nop
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d02:	bf00      	nop
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d10:	f000 fa6e 	bl	80041f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d14:	bf00      	nop
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R_N1_Pin);
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	f001 f981 	bl	8005024 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003d22:	bf00      	nop
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R_N2_Pin);
 8003d2a:	2002      	movs	r0, #2
 8003d2c:	f001 f97a 	bl	8005024 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003d30:	bf00      	nop
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R_N3_Pin);
 8003d38:	2004      	movs	r0, #4
 8003d3a:	f001 f973 	bl	8005024 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R_N4_Pin);
 8003d46:	2008      	movs	r0, #8
 8003d48:	f001 f96c 	bl	8005024 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003d4c:	bf00      	nop
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8003d54:	4802      	ldr	r0, [pc, #8]	; (8003d60 <DMA1_Stream1_IRQHandler+0x10>)
 8003d56:	f000 fd5d 	bl	8004814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003d5a:	bf00      	nop
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	2000122c 	.word	0x2000122c

08003d64 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003d68:	4802      	ldr	r0, [pc, #8]	; (8003d74 <DMA1_Stream4_IRQHandler+0x10>)
 8003d6a:	f000 fd53 	bl	8004814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	2000113c 	.word	0x2000113c

08003d78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003d7c:	4802      	ldr	r0, [pc, #8]	; (8003d88 <TIM3_IRQHandler+0x10>)
 8003d7e:	f002 fd2b 	bl	80067d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	200011e4 	.word	0x200011e4

08003d8c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003d90:	4802      	ldr	r0, [pc, #8]	; (8003d9c <SPI2_IRQHandler+0x10>)
 8003d92:	f001 ff37 	bl	8005c04 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	200010e4 	.word	0x200010e4

08003da0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003da4:	4802      	ldr	r0, [pc, #8]	; (8003db0 <USART1_IRQHandler+0x10>)
 8003da6:	f003 fcbb 	bl	8007720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	2000128c 	.word	0x2000128c

08003db4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003db8:	4802      	ldr	r0, [pc, #8]	; (8003dc4 <USART2_IRQHandler+0x10>)
 8003dba:	f003 fcb1 	bl	8007720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	200012d0 	.word	0x200012d0

08003dc8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003dcc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003dd0:	f001 f928 	bl	8005024 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003dd4:	bf00      	nop
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003de2:	f004 fc91 	bl	8008708 <__errno>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2216      	movs	r2, #22
 8003dea:	601a      	str	r2, [r3, #0]
  return -1;
 8003dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <_exit>:

void _exit (int status)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff ffe7 	bl	8003dd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e0a:	e7fe      	b.n	8003e0a <_exit+0x12>

08003e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e14:	4a14      	ldr	r2, [pc, #80]	; (8003e68 <_sbrk+0x5c>)
 8003e16:	4b15      	ldr	r3, [pc, #84]	; (8003e6c <_sbrk+0x60>)
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e20:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <_sbrk+0x64>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d102      	bne.n	8003e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e28:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <_sbrk+0x64>)
 8003e2a:	4a12      	ldr	r2, [pc, #72]	; (8003e74 <_sbrk+0x68>)
 8003e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e2e:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <_sbrk+0x64>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d207      	bcs.n	8003e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e3c:	f004 fc64 	bl	8008708 <__errno>
 8003e40:	4603      	mov	r3, r0
 8003e42:	220c      	movs	r2, #12
 8003e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e4a:	e009      	b.n	8003e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e4c:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <_sbrk+0x64>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e52:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <_sbrk+0x64>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4413      	add	r3, r2
 8003e5a:	4a05      	ldr	r2, [pc, #20]	; (8003e70 <_sbrk+0x64>)
 8003e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20018000 	.word	0x20018000
 8003e6c:	00000400 	.word	0x00000400
 8003e70:	200016cc 	.word	0x200016cc
 8003e74:	20007260 	.word	0x20007260

08003e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <SystemInit+0x20>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	4a05      	ldr	r2, [pc, #20]	; (8003e98 <SystemInit+0x20>)
 8003e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e8c:	bf00      	nop
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	e000ed00 	.word	0xe000ed00

08003e9c <ws2812_init>:

uint8_t ws2812_buffer[WS2812_BUFFER_SIZE];

// set all pixels to 0 (off)
void ws2812_init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
  memset(ws2812_buffer, 0, WS2812_BUFFER_SIZE); // fill buffer with 0s
 8003ea2:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4809      	ldr	r0, [pc, #36]	; (8003ed0 <ws2812_init+0x34>)
 8003eaa:	f004 fc15 	bl	80086d8 <memset>
  HAL_SPI_Transmit_DMA(&hspi2, ws2812_buffer, WS2812_BUFFER_SIZE); // write buffer to LEDs
 8003eae:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8003eb2:	4907      	ldr	r1, [pc, #28]	; (8003ed0 <ws2812_init+0x34>)
 8003eb4:	4807      	ldr	r0, [pc, #28]	; (8003ed4 <ws2812_init+0x38>)
 8003eb6:	f001 fdef 	bl	8005a98 <HAL_SPI_Transmit_DMA>
  ws2812_pixel_all(&(PixelRGB_t){{0, 0, 0}}); // set LEDs to black
 8003eba:	2300      	movs	r3, #0
 8003ebc:	607b      	str	r3, [r7, #4]
 8003ebe:	1d3b      	adds	r3, r7, #4
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 f879 	bl	8003fb8 <ws2812_pixel_all>
}
 8003ec6:	bf00      	nop
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	200016d0 	.word	0x200016d0
 8003ed4:	200010e4 	.word	0x200010e4

08003ed8 <ws2812_pixel>:

// set one pixel to given color
void ws2812_pixel(uint8_t _x, uint8_t _y, PixelRGB_t* color)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	603a      	str	r2, [r7, #0]
 8003ee2:	71fb      	strb	r3, [r7, #7]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	71bb      	strb	r3, [r7, #6]
  uint8_t* ptr = &ws2812_buffer[24 * coord2Index(_x, _y)];
 8003ee8:	79ba      	ldrb	r2, [r7, #6]
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	4611      	mov	r1, r2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f8de 	bl	80040b0 <coord2Index>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4613      	mov	r3, r2
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	4413      	add	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	461a      	mov	r2, r3
 8003f02:	4b2c      	ldr	r3, [pc, #176]	; (8003fb4 <ws2812_pixel+0xdc>)
 8003f04:	4413      	add	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
  WS2812_FILL_BUFFER(color->color.g);
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	72fb      	strb	r3, [r7, #11]
 8003f0c:	e014      	b.n	8003f38 <ws2812_pixel+0x60>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	789a      	ldrb	r2, [r3, #2]
 8003f12:	7afb      	ldrb	r3, [r7, #11]
 8003f14:	4013      	ands	r3, r2
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <ws2812_pixel+0x50>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	60fa      	str	r2, [r7, #12]
 8003f22:	22fc      	movs	r2, #252	; 0xfc
 8003f24:	701a      	strb	r2, [r3, #0]
 8003f26:	e004      	b.n	8003f32 <ws2812_pixel+0x5a>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	60fa      	str	r2, [r7, #12]
 8003f2e:	2280      	movs	r2, #128	; 0x80
 8003f30:	701a      	strb	r2, [r3, #0]
 8003f32:	7afb      	ldrb	r3, [r7, #11]
 8003f34:	085b      	lsrs	r3, r3, #1
 8003f36:	72fb      	strb	r3, [r7, #11]
 8003f38:	7afb      	ldrb	r3, [r7, #11]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e7      	bne.n	8003f0e <ws2812_pixel+0x36>
  WS2812_FILL_BUFFER(color->color.r);
 8003f3e:	2380      	movs	r3, #128	; 0x80
 8003f40:	72bb      	strb	r3, [r7, #10]
 8003f42:	e014      	b.n	8003f6e <ws2812_pixel+0x96>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	785a      	ldrb	r2, [r3, #1]
 8003f48:	7abb      	ldrb	r3, [r7, #10]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <ws2812_pixel+0x86>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	60fa      	str	r2, [r7, #12]
 8003f58:	22fc      	movs	r2, #252	; 0xfc
 8003f5a:	701a      	strb	r2, [r3, #0]
 8003f5c:	e004      	b.n	8003f68 <ws2812_pixel+0x90>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	60fa      	str	r2, [r7, #12]
 8003f64:	2280      	movs	r2, #128	; 0x80
 8003f66:	701a      	strb	r2, [r3, #0]
 8003f68:	7abb      	ldrb	r3, [r7, #10]
 8003f6a:	085b      	lsrs	r3, r3, #1
 8003f6c:	72bb      	strb	r3, [r7, #10]
 8003f6e:	7abb      	ldrb	r3, [r7, #10]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e7      	bne.n	8003f44 <ws2812_pixel+0x6c>
  WS2812_FILL_BUFFER(color->color.b);
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	727b      	strb	r3, [r7, #9]
 8003f78:	e014      	b.n	8003fa4 <ws2812_pixel+0xcc>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	781a      	ldrb	r2, [r3, #0]
 8003f7e:	7a7b      	ldrb	r3, [r7, #9]
 8003f80:	4013      	ands	r3, r2
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <ws2812_pixel+0xbc>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	60fa      	str	r2, [r7, #12]
 8003f8e:	22fc      	movs	r2, #252	; 0xfc
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	e004      	b.n	8003f9e <ws2812_pixel+0xc6>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	60fa      	str	r2, [r7, #12]
 8003f9a:	2280      	movs	r2, #128	; 0x80
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	7a7b      	ldrb	r3, [r7, #9]
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	727b      	strb	r3, [r7, #9]
 8003fa4:	7a7b      	ldrb	r3, [r7, #9]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1e7      	bne.n	8003f7a <ws2812_pixel+0xa2>
}
 8003faa:	bf00      	nop
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	200016d0 	.word	0x200016d0

08003fb8 <ws2812_pixel_all>:

// set all pixels to given color
void ws2812_pixel_all(PixelRGB_t* color)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint8_t* ptr = ws2812_buffer;
 8003fc0:	4b31      	ldr	r3, [pc, #196]	; (8004088 <ws2812_pixel_all+0xd0>)
 8003fc2:	617b      	str	r3, [r7, #20]
  for (uint16_t i = 0; i < WS2812_NUM_LEDS; ++i) 
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	827b      	strh	r3, [r7, #18]
 8003fc8:	e053      	b.n	8004072 <ws2812_pixel_all+0xba>
  {
    WS2812_FILL_BUFFER(color->color.g);
 8003fca:	2380      	movs	r3, #128	; 0x80
 8003fcc:	747b      	strb	r3, [r7, #17]
 8003fce:	e014      	b.n	8003ffa <ws2812_pixel_all+0x42>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	789a      	ldrb	r2, [r3, #2]
 8003fd4:	7c7b      	ldrb	r3, [r7, #17]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d005      	beq.n	8003fea <ws2812_pixel_all+0x32>
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	617a      	str	r2, [r7, #20]
 8003fe4:	22fc      	movs	r2, #252	; 0xfc
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	e004      	b.n	8003ff4 <ws2812_pixel_all+0x3c>
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	617a      	str	r2, [r7, #20]
 8003ff0:	2280      	movs	r2, #128	; 0x80
 8003ff2:	701a      	strb	r2, [r3, #0]
 8003ff4:	7c7b      	ldrb	r3, [r7, #17]
 8003ff6:	085b      	lsrs	r3, r3, #1
 8003ff8:	747b      	strb	r3, [r7, #17]
 8003ffa:	7c7b      	ldrb	r3, [r7, #17]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e7      	bne.n	8003fd0 <ws2812_pixel_all+0x18>
    WS2812_FILL_BUFFER(color->color.r);
 8004000:	2380      	movs	r3, #128	; 0x80
 8004002:	743b      	strb	r3, [r7, #16]
 8004004:	e014      	b.n	8004030 <ws2812_pixel_all+0x78>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	785a      	ldrb	r2, [r3, #1]
 800400a:	7c3b      	ldrb	r3, [r7, #16]
 800400c:	4013      	ands	r3, r2
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <ws2812_pixel_all+0x68>
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	617a      	str	r2, [r7, #20]
 800401a:	22fc      	movs	r2, #252	; 0xfc
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	e004      	b.n	800402a <ws2812_pixel_all+0x72>
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	617a      	str	r2, [r7, #20]
 8004026:	2280      	movs	r2, #128	; 0x80
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	7c3b      	ldrb	r3, [r7, #16]
 800402c:	085b      	lsrs	r3, r3, #1
 800402e:	743b      	strb	r3, [r7, #16]
 8004030:	7c3b      	ldrb	r3, [r7, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e7      	bne.n	8004006 <ws2812_pixel_all+0x4e>
    WS2812_FILL_BUFFER(color->color.b);
 8004036:	2380      	movs	r3, #128	; 0x80
 8004038:	73fb      	strb	r3, [r7, #15]
 800403a:	e014      	b.n	8004066 <ws2812_pixel_all+0xae>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	781a      	ldrb	r2, [r3, #0]
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	4013      	ands	r3, r2
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <ws2812_pixel_all+0x9e>
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	617a      	str	r2, [r7, #20]
 8004050:	22fc      	movs	r2, #252	; 0xfc
 8004052:	701a      	strb	r2, [r3, #0]
 8004054:	e004      	b.n	8004060 <ws2812_pixel_all+0xa8>
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	617a      	str	r2, [r7, #20]
 800405c:	2280      	movs	r2, #128	; 0x80
 800405e:	701a      	strb	r2, [r3, #0]
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e7      	bne.n	800403c <ws2812_pixel_all+0x84>
  for (uint16_t i = 0; i < WS2812_NUM_LEDS; ++i) 
 800406c:	8a7b      	ldrh	r3, [r7, #18]
 800406e:	3301      	adds	r3, #1
 8004070:	827b      	strh	r3, [r7, #18]
 8004072:	8a7b      	ldrh	r3, [r7, #18]
 8004074:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8004078:	d3a7      	bcc.n	8003fca <ws2812_pixel_all+0x12>
  }
}
 800407a:	bf00      	nop
 800407c:	bf00      	nop
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	200016d0 	.word	0x200016d0

0800408c <HAL_SPI_TxCpltCallback>:
    }
  }
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  // Restart transmission when buffer tx is completed
  HAL_SPI_Transmit_DMA(&hspi2, ws2812_buffer, WS2812_BUFFER_SIZE);
 8004094:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8004098:	4903      	ldr	r1, [pc, #12]	; (80040a8 <HAL_SPI_TxCpltCallback+0x1c>)
 800409a:	4804      	ldr	r0, [pc, #16]	; (80040ac <HAL_SPI_TxCpltCallback+0x20>)
 800409c:	f001 fcfc 	bl	8005a98 <HAL_SPI_Transmit_DMA>
}
 80040a0:	bf00      	nop
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	200016d0 	.word	0x200016d0
 80040ac:	200010e4 	.word	0x200010e4

080040b0 <coord2Index>:

uint16_t coord2Index (uint8_t _x, uint8_t _y)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	460a      	mov	r2, r1
 80040ba:	71fb      	strb	r3, [r7, #7]
 80040bc:	4613      	mov	r3, r2
 80040be:	71bb      	strb	r3, [r7, #6]
{ 176,177,178,179,180,181,182,183,368,369,370,371,372,373,374,375,560,561,562,563,564,565,566,567,752,753,754,755,756,757,758,759,944,945,946,947,948,949,950,951 },
{ 184,185,186,187,188,189,190,191,376,377,378,379,380,381,382,383,568,569,570,571,572,573,574,575,760,761,762,763,764,765,766,767,952,953,954,955,956,957,958,959 }

};

  if (_x > WS2812_NUM_LEDS_X - 1) _x = WS2812_NUM_LEDS_X - 1;
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	2b27      	cmp	r3, #39	; 0x27
 80040c4:	d901      	bls.n	80040ca <coord2Index+0x1a>
 80040c6:	2327      	movs	r3, #39	; 0x27
 80040c8:	71fb      	strb	r3, [r7, #7]
  if (_y > WS2812_NUM_LEDS_Y - 1) _y = WS2812_NUM_LEDS_Y - 1;
 80040ca:	79bb      	ldrb	r3, [r7, #6]
 80040cc:	2b17      	cmp	r3, #23
 80040ce:	d901      	bls.n	80040d4 <coord2Index+0x24>
 80040d0:	2317      	movs	r3, #23
 80040d2:	71bb      	strb	r3, [r7, #6]

  return lookup_table[_y][_x];
 80040d4:	79ba      	ldrb	r2, [r7, #6]
 80040d6:	79f9      	ldrb	r1, [r7, #7]
 80040d8:	4806      	ldr	r0, [pc, #24]	; (80040f4 <coord2Index+0x44>)
 80040da:	4613      	mov	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	440b      	add	r3, r1
 80040e4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	08008874 	.word	0x08008874

080040f8 <Reset_Handler>:
 80040f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004130 <LoopFillZerobss+0x12>
 80040fc:	480d      	ldr	r0, [pc, #52]	; (8004134 <LoopFillZerobss+0x16>)
 80040fe:	490e      	ldr	r1, [pc, #56]	; (8004138 <LoopFillZerobss+0x1a>)
 8004100:	4a0e      	ldr	r2, [pc, #56]	; (800413c <LoopFillZerobss+0x1e>)
 8004102:	2300      	movs	r3, #0
 8004104:	e002      	b.n	800410c <LoopCopyDataInit>

08004106 <CopyDataInit>:
 8004106:	58d4      	ldr	r4, [r2, r3]
 8004108:	50c4      	str	r4, [r0, r3]
 800410a:	3304      	adds	r3, #4

0800410c <LoopCopyDataInit>:
 800410c:	18c4      	adds	r4, r0, r3
 800410e:	428c      	cmp	r4, r1
 8004110:	d3f9      	bcc.n	8004106 <CopyDataInit>
 8004112:	4a0b      	ldr	r2, [pc, #44]	; (8004140 <LoopFillZerobss+0x22>)
 8004114:	4c0b      	ldr	r4, [pc, #44]	; (8004144 <LoopFillZerobss+0x26>)
 8004116:	2300      	movs	r3, #0
 8004118:	e001      	b.n	800411e <LoopFillZerobss>

0800411a <FillZerobss>:
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	3204      	adds	r2, #4

0800411e <LoopFillZerobss>:
 800411e:	42a2      	cmp	r2, r4
 8004120:	d3fb      	bcc.n	800411a <FillZerobss>
 8004122:	f7ff fea9 	bl	8003e78 <SystemInit>
 8004126:	f004 faf5 	bl	8008714 <__libc_init_array>
 800412a:	f7fe f835 	bl	8002198 <main>
 800412e:	4770      	bx	lr
 8004130:	20018000 	.word	0x20018000
 8004134:	20000000 	.word	0x20000000
 8004138:	200010c0 	.word	0x200010c0
 800413c:	0800900c 	.word	0x0800900c
 8004140:	200010c0 	.word	0x200010c0
 8004144:	2000725c 	.word	0x2000725c

08004148 <ADC_IRQHandler>:
 8004148:	e7fe      	b.n	8004148 <ADC_IRQHandler>
	...

0800414c <HAL_Init>:
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
 8004150:	4b0e      	ldr	r3, [pc, #56]	; (800418c <HAL_Init+0x40>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a0d      	ldr	r2, [pc, #52]	; (800418c <HAL_Init+0x40>)
 8004156:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_Init+0x40>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a0a      	ldr	r2, [pc, #40]	; (800418c <HAL_Init+0x40>)
 8004162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	4b08      	ldr	r3, [pc, #32]	; (800418c <HAL_Init+0x40>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a07      	ldr	r2, [pc, #28]	; (800418c <HAL_Init+0x40>)
 800416e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	2003      	movs	r0, #3
 8004176:	f000 f973 	bl	8004460 <HAL_NVIC_SetPriorityGrouping>
 800417a:	2000      	movs	r0, #0
 800417c:	f000 f808 	bl	8004190 <HAL_InitTick>
 8004180:	f7ff fbbc 	bl	80038fc <HAL_MspInit>
 8004184:	2300      	movs	r3, #0
 8004186:	4618      	mov	r0, r3
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40023c00 	.word	0x40023c00

08004190 <HAL_InitTick>:
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <HAL_InitTick+0x54>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <HAL_InitTick+0x58>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	4619      	mov	r1, r3
 80041a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80041aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 f98b 	bl	80044ca <HAL_SYSTICK_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_InitTick+0x2e>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e00e      	b.n	80041dc <HAL_InitTick+0x4c>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b0f      	cmp	r3, #15
 80041c2:	d80a      	bhi.n	80041da <HAL_InitTick+0x4a>
 80041c4:	2200      	movs	r2, #0
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041cc:	f000 f953 	bl	8004476 <HAL_NVIC_SetPriority>
 80041d0:	4a06      	ldr	r2, [pc, #24]	; (80041ec <HAL_InitTick+0x5c>)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	2300      	movs	r3, #0
 80041d8:	e000      	b.n	80041dc <HAL_InitTick+0x4c>
 80041da:	2301      	movs	r3, #1
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20001064 	.word	0x20001064
 80041e8:	2000106c 	.word	0x2000106c
 80041ec:	20001068 	.word	0x20001068

080041f0 <HAL_IncTick>:
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <HAL_IncTick+0x20>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_IncTick+0x24>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4413      	add	r3, r2
 8004200:	4a04      	ldr	r2, [pc, #16]	; (8004214 <HAL_IncTick+0x24>)
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	2000106c 	.word	0x2000106c
 8004214:	2000710c 	.word	0x2000710c

08004218 <HAL_GetTick>:
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
 800421c:	4b03      	ldr	r3, [pc, #12]	; (800422c <HAL_GetTick+0x14>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	2000710c 	.word	0x2000710c

08004230 <HAL_Delay>:
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	f7ff ffee 	bl	8004218 <HAL_GetTick>
 800423c:	60b8      	str	r0, [r7, #8]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004248:	d005      	beq.n	8004256 <HAL_Delay+0x26>
 800424a:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <HAL_Delay+0x44>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	bf00      	nop
 8004258:	f7ff ffde 	bl	8004218 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	429a      	cmp	r2, r3
 8004266:	d8f7      	bhi.n	8004258 <HAL_Delay+0x28>
 8004268:	bf00      	nop
 800426a:	bf00      	nop
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	2000106c 	.word	0x2000106c

08004278 <HAL_GetUIDw0>:
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
 800427c:	4b03      	ldr	r3, [pc, #12]	; (800428c <HAL_GetUIDw0+0x14>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	1fff7a10 	.word	0x1fff7a10

08004290 <HAL_GetUIDw1>:
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
 8004294:	4b03      	ldr	r3, [pc, #12]	; (80042a4 <HAL_GetUIDw1+0x14>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	1fff7a14 	.word	0x1fff7a14

080042a8 <HAL_GetUIDw2>:
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	4b03      	ldr	r3, [pc, #12]	; (80042bc <HAL_GetUIDw2+0x14>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	1fff7a18 	.word	0x1fff7a18

080042c0 <__NVIC_SetPriorityGrouping>:
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <__NVIC_SetPriorityGrouping+0x44>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042dc:	4013      	ands	r3, r2
 80042de:	60bb      	str	r3, [r7, #8]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	021a      	lsls	r2, r3, #8
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	4a04      	ldr	r2, [pc, #16]	; (8004304 <__NVIC_SetPriorityGrouping+0x44>)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	60d3      	str	r3, [r2, #12]
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	e000ed00 	.word	0xe000ed00

08004308 <__NVIC_GetPriorityGrouping>:
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
 800430c:	4b04      	ldr	r3, [pc, #16]	; (8004320 <__NVIC_GetPriorityGrouping+0x18>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	0a1b      	lsrs	r3, r3, #8
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	4618      	mov	r0, r3
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	e000ed00 	.word	0xe000ed00

08004324 <__NVIC_EnableIRQ>:
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	71fb      	strb	r3, [r7, #7]
 800432e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004332:	2b00      	cmp	r3, #0
 8004334:	db0b      	blt.n	800434e <__NVIC_EnableIRQ+0x2a>
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	f003 021f 	and.w	r2, r3, #31
 800433c:	4907      	ldr	r1, [pc, #28]	; (800435c <__NVIC_EnableIRQ+0x38>)
 800433e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	2001      	movs	r0, #1
 8004346:	fa00 f202 	lsl.w	r2, r0, r2
 800434a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	e000e100 	.word	0xe000e100

08004360 <__NVIC_SetPriority>:
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	6039      	str	r1, [r7, #0]
 800436a:	71fb      	strb	r3, [r7, #7]
 800436c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004370:	2b00      	cmp	r3, #0
 8004372:	db0a      	blt.n	800438a <__NVIC_SetPriority+0x2a>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	b2da      	uxtb	r2, r3
 8004378:	490c      	ldr	r1, [pc, #48]	; (80043ac <__NVIC_SetPriority+0x4c>)
 800437a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437e:	0112      	lsls	r2, r2, #4
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	440b      	add	r3, r1
 8004384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004388:	e00a      	b.n	80043a0 <__NVIC_SetPriority+0x40>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	b2da      	uxtb	r2, r3
 800438e:	4908      	ldr	r1, [pc, #32]	; (80043b0 <__NVIC_SetPriority+0x50>)
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	3b04      	subs	r3, #4
 8004398:	0112      	lsls	r2, r2, #4
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	440b      	add	r3, r1
 800439e:	761a      	strb	r2, [r3, #24]
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	e000e100 	.word	0xe000e100
 80043b0:	e000ed00 	.word	0xe000ed00

080043b4 <NVIC_EncodePriority>:
 80043b4:	b480      	push	{r7}
 80043b6:	b089      	sub	sp, #36	; 0x24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	61fb      	str	r3, [r7, #28]
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f1c3 0307 	rsb	r3, r3, #7
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	bf28      	it	cs
 80043d2:	2304      	movcs	r3, #4
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	3304      	adds	r3, #4
 80043da:	2b06      	cmp	r3, #6
 80043dc:	d902      	bls.n	80043e4 <NVIC_EncodePriority+0x30>
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	3b03      	subs	r3, #3
 80043e2:	e000      	b.n	80043e6 <NVIC_EncodePriority+0x32>
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	43da      	mvns	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	401a      	ands	r2, r3
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	409a      	lsls	r2, r3
 80043fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	fa01 f303 	lsl.w	r3, r1, r3
 8004406:	43d9      	mvns	r1, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	400b      	ands	r3, r1
 800440c:	4313      	orrs	r3, r2
 800440e:	4618      	mov	r0, r3
 8004410:	3724      	adds	r7, #36	; 0x24
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <SysTick_Config>:
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3b01      	subs	r3, #1
 8004428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800442c:	d301      	bcc.n	8004432 <SysTick_Config+0x16>
 800442e:	2301      	movs	r3, #1
 8004430:	e00f      	b.n	8004452 <SysTick_Config+0x36>
 8004432:	4a0a      	ldr	r2, [pc, #40]	; (800445c <SysTick_Config+0x40>)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3b01      	subs	r3, #1
 8004438:	6053      	str	r3, [r2, #4]
 800443a:	210f      	movs	r1, #15
 800443c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004440:	f7ff ff8e 	bl	8004360 <__NVIC_SetPriority>
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <SysTick_Config+0x40>)
 8004446:	2200      	movs	r2, #0
 8004448:	609a      	str	r2, [r3, #8]
 800444a:	4b04      	ldr	r3, [pc, #16]	; (800445c <SysTick_Config+0x40>)
 800444c:	2207      	movs	r2, #7
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	2300      	movs	r3, #0
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	e000e010 	.word	0xe000e010

08004460 <HAL_NVIC_SetPriorityGrouping>:
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7ff ff29 	bl	80042c0 <__NVIC_SetPriorityGrouping>
 800446e:	bf00      	nop
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <HAL_NVIC_SetPriority>:
 8004476:	b580      	push	{r7, lr}
 8004478:	b086      	sub	sp, #24
 800447a:	af00      	add	r7, sp, #0
 800447c:	4603      	mov	r3, r0
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	607a      	str	r2, [r7, #4]
 8004482:	73fb      	strb	r3, [r7, #15]
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	f7ff ff3e 	bl	8004308 <__NVIC_GetPriorityGrouping>
 800448c:	6178      	str	r0, [r7, #20]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	6978      	ldr	r0, [r7, #20]
 8004494:	f7ff ff8e 	bl	80043b4 <NVIC_EncodePriority>
 8004498:	4602      	mov	r2, r0
 800449a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800449e:	4611      	mov	r1, r2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff ff5d 	bl	8004360 <__NVIC_SetPriority>
 80044a6:	bf00      	nop
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_NVIC_EnableIRQ>:
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	4603      	mov	r3, r0
 80044b6:	71fb      	strb	r3, [r7, #7]
 80044b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff ff31 	bl	8004324 <__NVIC_EnableIRQ>
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_SYSTICK_Config>:
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff ffa2 	bl	800441c <SysTick_Config>
 80044d8:	4603      	mov	r3, r0
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <HAL_DMA_Init>:
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	f7ff fe92 	bl	8004218 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_DMA_Init+0x1c>
 80044fc:	2301      	movs	r3, #1
 80044fe:	e099      	b.n	8004634 <HAL_DMA_Init+0x150>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0201 	bic.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	e00f      	b.n	8004542 <HAL_DMA_Init+0x5e>
 8004522:	f7ff fe79 	bl	8004218 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b05      	cmp	r3, #5
 800452e:	d908      	bls.n	8004542 <HAL_DMA_Init+0x5e>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	655a      	str	r2, [r3, #84]	; 0x54
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2203      	movs	r2, #3
 800453a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800453e:	2303      	movs	r3, #3
 8004540:	e078      	b.n	8004634 <HAL_DMA_Init+0x150>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e8      	bne.n	8004522 <HAL_DMA_Init+0x3e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	4b38      	ldr	r3, [pc, #224]	; (800463c <HAL_DMA_Init+0x158>)
 800455c:	4013      	ands	r3, r2
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	431a      	orrs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	4313      	orrs	r3, r2
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	2b04      	cmp	r3, #4
 800459a:	d107      	bne.n	80045ac <HAL_DMA_Init+0xc8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a4:	4313      	orrs	r3, r2
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f023 0307 	bic.w	r3, r3, #7
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d117      	bne.n	8004606 <HAL_DMA_Init+0x122>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00e      	beq.n	8004606 <HAL_DMA_Init+0x122>
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 fb01 	bl	8004bf0 <DMA_CheckFifoParam>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_DMA_Init+0x122>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2240      	movs	r2, #64	; 0x40
 80045f8:	655a      	str	r2, [r3, #84]	; 0x54
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004602:	2301      	movs	r3, #1
 8004604:	e016      	b.n	8004634 <HAL_DMA_Init+0x150>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	615a      	str	r2, [r3, #20]
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fab8 	bl	8004b84 <DMA_CalcBaseAndBitshift>
 8004614:	4603      	mov	r3, r0
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461c:	223f      	movs	r2, #63	; 0x3f
 800461e:	409a      	lsls	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	609a      	str	r2, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	655a      	str	r2, [r3, #84]	; 0x54
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004632:	2300      	movs	r3, #0
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	f010803f 	.word	0xf010803f

08004640 <HAL_DMA_Start_IT>:
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	2300      	movs	r3, #0
 8004650:	75fb      	strb	r3, [r7, #23]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_DMA_Start_IT+0x26>
 8004662:	2302      	movs	r3, #2
 8004664:	e040      	b.n	80046e8 <HAL_DMA_Start_IT+0xa8>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b01      	cmp	r3, #1
 8004678:	d12f      	bne.n	80046da <HAL_DMA_Start_IT+0x9a>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2202      	movs	r2, #2
 800467e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	655a      	str	r2, [r3, #84]	; 0x54
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 fa4a 	bl	8004b28 <DMA_SetConfig>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004698:	223f      	movs	r2, #63	; 0x3f
 800469a:	409a      	lsls	r2, r3
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	609a      	str	r2, [r3, #8]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0216 	orr.w	r2, r2, #22
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <HAL_DMA_Start_IT+0x88>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0208 	orr.w	r2, r2, #8
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	e005      	b.n	80046e6 <HAL_DMA_Start_IT+0xa6>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80046e2:	2302      	movs	r3, #2
 80046e4:	75fb      	strb	r3, [r7, #23]
 80046e6:	7dfb      	ldrb	r3, [r7, #23]
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_DMA_Abort>:
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	f7ff fd8b 	bl	8004218 <HAL_GetTick>
 8004702:	60b8      	str	r0, [r7, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d008      	beq.n	8004722 <HAL_DMA_Abort+0x32>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2280      	movs	r2, #128	; 0x80
 8004714:	655a      	str	r2, [r3, #84]	; 0x54
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800471e:	2301      	movs	r3, #1
 8004720:	e052      	b.n	80047c8 <HAL_DMA_Abort+0xd8>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0216 	bic.w	r2, r2, #22
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695a      	ldr	r2, [r3, #20]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004740:	615a      	str	r2, [r3, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	d103      	bne.n	8004752 <HAL_DMA_Abort+0x62>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <HAL_DMA_Abort+0x72>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0208 	bic.w	r2, r2, #8
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0201 	bic.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	e013      	b.n	800479c <HAL_DMA_Abort+0xac>
 8004774:	f7ff fd50 	bl	8004218 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b05      	cmp	r3, #5
 8004780:	d90c      	bls.n	800479c <HAL_DMA_Abort+0xac>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	655a      	str	r2, [r3, #84]	; 0x54
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2203      	movs	r2, #3
 800478c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004798:	2303      	movs	r3, #3
 800479a:	e015      	b.n	80047c8 <HAL_DMA_Abort+0xd8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1e4      	bne.n	8004774 <HAL_DMA_Abort+0x84>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ae:	223f      	movs	r2, #63	; 0x3f
 80047b0:	409a      	lsls	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	609a      	str	r2, [r3, #8]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80047c6:	2300      	movs	r3, #0
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_DMA_Abort_IT>:
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d004      	beq.n	80047ee <HAL_DMA_Abort_IT+0x1e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2280      	movs	r2, #128	; 0x80
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54
 80047ea:	2301      	movs	r3, #1
 80047ec:	e00c      	b.n	8004808 <HAL_DMA_Abort_IT+0x38>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2205      	movs	r2, #5
 80047f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0201 	bic.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	2300      	movs	r3, #0
 8004808:	4618      	mov	r0, r3
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_DMA_IRQHandler>:
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	2300      	movs	r3, #0
 800481e:	60bb      	str	r3, [r7, #8]
 8004820:	4b8e      	ldr	r3, [pc, #568]	; (8004a5c <HAL_DMA_IRQHandler+0x248>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a8e      	ldr	r2, [pc, #568]	; (8004a60 <HAL_DMA_IRQHandler+0x24c>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	0a9b      	lsrs	r3, r3, #10
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483e:	2208      	movs	r2, #8
 8004840:	409a      	lsls	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4013      	ands	r3, r2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d01a      	beq.n	8004880 <HAL_DMA_IRQHandler+0x6c>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d013      	beq.n	8004880 <HAL_DMA_IRQHandler+0x6c>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0204 	bic.w	r2, r2, #4
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486c:	2208      	movs	r2, #8
 800486e:	409a      	lsls	r2, r3
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	609a      	str	r2, [r3, #8]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004878:	f043 0201 	orr.w	r2, r3, #1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	655a      	str	r2, [r3, #84]	; 0x54
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004884:	2201      	movs	r2, #1
 8004886:	409a      	lsls	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4013      	ands	r3, r2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d012      	beq.n	80048b6 <HAL_DMA_IRQHandler+0xa2>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00b      	beq.n	80048b6 <HAL_DMA_IRQHandler+0xa2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a2:	2201      	movs	r2, #1
 80048a4:	409a      	lsls	r2, r3
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	609a      	str	r2, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ae:	f043 0202 	orr.w	r2, r3, #2
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	655a      	str	r2, [r3, #84]	; 0x54
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ba:	2204      	movs	r2, #4
 80048bc:	409a      	lsls	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d012      	beq.n	80048ec <HAL_DMA_IRQHandler+0xd8>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00b      	beq.n	80048ec <HAL_DMA_IRQHandler+0xd8>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d8:	2204      	movs	r2, #4
 80048da:	409a      	lsls	r2, r3
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	609a      	str	r2, [r3, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e4:	f043 0204 	orr.w	r2, r3, #4
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	655a      	str	r2, [r3, #84]	; 0x54
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f0:	2210      	movs	r2, #16
 80048f2:	409a      	lsls	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d043      	beq.n	8004984 <HAL_DMA_IRQHandler+0x170>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d03c      	beq.n	8004984 <HAL_DMA_IRQHandler+0x170>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490e:	2210      	movs	r2, #16
 8004910:	409a      	lsls	r2, r3
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	609a      	str	r2, [r3, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d018      	beq.n	8004956 <HAL_DMA_IRQHandler+0x142>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d108      	bne.n	8004944 <HAL_DMA_IRQHandler+0x130>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d024      	beq.n	8004984 <HAL_DMA_IRQHandler+0x170>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	4798      	blx	r3
 8004942:	e01f      	b.n	8004984 <HAL_DMA_IRQHandler+0x170>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01b      	beq.n	8004984 <HAL_DMA_IRQHandler+0x170>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	4798      	blx	r3
 8004954:	e016      	b.n	8004984 <HAL_DMA_IRQHandler+0x170>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004960:	2b00      	cmp	r3, #0
 8004962:	d107      	bne.n	8004974 <HAL_DMA_IRQHandler+0x160>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0208 	bic.w	r2, r2, #8
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <HAL_DMA_IRQHandler+0x170>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	4798      	blx	r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004988:	2220      	movs	r2, #32
 800498a:	409a      	lsls	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4013      	ands	r3, r2
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 808f 	beq.w	8004ab4 <HAL_DMA_IRQHandler+0x2a0>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 8087 	beq.w	8004ab4 <HAL_DMA_IRQHandler+0x2a0>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049aa:	2220      	movs	r2, #32
 80049ac:	409a      	lsls	r2, r3
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	609a      	str	r2, [r3, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b05      	cmp	r3, #5
 80049bc:	d136      	bne.n	8004a2c <HAL_DMA_IRQHandler+0x218>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0216 	bic.w	r2, r2, #22
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695a      	ldr	r2, [r3, #20]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049dc:	615a      	str	r2, [r3, #20]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d103      	bne.n	80049ee <HAL_DMA_IRQHandler+0x1da>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <HAL_DMA_IRQHandler+0x1ea>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0208 	bic.w	r2, r2, #8
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a02:	223f      	movs	r2, #63	; 0x3f
 8004a04:	409a      	lsls	r2, r3
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	609a      	str	r2, [r3, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d07e      	beq.n	8004b20 <HAL_DMA_IRQHandler+0x30c>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	4798      	blx	r3
 8004a2a:	e079      	b.n	8004b20 <HAL_DMA_IRQHandler+0x30c>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d01d      	beq.n	8004a76 <HAL_DMA_IRQHandler+0x262>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10d      	bne.n	8004a64 <HAL_DMA_IRQHandler+0x250>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d031      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x2a0>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	4798      	blx	r3
 8004a58:	e02c      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x2a0>
 8004a5a:	bf00      	nop
 8004a5c:	20001064 	.word	0x20001064
 8004a60:	1b4e81b5 	.word	0x1b4e81b5
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d023      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x2a0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	4798      	blx	r3
 8004a74:	e01e      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x2a0>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10f      	bne.n	8004aa4 <HAL_DMA_IRQHandler+0x290>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0210 	bic.w	r2, r2, #16
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x2a0>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	4798      	blx	r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d032      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x30e>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d022      	beq.n	8004b0e <HAL_DMA_IRQHandler+0x2fa>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2205      	movs	r2, #5
 8004acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0201 	bic.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d307      	bcc.n	8004afc <HAL_DMA_IRQHandler+0x2e8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f2      	bne.n	8004ae0 <HAL_DMA_IRQHandler+0x2cc>
 8004afa:	e000      	b.n	8004afe <HAL_DMA_IRQHandler+0x2ea>
 8004afc:	bf00      	nop
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x30e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	4798      	blx	r3
 8004b1e:	e000      	b.n	8004b22 <HAL_DMA_IRQHandler+0x30e>
 8004b20:	bf00      	nop
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <DMA_SetConfig>:
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	605a      	str	r2, [r3, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b40      	cmp	r3, #64	; 0x40
 8004b54:	d108      	bne.n	8004b68 <DMA_SetConfig+0x40>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	609a      	str	r2, [r3, #8]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	60da      	str	r2, [r3, #12]
 8004b66:	e007      	b.n	8004b78 <DMA_SetConfig+0x50>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	609a      	str	r2, [r3, #8]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	60da      	str	r2, [r3, #12]
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <DMA_CalcBaseAndBitshift>:
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	3b10      	subs	r3, #16
 8004b94:	4a14      	ldr	r2, [pc, #80]	; (8004be8 <DMA_CalcBaseAndBitshift+0x64>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	091b      	lsrs	r3, r3, #4
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	4a13      	ldr	r2, [pc, #76]	; (8004bec <DMA_CalcBaseAndBitshift+0x68>)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	65da      	str	r2, [r3, #92]	; 0x5c
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d909      	bls.n	8004bc6 <DMA_CalcBaseAndBitshift+0x42>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bba:	f023 0303 	bic.w	r3, r3, #3
 8004bbe:	1d1a      	adds	r2, r3, #4
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	659a      	str	r2, [r3, #88]	; 0x58
 8004bc4:	e007      	b.n	8004bd6 <DMA_CalcBaseAndBitshift+0x52>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bce:	f023 0303 	bic.w	r3, r3, #3
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	aaaaaaab 	.word	0xaaaaaaab
 8004bec:	08008ff4 	.word	0x08008ff4

08004bf0 <DMA_CheckFifoParam>:
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	73fb      	strb	r3, [r7, #15]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d11f      	bne.n	8004c4a <DMA_CheckFifoParam+0x5a>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d856      	bhi.n	8004cbe <DMA_CheckFifoParam+0xce>
 8004c10:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <DMA_CheckFifoParam+0x28>)
 8004c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c16:	bf00      	nop
 8004c18:	08004c29 	.word	0x08004c29
 8004c1c:	08004c3b 	.word	0x08004c3b
 8004c20:	08004c29 	.word	0x08004c29
 8004c24:	08004cbf 	.word	0x08004cbf
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d046      	beq.n	8004cc2 <DMA_CheckFifoParam+0xd2>
 8004c34:	2301      	movs	r3, #1
 8004c36:	73fb      	strb	r3, [r7, #15]
 8004c38:	e043      	b.n	8004cc2 <DMA_CheckFifoParam+0xd2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c42:	d140      	bne.n	8004cc6 <DMA_CheckFifoParam+0xd6>
 8004c44:	2301      	movs	r3, #1
 8004c46:	73fb      	strb	r3, [r7, #15]
 8004c48:	e03d      	b.n	8004cc6 <DMA_CheckFifoParam+0xd6>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c52:	d121      	bne.n	8004c98 <DMA_CheckFifoParam+0xa8>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b03      	cmp	r3, #3
 8004c58:	d837      	bhi.n	8004cca <DMA_CheckFifoParam+0xda>
 8004c5a:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <DMA_CheckFifoParam+0x70>)
 8004c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c60:	08004c71 	.word	0x08004c71
 8004c64:	08004c77 	.word	0x08004c77
 8004c68:	08004c71 	.word	0x08004c71
 8004c6c:	08004c89 	.word	0x08004c89
 8004c70:	2301      	movs	r3, #1
 8004c72:	73fb      	strb	r3, [r7, #15]
 8004c74:	e030      	b.n	8004cd8 <DMA_CheckFifoParam+0xe8>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d025      	beq.n	8004cce <DMA_CheckFifoParam+0xde>
 8004c82:	2301      	movs	r3, #1
 8004c84:	73fb      	strb	r3, [r7, #15]
 8004c86:	e022      	b.n	8004cce <DMA_CheckFifoParam+0xde>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c90:	d11f      	bne.n	8004cd2 <DMA_CheckFifoParam+0xe2>
 8004c92:	2301      	movs	r3, #1
 8004c94:	73fb      	strb	r3, [r7, #15]
 8004c96:	e01c      	b.n	8004cd2 <DMA_CheckFifoParam+0xe2>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d903      	bls.n	8004ca6 <DMA_CheckFifoParam+0xb6>
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	d003      	beq.n	8004cac <DMA_CheckFifoParam+0xbc>
 8004ca4:	e018      	b.n	8004cd8 <DMA_CheckFifoParam+0xe8>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	73fb      	strb	r3, [r7, #15]
 8004caa:	e015      	b.n	8004cd8 <DMA_CheckFifoParam+0xe8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00e      	beq.n	8004cd6 <DMA_CheckFifoParam+0xe6>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	73fb      	strb	r3, [r7, #15]
 8004cbc:	e00b      	b.n	8004cd6 <DMA_CheckFifoParam+0xe6>
 8004cbe:	bf00      	nop
 8004cc0:	e00a      	b.n	8004cd8 <DMA_CheckFifoParam+0xe8>
 8004cc2:	bf00      	nop
 8004cc4:	e008      	b.n	8004cd8 <DMA_CheckFifoParam+0xe8>
 8004cc6:	bf00      	nop
 8004cc8:	e006      	b.n	8004cd8 <DMA_CheckFifoParam+0xe8>
 8004cca:	bf00      	nop
 8004ccc:	e004      	b.n	8004cd8 <DMA_CheckFifoParam+0xe8>
 8004cce:	bf00      	nop
 8004cd0:	e002      	b.n	8004cd8 <DMA_CheckFifoParam+0xe8>
 8004cd2:	bf00      	nop
 8004cd4:	e000      	b.n	8004cd8 <DMA_CheckFifoParam+0xe8>
 8004cd6:	bf00      	nop
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop

08004ce8 <HAL_GPIO_Init>:
 8004ce8:	b480      	push	{r7}
 8004cea:	b089      	sub	sp, #36	; 0x24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	613b      	str	r3, [r7, #16]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61fb      	str	r3, [r7, #28]
 8004d02:	e159      	b.n	8004fb8 <HAL_GPIO_Init+0x2d0>
 8004d04:	2201      	movs	r2, #1
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	4013      	ands	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	f040 8148 	bne.w	8004fb2 <HAL_GPIO_Init+0x2ca>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d005      	beq.n	8004d3a <HAL_GPIO_Init+0x52>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d130      	bne.n	8004d9c <HAL_GPIO_Init+0xb4>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	2203      	movs	r2, #3
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	609a      	str	r2, [r3, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	61bb      	str	r3, [r7, #24]
 8004d70:	2201      	movs	r2, #1
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	091b      	lsrs	r3, r3, #4
 8004d86:	f003 0201 	and.w	r2, r3, #1
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	605a      	str	r2, [r3, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f003 0303 	and.w	r3, r3, #3
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d017      	beq.n	8004dd8 <HAL_GPIO_Init+0xf0>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	2203      	movs	r2, #3
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	43db      	mvns	r3, r3
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	61bb      	str	r3, [r7, #24]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	60da      	str	r2, [r3, #12]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 0303 	and.w	r3, r3, #3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d123      	bne.n	8004e2c <HAL_GPIO_Init+0x144>
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	08da      	lsrs	r2, r3, #3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3208      	adds	r2, #8
 8004dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	220f      	movs	r2, #15
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43db      	mvns	r3, r3
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4013      	ands	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	08da      	lsrs	r2, r3, #3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3208      	adds	r2, #8
 8004e26:	69b9      	ldr	r1, [r7, #24]
 8004e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	2203      	movs	r2, #3
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	4013      	ands	r3, r2
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 0203 	and.w	r2, r3, #3
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 80a2 	beq.w	8004fb2 <HAL_GPIO_Init+0x2ca>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	4b57      	ldr	r3, [pc, #348]	; (8004fd0 <HAL_GPIO_Init+0x2e8>)
 8004e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e76:	4a56      	ldr	r2, [pc, #344]	; (8004fd0 <HAL_GPIO_Init+0x2e8>)
 8004e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e7e:	4b54      	ldr	r3, [pc, #336]	; (8004fd0 <HAL_GPIO_Init+0x2e8>)
 8004e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4a52      	ldr	r2, [pc, #328]	; (8004fd4 <HAL_GPIO_Init+0x2ec>)
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	089b      	lsrs	r3, r3, #2
 8004e90:	3302      	adds	r3, #2
 8004e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e96:	61bb      	str	r3, [r7, #24]
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	220f      	movs	r2, #15
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	43db      	mvns	r3, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a49      	ldr	r2, [pc, #292]	; (8004fd8 <HAL_GPIO_Init+0x2f0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d019      	beq.n	8004eea <HAL_GPIO_Init+0x202>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a48      	ldr	r2, [pc, #288]	; (8004fdc <HAL_GPIO_Init+0x2f4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d013      	beq.n	8004ee6 <HAL_GPIO_Init+0x1fe>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a47      	ldr	r2, [pc, #284]	; (8004fe0 <HAL_GPIO_Init+0x2f8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00d      	beq.n	8004ee2 <HAL_GPIO_Init+0x1fa>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a46      	ldr	r2, [pc, #280]	; (8004fe4 <HAL_GPIO_Init+0x2fc>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d007      	beq.n	8004ede <HAL_GPIO_Init+0x1f6>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a45      	ldr	r2, [pc, #276]	; (8004fe8 <HAL_GPIO_Init+0x300>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d101      	bne.n	8004eda <HAL_GPIO_Init+0x1f2>
 8004ed6:	2304      	movs	r3, #4
 8004ed8:	e008      	b.n	8004eec <HAL_GPIO_Init+0x204>
 8004eda:	2307      	movs	r3, #7
 8004edc:	e006      	b.n	8004eec <HAL_GPIO_Init+0x204>
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e004      	b.n	8004eec <HAL_GPIO_Init+0x204>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e002      	b.n	8004eec <HAL_GPIO_Init+0x204>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <HAL_GPIO_Init+0x204>
 8004eea:	2300      	movs	r3, #0
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	f002 0203 	and.w	r2, r2, #3
 8004ef2:	0092      	lsls	r2, r2, #2
 8004ef4:	4093      	lsls	r3, r2
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
 8004efc:	4935      	ldr	r1, [pc, #212]	; (8004fd4 <HAL_GPIO_Init+0x2ec>)
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	089b      	lsrs	r3, r3, #2
 8004f02:	3302      	adds	r3, #2
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004f0a:	4b38      	ldr	r3, [pc, #224]	; (8004fec <HAL_GPIO_Init+0x304>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	61bb      	str	r3, [r7, #24]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	43db      	mvns	r3, r3
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4013      	ands	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_GPIO_Init+0x246>
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	61bb      	str	r3, [r7, #24]
 8004f2e:	4a2f      	ldr	r2, [pc, #188]	; (8004fec <HAL_GPIO_Init+0x304>)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	6093      	str	r3, [r2, #8]
 8004f34:	4b2d      	ldr	r3, [pc, #180]	; (8004fec <HAL_GPIO_Init+0x304>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4013      	ands	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_GPIO_Init+0x270>
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
 8004f58:	4a24      	ldr	r2, [pc, #144]	; (8004fec <HAL_GPIO_Init+0x304>)
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	60d3      	str	r3, [r2, #12]
 8004f5e:	4b23      	ldr	r3, [pc, #140]	; (8004fec <HAL_GPIO_Init+0x304>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	61bb      	str	r3, [r7, #24]
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	43db      	mvns	r3, r3
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_GPIO_Init+0x29a>
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	4a1a      	ldr	r2, [pc, #104]	; (8004fec <HAL_GPIO_Init+0x304>)
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	6053      	str	r3, [r2, #4]
 8004f88:	4b18      	ldr	r3, [pc, #96]	; (8004fec <HAL_GPIO_Init+0x304>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	43db      	mvns	r3, r3
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4013      	ands	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <HAL_GPIO_Init+0x2c4>
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
 8004fac:	4a0f      	ldr	r2, [pc, #60]	; (8004fec <HAL_GPIO_Init+0x304>)
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	61fb      	str	r3, [r7, #28]
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	2b0f      	cmp	r3, #15
 8004fbc:	f67f aea2 	bls.w	8004d04 <HAL_GPIO_Init+0x1c>
 8004fc0:	bf00      	nop
 8004fc2:	bf00      	nop
 8004fc4:	3724      	adds	r7, #36	; 0x24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	40013800 	.word	0x40013800
 8004fd8:	40020000 	.word	0x40020000
 8004fdc:	40020400 	.word	0x40020400
 8004fe0:	40020800 	.word	0x40020800
 8004fe4:	40020c00 	.word	0x40020c00
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	40013c00 	.word	0x40013c00

08004ff0 <HAL_GPIO_WritePin>:
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	807b      	strh	r3, [r7, #2]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	707b      	strb	r3, [r7, #1]
 8005000:	787b      	ldrb	r3, [r7, #1]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_GPIO_WritePin+0x1e>
 8005006:	887a      	ldrh	r2, [r7, #2]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	619a      	str	r2, [r3, #24]
 800500c:	e003      	b.n	8005016 <HAL_GPIO_WritePin+0x26>
 800500e:	887b      	ldrh	r3, [r7, #2]
 8005010:	041a      	lsls	r2, r3, #16
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	619a      	str	r2, [r3, #24]
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
	...

08005024 <HAL_GPIO_EXTI_IRQHandler>:
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	4603      	mov	r3, r0
 800502c:	80fb      	strh	r3, [r7, #6]
 800502e:	4b08      	ldr	r3, [pc, #32]	; (8005050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005030:	695a      	ldr	r2, [r3, #20]
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	4013      	ands	r3, r2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d006      	beq.n	8005048 <HAL_GPIO_EXTI_IRQHandler+0x24>
 800503a:	4a05      	ldr	r2, [pc, #20]	; (8005050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800503c:	88fb      	ldrh	r3, [r7, #6]
 800503e:	6153      	str	r3, [r2, #20]
 8005040:	88fb      	ldrh	r3, [r7, #6]
 8005042:	4618      	mov	r0, r3
 8005044:	f7fd fbfc 	bl	8002840 <HAL_GPIO_EXTI_Callback>
 8005048:	bf00      	nop
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40013c00 	.word	0x40013c00

08005054 <HAL_RCC_OscConfig>:
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RCC_OscConfig+0x12>
 8005062:	2301      	movs	r3, #1
 8005064:	e267      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d075      	beq.n	800515e <HAL_RCC_OscConfig+0x10a>
 8005072:	4b88      	ldr	r3, [pc, #544]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 030c 	and.w	r3, r3, #12
 800507a:	2b04      	cmp	r3, #4
 800507c:	d00c      	beq.n	8005098 <HAL_RCC_OscConfig+0x44>
 800507e:	4b85      	ldr	r3, [pc, #532]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	2b08      	cmp	r3, #8
 8005088:	d112      	bne.n	80050b0 <HAL_RCC_OscConfig+0x5c>
 800508a:	4b82      	ldr	r3, [pc, #520]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005096:	d10b      	bne.n	80050b0 <HAL_RCC_OscConfig+0x5c>
 8005098:	4b7e      	ldr	r3, [pc, #504]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d05b      	beq.n	800515c <HAL_RCC_OscConfig+0x108>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d157      	bne.n	800515c <HAL_RCC_OscConfig+0x108>
 80050ac:	2301      	movs	r3, #1
 80050ae:	e242      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b8:	d106      	bne.n	80050c8 <HAL_RCC_OscConfig+0x74>
 80050ba:	4b76      	ldr	r3, [pc, #472]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a75      	ldr	r2, [pc, #468]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e01d      	b.n	8005104 <HAL_RCC_OscConfig+0xb0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050d0:	d10c      	bne.n	80050ec <HAL_RCC_OscConfig+0x98>
 80050d2:	4b70      	ldr	r3, [pc, #448]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a6f      	ldr	r2, [pc, #444]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	4b6d      	ldr	r3, [pc, #436]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a6c      	ldr	r2, [pc, #432]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	e00b      	b.n	8005104 <HAL_RCC_OscConfig+0xb0>
 80050ec:	4b69      	ldr	r3, [pc, #420]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a68      	ldr	r2, [pc, #416]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	4b66      	ldr	r3, [pc, #408]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a65      	ldr	r2, [pc, #404]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80050fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d013      	beq.n	8005134 <HAL_RCC_OscConfig+0xe0>
 800510c:	f7ff f884 	bl	8004218 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0xd2>
 8005114:	f7ff f880 	bl	8004218 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b64      	cmp	r3, #100	; 0x64
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0xd2>
 8005122:	2303      	movs	r3, #3
 8005124:	e207      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 8005126:	4b5b      	ldr	r3, [pc, #364]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0xc0>
 8005132:	e014      	b.n	800515e <HAL_RCC_OscConfig+0x10a>
 8005134:	f7ff f870 	bl	8004218 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0xfa>
 800513c:	f7ff f86c 	bl	8004218 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b64      	cmp	r3, #100	; 0x64
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0xfa>
 800514a:	2303      	movs	r3, #3
 800514c:	e1f3      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 800514e:	4b51      	ldr	r3, [pc, #324]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0xe8>
 800515a:	e000      	b.n	800515e <HAL_RCC_OscConfig+0x10a>
 800515c:	bf00      	nop
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d063      	beq.n	8005232 <HAL_RCC_OscConfig+0x1de>
 800516a:	4b4a      	ldr	r3, [pc, #296]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 030c 	and.w	r3, r3, #12
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00b      	beq.n	800518e <HAL_RCC_OscConfig+0x13a>
 8005176:	4b47      	ldr	r3, [pc, #284]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 030c 	and.w	r3, r3, #12
 800517e:	2b08      	cmp	r3, #8
 8005180:	d11c      	bne.n	80051bc <HAL_RCC_OscConfig+0x168>
 8005182:	4b44      	ldr	r3, [pc, #272]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d116      	bne.n	80051bc <HAL_RCC_OscConfig+0x168>
 800518e:	4b41      	ldr	r3, [pc, #260]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d005      	beq.n	80051a6 <HAL_RCC_OscConfig+0x152>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d001      	beq.n	80051a6 <HAL_RCC_OscConfig+0x152>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e1c7      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 80051a6:	4b3b      	ldr	r3, [pc, #236]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4937      	ldr	r1, [pc, #220]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	600b      	str	r3, [r1, #0]
 80051ba:	e03a      	b.n	8005232 <HAL_RCC_OscConfig+0x1de>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_OscConfig+0x1b2>
 80051c4:	4b34      	ldr	r3, [pc, #208]	; (8005298 <HAL_RCC_OscConfig+0x244>)
 80051c6:	2201      	movs	r2, #1
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	f7ff f825 	bl	8004218 <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_OscConfig+0x190>
 80051d2:	f7ff f821 	bl	8004218 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x190>
 80051e0:	2303      	movs	r3, #3
 80051e2:	e1a8      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 80051e4:	4b2b      	ldr	r3, [pc, #172]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0f0      	beq.n	80051d2 <HAL_RCC_OscConfig+0x17e>
 80051f0:	4b28      	ldr	r3, [pc, #160]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	4925      	ldr	r1, [pc, #148]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005200:	4313      	orrs	r3, r2
 8005202:	600b      	str	r3, [r1, #0]
 8005204:	e015      	b.n	8005232 <HAL_RCC_OscConfig+0x1de>
 8005206:	4b24      	ldr	r3, [pc, #144]	; (8005298 <HAL_RCC_OscConfig+0x244>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	f7ff f804 	bl	8004218 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x1d2>
 8005214:	f7ff f800 	bl	8004218 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x1d2>
 8005222:	2303      	movs	r3, #3
 8005224:	e187      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 8005226:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0x1c0>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d036      	beq.n	80052ac <HAL_RCC_OscConfig+0x258>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d016      	beq.n	8005274 <HAL_RCC_OscConfig+0x220>
 8005246:	4b15      	ldr	r3, [pc, #84]	; (800529c <HAL_RCC_OscConfig+0x248>)
 8005248:	2201      	movs	r2, #1
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	f7fe ffe4 	bl	8004218 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x212>
 8005254:	f7fe ffe0 	bl	8004218 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x212>
 8005262:	2303      	movs	r3, #3
 8005264:	e167      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 8005266:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <HAL_RCC_OscConfig+0x240>)
 8005268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0f0      	beq.n	8005254 <HAL_RCC_OscConfig+0x200>
 8005272:	e01b      	b.n	80052ac <HAL_RCC_OscConfig+0x258>
 8005274:	4b09      	ldr	r3, [pc, #36]	; (800529c <HAL_RCC_OscConfig+0x248>)
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	f7fe ffcd 	bl	8004218 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]
 8005280:	e00e      	b.n	80052a0 <HAL_RCC_OscConfig+0x24c>
 8005282:	f7fe ffc9 	bl	8004218 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d907      	bls.n	80052a0 <HAL_RCC_OscConfig+0x24c>
 8005290:	2303      	movs	r3, #3
 8005292:	e150      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 8005294:	40023800 	.word	0x40023800
 8005298:	42470000 	.word	0x42470000
 800529c:	42470e80 	.word	0x42470e80
 80052a0:	4b88      	ldr	r3, [pc, #544]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1ea      	bne.n	8005282 <HAL_RCC_OscConfig+0x22e>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8097 	beq.w	80053e8 <HAL_RCC_OscConfig+0x394>
 80052ba:	2300      	movs	r3, #0
 80052bc:	75fb      	strb	r3, [r7, #23]
 80052be:	4b81      	ldr	r3, [pc, #516]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10f      	bne.n	80052ea <HAL_RCC_OscConfig+0x296>
 80052ca:	2300      	movs	r3, #0
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	4b7d      	ldr	r3, [pc, #500]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	4a7c      	ldr	r2, [pc, #496]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d8:	6413      	str	r3, [r2, #64]	; 0x40
 80052da:	4b7a      	ldr	r3, [pc, #488]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e2:	60bb      	str	r3, [r7, #8]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2301      	movs	r3, #1
 80052e8:	75fb      	strb	r3, [r7, #23]
 80052ea:	4b77      	ldr	r3, [pc, #476]	; (80054c8 <HAL_RCC_OscConfig+0x474>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d118      	bne.n	8005328 <HAL_RCC_OscConfig+0x2d4>
 80052f6:	4b74      	ldr	r3, [pc, #464]	; (80054c8 <HAL_RCC_OscConfig+0x474>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a73      	ldr	r2, [pc, #460]	; (80054c8 <HAL_RCC_OscConfig+0x474>)
 80052fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	f7fe ff89 	bl	8004218 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x2c8>
 800530a:	f7fe ff85 	bl	8004218 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x2c8>
 8005318:	2303      	movs	r3, #3
 800531a:	e10c      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 800531c:	4b6a      	ldr	r3, [pc, #424]	; (80054c8 <HAL_RCC_OscConfig+0x474>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0f0      	beq.n	800530a <HAL_RCC_OscConfig+0x2b6>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d106      	bne.n	800533e <HAL_RCC_OscConfig+0x2ea>
 8005330:	4b64      	ldr	r3, [pc, #400]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005334:	4a63      	ldr	r2, [pc, #396]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005336:	f043 0301 	orr.w	r3, r3, #1
 800533a:	6713      	str	r3, [r2, #112]	; 0x70
 800533c:	e01c      	b.n	8005378 <HAL_RCC_OscConfig+0x324>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2b05      	cmp	r3, #5
 8005344:	d10c      	bne.n	8005360 <HAL_RCC_OscConfig+0x30c>
 8005346:	4b5f      	ldr	r3, [pc, #380]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534a:	4a5e      	ldr	r2, [pc, #376]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 800534c:	f043 0304 	orr.w	r3, r3, #4
 8005350:	6713      	str	r3, [r2, #112]	; 0x70
 8005352:	4b5c      	ldr	r3, [pc, #368]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005356:	4a5b      	ldr	r2, [pc, #364]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005358:	f043 0301 	orr.w	r3, r3, #1
 800535c:	6713      	str	r3, [r2, #112]	; 0x70
 800535e:	e00b      	b.n	8005378 <HAL_RCC_OscConfig+0x324>
 8005360:	4b58      	ldr	r3, [pc, #352]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005364:	4a57      	ldr	r2, [pc, #348]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005366:	f023 0301 	bic.w	r3, r3, #1
 800536a:	6713      	str	r3, [r2, #112]	; 0x70
 800536c:	4b55      	ldr	r3, [pc, #340]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 800536e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005370:	4a54      	ldr	r2, [pc, #336]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005372:	f023 0304 	bic.w	r3, r3, #4
 8005376:	6713      	str	r3, [r2, #112]	; 0x70
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d015      	beq.n	80053ac <HAL_RCC_OscConfig+0x358>
 8005380:	f7fe ff4a 	bl	8004218 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]
 8005386:	e00a      	b.n	800539e <HAL_RCC_OscConfig+0x34a>
 8005388:	f7fe ff46 	bl	8004218 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	f241 3288 	movw	r2, #5000	; 0x1388
 8005396:	4293      	cmp	r3, r2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x34a>
 800539a:	2303      	movs	r3, #3
 800539c:	e0cb      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 800539e:	4b49      	ldr	r3, [pc, #292]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0ee      	beq.n	8005388 <HAL_RCC_OscConfig+0x334>
 80053aa:	e014      	b.n	80053d6 <HAL_RCC_OscConfig+0x382>
 80053ac:	f7fe ff34 	bl	8004218 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]
 80053b2:	e00a      	b.n	80053ca <HAL_RCC_OscConfig+0x376>
 80053b4:	f7fe ff30 	bl	8004218 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x376>
 80053c6:	2303      	movs	r3, #3
 80053c8:	e0b5      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 80053ca:	4b3e      	ldr	r3, [pc, #248]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1ee      	bne.n	80053b4 <HAL_RCC_OscConfig+0x360>
 80053d6:	7dfb      	ldrb	r3, [r7, #23]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d105      	bne.n	80053e8 <HAL_RCC_OscConfig+0x394>
 80053dc:	4b39      	ldr	r3, [pc, #228]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	4a38      	ldr	r2, [pc, #224]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e6:	6413      	str	r3, [r2, #64]	; 0x40
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80a1 	beq.w	8005534 <HAL_RCC_OscConfig+0x4e0>
 80053f2:	4b34      	ldr	r3, [pc, #208]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 030c 	and.w	r3, r3, #12
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d05c      	beq.n	80054b8 <HAL_RCC_OscConfig+0x464>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d141      	bne.n	800548a <HAL_RCC_OscConfig+0x436>
 8005406:	4b31      	ldr	r3, [pc, #196]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	f7fe ff04 	bl	8004218 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x3d2>
 8005414:	f7fe ff00 	bl	8004218 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x3d2>
 8005422:	2303      	movs	r3, #3
 8005424:	e087      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 8005426:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x3c0>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69da      	ldr	r2, [r3, #28]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	019b      	lsls	r3, r3, #6
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005448:	085b      	lsrs	r3, r3, #1
 800544a:	3b01      	subs	r3, #1
 800544c:	041b      	lsls	r3, r3, #16
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	061b      	lsls	r3, r3, #24
 8005456:	491b      	ldr	r1, [pc, #108]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005458:	4313      	orrs	r3, r2
 800545a:	604b      	str	r3, [r1, #4]
 800545c:	4b1b      	ldr	r3, [pc, #108]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 800545e:	2201      	movs	r2, #1
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	f7fe fed9 	bl	8004218 <HAL_GetTick>
 8005466:	6138      	str	r0, [r7, #16]
 8005468:	e008      	b.n	800547c <HAL_RCC_OscConfig+0x428>
 800546a:	f7fe fed5 	bl	8004218 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x428>
 8005478:	2303      	movs	r3, #3
 800547a:	e05c      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 800547c:	4b11      	ldr	r3, [pc, #68]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0f0      	beq.n	800546a <HAL_RCC_OscConfig+0x416>
 8005488:	e054      	b.n	8005534 <HAL_RCC_OscConfig+0x4e0>
 800548a:	4b10      	ldr	r3, [pc, #64]	; (80054cc <HAL_RCC_OscConfig+0x478>)
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	f7fe fec2 	bl	8004218 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x456>
 8005498:	f7fe febe 	bl	8004218 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x456>
 80054a6:	2303      	movs	r3, #3
 80054a8:	e045      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 80054aa:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <HAL_RCC_OscConfig+0x470>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f0      	bne.n	8005498 <HAL_RCC_OscConfig+0x444>
 80054b6:	e03d      	b.n	8005534 <HAL_RCC_OscConfig+0x4e0>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d107      	bne.n	80054d0 <HAL_RCC_OscConfig+0x47c>
 80054c0:	2301      	movs	r3, #1
 80054c2:	e038      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 80054c4:	40023800 	.word	0x40023800
 80054c8:	40007000 	.word	0x40007000
 80054cc:	42470060 	.word	0x42470060
 80054d0:	4b1b      	ldr	r3, [pc, #108]	; (8005540 <HAL_RCC_OscConfig+0x4ec>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d028      	beq.n	8005530 <HAL_RCC_OscConfig+0x4dc>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d121      	bne.n	8005530 <HAL_RCC_OscConfig+0x4dc>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d11a      	bne.n	8005530 <HAL_RCC_OscConfig+0x4dc>
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005500:	4013      	ands	r3, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005506:	0192      	lsls	r2, r2, #6
 8005508:	4293      	cmp	r3, r2
 800550a:	d111      	bne.n	8005530 <HAL_RCC_OscConfig+0x4dc>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	085b      	lsrs	r3, r3, #1
 8005518:	3b01      	subs	r3, #1
 800551a:	041b      	lsls	r3, r3, #16
 800551c:	429a      	cmp	r2, r3
 800551e:	d107      	bne.n	8005530 <HAL_RCC_OscConfig+0x4dc>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552a:	061b      	lsls	r3, r3, #24
 800552c:	429a      	cmp	r2, r3
 800552e:	d001      	beq.n	8005534 <HAL_RCC_OscConfig+0x4e0>
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 8005534:	2300      	movs	r3, #0
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40023800 	.word	0x40023800

08005544 <HAL_RCC_ClockConfig>:
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_RCC_ClockConfig+0x14>
 8005554:	2301      	movs	r3, #1
 8005556:	e0cc      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
 8005558:	4b68      	ldr	r3, [pc, #416]	; (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	d90c      	bls.n	8005580 <HAL_RCC_ClockConfig+0x3c>
 8005566:	4b65      	ldr	r3, [pc, #404]	; (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	4b63      	ldr	r3, [pc, #396]	; (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d001      	beq.n	8005580 <HAL_RCC_ClockConfig+0x3c>
 800557c:	2301      	movs	r3, #1
 800557e:	e0b8      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d020      	beq.n	80055ce <HAL_RCC_ClockConfig+0x8a>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x60>
 8005598:	4b59      	ldr	r3, [pc, #356]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	4a58      	ldr	r2, [pc, #352]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 800559e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055a2:	6093      	str	r3, [r2, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <HAL_RCC_ClockConfig+0x78>
 80055b0:	4b53      	ldr	r3, [pc, #332]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	4a52      	ldr	r2, [pc, #328]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055ba:	6093      	str	r3, [r2, #8]
 80055bc:	4b50      	ldr	r3, [pc, #320]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	494d      	ldr	r1, [pc, #308]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	608b      	str	r3, [r1, #8]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d044      	beq.n	8005664 <HAL_RCC_ClockConfig+0x120>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d107      	bne.n	80055f2 <HAL_RCC_ClockConfig+0xae>
 80055e2:	4b47      	ldr	r3, [pc, #284]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d119      	bne.n	8005622 <HAL_RCC_ClockConfig+0xde>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e07f      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d003      	beq.n	8005602 <HAL_RCC_ClockConfig+0xbe>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d107      	bne.n	8005612 <HAL_RCC_ClockConfig+0xce>
 8005602:	4b3f      	ldr	r3, [pc, #252]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <HAL_RCC_ClockConfig+0xde>
 800560e:	2301      	movs	r3, #1
 8005610:	e06f      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
 8005612:	4b3b      	ldr	r3, [pc, #236]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_RCC_ClockConfig+0xde>
 800561e:	2301      	movs	r3, #1
 8005620:	e067      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
 8005622:	4b37      	ldr	r3, [pc, #220]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f023 0203 	bic.w	r2, r3, #3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	4934      	ldr	r1, [pc, #208]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005630:	4313      	orrs	r3, r2
 8005632:	608b      	str	r3, [r1, #8]
 8005634:	f7fe fdf0 	bl	8004218 <HAL_GetTick>
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	e00a      	b.n	8005652 <HAL_RCC_ClockConfig+0x10e>
 800563c:	f7fe fdec 	bl	8004218 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	f241 3288 	movw	r2, #5000	; 0x1388
 800564a:	4293      	cmp	r3, r2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_ClockConfig+0x10e>
 800564e:	2303      	movs	r3, #3
 8005650:	e04f      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
 8005652:	4b2b      	ldr	r3, [pc, #172]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 020c 	and.w	r2, r3, #12
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	429a      	cmp	r2, r3
 8005662:	d1eb      	bne.n	800563c <HAL_RCC_ClockConfig+0xf8>
 8005664:	4b25      	ldr	r3, [pc, #148]	; (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d20c      	bcs.n	800568c <HAL_RCC_ClockConfig+0x148>
 8005672:	4b22      	ldr	r3, [pc, #136]	; (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	701a      	strb	r2, [r3, #0]
 800567a:	4b20      	ldr	r3, [pc, #128]	; (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d001      	beq.n	800568c <HAL_RCC_ClockConfig+0x148>
 8005688:	2301      	movs	r3, #1
 800568a:	e032      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <HAL_RCC_ClockConfig+0x166>
 8005698:	4b19      	ldr	r3, [pc, #100]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4916      	ldr	r1, [pc, #88]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	608b      	str	r3, [r1, #8]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d009      	beq.n	80056ca <HAL_RCC_ClockConfig+0x186>
 80056b6:	4b12      	ldr	r3, [pc, #72]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	490e      	ldr	r1, [pc, #56]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	608b      	str	r3, [r1, #8]
 80056ca:	f000 f821 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 80056ce:	4602      	mov	r2, r0
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	091b      	lsrs	r3, r3, #4
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	490a      	ldr	r1, [pc, #40]	; (8005704 <HAL_RCC_ClockConfig+0x1c0>)
 80056dc:	5ccb      	ldrb	r3, [r1, r3]
 80056de:	fa22 f303 	lsr.w	r3, r2, r3
 80056e2:	4a09      	ldr	r2, [pc, #36]	; (8005708 <HAL_RCC_ClockConfig+0x1c4>)
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	4b09      	ldr	r3, [pc, #36]	; (800570c <HAL_RCC_ClockConfig+0x1c8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fe fd50 	bl	8004190 <HAL_InitTick>
 80056f0:	2300      	movs	r3, #0
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40023c00 	.word	0x40023c00
 8005700:	40023800 	.word	0x40023800
 8005704:	0800885c 	.word	0x0800885c
 8005708:	20001064 	.word	0x20001064
 800570c:	20001068 	.word	0x20001068

08005710 <HAL_RCC_GetSysClockFreq>:
 8005710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005714:	b094      	sub	sp, #80	; 0x50
 8005716:	af00      	add	r7, sp, #0
 8005718:	2300      	movs	r3, #0
 800571a:	647b      	str	r3, [r7, #68]	; 0x44
 800571c:	2300      	movs	r3, #0
 800571e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005720:	2300      	movs	r3, #0
 8005722:	643b      	str	r3, [r7, #64]	; 0x40
 8005724:	2300      	movs	r3, #0
 8005726:	64bb      	str	r3, [r7, #72]	; 0x48
 8005728:	4b79      	ldr	r3, [pc, #484]	; (8005910 <HAL_RCC_GetSysClockFreq+0x200>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f003 030c 	and.w	r3, r3, #12
 8005730:	2b08      	cmp	r3, #8
 8005732:	d00d      	beq.n	8005750 <HAL_RCC_GetSysClockFreq+0x40>
 8005734:	2b08      	cmp	r3, #8
 8005736:	f200 80e1 	bhi.w	80058fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_RCC_GetSysClockFreq+0x34>
 800573e:	2b04      	cmp	r3, #4
 8005740:	d003      	beq.n	800574a <HAL_RCC_GetSysClockFreq+0x3a>
 8005742:	e0db      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005744:	4b73      	ldr	r3, [pc, #460]	; (8005914 <HAL_RCC_GetSysClockFreq+0x204>)
 8005746:	64bb      	str	r3, [r7, #72]	; 0x48
 8005748:	e0db      	b.n	8005902 <HAL_RCC_GetSysClockFreq+0x1f2>
 800574a:	4b73      	ldr	r3, [pc, #460]	; (8005918 <HAL_RCC_GetSysClockFreq+0x208>)
 800574c:	64bb      	str	r3, [r7, #72]	; 0x48
 800574e:	e0d8      	b.n	8005902 <HAL_RCC_GetSysClockFreq+0x1f2>
 8005750:	4b6f      	ldr	r3, [pc, #444]	; (8005910 <HAL_RCC_GetSysClockFreq+0x200>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005758:	647b      	str	r3, [r7, #68]	; 0x44
 800575a:	4b6d      	ldr	r3, [pc, #436]	; (8005910 <HAL_RCC_GetSysClockFreq+0x200>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d063      	beq.n	800582e <HAL_RCC_GetSysClockFreq+0x11e>
 8005766:	4b6a      	ldr	r3, [pc, #424]	; (8005910 <HAL_RCC_GetSysClockFreq+0x200>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	099b      	lsrs	r3, r3, #6
 800576c:	2200      	movs	r2, #0
 800576e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005770:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005778:	633b      	str	r3, [r7, #48]	; 0x30
 800577a:	2300      	movs	r3, #0
 800577c:	637b      	str	r3, [r7, #52]	; 0x34
 800577e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005782:	4622      	mov	r2, r4
 8005784:	462b      	mov	r3, r5
 8005786:	f04f 0000 	mov.w	r0, #0
 800578a:	f04f 0100 	mov.w	r1, #0
 800578e:	0159      	lsls	r1, r3, #5
 8005790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005794:	0150      	lsls	r0, r2, #5
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4621      	mov	r1, r4
 800579c:	1a51      	subs	r1, r2, r1
 800579e:	6139      	str	r1, [r7, #16]
 80057a0:	4629      	mov	r1, r5
 80057a2:	eb63 0301 	sbc.w	r3, r3, r1
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057b4:	4659      	mov	r1, fp
 80057b6:	018b      	lsls	r3, r1, #6
 80057b8:	4651      	mov	r1, sl
 80057ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057be:	4651      	mov	r1, sl
 80057c0:	018a      	lsls	r2, r1, #6
 80057c2:	4651      	mov	r1, sl
 80057c4:	ebb2 0801 	subs.w	r8, r2, r1
 80057c8:	4659      	mov	r1, fp
 80057ca:	eb63 0901 	sbc.w	r9, r3, r1
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057e2:	4690      	mov	r8, r2
 80057e4:	4699      	mov	r9, r3
 80057e6:	4623      	mov	r3, r4
 80057e8:	eb18 0303 	adds.w	r3, r8, r3
 80057ec:	60bb      	str	r3, [r7, #8]
 80057ee:	462b      	mov	r3, r5
 80057f0:	eb49 0303 	adc.w	r3, r9, r3
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	f04f 0200 	mov.w	r2, #0
 80057fa:	f04f 0300 	mov.w	r3, #0
 80057fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005802:	4629      	mov	r1, r5
 8005804:	024b      	lsls	r3, r1, #9
 8005806:	4621      	mov	r1, r4
 8005808:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800580c:	4621      	mov	r1, r4
 800580e:	024a      	lsls	r2, r1, #9
 8005810:	4610      	mov	r0, r2
 8005812:	4619      	mov	r1, r3
 8005814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005816:	2200      	movs	r2, #0
 8005818:	62bb      	str	r3, [r7, #40]	; 0x28
 800581a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800581c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005820:	f7fa ffe0 	bl	80007e4 <__aeabi_uldivmod>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4613      	mov	r3, r2
 800582a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800582c:	e058      	b.n	80058e0 <HAL_RCC_GetSysClockFreq+0x1d0>
 800582e:	4b38      	ldr	r3, [pc, #224]	; (8005910 <HAL_RCC_GetSysClockFreq+0x200>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	099b      	lsrs	r3, r3, #6
 8005834:	2200      	movs	r2, #0
 8005836:	4618      	mov	r0, r3
 8005838:	4611      	mov	r1, r2
 800583a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800583e:	623b      	str	r3, [r7, #32]
 8005840:	2300      	movs	r3, #0
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
 8005844:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005848:	4642      	mov	r2, r8
 800584a:	464b      	mov	r3, r9
 800584c:	f04f 0000 	mov.w	r0, #0
 8005850:	f04f 0100 	mov.w	r1, #0
 8005854:	0159      	lsls	r1, r3, #5
 8005856:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800585a:	0150      	lsls	r0, r2, #5
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	4641      	mov	r1, r8
 8005862:	ebb2 0a01 	subs.w	sl, r2, r1
 8005866:	4649      	mov	r1, r9
 8005868:	eb63 0b01 	sbc.w	fp, r3, r1
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005878:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800587c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005880:	ebb2 040a 	subs.w	r4, r2, sl
 8005884:	eb63 050b 	sbc.w	r5, r3, fp
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	00eb      	lsls	r3, r5, #3
 8005892:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005896:	00e2      	lsls	r2, r4, #3
 8005898:	4614      	mov	r4, r2
 800589a:	461d      	mov	r5, r3
 800589c:	4643      	mov	r3, r8
 800589e:	18e3      	adds	r3, r4, r3
 80058a0:	603b      	str	r3, [r7, #0]
 80058a2:	464b      	mov	r3, r9
 80058a4:	eb45 0303 	adc.w	r3, r5, r3
 80058a8:	607b      	str	r3, [r7, #4]
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	f04f 0300 	mov.w	r3, #0
 80058b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058b6:	4629      	mov	r1, r5
 80058b8:	028b      	lsls	r3, r1, #10
 80058ba:	4621      	mov	r1, r4
 80058bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058c0:	4621      	mov	r1, r4
 80058c2:	028a      	lsls	r2, r1, #10
 80058c4:	4610      	mov	r0, r2
 80058c6:	4619      	mov	r1, r3
 80058c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058ca:	2200      	movs	r2, #0
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	61fa      	str	r2, [r7, #28]
 80058d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058d4:	f7fa ff86 	bl	80007e4 <__aeabi_uldivmod>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4613      	mov	r3, r2
 80058de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <HAL_RCC_GetSysClockFreq+0x200>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	0c1b      	lsrs	r3, r3, #16
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	3301      	adds	r3, #1
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	643b      	str	r3, [r7, #64]	; 0x40
 80058f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80058fa:	e002      	b.n	8005902 <HAL_RCC_GetSysClockFreq+0x1f2>
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <HAL_RCC_GetSysClockFreq+0x204>)
 80058fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005900:	bf00      	nop
 8005902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005904:	4618      	mov	r0, r3
 8005906:	3750      	adds	r7, #80	; 0x50
 8005908:	46bd      	mov	sp, r7
 800590a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800590e:	bf00      	nop
 8005910:	40023800 	.word	0x40023800
 8005914:	00f42400 	.word	0x00f42400
 8005918:	007a1200 	.word	0x007a1200

0800591c <HAL_RCC_GetHCLKFreq>:
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
 8005920:	4b03      	ldr	r3, [pc, #12]	; (8005930 <HAL_RCC_GetHCLKFreq+0x14>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4618      	mov	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	20001064 	.word	0x20001064

08005934 <HAL_RCC_GetPCLK1Freq>:
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
 8005938:	f7ff fff0 	bl	800591c <HAL_RCC_GetHCLKFreq>
 800593c:	4602      	mov	r2, r0
 800593e:	4b05      	ldr	r3, [pc, #20]	; (8005954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	0a9b      	lsrs	r3, r3, #10
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	4903      	ldr	r1, [pc, #12]	; (8005958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800594a:	5ccb      	ldrb	r3, [r1, r3]
 800594c:	fa22 f303 	lsr.w	r3, r2, r3
 8005950:	4618      	mov	r0, r3
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40023800 	.word	0x40023800
 8005958:	0800886c 	.word	0x0800886c

0800595c <HAL_RCC_GetPCLK2Freq>:
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
 8005960:	f7ff ffdc 	bl	800591c <HAL_RCC_GetHCLKFreq>
 8005964:	4602      	mov	r2, r0
 8005966:	4b05      	ldr	r3, [pc, #20]	; (800597c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	0b5b      	lsrs	r3, r3, #13
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	4903      	ldr	r1, [pc, #12]	; (8005980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005972:	5ccb      	ldrb	r3, [r1, r3]
 8005974:	fa22 f303 	lsr.w	r3, r2, r3
 8005978:	4618      	mov	r0, r3
 800597a:	bd80      	pop	{r7, pc}
 800597c:	40023800 	.word	0x40023800
 8005980:	0800886c 	.word	0x0800886c

08005984 <HAL_SPI_Init>:
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_SPI_Init+0x12>
 8005992:	2301      	movs	r3, #1
 8005994:	e07b      	b.n	8005a8e <HAL_SPI_Init+0x10a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	2b00      	cmp	r3, #0
 800599c:	d108      	bne.n	80059b0 <HAL_SPI_Init+0x2c>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059a6:	d009      	beq.n	80059bc <HAL_SPI_Init+0x38>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	61da      	str	r2, [r3, #28]
 80059ae:	e005      	b.n	80059bc <HAL_SPI_Init+0x38>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	611a      	str	r2, [r3, #16]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	615a      	str	r2, [r3, #20]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	629a      	str	r2, [r3, #40]	; 0x28
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d106      	bne.n	80059dc <HAL_SPI_Init+0x58>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7fd ffb8 	bl	800394c <HAL_SPI_MspInit>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a04:	431a      	orrs	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a40:	ea42 0103 	orr.w	r1, r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	0c1b      	lsrs	r3, r3, #16
 8005a5a:	f003 0104 	and.w	r1, r3, #4
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	f003 0210 	and.w	r2, r3, #16
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	605a      	str	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69da      	ldr	r2, [r3, #28]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a7c:	61da      	str	r2, [r3, #28]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	655a      	str	r2, [r3, #84]	; 0x54
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <HAL_SPI_Transmit_DMA>:
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	80fb      	strh	r3, [r7, #6]
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	75fb      	strb	r3, [r7, #23]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <HAL_SPI_Transmit_DMA+0x20>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e09b      	b.n	8005bf0 <HAL_SPI_Transmit_DMA+0x158>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d002      	beq.n	8005ad2 <HAL_SPI_Transmit_DMA+0x3a>
 8005acc:	2302      	movs	r3, #2
 8005ace:	75fb      	strb	r3, [r7, #23]
 8005ad0:	e089      	b.n	8005be6 <HAL_SPI_Transmit_DMA+0x14e>
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <HAL_SPI_Transmit_DMA+0x46>
 8005ad8:	88fb      	ldrh	r3, [r7, #6]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <HAL_SPI_Transmit_DMA+0x4c>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	75fb      	strb	r3, [r7, #23]
 8005ae2:	e080      	b.n	8005be6 <HAL_SPI_Transmit_DMA+0x14e>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2203      	movs	r2, #3
 8005ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	655a      	str	r2, [r3, #84]	; 0x54
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	631a      	str	r2, [r3, #48]	; 0x30
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	88fa      	ldrh	r2, [r7, #6]
 8005afc:	869a      	strh	r2, [r3, #52]	; 0x34
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	88fa      	ldrh	r2, [r7, #6]
 8005b02:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	639a      	str	r2, [r3, #56]	; 0x38
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	645a      	str	r2, [r3, #68]	; 0x44
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	641a      	str	r2, [r3, #64]	; 0x40
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b2a:	d10f      	bne.n	8005b4c <HAL_SPI_Transmit_DMA+0xb4>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b50:	4a29      	ldr	r2, [pc, #164]	; (8005bf8 <HAL_SPI_Transmit_DMA+0x160>)
 8005b52:	641a      	str	r2, [r3, #64]	; 0x40
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b58:	4a28      	ldr	r2, [pc, #160]	; (8005bfc <HAL_SPI_Transmit_DMA+0x164>)
 8005b5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b60:	4a27      	ldr	r2, [pc, #156]	; (8005c00 <HAL_SPI_Transmit_DMA+0x168>)
 8005b62:	64da      	str	r2, [r3, #76]	; 0x4c
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b68:	2200      	movs	r2, #0
 8005b6a:	651a      	str	r2, [r3, #80]	; 0x50
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b74:	4619      	mov	r1, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	330c      	adds	r3, #12
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f7fe fd5c 	bl	8004640 <HAL_DMA_Start_IT>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00c      	beq.n	8005ba8 <HAL_SPI_Transmit_DMA+0x110>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b92:	f043 0210 	orr.w	r2, r3, #16
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	655a      	str	r2, [r3, #84]	; 0x54
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	75fb      	strb	r3, [r7, #23]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005ba6:	e01e      	b.n	8005be6 <HAL_SPI_Transmit_DMA+0x14e>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	d007      	beq.n	8005bc6 <HAL_SPI_Transmit_DMA+0x12e>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0220 	orr.w	r2, r2, #32
 8005bd4:	605a      	str	r2, [r3, #4]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0202 	orr.w	r2, r2, #2
 8005be4:	605a      	str	r2, [r3, #4]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	08005ebd 	.word	0x08005ebd
 8005bfc:	08005e15 	.word	0x08005e15
 8005c00:	08005ed9 	.word	0x08005ed9

08005c04 <HAL_SPI_IRQHandler>:
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b088      	sub	sp, #32
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	61fb      	str	r3, [r7, #28]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	61bb      	str	r3, [r7, #24]
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10e      	bne.n	8005c44 <HAL_SPI_IRQHandler+0x40>
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d009      	beq.n	8005c44 <HAL_SPI_IRQHandler+0x40>
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d004      	beq.n	8005c44 <HAL_SPI_IRQHandler+0x40>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	4798      	blx	r3
 8005c42:	e0ce      	b.n	8005de2 <HAL_SPI_IRQHandler+0x1de>
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d009      	beq.n	8005c62 <HAL_SPI_IRQHandler+0x5e>
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d004      	beq.n	8005c62 <HAL_SPI_IRQHandler+0x5e>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	4798      	blx	r3
 8005c60:	e0bf      	b.n	8005de2 <HAL_SPI_IRQHandler+0x1de>
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	f003 0320 	and.w	r3, r3, #32
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10a      	bne.n	8005c82 <HAL_SPI_IRQHandler+0x7e>
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d105      	bne.n	8005c82 <HAL_SPI_IRQHandler+0x7e>
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 80b0 	beq.w	8005de2 <HAL_SPI_IRQHandler+0x1de>
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 80aa 	beq.w	8005de2 <HAL_SPI_IRQHandler+0x1de>
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d023      	beq.n	8005ce0 <HAL_SPI_IRQHandler+0xdc>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d011      	beq.n	8005cc8 <HAL_SPI_IRQHandler+0xc4>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca8:	f043 0204 	orr.w	r2, r3, #4
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	655a      	str	r2, [r3, #84]	; 0x54
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	617b      	str	r3, [r7, #20]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	e00b      	b.n	8005ce0 <HAL_SPI_IRQHandler+0xdc>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	613b      	str	r3, [r7, #16]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	613b      	str	r3, [r7, #16]
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	e080      	b.n	8005de2 <HAL_SPI_IRQHandler+0x1de>
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d014      	beq.n	8005d14 <HAL_SPI_IRQHandler+0x110>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cee:	f043 0201 	orr.w	r2, r3, #1
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	655a      	str	r2, [r3, #84]	; 0x54
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00c      	beq.n	8005d38 <HAL_SPI_IRQHandler+0x134>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d22:	f043 0208 	orr.w	r2, r3, #8
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	655a      	str	r2, [r3, #84]	; 0x54
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60bb      	str	r3, [r7, #8]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	60bb      	str	r3, [r7, #8]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d04f      	beq.n	8005de0 <HAL_SPI_IRQHandler+0x1dc>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d4e:	605a      	str	r2, [r3, #4]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d104      	bne.n	8005d6c <HAL_SPI_IRQHandler+0x168>
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d034      	beq.n	8005dd6 <HAL_SPI_IRQHandler+0x1d2>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0203 	bic.w	r2, r2, #3
 8005d7a:	605a      	str	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d011      	beq.n	8005da8 <HAL_SPI_IRQHandler+0x1a4>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d88:	4a17      	ldr	r2, [pc, #92]	; (8005de8 <HAL_SPI_IRQHandler+0x1e4>)
 8005d8a:	651a      	str	r2, [r3, #80]	; 0x50
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fe fd1d 	bl	80047d0 <HAL_DMA_Abort_IT>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d005      	beq.n	8005da8 <HAL_SPI_IRQHandler+0x1a4>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	655a      	str	r2, [r3, #84]	; 0x54
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d016      	beq.n	8005dde <HAL_SPI_IRQHandler+0x1da>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db4:	4a0c      	ldr	r2, [pc, #48]	; (8005de8 <HAL_SPI_IRQHandler+0x1e4>)
 8005db6:	651a      	str	r2, [r3, #80]	; 0x50
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fe fd07 	bl	80047d0 <HAL_DMA_Abort_IT>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <HAL_SPI_IRQHandler+0x1da>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	655a      	str	r2, [r3, #84]	; 0x54
 8005dd4:	e003      	b.n	8005dde <HAL_SPI_IRQHandler+0x1da>
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f812 	bl	8005e00 <HAL_SPI_ErrorCallback>
 8005ddc:	e000      	b.n	8005de0 <HAL_SPI_IRQHandler+0x1dc>
 8005dde:	bf00      	nop
 8005de0:	bf00      	nop
 8005de2:	3720      	adds	r7, #32
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	08005f19 	.word	0x08005f19

08005dec <HAL_SPI_TxHalfCpltCallback>:
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_SPI_ErrorCallback>:
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <SPI_DMATransmitCplt>:
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	f7fe f9f9 	bl	8004218 <HAL_GetTick>
 8005e26:	6138      	str	r0, [r7, #16]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e36:	d03b      	beq.n	8005eb0 <SPI_DMATransmitCplt+0x9c>
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0220 	bic.w	r2, r2, #32
 8005e46:	605a      	str	r2, [r3, #4]
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0202 	bic.w	r2, r2, #2
 8005e56:	605a      	str	r2, [r3, #4]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	2164      	movs	r1, #100	; 0x64
 8005e5c:	6978      	ldr	r0, [r7, #20]
 8005e5e:	f000 f8f7 	bl	8006050 <SPI_EndRxTxTransaction>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d005      	beq.n	8005e74 <SPI_DMATransmitCplt+0x60>
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6c:	f043 0220 	orr.w	r2, r3, #32
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	655a      	str	r2, [r3, #84]	; 0x54
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <SPI_DMATransmitCplt+0x7e>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2200      	movs	r2, #0
 8005e96:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <SPI_DMATransmitCplt+0x9c>
 8005ea8:	6978      	ldr	r0, [r7, #20]
 8005eaa:	f7ff ffa9 	bl	8005e00 <HAL_SPI_ErrorCallback>
 8005eae:	e002      	b.n	8005eb6 <SPI_DMATransmitCplt+0xa2>
 8005eb0:	6978      	ldr	r0, [r7, #20]
 8005eb2:	f7fe f8eb 	bl	800408c <HAL_SPI_TxCpltCallback>
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <SPI_DMAHalfTransmitCplt>:
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f7ff ff8e 	bl	8005dec <HAL_SPI_TxHalfCpltCallback>
 8005ed0:	bf00      	nop
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <SPI_DMAError>:
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0203 	bic.w	r2, r2, #3
 8005ef4:	605a      	str	r2, [r3, #4]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efa:	f043 0210 	orr.w	r2, r3, #16
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	655a      	str	r2, [r3, #84]	; 0x54
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f7ff ff78 	bl	8005e00 <HAL_SPI_ErrorCallback>
 8005f10:	bf00      	nop
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <SPI_DMAAbortOnError>:
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f7ff ff64 	bl	8005e00 <HAL_SPI_ErrorCallback>
 8005f38:	bf00      	nop
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <SPI_WaitFlagStateUntilTimeout>:
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	71fb      	strb	r3, [r7, #7]
 8005f50:	f7fe f962 	bl	8004218 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	61fb      	str	r3, [r7, #28]
 8005f60:	f7fe f95a 	bl	8004218 <HAL_GetTick>
 8005f64:	61b8      	str	r0, [r7, #24]
 8005f66:	4b39      	ldr	r3, [pc, #228]	; (800604c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	015b      	lsls	r3, r3, #5
 8005f6c:	0d1b      	lsrs	r3, r3, #20
 8005f6e:	69fa      	ldr	r2, [r7, #28]
 8005f70:	fb02 f303 	mul.w	r3, r2, r3
 8005f74:	617b      	str	r3, [r7, #20]
 8005f76:	e054      	b.n	8006022 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f7e:	d050      	beq.n	8006022 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005f80:	f7fe f94a 	bl	8004218 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d902      	bls.n	8005f96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d13d      	bne.n	8006012 <SPI_WaitFlagStateUntilTimeout+0xd2>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fa4:	605a      	str	r2, [r3, #4]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fae:	d111      	bne.n	8005fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb8:	d004      	beq.n	8005fc4 <SPI_WaitFlagStateUntilTimeout+0x84>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc2:	d107      	bne.n	8005fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fdc:	d10f      	bne.n	8005ffe <SPI_WaitFlagStateUntilTimeout+0xbe>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800600e:	2303      	movs	r3, #3
 8006010:	e017      	b.n	8006042 <SPI_WaitFlagStateUntilTimeout+0x102>
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <SPI_WaitFlagStateUntilTimeout+0xdc>
 8006018:	2300      	movs	r3, #0
 800601a:	61fb      	str	r3, [r7, #28]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	3b01      	subs	r3, #1
 8006020:	617b      	str	r3, [r7, #20]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4013      	ands	r3, r2
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	429a      	cmp	r2, r3
 8006030:	bf0c      	ite	eq
 8006032:	2301      	moveq	r3, #1
 8006034:	2300      	movne	r3, #0
 8006036:	b2db      	uxtb	r3, r3
 8006038:	461a      	mov	r2, r3
 800603a:	79fb      	ldrb	r3, [r7, #7]
 800603c:	429a      	cmp	r2, r3
 800603e:	d19b      	bne.n	8005f78 <SPI_WaitFlagStateUntilTimeout+0x38>
 8006040:	2300      	movs	r3, #0
 8006042:	4618      	mov	r0, r3
 8006044:	3720      	adds	r7, #32
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20001064 	.word	0x20001064

08006050 <SPI_EndRxTxTransaction>:
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af02      	add	r7, sp, #8
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	4b1b      	ldr	r3, [pc, #108]	; (80060cc <SPI_EndRxTxTransaction+0x7c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1b      	ldr	r2, [pc, #108]	; (80060d0 <SPI_EndRxTxTransaction+0x80>)
 8006062:	fba2 2303 	umull	r2, r3, r2, r3
 8006066:	0d5b      	lsrs	r3, r3, #21
 8006068:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800606c:	fb02 f303 	mul.w	r3, r2, r3
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800607a:	d112      	bne.n	80060a2 <SPI_EndRxTxTransaction+0x52>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2200      	movs	r2, #0
 8006084:	2180      	movs	r1, #128	; 0x80
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f7ff ff5a 	bl	8005f40 <SPI_WaitFlagStateUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d016      	beq.n	80060c0 <SPI_EndRxTxTransaction+0x70>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006096:	f043 0220 	orr.w	r2, r3, #32
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	655a      	str	r2, [r3, #84]	; 0x54
 800609e:	2303      	movs	r3, #3
 80060a0:	e00f      	b.n	80060c2 <SPI_EndRxTxTransaction+0x72>
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <SPI_EndRxTxTransaction+0x6e>
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b8:	2b80      	cmp	r3, #128	; 0x80
 80060ba:	d0f2      	beq.n	80060a2 <SPI_EndRxTxTransaction+0x52>
 80060bc:	e000      	b.n	80060c0 <SPI_EndRxTxTransaction+0x70>
 80060be:	bf00      	nop
 80060c0:	2300      	movs	r3, #0
 80060c2:	4618      	mov	r0, r3
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	20001064 	.word	0x20001064
 80060d0:	165e9f81 	.word	0x165e9f81

080060d4 <HAL_TIM_Base_Init>:
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_TIM_Base_Init+0x12>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e041      	b.n	800616a <HAL_TIM_Base_Init+0x96>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d106      	bne.n	8006100 <HAL_TIM_Base_Init+0x2c>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fd fca8 	bl	8003a50 <HAL_TIM_Base_MspInit>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3304      	adds	r3, #4
 8006110:	4619      	mov	r1, r3
 8006112:	4610      	mov	r0, r2
 8006114:	f000 fef4 	bl	8006f00 <TIM_Base_SetConfig>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006168:	2300      	movs	r3, #0
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <HAL_TIM_Base_Start_IT>:
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b01      	cmp	r3, #1
 8006186:	d001      	beq.n	800618c <HAL_TIM_Base_Start_IT+0x18>
 8006188:	2301      	movs	r3, #1
 800618a:	e044      	b.n	8006216 <HAL_TIM_Base_Start_IT+0xa2>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0201 	orr.w	r2, r2, #1
 80061a2:	60da      	str	r2, [r3, #12]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a1e      	ldr	r2, [pc, #120]	; (8006224 <HAL_TIM_Base_Start_IT+0xb0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d018      	beq.n	80061e0 <HAL_TIM_Base_Start_IT+0x6c>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b6:	d013      	beq.n	80061e0 <HAL_TIM_Base_Start_IT+0x6c>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a1a      	ldr	r2, [pc, #104]	; (8006228 <HAL_TIM_Base_Start_IT+0xb4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00e      	beq.n	80061e0 <HAL_TIM_Base_Start_IT+0x6c>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a19      	ldr	r2, [pc, #100]	; (800622c <HAL_TIM_Base_Start_IT+0xb8>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d009      	beq.n	80061e0 <HAL_TIM_Base_Start_IT+0x6c>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a17      	ldr	r2, [pc, #92]	; (8006230 <HAL_TIM_Base_Start_IT+0xbc>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d004      	beq.n	80061e0 <HAL_TIM_Base_Start_IT+0x6c>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a16      	ldr	r2, [pc, #88]	; (8006234 <HAL_TIM_Base_Start_IT+0xc0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d111      	bne.n	8006204 <HAL_TIM_Base_Start_IT+0x90>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b06      	cmp	r3, #6
 80061f0:	d010      	beq.n	8006214 <HAL_TIM_Base_Start_IT+0xa0>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f042 0201 	orr.w	r2, r2, #1
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	e007      	b.n	8006214 <HAL_TIM_Base_Start_IT+0xa0>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0201 	orr.w	r2, r2, #1
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	2300      	movs	r3, #0
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40010000 	.word	0x40010000
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800
 8006230:	40000c00 	.word	0x40000c00
 8006234:	40014000 	.word	0x40014000

08006238 <HAL_TIM_PWM_Init>:
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_TIM_PWM_Init+0x12>
 8006246:	2301      	movs	r3, #1
 8006248:	e041      	b.n	80062ce <HAL_TIM_PWM_Init+0x96>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d106      	bne.n	8006264 <HAL_TIM_PWM_Init+0x2c>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f839 	bl	80062d6 <HAL_TIM_PWM_MspInit>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	3304      	adds	r3, #4
 8006274:	4619      	mov	r1, r3
 8006276:	4610      	mov	r0, r2
 8006278:	f000 fe42 	bl	8006f00 <TIM_Base_SetConfig>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80062cc:	2300      	movs	r3, #0
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <HAL_TIM_PWM_MspInit>:
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
	...

080062ec <HAL_TIM_PWM_Start_DMA>:
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	807b      	strh	r3, [r7, #2]
 80062fa:	2300      	movs	r3, #0
 80062fc:	75fb      	strb	r3, [r7, #23]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d109      	bne.n	8006318 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	bf0c      	ite	eq
 8006310:	2301      	moveq	r3, #1
 8006312:	2300      	movne	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	e022      	b.n	800635e <HAL_TIM_PWM_Start_DMA+0x72>
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b04      	cmp	r3, #4
 800631c:	d109      	bne.n	8006332 <HAL_TIM_PWM_Start_DMA+0x46>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	bf0c      	ite	eq
 800632a:	2301      	moveq	r3, #1
 800632c:	2300      	movne	r3, #0
 800632e:	b2db      	uxtb	r3, r3
 8006330:	e015      	b.n	800635e <HAL_TIM_PWM_Start_DMA+0x72>
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2b08      	cmp	r3, #8
 8006336:	d109      	bne.n	800634c <HAL_TIM_PWM_Start_DMA+0x60>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	bf0c      	ite	eq
 8006344:	2301      	moveq	r3, #1
 8006346:	2300      	movne	r3, #0
 8006348:	b2db      	uxtb	r3, r3
 800634a:	e008      	b.n	800635e <HAL_TIM_PWM_Start_DMA+0x72>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	bf0c      	ite	eq
 8006358:	2301      	moveq	r3, #1
 800635a:	2300      	movne	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <HAL_TIM_PWM_Start_DMA+0x7a>
 8006362:	2302      	movs	r3, #2
 8006364:	e15d      	b.n	8006622 <HAL_TIM_PWM_Start_DMA+0x336>
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d109      	bne.n	8006380 <HAL_TIM_PWM_Start_DMA+0x94>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b01      	cmp	r3, #1
 8006376:	bf0c      	ite	eq
 8006378:	2301      	moveq	r3, #1
 800637a:	2300      	movne	r3, #0
 800637c:	b2db      	uxtb	r3, r3
 800637e:	e022      	b.n	80063c6 <HAL_TIM_PWM_Start_DMA+0xda>
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2b04      	cmp	r3, #4
 8006384:	d109      	bne.n	800639a <HAL_TIM_PWM_Start_DMA+0xae>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b01      	cmp	r3, #1
 8006390:	bf0c      	ite	eq
 8006392:	2301      	moveq	r3, #1
 8006394:	2300      	movne	r3, #0
 8006396:	b2db      	uxtb	r3, r3
 8006398:	e015      	b.n	80063c6 <HAL_TIM_PWM_Start_DMA+0xda>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b08      	cmp	r3, #8
 800639e:	d109      	bne.n	80063b4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	bf0c      	ite	eq
 80063ac:	2301      	moveq	r3, #1
 80063ae:	2300      	movne	r3, #0
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	e008      	b.n	80063c6 <HAL_TIM_PWM_Start_DMA+0xda>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b01      	cmp	r3, #1
 80063be:	bf0c      	ite	eq
 80063c0:	2301      	moveq	r3, #1
 80063c2:	2300      	movne	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d024      	beq.n	8006414 <HAL_TIM_PWM_Start_DMA+0x128>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d104      	bne.n	80063da <HAL_TIM_PWM_Start_DMA+0xee>
 80063d0:	887b      	ldrh	r3, [r7, #2]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <HAL_TIM_PWM_Start_DMA+0xee>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e123      	b.n	8006622 <HAL_TIM_PWM_Start_DMA+0x336>
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d104      	bne.n	80063ea <HAL_TIM_PWM_Start_DMA+0xfe>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063e8:	e016      	b.n	8006418 <HAL_TIM_PWM_Start_DMA+0x12c>
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b04      	cmp	r3, #4
 80063ee:	d104      	bne.n	80063fa <HAL_TIM_PWM_Start_DMA+0x10e>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063f8:	e00e      	b.n	8006418 <HAL_TIM_PWM_Start_DMA+0x12c>
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d104      	bne.n	800640a <HAL_TIM_PWM_Start_DMA+0x11e>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006408:	e006      	b.n	8006418 <HAL_TIM_PWM_Start_DMA+0x12c>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2202      	movs	r2, #2
 800640e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006412:	e001      	b.n	8006418 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006414:	2301      	movs	r3, #1
 8006416:	e104      	b.n	8006622 <HAL_TIM_PWM_Start_DMA+0x336>
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b0c      	cmp	r3, #12
 800641c:	f200 80ae 	bhi.w	800657c <HAL_TIM_PWM_Start_DMA+0x290>
 8006420:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8006422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006426:	bf00      	nop
 8006428:	0800645d 	.word	0x0800645d
 800642c:	0800657d 	.word	0x0800657d
 8006430:	0800657d 	.word	0x0800657d
 8006434:	0800657d 	.word	0x0800657d
 8006438:	080064a5 	.word	0x080064a5
 800643c:	0800657d 	.word	0x0800657d
 8006440:	0800657d 	.word	0x0800657d
 8006444:	0800657d 	.word	0x0800657d
 8006448:	080064ed 	.word	0x080064ed
 800644c:	0800657d 	.word	0x0800657d
 8006450:	0800657d 	.word	0x0800657d
 8006454:	0800657d 	.word	0x0800657d
 8006458:	08006535 	.word	0x08006535
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	4a72      	ldr	r2, [pc, #456]	; (800662c <HAL_TIM_PWM_Start_DMA+0x340>)
 8006462:	63da      	str	r2, [r3, #60]	; 0x3c
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	4a71      	ldr	r2, [pc, #452]	; (8006630 <HAL_TIM_PWM_Start_DMA+0x344>)
 800646a:	641a      	str	r2, [r3, #64]	; 0x40
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	4a70      	ldr	r2, [pc, #448]	; (8006634 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006472:	64da      	str	r2, [r3, #76]	; 0x4c
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006478:	6879      	ldr	r1, [r7, #4]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3334      	adds	r3, #52	; 0x34
 8006480:	461a      	mov	r2, r3
 8006482:	887b      	ldrh	r3, [r7, #2]
 8006484:	f7fe f8dc 	bl	8004640 <HAL_DMA_Start_IT>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800648e:	2301      	movs	r3, #1
 8006490:	e0c7      	b.n	8006622 <HAL_TIM_PWM_Start_DMA+0x336>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064a0:	60da      	str	r2, [r3, #12]
 80064a2:	e06e      	b.n	8006582 <HAL_TIM_PWM_Start_DMA+0x296>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a8:	4a60      	ldr	r2, [pc, #384]	; (800662c <HAL_TIM_PWM_Start_DMA+0x340>)
 80064aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b0:	4a5f      	ldr	r2, [pc, #380]	; (8006630 <HAL_TIM_PWM_Start_DMA+0x344>)
 80064b2:	641a      	str	r2, [r3, #64]	; 0x40
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b8:	4a5e      	ldr	r2, [pc, #376]	; (8006634 <HAL_TIM_PWM_Start_DMA+0x348>)
 80064ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80064c0:	6879      	ldr	r1, [r7, #4]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3338      	adds	r3, #56	; 0x38
 80064c8:	461a      	mov	r2, r3
 80064ca:	887b      	ldrh	r3, [r7, #2]
 80064cc:	f7fe f8b8 	bl	8004640 <HAL_DMA_Start_IT>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <HAL_TIM_PWM_Start_DMA+0x1ee>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e0a3      	b.n	8006622 <HAL_TIM_PWM_Start_DMA+0x336>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064e8:	60da      	str	r2, [r3, #12]
 80064ea:	e04a      	b.n	8006582 <HAL_TIM_PWM_Start_DMA+0x296>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	4a4e      	ldr	r2, [pc, #312]	; (800662c <HAL_TIM_PWM_Start_DMA+0x340>)
 80064f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f8:	4a4d      	ldr	r2, [pc, #308]	; (8006630 <HAL_TIM_PWM_Start_DMA+0x344>)
 80064fa:	641a      	str	r2, [r3, #64]	; 0x40
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006500:	4a4c      	ldr	r2, [pc, #304]	; (8006634 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006502:	64da      	str	r2, [r3, #76]	; 0x4c
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	333c      	adds	r3, #60	; 0x3c
 8006510:	461a      	mov	r2, r3
 8006512:	887b      	ldrh	r3, [r7, #2]
 8006514:	f7fe f894 	bl	8004640 <HAL_DMA_Start_IT>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <HAL_TIM_PWM_Start_DMA+0x236>
 800651e:	2301      	movs	r3, #1
 8006520:	e07f      	b.n	8006622 <HAL_TIM_PWM_Start_DMA+0x336>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68da      	ldr	r2, [r3, #12]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006530:	60da      	str	r2, [r3, #12]
 8006532:	e026      	b.n	8006582 <HAL_TIM_PWM_Start_DMA+0x296>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006538:	4a3c      	ldr	r2, [pc, #240]	; (800662c <HAL_TIM_PWM_Start_DMA+0x340>)
 800653a:	63da      	str	r2, [r3, #60]	; 0x3c
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006540:	4a3b      	ldr	r2, [pc, #236]	; (8006630 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006542:	641a      	str	r2, [r3, #64]	; 0x40
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006548:	4a3a      	ldr	r2, [pc, #232]	; (8006634 <HAL_TIM_PWM_Start_DMA+0x348>)
 800654a:	64da      	str	r2, [r3, #76]	; 0x4c
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3340      	adds	r3, #64	; 0x40
 8006558:	461a      	mov	r2, r3
 800655a:	887b      	ldrh	r3, [r7, #2]
 800655c:	f7fe f870 	bl	8004640 <HAL_DMA_Start_IT>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <HAL_TIM_PWM_Start_DMA+0x27e>
 8006566:	2301      	movs	r3, #1
 8006568:	e05b      	b.n	8006622 <HAL_TIM_PWM_Start_DMA+0x336>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68da      	ldr	r2, [r3, #12]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006578:	60da      	str	r2, [r3, #12]
 800657a:	e002      	b.n	8006582 <HAL_TIM_PWM_Start_DMA+0x296>
 800657c:	2301      	movs	r3, #1
 800657e:	75fb      	strb	r3, [r7, #23]
 8006580:	bf00      	nop
 8006582:	7dfb      	ldrb	r3, [r7, #23]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d14b      	bne.n	8006620 <HAL_TIM_PWM_Start_DMA+0x334>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2201      	movs	r2, #1
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	4618      	mov	r0, r3
 8006592:	f000 ff5b 	bl	800744c <TIM_CCxChannelCmd>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a27      	ldr	r2, [pc, #156]	; (8006638 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d107      	bne.n	80065b0 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065ae:	645a      	str	r2, [r3, #68]	; 0x44
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a20      	ldr	r2, [pc, #128]	; (8006638 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d018      	beq.n	80065ec <HAL_TIM_PWM_Start_DMA+0x300>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c2:	d013      	beq.n	80065ec <HAL_TIM_PWM_Start_DMA+0x300>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1c      	ldr	r2, [pc, #112]	; (800663c <HAL_TIM_PWM_Start_DMA+0x350>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00e      	beq.n	80065ec <HAL_TIM_PWM_Start_DMA+0x300>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <HAL_TIM_PWM_Start_DMA+0x354>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d009      	beq.n	80065ec <HAL_TIM_PWM_Start_DMA+0x300>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a19      	ldr	r2, [pc, #100]	; (8006644 <HAL_TIM_PWM_Start_DMA+0x358>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d004      	beq.n	80065ec <HAL_TIM_PWM_Start_DMA+0x300>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a18      	ldr	r2, [pc, #96]	; (8006648 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d111      	bne.n	8006610 <HAL_TIM_PWM_Start_DMA+0x324>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 0307 	and.w	r3, r3, #7
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	2b06      	cmp	r3, #6
 80065fc:	d010      	beq.n	8006620 <HAL_TIM_PWM_Start_DMA+0x334>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0201 	orr.w	r2, r2, #1
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	e007      	b.n	8006620 <HAL_TIM_PWM_Start_DMA+0x334>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0201 	orr.w	r2, r2, #1
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	7dfb      	ldrb	r3, [r7, #23]
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	08006df1 	.word	0x08006df1
 8006630:	08006e99 	.word	0x08006e99
 8006634:	08006d5f 	.word	0x08006d5f
 8006638:	40010000 	.word	0x40010000
 800663c:	40000400 	.word	0x40000400
 8006640:	40000800 	.word	0x40000800
 8006644:	40000c00 	.word	0x40000c00
 8006648:	40014000 	.word	0x40014000

0800664c <HAL_TIM_PWM_Stop_DMA>:
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
 8006656:	2300      	movs	r3, #0
 8006658:	73fb      	strb	r3, [r7, #15]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b0c      	cmp	r3, #12
 800665e:	d855      	bhi.n	800670c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006660:	a201      	add	r2, pc, #4	; (adr r2, 8006668 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006666:	bf00      	nop
 8006668:	0800669d 	.word	0x0800669d
 800666c:	0800670d 	.word	0x0800670d
 8006670:	0800670d 	.word	0x0800670d
 8006674:	0800670d 	.word	0x0800670d
 8006678:	080066b9 	.word	0x080066b9
 800667c:	0800670d 	.word	0x0800670d
 8006680:	0800670d 	.word	0x0800670d
 8006684:	0800670d 	.word	0x0800670d
 8006688:	080066d5 	.word	0x080066d5
 800668c:	0800670d 	.word	0x0800670d
 8006690:	0800670d 	.word	0x0800670d
 8006694:	0800670d 	.word	0x0800670d
 8006698:	080066f1 	.word	0x080066f1
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80066aa:	60da      	str	r2, [r3, #12]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fe f88d 	bl	80047d0 <HAL_DMA_Abort_IT>
 80066b6:	e02c      	b.n	8006712 <HAL_TIM_PWM_Stop_DMA+0xc6>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066c6:	60da      	str	r2, [r3, #12]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fe f87f 	bl	80047d0 <HAL_DMA_Abort_IT>
 80066d2:	e01e      	b.n	8006712 <HAL_TIM_PWM_Stop_DMA+0xc6>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066e2:	60da      	str	r2, [r3, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7fe f871 	bl	80047d0 <HAL_DMA_Abort_IT>
 80066ee:	e010      	b.n	8006712 <HAL_TIM_PWM_Stop_DMA+0xc6>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066fe:	60da      	str	r2, [r3, #12]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006704:	4618      	mov	r0, r3
 8006706:	f7fe f863 	bl	80047d0 <HAL_DMA_Abort_IT>
 800670a:	e002      	b.n	8006712 <HAL_TIM_PWM_Stop_DMA+0xc6>
 800670c:	2301      	movs	r3, #1
 800670e:	73fb      	strb	r3, [r7, #15]
 8006710:	bf00      	nop
 8006712:	7bfb      	ldrb	r3, [r7, #15]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d157      	bne.n	80067c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2200      	movs	r2, #0
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	4618      	mov	r0, r3
 8006722:	f000 fe93 	bl	800744c <TIM_CCxChannelCmd>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a2a      	ldr	r2, [pc, #168]	; (80067d4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d117      	bne.n	8006760 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6a1a      	ldr	r2, [r3, #32]
 8006736:	f241 1311 	movw	r3, #4369	; 0x1111
 800673a:	4013      	ands	r3, r2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10f      	bne.n	8006760 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6a1a      	ldr	r2, [r3, #32]
 8006746:	f240 4344 	movw	r3, #1092	; 0x444
 800674a:	4013      	ands	r3, r2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d107      	bne.n	8006760 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800675e:	645a      	str	r2, [r3, #68]	; 0x44
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6a1a      	ldr	r2, [r3, #32]
 8006766:	f241 1311 	movw	r3, #4369	; 0x1111
 800676a:	4013      	ands	r3, r2
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10f      	bne.n	8006790 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6a1a      	ldr	r2, [r3, #32]
 8006776:	f240 4344 	movw	r3, #1092	; 0x444
 800677a:	4013      	ands	r3, r2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d107      	bne.n	8006790 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0201 	bic.w	r2, r2, #1
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d104      	bne.n	80067a0 <HAL_TIM_PWM_Stop_DMA+0x154>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800679e:	e013      	b.n	80067c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d104      	bne.n	80067b0 <HAL_TIM_PWM_Stop_DMA+0x164>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067ae:	e00b      	b.n	80067c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b08      	cmp	r3, #8
 80067b4:	d104      	bne.n	80067c0 <HAL_TIM_PWM_Stop_DMA+0x174>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067be:	e003      	b.n	80067c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	40010000 	.word	0x40010000

080067d8 <HAL_TIM_IRQHandler>:
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d122      	bne.n	8006834 <HAL_TIM_IRQHandler+0x5c>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d11b      	bne.n	8006834 <HAL_TIM_IRQHandler+0x5c>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f06f 0202 	mvn.w	r2, #2
 8006804:	611a      	str	r2, [r3, #16]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	771a      	strb	r2, [r3, #28]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <HAL_TIM_IRQHandler+0x4a>
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fa77 	bl	8006d0e <HAL_TIM_IC_CaptureCallback>
 8006820:	e005      	b.n	800682e <HAL_TIM_IRQHandler+0x56>
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fa69 	bl	8006cfa <HAL_TIM_OC_DelayElapsedCallback>
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7fa f9b6 	bl	8000b9a <HAL_TIM_PWM_PulseFinishedCallback>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	771a      	strb	r2, [r3, #28]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f003 0304 	and.w	r3, r3, #4
 800683e:	2b04      	cmp	r3, #4
 8006840:	d122      	bne.n	8006888 <HAL_TIM_IRQHandler+0xb0>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b04      	cmp	r3, #4
 800684e:	d11b      	bne.n	8006888 <HAL_TIM_IRQHandler+0xb0>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f06f 0204 	mvn.w	r2, #4
 8006858:	611a      	str	r2, [r3, #16]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2202      	movs	r2, #2
 800685e:	771a      	strb	r2, [r3, #28]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_TIM_IRQHandler+0x9e>
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fa4d 	bl	8006d0e <HAL_TIM_IC_CaptureCallback>
 8006874:	e005      	b.n	8006882 <HAL_TIM_IRQHandler+0xaa>
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fa3f 	bl	8006cfa <HAL_TIM_OC_DelayElapsedCallback>
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7fa f98c 	bl	8000b9a <HAL_TIM_PWM_PulseFinishedCallback>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	771a      	strb	r2, [r3, #28]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f003 0308 	and.w	r3, r3, #8
 8006892:	2b08      	cmp	r3, #8
 8006894:	d122      	bne.n	80068dc <HAL_TIM_IRQHandler+0x104>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d11b      	bne.n	80068dc <HAL_TIM_IRQHandler+0x104>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f06f 0208 	mvn.w	r2, #8
 80068ac:	611a      	str	r2, [r3, #16]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2204      	movs	r2, #4
 80068b2:	771a      	strb	r2, [r3, #28]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <HAL_TIM_IRQHandler+0xf2>
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fa23 	bl	8006d0e <HAL_TIM_IC_CaptureCallback>
 80068c8:	e005      	b.n	80068d6 <HAL_TIM_IRQHandler+0xfe>
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fa15 	bl	8006cfa <HAL_TIM_OC_DelayElapsedCallback>
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7fa f962 	bl	8000b9a <HAL_TIM_PWM_PulseFinishedCallback>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	771a      	strb	r2, [r3, #28]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	f003 0310 	and.w	r3, r3, #16
 80068e6:	2b10      	cmp	r3, #16
 80068e8:	d122      	bne.n	8006930 <HAL_TIM_IRQHandler+0x158>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	2b10      	cmp	r3, #16
 80068f6:	d11b      	bne.n	8006930 <HAL_TIM_IRQHandler+0x158>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f06f 0210 	mvn.w	r2, #16
 8006900:	611a      	str	r2, [r3, #16]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2208      	movs	r2, #8
 8006906:	771a      	strb	r2, [r3, #28]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_TIM_IRQHandler+0x146>
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f9f9 	bl	8006d0e <HAL_TIM_IC_CaptureCallback>
 800691c:	e005      	b.n	800692a <HAL_TIM_IRQHandler+0x152>
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f9eb 	bl	8006cfa <HAL_TIM_OC_DelayElapsedCallback>
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7fa f938 	bl	8000b9a <HAL_TIM_PWM_PulseFinishedCallback>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	771a      	strb	r2, [r3, #28]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b01      	cmp	r3, #1
 800693c:	d10e      	bne.n	800695c <HAL_TIM_IRQHandler+0x184>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b01      	cmp	r3, #1
 800694a:	d107      	bne.n	800695c <HAL_TIM_IRQHandler+0x184>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f06f 0201 	mvn.w	r2, #1
 8006954:	611a      	str	r2, [r3, #16]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fa f974 	bl	8000c44 <HAL_TIM_PeriodElapsedCallback>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006966:	2b80      	cmp	r3, #128	; 0x80
 8006968:	d10e      	bne.n	8006988 <HAL_TIM_IRQHandler+0x1b0>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006974:	2b80      	cmp	r3, #128	; 0x80
 8006976:	d107      	bne.n	8006988 <HAL_TIM_IRQHandler+0x1b0>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006980:	611a      	str	r2, [r3, #16]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fe00 	bl	8007588 <HAL_TIMEx_BreakCallback>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006992:	2b40      	cmp	r3, #64	; 0x40
 8006994:	d10e      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x1dc>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a0:	2b40      	cmp	r3, #64	; 0x40
 80069a2:	d107      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x1dc>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069ac:	611a      	str	r2, [r3, #16]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f9c1 	bl	8006d36 <HAL_TIM_TriggerCallback>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f003 0320 	and.w	r3, r3, #32
 80069be:	2b20      	cmp	r3, #32
 80069c0:	d10e      	bne.n	80069e0 <HAL_TIM_IRQHandler+0x208>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f003 0320 	and.w	r3, r3, #32
 80069cc:	2b20      	cmp	r3, #32
 80069ce:	d107      	bne.n	80069e0 <HAL_TIM_IRQHandler+0x208>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f06f 0220 	mvn.w	r2, #32
 80069d8:	611a      	str	r2, [r3, #16]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fdca 	bl	8007574 <HAL_TIMEx_CommutCallback>
 80069e0:	bf00      	nop
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <HAL_TIM_PWM_ConfigChannel>:
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	2300      	movs	r3, #0
 80069f6:	75fb      	strb	r3, [r7, #23]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e0ae      	b.n	8006b64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b0c      	cmp	r3, #12
 8006a12:	f200 809f 	bhi.w	8006b54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a16:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a51 	.word	0x08006a51
 8006a20:	08006b55 	.word	0x08006b55
 8006a24:	08006b55 	.word	0x08006b55
 8006a28:	08006b55 	.word	0x08006b55
 8006a2c:	08006a91 	.word	0x08006a91
 8006a30:	08006b55 	.word	0x08006b55
 8006a34:	08006b55 	.word	0x08006b55
 8006a38:	08006b55 	.word	0x08006b55
 8006a3c:	08006ad3 	.word	0x08006ad3
 8006a40:	08006b55 	.word	0x08006b55
 8006a44:	08006b55 	.word	0x08006b55
 8006a48:	08006b55 	.word	0x08006b55
 8006a4c:	08006b13 	.word	0x08006b13
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68b9      	ldr	r1, [r7, #8]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 fad2 	bl	8007000 <TIM_OC1_SetConfig>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699a      	ldr	r2, [r3, #24]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f042 0208 	orr.w	r2, r2, #8
 8006a6a:	619a      	str	r2, [r3, #24]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699a      	ldr	r2, [r3, #24]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 0204 	bic.w	r2, r2, #4
 8006a7a:	619a      	str	r2, [r3, #24]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6999      	ldr	r1, [r3, #24]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	691a      	ldr	r2, [r3, #16]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	619a      	str	r2, [r3, #24]
 8006a8e:	e064      	b.n	8006b5a <HAL_TIM_PWM_ConfigChannel+0x172>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fb18 	bl	80070cc <TIM_OC2_SetConfig>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	699a      	ldr	r2, [r3, #24]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aaa:	619a      	str	r2, [r3, #24]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	699a      	ldr	r2, [r3, #24]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aba:	619a      	str	r2, [r3, #24]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6999      	ldr	r1, [r3, #24]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	021a      	lsls	r2, r3, #8
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	619a      	str	r2, [r3, #24]
 8006ad0:	e043      	b.n	8006b5a <HAL_TIM_PWM_ConfigChannel+0x172>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68b9      	ldr	r1, [r7, #8]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 fb63 	bl	80071a4 <TIM_OC3_SetConfig>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69da      	ldr	r2, [r3, #28]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f042 0208 	orr.w	r2, r2, #8
 8006aec:	61da      	str	r2, [r3, #28]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69da      	ldr	r2, [r3, #28]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 0204 	bic.w	r2, r2, #4
 8006afc:	61da      	str	r2, [r3, #28]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69d9      	ldr	r1, [r3, #28]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	691a      	ldr	r2, [r3, #16]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	61da      	str	r2, [r3, #28]
 8006b10:	e023      	b.n	8006b5a <HAL_TIM_PWM_ConfigChannel+0x172>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68b9      	ldr	r1, [r7, #8]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 fbad 	bl	8007278 <TIM_OC4_SetConfig>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69da      	ldr	r2, [r3, #28]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b2c:	61da      	str	r2, [r3, #28]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69da      	ldr	r2, [r3, #28]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b3c:	61da      	str	r2, [r3, #28]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69d9      	ldr	r1, [r3, #28]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	021a      	lsls	r2, r3, #8
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	61da      	str	r2, [r3, #28]
 8006b52:	e002      	b.n	8006b5a <HAL_TIM_PWM_ConfigChannel+0x172>
 8006b54:	2301      	movs	r3, #1
 8006b56:	75fb      	strb	r3, [r7, #23]
 8006b58:	bf00      	nop
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006b62:	7dfb      	ldrb	r3, [r7, #23]
 8006b64:	4618      	mov	r0, r3
 8006b66:	3718      	adds	r7, #24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <HAL_TIM_ConfigClockSource>:
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
 8006b76:	2300      	movs	r3, #0
 8006b78:	73fb      	strb	r3, [r7, #15]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d101      	bne.n	8006b88 <HAL_TIM_ConfigClockSource+0x1c>
 8006b84:	2302      	movs	r3, #2
 8006b86:	e0b4      	b.n	8006cf2 <HAL_TIM_ConfigClockSource+0x186>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	60bb      	str	r3, [r7, #8]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ba6:	60bb      	str	r3, [r7, #8]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bae:	60bb      	str	r3, [r7, #8]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	609a      	str	r2, [r3, #8]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc0:	d03e      	beq.n	8006c40 <HAL_TIM_ConfigClockSource+0xd4>
 8006bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc6:	f200 8087 	bhi.w	8006cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bce:	f000 8086 	beq.w	8006cde <HAL_TIM_ConfigClockSource+0x172>
 8006bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd6:	d87f      	bhi.n	8006cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd8:	2b70      	cmp	r3, #112	; 0x70
 8006bda:	d01a      	beq.n	8006c12 <HAL_TIM_ConfigClockSource+0xa6>
 8006bdc:	2b70      	cmp	r3, #112	; 0x70
 8006bde:	d87b      	bhi.n	8006cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006be0:	2b60      	cmp	r3, #96	; 0x60
 8006be2:	d050      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x11a>
 8006be4:	2b60      	cmp	r3, #96	; 0x60
 8006be6:	d877      	bhi.n	8006cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006be8:	2b50      	cmp	r3, #80	; 0x50
 8006bea:	d03c      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0xfa>
 8006bec:	2b50      	cmp	r3, #80	; 0x50
 8006bee:	d873      	bhi.n	8006cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf0:	2b40      	cmp	r3, #64	; 0x40
 8006bf2:	d058      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0x13a>
 8006bf4:	2b40      	cmp	r3, #64	; 0x40
 8006bf6:	d86f      	bhi.n	8006cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf8:	2b30      	cmp	r3, #48	; 0x30
 8006bfa:	d064      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006bfc:	2b30      	cmp	r3, #48	; 0x30
 8006bfe:	d86b      	bhi.n	8006cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006c00:	2b20      	cmp	r3, #32
 8006c02:	d060      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	d867      	bhi.n	8006cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d05c      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006c0c:	2b10      	cmp	r3, #16
 8006c0e:	d05a      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006c10:	e062      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6818      	ldr	r0, [r3, #0]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	6899      	ldr	r1, [r3, #8]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f000 fbf3 	bl	800740c <TIM_ETR_SetConfig>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	60bb      	str	r3, [r7, #8]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c34:	60bb      	str	r3, [r7, #8]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	609a      	str	r2, [r3, #8]
 8006c3e:	e04f      	b.n	8006ce0 <HAL_TIM_ConfigClockSource+0x174>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6818      	ldr	r0, [r3, #0]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	6899      	ldr	r1, [r3, #8]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f000 fbdc 	bl	800740c <TIM_ETR_SetConfig>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689a      	ldr	r2, [r3, #8]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c62:	609a      	str	r2, [r3, #8]
 8006c64:	e03c      	b.n	8006ce0 <HAL_TIM_ConfigClockSource+0x174>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	6859      	ldr	r1, [r3, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f000 fb50 	bl	8007318 <TIM_TI1_ConfigInputStage>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2150      	movs	r1, #80	; 0x50
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 fba9 	bl	80073d6 <TIM_ITRx_SetConfig>
 8006c84:	e02c      	b.n	8006ce0 <HAL_TIM_ConfigClockSource+0x174>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	6859      	ldr	r1, [r3, #4]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	461a      	mov	r2, r3
 8006c94:	f000 fb6f 	bl	8007376 <TIM_TI2_ConfigInputStage>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2160      	movs	r1, #96	; 0x60
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fb99 	bl	80073d6 <TIM_ITRx_SetConfig>
 8006ca4:	e01c      	b.n	8006ce0 <HAL_TIM_ConfigClockSource+0x174>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	6859      	ldr	r1, [r3, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f000 fb30 	bl	8007318 <TIM_TI1_ConfigInputStage>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2140      	movs	r1, #64	; 0x40
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fb89 	bl	80073d6 <TIM_ITRx_SetConfig>
 8006cc4:	e00c      	b.n	8006ce0 <HAL_TIM_ConfigClockSource+0x174>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	f000 fb80 	bl	80073d6 <TIM_ITRx_SetConfig>
 8006cd6:	e003      	b.n	8006ce0 <HAL_TIM_ConfigClockSource+0x174>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	73fb      	strb	r3, [r7, #15]
 8006cdc:	e000      	b.n	8006ce0 <HAL_TIM_ConfigClockSource+0x174>
 8006cde:	bf00      	nop
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <HAL_TIM_OC_DelayElapsedCallback>:
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <HAL_TIM_IC_CaptureCallback>:
 8006d0e:	b480      	push	{r7}
 8006d10:	b083      	sub	sp, #12
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	bf00      	nop
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <HAL_TIM_TriggerCallback>:
 8006d36:	b480      	push	{r7}
 8006d38:	b083      	sub	sp, #12
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	bf00      	nop
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <HAL_TIM_ErrorCallback>:
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <TIM_DMAError>:
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d107      	bne.n	8006d86 <TIM_DMAError+0x28>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	771a      	strb	r2, [r3, #28]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d84:	e02a      	b.n	8006ddc <TIM_DMAError+0x7e>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d107      	bne.n	8006da0 <TIM_DMAError+0x42>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2202      	movs	r2, #2
 8006d94:	771a      	strb	r2, [r3, #28]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d9e:	e01d      	b.n	8006ddc <TIM_DMAError+0x7e>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d107      	bne.n	8006dba <TIM_DMAError+0x5c>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2204      	movs	r2, #4
 8006dae:	771a      	strb	r2, [r3, #28]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006db8:	e010      	b.n	8006ddc <TIM_DMAError+0x7e>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d107      	bne.n	8006dd4 <TIM_DMAError+0x76>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2208      	movs	r2, #8
 8006dc8:	771a      	strb	r2, [r3, #28]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dd2:	e003      	b.n	8006ddc <TIM_DMAError+0x7e>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff ffb4 	bl	8006d4a <HAL_TIM_ErrorCallback>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	771a      	strb	r2, [r3, #28]
 8006de8:	bf00      	nop
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <TIM_DMADelayPulseCplt>:
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d10b      	bne.n	8006e20 <TIM_DMADelayPulseCplt+0x30>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	771a      	strb	r2, [r3, #28]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d136      	bne.n	8006e84 <TIM_DMADelayPulseCplt+0x94>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e1e:	e031      	b.n	8006e84 <TIM_DMADelayPulseCplt+0x94>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d10b      	bne.n	8006e42 <TIM_DMADelayPulseCplt+0x52>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	771a      	strb	r2, [r3, #28]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d125      	bne.n	8006e84 <TIM_DMADelayPulseCplt+0x94>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e40:	e020      	b.n	8006e84 <TIM_DMADelayPulseCplt+0x94>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d10b      	bne.n	8006e64 <TIM_DMADelayPulseCplt+0x74>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2204      	movs	r2, #4
 8006e50:	771a      	strb	r2, [r3, #28]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d114      	bne.n	8006e84 <TIM_DMADelayPulseCplt+0x94>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e62:	e00f      	b.n	8006e84 <TIM_DMADelayPulseCplt+0x94>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d10a      	bne.n	8006e84 <TIM_DMADelayPulseCplt+0x94>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2208      	movs	r2, #8
 8006e72:	771a      	strb	r2, [r3, #28]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d103      	bne.n	8006e84 <TIM_DMADelayPulseCplt+0x94>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f7f9 fe88 	bl	8000b9a <HAL_TIM_PWM_PulseFinishedCallback>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	771a      	strb	r2, [r3, #28]
 8006e90:	bf00      	nop
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <TIM_DMADelayPulseHalfCplt>:
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d103      	bne.n	8006eb8 <TIM_DMADelayPulseHalfCplt+0x20>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	771a      	strb	r2, [r3, #28]
 8006eb6:	e019      	b.n	8006eec <TIM_DMADelayPulseHalfCplt+0x54>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d103      	bne.n	8006eca <TIM_DMADelayPulseHalfCplt+0x32>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	771a      	strb	r2, [r3, #28]
 8006ec8:	e010      	b.n	8006eec <TIM_DMADelayPulseHalfCplt+0x54>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d103      	bne.n	8006edc <TIM_DMADelayPulseHalfCplt+0x44>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2204      	movs	r2, #4
 8006ed8:	771a      	strb	r2, [r3, #28]
 8006eda:	e007      	b.n	8006eec <TIM_DMADelayPulseHalfCplt+0x54>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d102      	bne.n	8006eec <TIM_DMADelayPulseHalfCplt+0x54>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2208      	movs	r2, #8
 8006eea:	771a      	strb	r2, [r3, #28]
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f7ff ff18 	bl	8006d22 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	771a      	strb	r2, [r3, #28]
 8006ef8:	bf00      	nop
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <TIM_Base_SetConfig>:
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a34      	ldr	r2, [pc, #208]	; (8006fe4 <TIM_Base_SetConfig+0xe4>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d00f      	beq.n	8006f38 <TIM_Base_SetConfig+0x38>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f1e:	d00b      	beq.n	8006f38 <TIM_Base_SetConfig+0x38>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a31      	ldr	r2, [pc, #196]	; (8006fe8 <TIM_Base_SetConfig+0xe8>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d007      	beq.n	8006f38 <TIM_Base_SetConfig+0x38>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a30      	ldr	r2, [pc, #192]	; (8006fec <TIM_Base_SetConfig+0xec>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d003      	beq.n	8006f38 <TIM_Base_SetConfig+0x38>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a2f      	ldr	r2, [pc, #188]	; (8006ff0 <TIM_Base_SetConfig+0xf0>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d108      	bne.n	8006f4a <TIM_Base_SetConfig+0x4a>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a25      	ldr	r2, [pc, #148]	; (8006fe4 <TIM_Base_SetConfig+0xe4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d01b      	beq.n	8006f8a <TIM_Base_SetConfig+0x8a>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f58:	d017      	beq.n	8006f8a <TIM_Base_SetConfig+0x8a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a22      	ldr	r2, [pc, #136]	; (8006fe8 <TIM_Base_SetConfig+0xe8>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d013      	beq.n	8006f8a <TIM_Base_SetConfig+0x8a>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a21      	ldr	r2, [pc, #132]	; (8006fec <TIM_Base_SetConfig+0xec>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00f      	beq.n	8006f8a <TIM_Base_SetConfig+0x8a>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a20      	ldr	r2, [pc, #128]	; (8006ff0 <TIM_Base_SetConfig+0xf0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d00b      	beq.n	8006f8a <TIM_Base_SetConfig+0x8a>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a1f      	ldr	r2, [pc, #124]	; (8006ff4 <TIM_Base_SetConfig+0xf4>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d007      	beq.n	8006f8a <TIM_Base_SetConfig+0x8a>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a1e      	ldr	r2, [pc, #120]	; (8006ff8 <TIM_Base_SetConfig+0xf8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d003      	beq.n	8006f8a <TIM_Base_SetConfig+0x8a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a1d      	ldr	r2, [pc, #116]	; (8006ffc <TIM_Base_SetConfig+0xfc>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d108      	bne.n	8006f9c <TIM_Base_SetConfig+0x9c>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f90:	60fb      	str	r3, [r7, #12]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	629a      	str	r2, [r3, #40]	; 0x28
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a08      	ldr	r2, [pc, #32]	; (8006fe4 <TIM_Base_SetConfig+0xe4>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d103      	bne.n	8006fd0 <TIM_Base_SetConfig+0xd0>
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	691a      	ldr	r2, [r3, #16]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	631a      	str	r2, [r3, #48]	; 0x30
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	615a      	str	r2, [r3, #20]
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40010000 	.word	0x40010000
 8006fe8:	40000400 	.word	0x40000400
 8006fec:	40000800 	.word	0x40000800
 8006ff0:	40000c00 	.word	0x40000c00
 8006ff4:	40014000 	.word	0x40014000
 8006ff8:	40014400 	.word	0x40014400
 8006ffc:	40014800 	.word	0x40014800

08007000 <TIM_OC1_SetConfig>:
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	f023 0201 	bic.w	r2, r3, #1
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	621a      	str	r2, [r3, #32]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	613b      	str	r3, [r7, #16]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0303 	bic.w	r3, r3, #3
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f023 0302 	bic.w	r3, r3, #2
 8007048:	617b      	str	r3, [r7, #20]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	4313      	orrs	r3, r2
 8007052:	617b      	str	r3, [r7, #20]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a1c      	ldr	r2, [pc, #112]	; (80070c8 <TIM_OC1_SetConfig+0xc8>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d10c      	bne.n	8007076 <TIM_OC1_SetConfig+0x76>
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f023 0308 	bic.w	r3, r3, #8
 8007062:	617b      	str	r3, [r7, #20]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	4313      	orrs	r3, r2
 800706c:	617b      	str	r3, [r7, #20]
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f023 0304 	bic.w	r3, r3, #4
 8007074:	617b      	str	r3, [r7, #20]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a13      	ldr	r2, [pc, #76]	; (80070c8 <TIM_OC1_SetConfig+0xc8>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d111      	bne.n	80070a2 <TIM_OC1_SetConfig+0xa2>
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007084:	613b      	str	r3, [r7, #16]
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800708c:	613b      	str	r3, [r7, #16]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	4313      	orrs	r3, r2
 8007096:	613b      	str	r3, [r7, #16]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	4313      	orrs	r3, r2
 80070a0:	613b      	str	r3, [r7, #16]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	605a      	str	r2, [r3, #4]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	619a      	str	r2, [r3, #24]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	635a      	str	r2, [r3, #52]	; 0x34
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	621a      	str	r2, [r3, #32]
 80070bc:	bf00      	nop
 80070be:	371c      	adds	r7, #28
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	40010000 	.word	0x40010000

080070cc <TIM_OC2_SetConfig>:
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	f023 0210 	bic.w	r2, r3, #16
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	621a      	str	r2, [r3, #32]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	613b      	str	r3, [r7, #16]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	021b      	lsls	r3, r3, #8
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	4313      	orrs	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f023 0320 	bic.w	r3, r3, #32
 8007116:	617b      	str	r3, [r7, #20]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	011b      	lsls	r3, r3, #4
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	4313      	orrs	r3, r2
 8007122:	617b      	str	r3, [r7, #20]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a1e      	ldr	r2, [pc, #120]	; (80071a0 <TIM_OC2_SetConfig+0xd4>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d10d      	bne.n	8007148 <TIM_OC2_SetConfig+0x7c>
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007132:	617b      	str	r3, [r7, #20]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	011b      	lsls	r3, r3, #4
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	4313      	orrs	r3, r2
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007146:	617b      	str	r3, [r7, #20]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a15      	ldr	r2, [pc, #84]	; (80071a0 <TIM_OC2_SetConfig+0xd4>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d113      	bne.n	8007178 <TIM_OC2_SetConfig+0xac>
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007156:	613b      	str	r3, [r7, #16]
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800715e:	613b      	str	r3, [r7, #16]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	4313      	orrs	r3, r2
 800716a:	613b      	str	r3, [r7, #16]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	4313      	orrs	r3, r2
 8007176:	613b      	str	r3, [r7, #16]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	605a      	str	r2, [r3, #4]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	619a      	str	r2, [r3, #24]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	639a      	str	r2, [r3, #56]	; 0x38
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	621a      	str	r2, [r3, #32]
 8007192:	bf00      	nop
 8007194:	371c      	adds	r7, #28
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	40010000 	.word	0x40010000

080071a4 <TIM_OC3_SetConfig>:
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	621a      	str	r2, [r3, #32]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	617b      	str	r3, [r7, #20]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	613b      	str	r3, [r7, #16]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0303 	bic.w	r3, r3, #3
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	021b      	lsls	r3, r3, #8
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	617b      	str	r3, [r7, #20]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <TIM_OC3_SetConfig+0xd0>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d10d      	bne.n	800721e <TIM_OC3_SetConfig+0x7a>
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	021b      	lsls	r3, r3, #8
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	4313      	orrs	r3, r2
 8007214:	617b      	str	r3, [r7, #20]
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800721c:	617b      	str	r3, [r7, #20]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a14      	ldr	r2, [pc, #80]	; (8007274 <TIM_OC3_SetConfig+0xd0>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d113      	bne.n	800724e <TIM_OC3_SetConfig+0xaa>
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800722c:	613b      	str	r3, [r7, #16]
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007234:	613b      	str	r3, [r7, #16]
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	011b      	lsls	r3, r3, #4
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	4313      	orrs	r3, r2
 8007240:	613b      	str	r3, [r7, #16]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	4313      	orrs	r3, r2
 800724c:	613b      	str	r3, [r7, #16]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	605a      	str	r2, [r3, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	61da      	str	r2, [r3, #28]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	685a      	ldr	r2, [r3, #4]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	63da      	str	r2, [r3, #60]	; 0x3c
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	621a      	str	r2, [r3, #32]
 8007268:	bf00      	nop
 800726a:	371c      	adds	r7, #28
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	40010000 	.word	0x40010000

08007278 <TIM_OC4_SetConfig>:
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	621a      	str	r2, [r3, #32]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	613b      	str	r3, [r7, #16]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	617b      	str	r3, [r7, #20]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	60fb      	str	r3, [r7, #12]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	021b      	lsls	r3, r3, #8
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072c2:	613b      	str	r3, [r7, #16]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	031b      	lsls	r3, r3, #12
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a10      	ldr	r2, [pc, #64]	; (8007314 <TIM_OC4_SetConfig+0x9c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d109      	bne.n	80072ec <TIM_OC4_SetConfig+0x74>
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072de:	617b      	str	r3, [r7, #20]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	019b      	lsls	r3, r3, #6
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	605a      	str	r2, [r3, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	61da      	str	r2, [r3, #28]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	641a      	str	r2, [r3, #64]	; 0x40
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	621a      	str	r2, [r3, #32]
 8007306:	bf00      	nop
 8007308:	371c      	adds	r7, #28
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	40010000 	.word	0x40010000

08007318 <TIM_TI1_ConfigInputStage>:
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	617b      	str	r3, [r7, #20]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	f023 0201 	bic.w	r2, r3, #1
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	621a      	str	r2, [r3, #32]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	613b      	str	r3, [r7, #16]
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007342:	613b      	str	r3, [r7, #16]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	011b      	lsls	r3, r3, #4
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	4313      	orrs	r3, r2
 800734c:	613b      	str	r3, [r7, #16]
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f023 030a 	bic.w	r3, r3, #10
 8007354:	617b      	str	r3, [r7, #20]
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	4313      	orrs	r3, r2
 800735c:	617b      	str	r3, [r7, #20]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	619a      	str	r2, [r3, #24]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	621a      	str	r2, [r3, #32]
 800736a:	bf00      	nop
 800736c:	371c      	adds	r7, #28
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <TIM_TI2_ConfigInputStage>:
 8007376:	b480      	push	{r7}
 8007378:	b087      	sub	sp, #28
 800737a:	af00      	add	r7, sp, #0
 800737c:	60f8      	str	r0, [r7, #12]
 800737e:	60b9      	str	r1, [r7, #8]
 8007380:	607a      	str	r2, [r7, #4]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	f023 0210 	bic.w	r2, r3, #16
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	621a      	str	r2, [r3, #32]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	617b      	str	r3, [r7, #20]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	613b      	str	r3, [r7, #16]
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	031b      	lsls	r3, r3, #12
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	617b      	str	r3, [r7, #20]
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073b2:	613b      	str	r3, [r7, #16]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	011b      	lsls	r3, r3, #4
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	613b      	str	r3, [r7, #16]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	619a      	str	r2, [r3, #24]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	621a      	str	r2, [r3, #32]
 80073ca:	bf00      	nop
 80073cc:	371c      	adds	r7, #28
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <TIM_ITRx_SetConfig>:
 80073d6:	b480      	push	{r7}
 80073d8:	b085      	sub	sp, #20
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
 80073de:	6039      	str	r1, [r7, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f043 0307 	orr.w	r3, r3, #7
 80073f8:	60fb      	str	r3, [r7, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	609a      	str	r2, [r3, #8]
 8007400:	bf00      	nop
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <TIM_ETR_SetConfig>:
 800740c:	b480      	push	{r7}
 800740e:	b087      	sub	sp, #28
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	603b      	str	r3, [r7, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	617b      	str	r3, [r7, #20]
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	021a      	lsls	r2, r3, #8
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	431a      	orrs	r2, r3
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	4313      	orrs	r3, r2
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	4313      	orrs	r3, r2
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	609a      	str	r2, [r3, #8]
 8007440:	bf00      	nop
 8007442:	371c      	adds	r7, #28
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <TIM_CCxChannelCmd>:
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f003 031f 	and.w	r3, r3, #31
 800745e:	2201      	movs	r2, #1
 8007460:	fa02 f303 	lsl.w	r3, r2, r3
 8007464:	617b      	str	r3, [r7, #20]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6a1a      	ldr	r2, [r3, #32]
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	43db      	mvns	r3, r3
 800746e:	401a      	ands	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	621a      	str	r2, [r3, #32]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6a1a      	ldr	r2, [r3, #32]
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f003 031f 	and.w	r3, r3, #31
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	fa01 f303 	lsl.w	r3, r1, r3
 8007484:	431a      	orrs	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	621a      	str	r2, [r3, #32]
 800748a:	bf00      	nop
 800748c:	371c      	adds	r7, #28
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
	...

08007498 <HAL_TIMEx_MasterConfigSynchronization>:
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e050      	b.n	8007552 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2202      	movs	r2, #2
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	60bb      	str	r3, [r7, #8]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d6:	60fb      	str	r3, [r7, #12]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	4313      	orrs	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	605a      	str	r2, [r3, #4]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a1c      	ldr	r2, [pc, #112]	; (8007560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d018      	beq.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074fc:	d013      	beq.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a18      	ldr	r2, [pc, #96]	; (8007564 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d00e      	beq.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a16      	ldr	r2, [pc, #88]	; (8007568 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d009      	beq.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a15      	ldr	r2, [pc, #84]	; (800756c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d004      	beq.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a13      	ldr	r2, [pc, #76]	; (8007570 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d10c      	bne.n	8007540 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800752c:	60bb      	str	r3, [r7, #8]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	4313      	orrs	r3, r2
 8007536:	60bb      	str	r3, [r7, #8]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	609a      	str	r2, [r3, #8]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007550:	2300      	movs	r3, #0
 8007552:	4618      	mov	r0, r3
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	40010000 	.word	0x40010000
 8007564:	40000400 	.word	0x40000400
 8007568:	40000800 	.word	0x40000800
 800756c:	40000c00 	.word	0x40000c00
 8007570:	40014000 	.word	0x40014000

08007574 <HAL_TIMEx_CommutCallback>:
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_TIMEx_BreakCallback>:
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <HAL_UART_Init>:
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_UART_Init+0x12>
 80075aa:	2301      	movs	r3, #1
 80075ac:	e03f      	b.n	800762e <HAL_UART_Init+0x92>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d106      	bne.n	80075c8 <HAL_UART_Init+0x2c>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7fc faf2 	bl	8003bac <HAL_UART_MspInit>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2224      	movs	r2, #36	; 0x24
 80075cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075de:	60da      	str	r2, [r3, #12]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fd19 	bl	8008018 <UART_SetConfig>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	691a      	ldr	r2, [r3, #16]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075f4:	611a      	str	r2, [r3, #16]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	695a      	ldr	r2, [r3, #20]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007604:	615a      	str	r2, [r3, #20]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68da      	ldr	r2, [r3, #12]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007614:	60da      	str	r2, [r3, #12]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	641a      	str	r2, [r3, #64]	; 0x40
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2220      	movs	r2, #32
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800762c:	2300      	movs	r3, #0
 800762e:	4618      	mov	r0, r3
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <HAL_UART_Transmit_IT>:
 8007636:	b480      	push	{r7}
 8007638:	b085      	sub	sp, #20
 800763a:	af00      	add	r7, sp, #0
 800763c:	60f8      	str	r0, [r7, #12]
 800763e:	60b9      	str	r1, [r7, #8]
 8007640:	4613      	mov	r3, r2
 8007642:	80fb      	strh	r3, [r7, #6]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b20      	cmp	r3, #32
 800764e:	d130      	bne.n	80076b2 <HAL_UART_Transmit_IT+0x7c>
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d002      	beq.n	800765c <HAL_UART_Transmit_IT+0x26>
 8007656:	88fb      	ldrh	r3, [r7, #6]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <HAL_UART_Transmit_IT+0x2a>
 800765c:	2301      	movs	r3, #1
 800765e:	e029      	b.n	80076b4 <HAL_UART_Transmit_IT+0x7e>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007666:	2b01      	cmp	r3, #1
 8007668:	d101      	bne.n	800766e <HAL_UART_Transmit_IT+0x38>
 800766a:	2302      	movs	r3, #2
 800766c:	e022      	b.n	80076b4 <HAL_UART_Transmit_IT+0x7e>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	621a      	str	r2, [r3, #32]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	88fa      	ldrh	r2, [r7, #6]
 8007680:	849a      	strh	r2, [r3, #36]	; 0x24
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	88fa      	ldrh	r2, [r7, #6]
 8007686:	84da      	strh	r2, [r3, #38]	; 0x26
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	641a      	str	r2, [r3, #64]	; 0x40
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2221      	movs	r2, #33	; 0x21
 8007692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68da      	ldr	r2, [r3, #12]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076ac:	60da      	str	r2, [r3, #12]
 80076ae:	2300      	movs	r3, #0
 80076b0:	e000      	b.n	80076b4 <HAL_UART_Transmit_IT+0x7e>
 80076b2:	2302      	movs	r3, #2
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <HAL_UART_Receive_IT>:
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	4613      	mov	r3, r2
 80076cc:	80fb      	strh	r3, [r7, #6]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d11d      	bne.n	8007716 <HAL_UART_Receive_IT+0x56>
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <HAL_UART_Receive_IT+0x26>
 80076e0:	88fb      	ldrh	r3, [r7, #6]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <HAL_UART_Receive_IT+0x2a>
 80076e6:	2301      	movs	r3, #1
 80076e8:	e016      	b.n	8007718 <HAL_UART_Receive_IT+0x58>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d101      	bne.n	80076f8 <HAL_UART_Receive_IT+0x38>
 80076f4:	2302      	movs	r3, #2
 80076f6:	e00f      	b.n	8007718 <HAL_UART_Receive_IT+0x58>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	631a      	str	r2, [r3, #48]	; 0x30
 8007706:	88fb      	ldrh	r3, [r7, #6]
 8007708:	461a      	mov	r2, r3
 800770a:	68b9      	ldr	r1, [r7, #8]
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 faab 	bl	8007c68 <UART_Start_Receive_IT>
 8007712:	4603      	mov	r3, r0
 8007714:	e000      	b.n	8007718 <HAL_UART_Receive_IT+0x58>
 8007716:	2302      	movs	r3, #2
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_UART_IRQHandler>:
 8007720:	b580      	push	{r7, lr}
 8007722:	b0ba      	sub	sp, #232	; 0xe8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007746:	2300      	movs	r3, #0
 8007748:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800774c:	2300      	movs	r3, #0
 800774e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007756:	f003 030f 	and.w	r3, r3, #15
 800775a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800775e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10f      	bne.n	8007786 <HAL_UART_IRQHandler+0x66>
 8007766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800776a:	f003 0320 	and.w	r3, r3, #32
 800776e:	2b00      	cmp	r3, #0
 8007770:	d009      	beq.n	8007786 <HAL_UART_IRQHandler+0x66>
 8007772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007776:	f003 0320 	and.w	r3, r3, #32
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <HAL_UART_IRQHandler+0x66>
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fb8f 	bl	8007ea2 <UART_Receive_IT>
 8007784:	e256      	b.n	8007c34 <HAL_UART_IRQHandler+0x514>
 8007786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 80de 	beq.w	800794c <HAL_UART_IRQHandler+0x22c>
 8007790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007794:	f003 0301 	and.w	r3, r3, #1
 8007798:	2b00      	cmp	r3, #0
 800779a:	d106      	bne.n	80077aa <HAL_UART_IRQHandler+0x8a>
 800779c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 80d1 	beq.w	800794c <HAL_UART_IRQHandler+0x22c>
 80077aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00b      	beq.n	80077ce <HAL_UART_IRQHandler+0xae>
 80077b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d005      	beq.n	80077ce <HAL_UART_IRQHandler+0xae>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	f043 0201 	orr.w	r2, r3, #1
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	641a      	str	r2, [r3, #64]	; 0x40
 80077ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d2:	f003 0304 	and.w	r3, r3, #4
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00b      	beq.n	80077f2 <HAL_UART_IRQHandler+0xd2>
 80077da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d005      	beq.n	80077f2 <HAL_UART_IRQHandler+0xd2>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	f043 0202 	orr.w	r2, r3, #2
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	641a      	str	r2, [r3, #64]	; 0x40
 80077f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00b      	beq.n	8007816 <HAL_UART_IRQHandler+0xf6>
 80077fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d005      	beq.n	8007816 <HAL_UART_IRQHandler+0xf6>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780e:	f043 0204 	orr.w	r2, r3, #4
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	641a      	str	r2, [r3, #64]	; 0x40
 8007816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800781a:	f003 0308 	and.w	r3, r3, #8
 800781e:	2b00      	cmp	r3, #0
 8007820:	d011      	beq.n	8007846 <HAL_UART_IRQHandler+0x126>
 8007822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007826:	f003 0320 	and.w	r3, r3, #32
 800782a:	2b00      	cmp	r3, #0
 800782c:	d105      	bne.n	800783a <HAL_UART_IRQHandler+0x11a>
 800782e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b00      	cmp	r3, #0
 8007838:	d005      	beq.n	8007846 <HAL_UART_IRQHandler+0x126>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	f043 0208 	orr.w	r2, r3, #8
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	641a      	str	r2, [r3, #64]	; 0x40
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 81ed 	beq.w	8007c2a <HAL_UART_IRQHandler+0x50a>
 8007850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007854:	f003 0320 	and.w	r3, r3, #32
 8007858:	2b00      	cmp	r3, #0
 800785a:	d008      	beq.n	800786e <HAL_UART_IRQHandler+0x14e>
 800785c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007860:	f003 0320 	and.w	r3, r3, #32
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <HAL_UART_IRQHandler+0x14e>
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fb1a 	bl	8007ea2 <UART_Receive_IT>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	695b      	ldr	r3, [r3, #20]
 8007874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007878:	2b40      	cmp	r3, #64	; 0x40
 800787a:	bf0c      	ite	eq
 800787c:	2301      	moveq	r3, #1
 800787e:	2300      	movne	r3, #0
 8007880:	b2db      	uxtb	r3, r3
 8007882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	f003 0308 	and.w	r3, r3, #8
 800788e:	2b00      	cmp	r3, #0
 8007890:	d103      	bne.n	800789a <HAL_UART_IRQHandler+0x17a>
 8007892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007896:	2b00      	cmp	r3, #0
 8007898:	d04f      	beq.n	800793a <HAL_UART_IRQHandler+0x21a>
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa22 	bl	8007ce4 <UART_EndRxTransfer>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078aa:	2b40      	cmp	r3, #64	; 0x40
 80078ac:	d141      	bne.n	8007932 <HAL_UART_IRQHandler+0x212>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3314      	adds	r3, #20
 80078b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3314      	adds	r3, #20
 80078d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80078da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80078de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80078e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80078e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1d9      	bne.n	80078ae <HAL_UART_IRQHandler+0x18e>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d013      	beq.n	800792a <HAL_UART_IRQHandler+0x20a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007906:	4a7d      	ldr	r2, [pc, #500]	; (8007afc <HAL_UART_IRQHandler+0x3dc>)
 8007908:	651a      	str	r2, [r3, #80]	; 0x50
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790e:	4618      	mov	r0, r3
 8007910:	f7fc ff5e 	bl	80047d0 <HAL_DMA_Abort_IT>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d016      	beq.n	8007948 <HAL_UART_IRQHandler+0x228>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007924:	4610      	mov	r0, r2
 8007926:	4798      	blx	r3
 8007928:	e00e      	b.n	8007948 <HAL_UART_IRQHandler+0x228>
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f986 	bl	8007c3c <HAL_UART_ErrorCallback>
 8007930:	e00a      	b.n	8007948 <HAL_UART_IRQHandler+0x228>
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f982 	bl	8007c3c <HAL_UART_ErrorCallback>
 8007938:	e006      	b.n	8007948 <HAL_UART_IRQHandler+0x228>
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f97e 	bl	8007c3c <HAL_UART_ErrorCallback>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	641a      	str	r2, [r3, #64]	; 0x40
 8007946:	e170      	b.n	8007c2a <HAL_UART_IRQHandler+0x50a>
 8007948:	bf00      	nop
 800794a:	e16e      	b.n	8007c2a <HAL_UART_IRQHandler+0x50a>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007950:	2b01      	cmp	r3, #1
 8007952:	f040 814a 	bne.w	8007bea <HAL_UART_IRQHandler+0x4ca>
 8007956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800795a:	f003 0310 	and.w	r3, r3, #16
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 8143 	beq.w	8007bea <HAL_UART_IRQHandler+0x4ca>
 8007964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007968:	f003 0310 	and.w	r3, r3, #16
 800796c:	2b00      	cmp	r3, #0
 800796e:	f000 813c 	beq.w	8007bea <HAL_UART_IRQHandler+0x4ca>
 8007972:	2300      	movs	r3, #0
 8007974:	60bb      	str	r3, [r7, #8]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	60bb      	str	r3, [r7, #8]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	60bb      	str	r3, [r7, #8]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007992:	2b40      	cmp	r3, #64	; 0x40
 8007994:	f040 80b4 	bne.w	8007b00 <HAL_UART_IRQHandler+0x3e0>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 80079a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 8140 	beq.w	8007c2e <HAL_UART_IRQHandler+0x50e>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079b6:	429a      	cmp	r2, r3
 80079b8:	f080 8139 	bcs.w	8007c2e <HAL_UART_IRQHandler+0x50e>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079c2:	85da      	strh	r2, [r3, #46]	; 0x2e
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ce:	f000 8088 	beq.w	8007ae2 <HAL_UART_IRQHandler+0x3c2>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	330c      	adds	r3, #12
 80079d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079e0:	e853 3f00 	ldrex	r3, [r3]
 80079e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	330c      	adds	r3, #12
 80079fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80079fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1d9      	bne.n	80079d2 <HAL_UART_IRQHandler+0x2b2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3314      	adds	r3, #20
 8007a24:	677b      	str	r3, [r7, #116]	; 0x74
 8007a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	673b      	str	r3, [r7, #112]	; 0x70
 8007a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a30:	f023 0301 	bic.w	r3, r3, #1
 8007a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3314      	adds	r3, #20
 8007a3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e1      	bne.n	8007a1e <HAL_UART_IRQHandler+0x2fe>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3314      	adds	r3, #20
 8007a60:	663b      	str	r3, [r7, #96]	; 0x60
 8007a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3314      	adds	r3, #20
 8007a7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a80:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a86:	e841 2300 	strex	r3, r2, [r1]
 8007a8a:	667b      	str	r3, [r7, #100]	; 0x64
 8007a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1e3      	bne.n	8007a5a <HAL_UART_IRQHandler+0x33a>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2220      	movs	r2, #32
 8007a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	330c      	adds	r3, #12
 8007aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aaa:	e853 3f00 	ldrex	r3, [r3]
 8007aae:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ab2:	f023 0310 	bic.w	r3, r3, #16
 8007ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	330c      	adds	r3, #12
 8007ac0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ac4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8007ac8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007aca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007acc:	e841 2300 	strex	r3, r2, [r1]
 8007ad0:	653b      	str	r3, [r7, #80]	; 0x50
 8007ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1e3      	bne.n	8007aa0 <HAL_UART_IRQHandler+0x380>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7fc fe07 	bl	80046f0 <HAL_DMA_Abort>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f8ac 	bl	8007c50 <HAL_UARTEx_RxEventCallback>
 8007af8:	e099      	b.n	8007c2e <HAL_UART_IRQHandler+0x50e>
 8007afa:	bf00      	nop
 8007afc:	08007dab 	.word	0x08007dab
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 808b 	beq.w	8007c32 <HAL_UART_IRQHandler+0x512>
 8007b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 8086 	beq.w	8007c32 <HAL_UART_IRQHandler+0x512>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	330c      	adds	r3, #12
 8007b2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b30:	e853 3f00 	ldrex	r3, [r3]
 8007b34:	637b      	str	r3, [r7, #52]	; 0x34
 8007b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	330c      	adds	r3, #12
 8007b46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b4a:	647a      	str	r2, [r7, #68]	; 0x44
 8007b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8007b4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b52:	e841 2300 	strex	r3, r2, [r1]
 8007b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1e3      	bne.n	8007b26 <HAL_UART_IRQHandler+0x406>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3314      	adds	r3, #20
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
 8007b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	623b      	str	r3, [r7, #32]
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	f023 0301 	bic.w	r3, r3, #1
 8007b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3314      	adds	r3, #20
 8007b7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b82:	633a      	str	r2, [r7, #48]	; 0x30
 8007b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b8a:	e841 2300 	strex	r3, r2, [r1]
 8007b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1e3      	bne.n	8007b5e <HAL_UART_IRQHandler+0x43e>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2220      	movs	r2, #32
 8007b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	330c      	adds	r3, #12
 8007baa:	613b      	str	r3, [r7, #16]
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	e853 3f00 	ldrex	r3, [r3]
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0310 	bic.w	r3, r3, #16
 8007bba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	330c      	adds	r3, #12
 8007bc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007bc8:	61fa      	str	r2, [r7, #28]
 8007bca:	61bb      	str	r3, [r7, #24]
 8007bcc:	69b9      	ldr	r1, [r7, #24]
 8007bce:	69fa      	ldr	r2, [r7, #28]
 8007bd0:	e841 2300 	strex	r3, r2, [r1]
 8007bd4:	617b      	str	r3, [r7, #20]
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1e3      	bne.n	8007ba4 <HAL_UART_IRQHandler+0x484>
 8007bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f834 	bl	8007c50 <HAL_UARTEx_RxEventCallback>
 8007be8:	e023      	b.n	8007c32 <HAL_UART_IRQHandler+0x512>
 8007bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <HAL_UART_IRQHandler+0x4ea>
 8007bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <HAL_UART_IRQHandler+0x4ea>
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f8e5 	bl	8007dd2 <UART_Transmit_IT>
 8007c08:	e014      	b.n	8007c34 <HAL_UART_IRQHandler+0x514>
 8007c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00e      	beq.n	8007c34 <HAL_UART_IRQHandler+0x514>
 8007c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d008      	beq.n	8007c34 <HAL_UART_IRQHandler+0x514>
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f925 	bl	8007e72 <UART_EndTransmit_IT>
 8007c28:	e004      	b.n	8007c34 <HAL_UART_IRQHandler+0x514>
 8007c2a:	bf00      	nop
 8007c2c:	e002      	b.n	8007c34 <HAL_UART_IRQHandler+0x514>
 8007c2e:	bf00      	nop
 8007c30:	e000      	b.n	8007c34 <HAL_UART_IRQHandler+0x514>
 8007c32:	bf00      	nop
 8007c34:	37e8      	adds	r7, #232	; 0xe8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop

08007c3c <HAL_UART_ErrorCallback>:
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_UARTEx_RxEventCallback>:
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	807b      	strh	r3, [r7, #2]
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <UART_Start_Receive_IT>:
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	4613      	mov	r3, r2
 8007c74:	80fb      	strh	r3, [r7, #6]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	629a      	str	r2, [r3, #40]	; 0x28
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	88fa      	ldrh	r2, [r7, #6]
 8007c80:	859a      	strh	r2, [r3, #44]	; 0x2c
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	88fa      	ldrh	r2, [r7, #6]
 8007c86:	85da      	strh	r2, [r3, #46]	; 0x2e
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	641a      	str	r2, [r3, #64]	; 0x40
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2222      	movs	r2, #34	; 0x22
 8007c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d007      	beq.n	8007cb6 <UART_Start_Receive_IT+0x4e>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cb4:	60da      	str	r2, [r3, #12]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	695a      	ldr	r2, [r3, #20]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f042 0201 	orr.w	r2, r2, #1
 8007cc4:	615a      	str	r2, [r3, #20]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68da      	ldr	r2, [r3, #12]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f042 0220 	orr.w	r2, r2, #32
 8007cd4:	60da      	str	r2, [r3, #12]
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <UART_EndRxTransfer>:
 8007ce4:	b480      	push	{r7}
 8007ce6:	b095      	sub	sp, #84	; 0x54
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	330c      	adds	r3, #12
 8007cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8007cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf6:	e853 3f00 	ldrex	r3, [r3]
 8007cfa:	633b      	str	r3, [r7, #48]	; 0x30
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	330c      	adds	r3, #12
 8007d0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d0c:	643a      	str	r2, [r7, #64]	; 0x40
 8007d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d14:	e841 2300 	strex	r3, r2, [r1]
 8007d18:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1e5      	bne.n	8007cec <UART_EndRxTransfer+0x8>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	3314      	adds	r3, #20
 8007d26:	623b      	str	r3, [r7, #32]
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	61fb      	str	r3, [r7, #28]
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	f023 0301 	bic.w	r3, r3, #1
 8007d36:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3314      	adds	r3, #20
 8007d3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d48:	e841 2300 	strex	r3, r2, [r1]
 8007d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e5      	bne.n	8007d20 <UART_EndRxTransfer+0x3c>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d119      	bne.n	8007d90 <UART_EndRxTransfer+0xac>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	330c      	adds	r3, #12
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	60bb      	str	r3, [r7, #8]
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	f023 0310 	bic.w	r3, r3, #16
 8007d72:	647b      	str	r3, [r7, #68]	; 0x44
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	330c      	adds	r3, #12
 8007d7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d7c:	61ba      	str	r2, [r7, #24]
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	6979      	ldr	r1, [r7, #20]
 8007d82:	69ba      	ldr	r2, [r7, #24]
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	613b      	str	r3, [r7, #16]
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e5      	bne.n	8007d5c <UART_EndRxTransfer+0x78>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	631a      	str	r2, [r3, #48]	; 0x30
 8007d9e:	bf00      	nop
 8007da0:	3754      	adds	r7, #84	; 0x54
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <UART_DMAAbortOnError>:
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b084      	sub	sp, #16
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	85da      	strh	r2, [r3, #46]	; 0x2e
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	84da      	strh	r2, [r3, #38]	; 0x26
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f7ff ff39 	bl	8007c3c <HAL_UART_ErrorCallback>
 8007dca:	bf00      	nop
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <UART_Transmit_IT>:
 8007dd2:	b480      	push	{r7}
 8007dd4:	b085      	sub	sp, #20
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b21      	cmp	r3, #33	; 0x21
 8007de4:	d13e      	bne.n	8007e64 <UART_Transmit_IT+0x92>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dee:	d114      	bne.n	8007e1a <UART_Transmit_IT+0x48>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d110      	bne.n	8007e1a <UART_Transmit_IT+0x48>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e0c:	605a      	str	r2, [r3, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	1c9a      	adds	r2, r3, #2
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	621a      	str	r2, [r3, #32]
 8007e18:	e008      	b.n	8007e2c <UART_Transmit_IT+0x5a>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	1c59      	adds	r1, r3, #1
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	6211      	str	r1, [r2, #32]
 8007e24:	781a      	ldrb	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	605a      	str	r2, [r3, #4]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	3b01      	subs	r3, #1
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10f      	bne.n	8007e60 <UART_Transmit_IT+0x8e>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68da      	ldr	r2, [r3, #12]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e4e:	60da      	str	r2, [r3, #12]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68da      	ldr	r2, [r3, #12]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e5e:	60da      	str	r2, [r3, #12]
 8007e60:	2300      	movs	r3, #0
 8007e62:	e000      	b.n	8007e66 <UART_Transmit_IT+0x94>
 8007e64:	2302      	movs	r3, #2
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <UART_EndTransmit_IT>:
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b082      	sub	sp, #8
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68da      	ldr	r2, [r3, #12]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e88:	60da      	str	r2, [r3, #12]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f7fa fcc4 	bl	8002820 <HAL_UART_TxCpltCallback>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <UART_Receive_IT>:
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b08c      	sub	sp, #48	; 0x30
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b22      	cmp	r3, #34	; 0x22
 8007eb4:	f040 80ab 	bne.w	800800e <UART_Receive_IT+0x16c>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec0:	d117      	bne.n	8007ef2 <UART_Receive_IT+0x50>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d113      	bne.n	8007ef2 <UART_Receive_IT+0x50>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee4:	801a      	strh	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eea:	1c9a      	adds	r2, r3, #2
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	629a      	str	r2, [r3, #40]	; 0x28
 8007ef0:	e026      	b.n	8007f40 <UART_Receive_IT+0x9e>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ef8:	2300      	movs	r3, #0
 8007efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f04:	d007      	beq.n	8007f16 <UART_Receive_IT+0x74>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10a      	bne.n	8007f24 <UART_Receive_IT+0x82>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d106      	bne.n	8007f24 <UART_Receive_IT+0x82>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f20:	701a      	strb	r2, [r3, #0]
 8007f22:	e008      	b.n	8007f36 <UART_Receive_IT+0x94>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f34:	701a      	strb	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3a:	1c5a      	adds	r2, r3, #1
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	629a      	str	r2, [r3, #40]	; 0x28
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	3b01      	subs	r3, #1
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d15a      	bne.n	800800a <UART_Receive_IT+0x168>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68da      	ldr	r2, [r3, #12]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0220 	bic.w	r2, r2, #32
 8007f62:	60da      	str	r2, [r3, #12]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68da      	ldr	r2, [r3, #12]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f72:	60da      	str	r2, [r3, #12]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	695a      	ldr	r2, [r3, #20]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f022 0201 	bic.w	r2, r2, #1
 8007f82:	615a      	str	r2, [r3, #20]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2220      	movs	r2, #32
 8007f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d135      	bne.n	8008000 <UART_Receive_IT+0x15e>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	631a      	str	r2, [r3, #48]	; 0x30
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	330c      	adds	r3, #12
 8007fa0:	617b      	str	r3, [r7, #20]
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	e853 3f00 	ldrex	r3, [r3]
 8007fa8:	613b      	str	r3, [r7, #16]
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	f023 0310 	bic.w	r3, r3, #16
 8007fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	330c      	adds	r3, #12
 8007fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fba:	623a      	str	r2, [r7, #32]
 8007fbc:	61fb      	str	r3, [r7, #28]
 8007fbe:	69f9      	ldr	r1, [r7, #28]
 8007fc0:	6a3a      	ldr	r2, [r7, #32]
 8007fc2:	e841 2300 	strex	r3, r2, [r1]
 8007fc6:	61bb      	str	r3, [r7, #24]
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1e5      	bne.n	8007f9a <UART_Receive_IT+0xf8>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0310 	and.w	r3, r3, #16
 8007fd8:	2b10      	cmp	r3, #16
 8007fda:	d10a      	bne.n	8007ff2 <UART_Receive_IT+0x150>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	60fb      	str	r3, [r7, #12]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7ff fe29 	bl	8007c50 <HAL_UARTEx_RxEventCallback>
 8007ffe:	e002      	b.n	8008006 <UART_Receive_IT+0x164>
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7fa fbdd 	bl	80027c0 <HAL_UART_RxCpltCallback>
 8008006:	2300      	movs	r3, #0
 8008008:	e002      	b.n	8008010 <UART_Receive_IT+0x16e>
 800800a:	2300      	movs	r3, #0
 800800c:	e000      	b.n	8008010 <UART_Receive_IT+0x16e>
 800800e:	2302      	movs	r3, #2
 8008010:	4618      	mov	r0, r3
 8008012:	3730      	adds	r7, #48	; 0x30
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <UART_SetConfig>:
 8008018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800801c:	b0c0      	sub	sp, #256	; 0x100
 800801e:	af00      	add	r7, sp, #0
 8008020:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8008024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008034:	68d9      	ldr	r1, [r3, #12]
 8008036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	ea40 0301 	orr.w	r3, r0, r1
 8008040:	6113      	str	r3, [r2, #16]
 8008042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008046:	689a      	ldr	r2, [r3, #8]
 8008048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	431a      	orrs	r2, r3
 8008050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	431a      	orrs	r2, r3
 8008058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	4313      	orrs	r3, r2
 8008060:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008070:	f021 010c 	bic.w	r1, r1, #12
 8008074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800807e:	430b      	orrs	r3, r1
 8008080:	60d3      	str	r3, [r2, #12]
 8008082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800808e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008092:	6999      	ldr	r1, [r3, #24]
 8008094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	ea40 0301 	orr.w	r3, r0, r1
 800809e:	6153      	str	r3, [r2, #20]
 80080a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	4b8f      	ldr	r3, [pc, #572]	; (80082e4 <UART_SetConfig+0x2cc>)
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d005      	beq.n	80080b8 <UART_SetConfig+0xa0>
 80080ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	4b8d      	ldr	r3, [pc, #564]	; (80082e8 <UART_SetConfig+0x2d0>)
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d104      	bne.n	80080c2 <UART_SetConfig+0xaa>
 80080b8:	f7fd fc50 	bl	800595c <HAL_RCC_GetPCLK2Freq>
 80080bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80080c0:	e003      	b.n	80080ca <UART_SetConfig+0xb2>
 80080c2:	f7fd fc37 	bl	8005934 <HAL_RCC_GetPCLK1Freq>
 80080c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80080ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080d4:	f040 810c 	bne.w	80082f0 <UART_SetConfig+0x2d8>
 80080d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080dc:	2200      	movs	r2, #0
 80080de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80080e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80080e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80080ea:	4622      	mov	r2, r4
 80080ec:	462b      	mov	r3, r5
 80080ee:	1891      	adds	r1, r2, r2
 80080f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80080f2:	415b      	adcs	r3, r3
 80080f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80080fa:	4621      	mov	r1, r4
 80080fc:	eb12 0801 	adds.w	r8, r2, r1
 8008100:	4629      	mov	r1, r5
 8008102:	eb43 0901 	adc.w	r9, r3, r1
 8008106:	f04f 0200 	mov.w	r2, #0
 800810a:	f04f 0300 	mov.w	r3, #0
 800810e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800811a:	4690      	mov	r8, r2
 800811c:	4699      	mov	r9, r3
 800811e:	4623      	mov	r3, r4
 8008120:	eb18 0303 	adds.w	r3, r8, r3
 8008124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008128:	462b      	mov	r3, r5
 800812a:	eb49 0303 	adc.w	r3, r9, r3
 800812e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800813e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008142:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008146:	460b      	mov	r3, r1
 8008148:	18db      	adds	r3, r3, r3
 800814a:	653b      	str	r3, [r7, #80]	; 0x50
 800814c:	4613      	mov	r3, r2
 800814e:	eb42 0303 	adc.w	r3, r2, r3
 8008152:	657b      	str	r3, [r7, #84]	; 0x54
 8008154:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008158:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800815c:	f7f8 fb42 	bl	80007e4 <__aeabi_uldivmod>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	4b61      	ldr	r3, [pc, #388]	; (80082ec <UART_SetConfig+0x2d4>)
 8008166:	fba3 2302 	umull	r2, r3, r3, r2
 800816a:	095b      	lsrs	r3, r3, #5
 800816c:	011c      	lsls	r4, r3, #4
 800816e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008172:	2200      	movs	r2, #0
 8008174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008178:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800817c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008180:	4642      	mov	r2, r8
 8008182:	464b      	mov	r3, r9
 8008184:	1891      	adds	r1, r2, r2
 8008186:	64b9      	str	r1, [r7, #72]	; 0x48
 8008188:	415b      	adcs	r3, r3
 800818a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800818c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008190:	4641      	mov	r1, r8
 8008192:	eb12 0a01 	adds.w	sl, r2, r1
 8008196:	4649      	mov	r1, r9
 8008198:	eb43 0b01 	adc.w	fp, r3, r1
 800819c:	f04f 0200 	mov.w	r2, #0
 80081a0:	f04f 0300 	mov.w	r3, #0
 80081a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80081a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80081ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081b0:	4692      	mov	sl, r2
 80081b2:	469b      	mov	fp, r3
 80081b4:	4643      	mov	r3, r8
 80081b6:	eb1a 0303 	adds.w	r3, sl, r3
 80081ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081be:	464b      	mov	r3, r9
 80081c0:	eb4b 0303 	adc.w	r3, fp, r3
 80081c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80081d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80081dc:	460b      	mov	r3, r1
 80081de:	18db      	adds	r3, r3, r3
 80081e0:	643b      	str	r3, [r7, #64]	; 0x40
 80081e2:	4613      	mov	r3, r2
 80081e4:	eb42 0303 	adc.w	r3, r2, r3
 80081e8:	647b      	str	r3, [r7, #68]	; 0x44
 80081ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80081f2:	f7f8 faf7 	bl	80007e4 <__aeabi_uldivmod>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	4611      	mov	r1, r2
 80081fc:	4b3b      	ldr	r3, [pc, #236]	; (80082ec <UART_SetConfig+0x2d4>)
 80081fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008202:	095b      	lsrs	r3, r3, #5
 8008204:	2264      	movs	r2, #100	; 0x64
 8008206:	fb02 f303 	mul.w	r3, r2, r3
 800820a:	1acb      	subs	r3, r1, r3
 800820c:	00db      	lsls	r3, r3, #3
 800820e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008212:	4b36      	ldr	r3, [pc, #216]	; (80082ec <UART_SetConfig+0x2d4>)
 8008214:	fba3 2302 	umull	r2, r3, r3, r2
 8008218:	095b      	lsrs	r3, r3, #5
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008220:	441c      	add	r4, r3
 8008222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008226:	2200      	movs	r2, #0
 8008228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800822c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008230:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008234:	4642      	mov	r2, r8
 8008236:	464b      	mov	r3, r9
 8008238:	1891      	adds	r1, r2, r2
 800823a:	63b9      	str	r1, [r7, #56]	; 0x38
 800823c:	415b      	adcs	r3, r3
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008240:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008244:	4641      	mov	r1, r8
 8008246:	1851      	adds	r1, r2, r1
 8008248:	6339      	str	r1, [r7, #48]	; 0x30
 800824a:	4649      	mov	r1, r9
 800824c:	414b      	adcs	r3, r1
 800824e:	637b      	str	r3, [r7, #52]	; 0x34
 8008250:	f04f 0200 	mov.w	r2, #0
 8008254:	f04f 0300 	mov.w	r3, #0
 8008258:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800825c:	4659      	mov	r1, fp
 800825e:	00cb      	lsls	r3, r1, #3
 8008260:	4651      	mov	r1, sl
 8008262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008266:	4651      	mov	r1, sl
 8008268:	00ca      	lsls	r2, r1, #3
 800826a:	4610      	mov	r0, r2
 800826c:	4619      	mov	r1, r3
 800826e:	4603      	mov	r3, r0
 8008270:	4642      	mov	r2, r8
 8008272:	189b      	adds	r3, r3, r2
 8008274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008278:	464b      	mov	r3, r9
 800827a:	460a      	mov	r2, r1
 800827c:	eb42 0303 	adc.w	r3, r2, r3
 8008280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008290:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008294:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008298:	460b      	mov	r3, r1
 800829a:	18db      	adds	r3, r3, r3
 800829c:	62bb      	str	r3, [r7, #40]	; 0x28
 800829e:	4613      	mov	r3, r2
 80082a0:	eb42 0303 	adc.w	r3, r2, r3
 80082a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80082ae:	f7f8 fa99 	bl	80007e4 <__aeabi_uldivmod>
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	4b0d      	ldr	r3, [pc, #52]	; (80082ec <UART_SetConfig+0x2d4>)
 80082b8:	fba3 1302 	umull	r1, r3, r3, r2
 80082bc:	095b      	lsrs	r3, r3, #5
 80082be:	2164      	movs	r1, #100	; 0x64
 80082c0:	fb01 f303 	mul.w	r3, r1, r3
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	3332      	adds	r3, #50	; 0x32
 80082ca:	4a08      	ldr	r2, [pc, #32]	; (80082ec <UART_SetConfig+0x2d4>)
 80082cc:	fba2 2303 	umull	r2, r3, r2, r3
 80082d0:	095b      	lsrs	r3, r3, #5
 80082d2:	f003 0207 	and.w	r2, r3, #7
 80082d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4422      	add	r2, r4
 80082de:	609a      	str	r2, [r3, #8]
 80082e0:	e106      	b.n	80084f0 <UART_SetConfig+0x4d8>
 80082e2:	bf00      	nop
 80082e4:	40011000 	.word	0x40011000
 80082e8:	40011400 	.word	0x40011400
 80082ec:	51eb851f 	.word	0x51eb851f
 80082f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082f4:	2200      	movs	r2, #0
 80082f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80082fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80082fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008302:	4642      	mov	r2, r8
 8008304:	464b      	mov	r3, r9
 8008306:	1891      	adds	r1, r2, r2
 8008308:	6239      	str	r1, [r7, #32]
 800830a:	415b      	adcs	r3, r3
 800830c:	627b      	str	r3, [r7, #36]	; 0x24
 800830e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008312:	4641      	mov	r1, r8
 8008314:	1854      	adds	r4, r2, r1
 8008316:	4649      	mov	r1, r9
 8008318:	eb43 0501 	adc.w	r5, r3, r1
 800831c:	f04f 0200 	mov.w	r2, #0
 8008320:	f04f 0300 	mov.w	r3, #0
 8008324:	00eb      	lsls	r3, r5, #3
 8008326:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800832a:	00e2      	lsls	r2, r4, #3
 800832c:	4614      	mov	r4, r2
 800832e:	461d      	mov	r5, r3
 8008330:	4643      	mov	r3, r8
 8008332:	18e3      	adds	r3, r4, r3
 8008334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008338:	464b      	mov	r3, r9
 800833a:	eb45 0303 	adc.w	r3, r5, r3
 800833e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800834e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008352:	f04f 0200 	mov.w	r2, #0
 8008356:	f04f 0300 	mov.w	r3, #0
 800835a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800835e:	4629      	mov	r1, r5
 8008360:	008b      	lsls	r3, r1, #2
 8008362:	4621      	mov	r1, r4
 8008364:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008368:	4621      	mov	r1, r4
 800836a:	008a      	lsls	r2, r1, #2
 800836c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008370:	f7f8 fa38 	bl	80007e4 <__aeabi_uldivmod>
 8008374:	4602      	mov	r2, r0
 8008376:	460b      	mov	r3, r1
 8008378:	4b60      	ldr	r3, [pc, #384]	; (80084fc <UART_SetConfig+0x4e4>)
 800837a:	fba3 2302 	umull	r2, r3, r3, r2
 800837e:	095b      	lsrs	r3, r3, #5
 8008380:	011c      	lsls	r4, r3, #4
 8008382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008386:	2200      	movs	r2, #0
 8008388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800838c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008390:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008394:	4642      	mov	r2, r8
 8008396:	464b      	mov	r3, r9
 8008398:	1891      	adds	r1, r2, r2
 800839a:	61b9      	str	r1, [r7, #24]
 800839c:	415b      	adcs	r3, r3
 800839e:	61fb      	str	r3, [r7, #28]
 80083a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083a4:	4641      	mov	r1, r8
 80083a6:	1851      	adds	r1, r2, r1
 80083a8:	6139      	str	r1, [r7, #16]
 80083aa:	4649      	mov	r1, r9
 80083ac:	414b      	adcs	r3, r1
 80083ae:	617b      	str	r3, [r7, #20]
 80083b0:	f04f 0200 	mov.w	r2, #0
 80083b4:	f04f 0300 	mov.w	r3, #0
 80083b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083bc:	4659      	mov	r1, fp
 80083be:	00cb      	lsls	r3, r1, #3
 80083c0:	4651      	mov	r1, sl
 80083c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083c6:	4651      	mov	r1, sl
 80083c8:	00ca      	lsls	r2, r1, #3
 80083ca:	4610      	mov	r0, r2
 80083cc:	4619      	mov	r1, r3
 80083ce:	4603      	mov	r3, r0
 80083d0:	4642      	mov	r2, r8
 80083d2:	189b      	adds	r3, r3, r2
 80083d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083d8:	464b      	mov	r3, r9
 80083da:	460a      	mov	r2, r1
 80083dc:	eb42 0303 	adc.w	r3, r2, r3
 80083e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80083ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80083f0:	f04f 0200 	mov.w	r2, #0
 80083f4:	f04f 0300 	mov.w	r3, #0
 80083f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80083fc:	4649      	mov	r1, r9
 80083fe:	008b      	lsls	r3, r1, #2
 8008400:	4641      	mov	r1, r8
 8008402:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008406:	4641      	mov	r1, r8
 8008408:	008a      	lsls	r2, r1, #2
 800840a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800840e:	f7f8 f9e9 	bl	80007e4 <__aeabi_uldivmod>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	4611      	mov	r1, r2
 8008418:	4b38      	ldr	r3, [pc, #224]	; (80084fc <UART_SetConfig+0x4e4>)
 800841a:	fba3 2301 	umull	r2, r3, r3, r1
 800841e:	095b      	lsrs	r3, r3, #5
 8008420:	2264      	movs	r2, #100	; 0x64
 8008422:	fb02 f303 	mul.w	r3, r2, r3
 8008426:	1acb      	subs	r3, r1, r3
 8008428:	011b      	lsls	r3, r3, #4
 800842a:	3332      	adds	r3, #50	; 0x32
 800842c:	4a33      	ldr	r2, [pc, #204]	; (80084fc <UART_SetConfig+0x4e4>)
 800842e:	fba2 2303 	umull	r2, r3, r2, r3
 8008432:	095b      	lsrs	r3, r3, #5
 8008434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008438:	441c      	add	r4, r3
 800843a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800843e:	2200      	movs	r2, #0
 8008440:	673b      	str	r3, [r7, #112]	; 0x70
 8008442:	677a      	str	r2, [r7, #116]	; 0x74
 8008444:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008448:	4642      	mov	r2, r8
 800844a:	464b      	mov	r3, r9
 800844c:	1891      	adds	r1, r2, r2
 800844e:	60b9      	str	r1, [r7, #8]
 8008450:	415b      	adcs	r3, r3
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008458:	4641      	mov	r1, r8
 800845a:	1851      	adds	r1, r2, r1
 800845c:	6039      	str	r1, [r7, #0]
 800845e:	4649      	mov	r1, r9
 8008460:	414b      	adcs	r3, r1
 8008462:	607b      	str	r3, [r7, #4]
 8008464:	f04f 0200 	mov.w	r2, #0
 8008468:	f04f 0300 	mov.w	r3, #0
 800846c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008470:	4659      	mov	r1, fp
 8008472:	00cb      	lsls	r3, r1, #3
 8008474:	4651      	mov	r1, sl
 8008476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800847a:	4651      	mov	r1, sl
 800847c:	00ca      	lsls	r2, r1, #3
 800847e:	4610      	mov	r0, r2
 8008480:	4619      	mov	r1, r3
 8008482:	4603      	mov	r3, r0
 8008484:	4642      	mov	r2, r8
 8008486:	189b      	adds	r3, r3, r2
 8008488:	66bb      	str	r3, [r7, #104]	; 0x68
 800848a:	464b      	mov	r3, r9
 800848c:	460a      	mov	r2, r1
 800848e:	eb42 0303 	adc.w	r3, r2, r3
 8008492:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	663b      	str	r3, [r7, #96]	; 0x60
 800849e:	667a      	str	r2, [r7, #100]	; 0x64
 80084a0:	f04f 0200 	mov.w	r2, #0
 80084a4:	f04f 0300 	mov.w	r3, #0
 80084a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80084ac:	4649      	mov	r1, r9
 80084ae:	008b      	lsls	r3, r1, #2
 80084b0:	4641      	mov	r1, r8
 80084b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084b6:	4641      	mov	r1, r8
 80084b8:	008a      	lsls	r2, r1, #2
 80084ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80084be:	f7f8 f991 	bl	80007e4 <__aeabi_uldivmod>
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	4b0d      	ldr	r3, [pc, #52]	; (80084fc <UART_SetConfig+0x4e4>)
 80084c8:	fba3 1302 	umull	r1, r3, r3, r2
 80084cc:	095b      	lsrs	r3, r3, #5
 80084ce:	2164      	movs	r1, #100	; 0x64
 80084d0:	fb01 f303 	mul.w	r3, r1, r3
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	011b      	lsls	r3, r3, #4
 80084d8:	3332      	adds	r3, #50	; 0x32
 80084da:	4a08      	ldr	r2, [pc, #32]	; (80084fc <UART_SetConfig+0x4e4>)
 80084dc:	fba2 2303 	umull	r2, r3, r2, r3
 80084e0:	095b      	lsrs	r3, r3, #5
 80084e2:	f003 020f 	and.w	r2, r3, #15
 80084e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4422      	add	r2, r4
 80084ee:	609a      	str	r2, [r3, #8]
 80084f0:	bf00      	nop
 80084f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80084f6:	46bd      	mov	sp, r7
 80084f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084fc:	51eb851f 	.word	0x51eb851f

08008500 <calloc>:
 8008500:	4b02      	ldr	r3, [pc, #8]	; (800850c <calloc+0xc>)
 8008502:	460a      	mov	r2, r1
 8008504:	4601      	mov	r1, r0
 8008506:	6818      	ldr	r0, [r3, #0]
 8008508:	f000 b802 	b.w	8008510 <_calloc_r>
 800850c:	200010bc 	.word	0x200010bc

08008510 <_calloc_r>:
 8008510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008512:	fba1 2402 	umull	r2, r4, r1, r2
 8008516:	b94c      	cbnz	r4, 800852c <_calloc_r+0x1c>
 8008518:	4611      	mov	r1, r2
 800851a:	9201      	str	r2, [sp, #4]
 800851c:	f000 f850 	bl	80085c0 <_malloc_r>
 8008520:	9a01      	ldr	r2, [sp, #4]
 8008522:	4605      	mov	r5, r0
 8008524:	b930      	cbnz	r0, 8008534 <_calloc_r+0x24>
 8008526:	4628      	mov	r0, r5
 8008528:	b003      	add	sp, #12
 800852a:	bd30      	pop	{r4, r5, pc}
 800852c:	220c      	movs	r2, #12
 800852e:	6002      	str	r2, [r0, #0]
 8008530:	2500      	movs	r5, #0
 8008532:	e7f8      	b.n	8008526 <_calloc_r+0x16>
 8008534:	4621      	mov	r1, r4
 8008536:	f000 f8cf 	bl	80086d8 <memset>
 800853a:	e7f4      	b.n	8008526 <_calloc_r+0x16>

0800853c <exit>:
 800853c:	b508      	push	{r3, lr}
 800853e:	4b06      	ldr	r3, [pc, #24]	; (8008558 <exit+0x1c>)
 8008540:	4604      	mov	r4, r0
 8008542:	b113      	cbz	r3, 800854a <exit+0xe>
 8008544:	2100      	movs	r1, #0
 8008546:	f3af 8000 	nop.w
 800854a:	4b04      	ldr	r3, [pc, #16]	; (800855c <exit+0x20>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	b103      	cbz	r3, 8008552 <exit+0x16>
 8008550:	4798      	blx	r3
 8008552:	4620      	mov	r0, r4
 8008554:	f7fb fc50 	bl	8003df8 <_exit>
 8008558:	00000000 	.word	0x00000000
 800855c:	20007250 	.word	0x20007250

08008560 <malloc>:
 8008560:	4b02      	ldr	r3, [pc, #8]	; (800856c <malloc+0xc>)
 8008562:	4601      	mov	r1, r0
 8008564:	6818      	ldr	r0, [r3, #0]
 8008566:	f000 b82b 	b.w	80085c0 <_malloc_r>
 800856a:	bf00      	nop
 800856c:	200010bc 	.word	0x200010bc

08008570 <free>:
 8008570:	4b02      	ldr	r3, [pc, #8]	; (800857c <free+0xc>)
 8008572:	4601      	mov	r1, r0
 8008574:	6818      	ldr	r0, [r3, #0]
 8008576:	f000 b8f3 	b.w	8008760 <_free_r>
 800857a:	bf00      	nop
 800857c:	200010bc 	.word	0x200010bc

08008580 <sbrk_aligned>:
 8008580:	b570      	push	{r4, r5, r6, lr}
 8008582:	4e0e      	ldr	r6, [pc, #56]	; (80085bc <sbrk_aligned+0x3c>)
 8008584:	460c      	mov	r4, r1
 8008586:	6831      	ldr	r1, [r6, #0]
 8008588:	4605      	mov	r5, r0
 800858a:	b911      	cbnz	r1, 8008592 <sbrk_aligned+0x12>
 800858c:	f000 f8ac 	bl	80086e8 <_sbrk_r>
 8008590:	6030      	str	r0, [r6, #0]
 8008592:	4621      	mov	r1, r4
 8008594:	4628      	mov	r0, r5
 8008596:	f000 f8a7 	bl	80086e8 <_sbrk_r>
 800859a:	1c43      	adds	r3, r0, #1
 800859c:	d00a      	beq.n	80085b4 <sbrk_aligned+0x34>
 800859e:	1cc4      	adds	r4, r0, #3
 80085a0:	f024 0403 	bic.w	r4, r4, #3
 80085a4:	42a0      	cmp	r0, r4
 80085a6:	d007      	beq.n	80085b8 <sbrk_aligned+0x38>
 80085a8:	1a21      	subs	r1, r4, r0
 80085aa:	4628      	mov	r0, r5
 80085ac:	f000 f89c 	bl	80086e8 <_sbrk_r>
 80085b0:	3001      	adds	r0, #1
 80085b2:	d101      	bne.n	80085b8 <sbrk_aligned+0x38>
 80085b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80085b8:	4620      	mov	r0, r4
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	20007114 	.word	0x20007114

080085c0 <_malloc_r>:
 80085c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085c4:	1ccd      	adds	r5, r1, #3
 80085c6:	f025 0503 	bic.w	r5, r5, #3
 80085ca:	3508      	adds	r5, #8
 80085cc:	2d0c      	cmp	r5, #12
 80085ce:	bf38      	it	cc
 80085d0:	250c      	movcc	r5, #12
 80085d2:	2d00      	cmp	r5, #0
 80085d4:	4607      	mov	r7, r0
 80085d6:	db01      	blt.n	80085dc <_malloc_r+0x1c>
 80085d8:	42a9      	cmp	r1, r5
 80085da:	d905      	bls.n	80085e8 <_malloc_r+0x28>
 80085dc:	230c      	movs	r3, #12
 80085de:	603b      	str	r3, [r7, #0]
 80085e0:	2600      	movs	r6, #0
 80085e2:	4630      	mov	r0, r6
 80085e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80086bc <_malloc_r+0xfc>
 80085ec:	f000 f868 	bl	80086c0 <__malloc_lock>
 80085f0:	f8d8 3000 	ldr.w	r3, [r8]
 80085f4:	461c      	mov	r4, r3
 80085f6:	bb5c      	cbnz	r4, 8008650 <_malloc_r+0x90>
 80085f8:	4629      	mov	r1, r5
 80085fa:	4638      	mov	r0, r7
 80085fc:	f7ff ffc0 	bl	8008580 <sbrk_aligned>
 8008600:	1c43      	adds	r3, r0, #1
 8008602:	4604      	mov	r4, r0
 8008604:	d155      	bne.n	80086b2 <_malloc_r+0xf2>
 8008606:	f8d8 4000 	ldr.w	r4, [r8]
 800860a:	4626      	mov	r6, r4
 800860c:	2e00      	cmp	r6, #0
 800860e:	d145      	bne.n	800869c <_malloc_r+0xdc>
 8008610:	2c00      	cmp	r4, #0
 8008612:	d048      	beq.n	80086a6 <_malloc_r+0xe6>
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	4631      	mov	r1, r6
 8008618:	4638      	mov	r0, r7
 800861a:	eb04 0903 	add.w	r9, r4, r3
 800861e:	f000 f863 	bl	80086e8 <_sbrk_r>
 8008622:	4581      	cmp	r9, r0
 8008624:	d13f      	bne.n	80086a6 <_malloc_r+0xe6>
 8008626:	6821      	ldr	r1, [r4, #0]
 8008628:	1a6d      	subs	r5, r5, r1
 800862a:	4629      	mov	r1, r5
 800862c:	4638      	mov	r0, r7
 800862e:	f7ff ffa7 	bl	8008580 <sbrk_aligned>
 8008632:	3001      	adds	r0, #1
 8008634:	d037      	beq.n	80086a6 <_malloc_r+0xe6>
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	442b      	add	r3, r5
 800863a:	6023      	str	r3, [r4, #0]
 800863c:	f8d8 3000 	ldr.w	r3, [r8]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d038      	beq.n	80086b6 <_malloc_r+0xf6>
 8008644:	685a      	ldr	r2, [r3, #4]
 8008646:	42a2      	cmp	r2, r4
 8008648:	d12b      	bne.n	80086a2 <_malloc_r+0xe2>
 800864a:	2200      	movs	r2, #0
 800864c:	605a      	str	r2, [r3, #4]
 800864e:	e00f      	b.n	8008670 <_malloc_r+0xb0>
 8008650:	6822      	ldr	r2, [r4, #0]
 8008652:	1b52      	subs	r2, r2, r5
 8008654:	d41f      	bmi.n	8008696 <_malloc_r+0xd6>
 8008656:	2a0b      	cmp	r2, #11
 8008658:	d917      	bls.n	800868a <_malloc_r+0xca>
 800865a:	1961      	adds	r1, r4, r5
 800865c:	42a3      	cmp	r3, r4
 800865e:	6025      	str	r5, [r4, #0]
 8008660:	bf18      	it	ne
 8008662:	6059      	strne	r1, [r3, #4]
 8008664:	6863      	ldr	r3, [r4, #4]
 8008666:	bf08      	it	eq
 8008668:	f8c8 1000 	streq.w	r1, [r8]
 800866c:	5162      	str	r2, [r4, r5]
 800866e:	604b      	str	r3, [r1, #4]
 8008670:	4638      	mov	r0, r7
 8008672:	f104 060b 	add.w	r6, r4, #11
 8008676:	f000 f829 	bl	80086cc <__malloc_unlock>
 800867a:	f026 0607 	bic.w	r6, r6, #7
 800867e:	1d23      	adds	r3, r4, #4
 8008680:	1af2      	subs	r2, r6, r3
 8008682:	d0ae      	beq.n	80085e2 <_malloc_r+0x22>
 8008684:	1b9b      	subs	r3, r3, r6
 8008686:	50a3      	str	r3, [r4, r2]
 8008688:	e7ab      	b.n	80085e2 <_malloc_r+0x22>
 800868a:	42a3      	cmp	r3, r4
 800868c:	6862      	ldr	r2, [r4, #4]
 800868e:	d1dd      	bne.n	800864c <_malloc_r+0x8c>
 8008690:	f8c8 2000 	str.w	r2, [r8]
 8008694:	e7ec      	b.n	8008670 <_malloc_r+0xb0>
 8008696:	4623      	mov	r3, r4
 8008698:	6864      	ldr	r4, [r4, #4]
 800869a:	e7ac      	b.n	80085f6 <_malloc_r+0x36>
 800869c:	4634      	mov	r4, r6
 800869e:	6876      	ldr	r6, [r6, #4]
 80086a0:	e7b4      	b.n	800860c <_malloc_r+0x4c>
 80086a2:	4613      	mov	r3, r2
 80086a4:	e7cc      	b.n	8008640 <_malloc_r+0x80>
 80086a6:	230c      	movs	r3, #12
 80086a8:	603b      	str	r3, [r7, #0]
 80086aa:	4638      	mov	r0, r7
 80086ac:	f000 f80e 	bl	80086cc <__malloc_unlock>
 80086b0:	e797      	b.n	80085e2 <_malloc_r+0x22>
 80086b2:	6025      	str	r5, [r4, #0]
 80086b4:	e7dc      	b.n	8008670 <_malloc_r+0xb0>
 80086b6:	605b      	str	r3, [r3, #4]
 80086b8:	deff      	udf	#255	; 0xff
 80086ba:	bf00      	nop
 80086bc:	20007110 	.word	0x20007110

080086c0 <__malloc_lock>:
 80086c0:	4801      	ldr	r0, [pc, #4]	; (80086c8 <__malloc_lock+0x8>)
 80086c2:	f000 b84b 	b.w	800875c <__retarget_lock_acquire_recursive>
 80086c6:	bf00      	nop
 80086c8:	20007258 	.word	0x20007258

080086cc <__malloc_unlock>:
 80086cc:	4801      	ldr	r0, [pc, #4]	; (80086d4 <__malloc_unlock+0x8>)
 80086ce:	f000 b846 	b.w	800875e <__retarget_lock_release_recursive>
 80086d2:	bf00      	nop
 80086d4:	20007258 	.word	0x20007258

080086d8 <memset>:
 80086d8:	4402      	add	r2, r0
 80086da:	4603      	mov	r3, r0
 80086dc:	4293      	cmp	r3, r2
 80086de:	d100      	bne.n	80086e2 <memset+0xa>
 80086e0:	4770      	bx	lr
 80086e2:	f803 1b01 	strb.w	r1, [r3], #1
 80086e6:	e7f9      	b.n	80086dc <memset+0x4>

080086e8 <_sbrk_r>:
 80086e8:	b538      	push	{r3, r4, r5, lr}
 80086ea:	4d06      	ldr	r5, [pc, #24]	; (8008704 <_sbrk_r+0x1c>)
 80086ec:	2300      	movs	r3, #0
 80086ee:	4604      	mov	r4, r0
 80086f0:	4608      	mov	r0, r1
 80086f2:	602b      	str	r3, [r5, #0]
 80086f4:	f7fb fb8a 	bl	8003e0c <_sbrk>
 80086f8:	1c43      	adds	r3, r0, #1
 80086fa:	d102      	bne.n	8008702 <_sbrk_r+0x1a>
 80086fc:	682b      	ldr	r3, [r5, #0]
 80086fe:	b103      	cbz	r3, 8008702 <_sbrk_r+0x1a>
 8008700:	6023      	str	r3, [r4, #0]
 8008702:	bd38      	pop	{r3, r4, r5, pc}
 8008704:	20007254 	.word	0x20007254

08008708 <__errno>:
 8008708:	4b01      	ldr	r3, [pc, #4]	; (8008710 <__errno+0x8>)
 800870a:	6818      	ldr	r0, [r3, #0]
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	200010bc 	.word	0x200010bc

08008714 <__libc_init_array>:
 8008714:	b570      	push	{r4, r5, r6, lr}
 8008716:	4d0d      	ldr	r5, [pc, #52]	; (800874c <__libc_init_array+0x38>)
 8008718:	4c0d      	ldr	r4, [pc, #52]	; (8008750 <__libc_init_array+0x3c>)
 800871a:	1b64      	subs	r4, r4, r5
 800871c:	10a4      	asrs	r4, r4, #2
 800871e:	2600      	movs	r6, #0
 8008720:	42a6      	cmp	r6, r4
 8008722:	d109      	bne.n	8008738 <__libc_init_array+0x24>
 8008724:	4d0b      	ldr	r5, [pc, #44]	; (8008754 <__libc_init_array+0x40>)
 8008726:	4c0c      	ldr	r4, [pc, #48]	; (8008758 <__libc_init_array+0x44>)
 8008728:	f000 f866 	bl	80087f8 <_init>
 800872c:	1b64      	subs	r4, r4, r5
 800872e:	10a4      	asrs	r4, r4, #2
 8008730:	2600      	movs	r6, #0
 8008732:	42a6      	cmp	r6, r4
 8008734:	d105      	bne.n	8008742 <__libc_init_array+0x2e>
 8008736:	bd70      	pop	{r4, r5, r6, pc}
 8008738:	f855 3b04 	ldr.w	r3, [r5], #4
 800873c:	4798      	blx	r3
 800873e:	3601      	adds	r6, #1
 8008740:	e7ee      	b.n	8008720 <__libc_init_array+0xc>
 8008742:	f855 3b04 	ldr.w	r3, [r5], #4
 8008746:	4798      	blx	r3
 8008748:	3601      	adds	r6, #1
 800874a:	e7f2      	b.n	8008732 <__libc_init_array+0x1e>
 800874c:	08009004 	.word	0x08009004
 8008750:	08009004 	.word	0x08009004
 8008754:	08009004 	.word	0x08009004
 8008758:	08009008 	.word	0x08009008

0800875c <__retarget_lock_acquire_recursive>:
 800875c:	4770      	bx	lr

0800875e <__retarget_lock_release_recursive>:
 800875e:	4770      	bx	lr

08008760 <_free_r>:
 8008760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008762:	2900      	cmp	r1, #0
 8008764:	d044      	beq.n	80087f0 <_free_r+0x90>
 8008766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800876a:	9001      	str	r0, [sp, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	f1a1 0404 	sub.w	r4, r1, #4
 8008772:	bfb8      	it	lt
 8008774:	18e4      	addlt	r4, r4, r3
 8008776:	f7ff ffa3 	bl	80086c0 <__malloc_lock>
 800877a:	4a1e      	ldr	r2, [pc, #120]	; (80087f4 <_free_r+0x94>)
 800877c:	9801      	ldr	r0, [sp, #4]
 800877e:	6813      	ldr	r3, [r2, #0]
 8008780:	b933      	cbnz	r3, 8008790 <_free_r+0x30>
 8008782:	6063      	str	r3, [r4, #4]
 8008784:	6014      	str	r4, [r2, #0]
 8008786:	b003      	add	sp, #12
 8008788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800878c:	f7ff bf9e 	b.w	80086cc <__malloc_unlock>
 8008790:	42a3      	cmp	r3, r4
 8008792:	d908      	bls.n	80087a6 <_free_r+0x46>
 8008794:	6825      	ldr	r5, [r4, #0]
 8008796:	1961      	adds	r1, r4, r5
 8008798:	428b      	cmp	r3, r1
 800879a:	bf01      	itttt	eq
 800879c:	6819      	ldreq	r1, [r3, #0]
 800879e:	685b      	ldreq	r3, [r3, #4]
 80087a0:	1949      	addeq	r1, r1, r5
 80087a2:	6021      	streq	r1, [r4, #0]
 80087a4:	e7ed      	b.n	8008782 <_free_r+0x22>
 80087a6:	461a      	mov	r2, r3
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	b10b      	cbz	r3, 80087b0 <_free_r+0x50>
 80087ac:	42a3      	cmp	r3, r4
 80087ae:	d9fa      	bls.n	80087a6 <_free_r+0x46>
 80087b0:	6811      	ldr	r1, [r2, #0]
 80087b2:	1855      	adds	r5, r2, r1
 80087b4:	42a5      	cmp	r5, r4
 80087b6:	d10b      	bne.n	80087d0 <_free_r+0x70>
 80087b8:	6824      	ldr	r4, [r4, #0]
 80087ba:	4421      	add	r1, r4
 80087bc:	1854      	adds	r4, r2, r1
 80087be:	42a3      	cmp	r3, r4
 80087c0:	6011      	str	r1, [r2, #0]
 80087c2:	d1e0      	bne.n	8008786 <_free_r+0x26>
 80087c4:	681c      	ldr	r4, [r3, #0]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	6053      	str	r3, [r2, #4]
 80087ca:	440c      	add	r4, r1
 80087cc:	6014      	str	r4, [r2, #0]
 80087ce:	e7da      	b.n	8008786 <_free_r+0x26>
 80087d0:	d902      	bls.n	80087d8 <_free_r+0x78>
 80087d2:	230c      	movs	r3, #12
 80087d4:	6003      	str	r3, [r0, #0]
 80087d6:	e7d6      	b.n	8008786 <_free_r+0x26>
 80087d8:	6825      	ldr	r5, [r4, #0]
 80087da:	1961      	adds	r1, r4, r5
 80087dc:	428b      	cmp	r3, r1
 80087de:	bf04      	itt	eq
 80087e0:	6819      	ldreq	r1, [r3, #0]
 80087e2:	685b      	ldreq	r3, [r3, #4]
 80087e4:	6063      	str	r3, [r4, #4]
 80087e6:	bf04      	itt	eq
 80087e8:	1949      	addeq	r1, r1, r5
 80087ea:	6021      	streq	r1, [r4, #0]
 80087ec:	6054      	str	r4, [r2, #4]
 80087ee:	e7ca      	b.n	8008786 <_free_r+0x26>
 80087f0:	b003      	add	sp, #12
 80087f2:	bd30      	pop	{r4, r5, pc}
 80087f4:	20007110 	.word	0x20007110

080087f8 <_init>:
 80087f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fa:	bf00      	nop
 80087fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087fe:	bc08      	pop	{r3}
 8008800:	469e      	mov	lr, r3
 8008802:	4770      	bx	lr

08008804 <_fini>:
 8008804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008806:	bf00      	nop
 8008808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800880a:	bc08      	pop	{r3}
 800880c:	469e      	mov	lr, r3
 800880e:	4770      	bx	lr
