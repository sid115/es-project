
Test_WS2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f04  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  08004098  08004098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800486c  0800486c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800486c  0800486c  0001486c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004874  08004874  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004874  08004874  00014874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004878  08004878  00014878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800487c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c48  2000000c  08004888  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005c54  08004888  00025c54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f14e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000210c  00000000  00000000  0002f1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  000312e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3a  00000000  00000000  00032128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016854  00000000  00000000  00032c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fbbd  00000000  00000000  000494b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ef8f  00000000  00000000  00059073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c8c  00000000  00000000  000e8004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000ebc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004080 	.word	0x08004080

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004080 	.word	0x08004080

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	f6ad 7d38 	subw	sp, sp, #3896	; 0xf38
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  ColorRGB_t color[NUM_COLORS] = {
 80004d8:	4b51      	ldr	r3, [pc, #324]	; (8000620 <main+0x150>)
 80004da:	f507 6470 	add.w	r4, r7, #3840	; 0xf00
 80004de:	461d      	mov	r5, r3
 80004e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ec:	682b      	ldr	r3, [r5, #0]
 80004ee:	461a      	mov	r2, r3
 80004f0:	8022      	strh	r2, [r4, #0]
 80004f2:	3402      	adds	r4, #2
 80004f4:	0c1b      	lsrs	r3, r3, #16
 80004f6:	7023      	strb	r3, [r4, #0]
    {128, 0,   128}, // C_TEAL
    {128, 128, 0  }, // C_VIOLET
    {128, 128, 0  }, // C_MAUVE
    {0,   0,   0  }  // C_BLACK
  };
  ColorRGB_t* maze[WS2812_NUM_LEDS_Y][WS2812_NUM_LEDS_X] = {0}; // fill with &color[C_COLOR]
 80004f8:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 80004fc:	f6a3 7338 	subw	r3, r3, #3896	; 0xf38
 8000500:	4618      	mov	r0, r3
 8000502:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000506:	461a      	mov	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f003 fd8d 	bl	8004028 <memset>

  uint8_t x, y = 0; // index variables
 800050e:	2300      	movs	r3, #0
 8000510:	f887 3f36 	strb.w	r3, [r7, #3894]	; 0xf36
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fe68 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f884 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 fa38 	bl	8000990 <MX_GPIO_Init>
  MX_DMA_Init();
 8000520:	f000 fa0e 	bl	8000940 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000524:	f000 f9e2 	bl	80008ec <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000528:	f000 f91e 	bl	8000768 <MX_TIM2_Init>
  MX_TIM3_Init();
 800052c:	f000 f990 	bl	8000850 <MX_TIM3_Init>
  MX_SPI2_Init();
 8000530:	f000 f8e4 	bl	80006fc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ws2812_init();
 8000534:	f000 fcde 	bl	8000ef4 <ws2812_init>
  for (x = 0; x < WS2812_NUM_LEDS_X; x++) 
 8000538:	2300      	movs	r3, #0
 800053a:	f887 3f37 	strb.w	r3, [r7, #3895]	; 0xf37
 800053e:	e02a      	b.n	8000596 <main+0xc6>
  {
    for (y = 0; x < WS2812_NUM_LEDS_Y; y++) 
 8000540:	2300      	movs	r3, #0
 8000542:	f887 3f36 	strb.w	r3, [r7, #3894]	; 0xf36
 8000546:	e01d      	b.n	8000584 <main+0xb4>
    {
      maze[y][x] = &color[x % 2];
 8000548:	f897 3f37 	ldrb.w	r3, [r7, #3895]	; 0xf37
 800054c:	f003 0101 	and.w	r1, r3, #1
 8000550:	f897 2f36 	ldrb.w	r2, [r7, #3894]	; 0xf36
 8000554:	f897 4f37 	ldrb.w	r4, [r7, #3895]	; 0xf37
 8000558:	f507 6070 	add.w	r0, r7, #3840	; 0xf00
 800055c:	460b      	mov	r3, r1
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	440b      	add	r3, r1
 8000562:	4418      	add	r0, r3
 8000564:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8000568:	f6a3 7138 	subw	r1, r3, #3896	; 0xf38
 800056c:	4613      	mov	r3, r2
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	4413      	add	r3, r2
 8000572:	00db      	lsls	r3, r3, #3
 8000574:	4423      	add	r3, r4
 8000576:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    for (y = 0; x < WS2812_NUM_LEDS_Y; y++) 
 800057a:	f897 3f36 	ldrb.w	r3, [r7, #3894]	; 0xf36
 800057e:	3301      	adds	r3, #1
 8000580:	f887 3f36 	strb.w	r3, [r7, #3894]	; 0xf36
 8000584:	f897 3f37 	ldrb.w	r3, [r7, #3895]	; 0xf37
 8000588:	2b17      	cmp	r3, #23
 800058a:	d9dd      	bls.n	8000548 <main+0x78>
  for (x = 0; x < WS2812_NUM_LEDS_X; x++) 
 800058c:	f897 3f37 	ldrb.w	r3, [r7, #3895]	; 0xf37
 8000590:	3301      	adds	r3, #1
 8000592:	f887 3f37 	strb.w	r3, [r7, #3895]	; 0xf37
 8000596:	f897 3f37 	ldrb.w	r3, [r7, #3895]	; 0xf37
 800059a:	2b27      	cmp	r3, #39	; 0x27
 800059c:	d9d0      	bls.n	8000540 <main+0x70>
    }
  }
  ws2812_pixel_pic(maze);
 800059e:	463b      	mov	r3, r7
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fd95 	bl	80010d0 <ws2812_pixel_pic>

  x = 0; y = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f887 3f37 	strb.w	r3, [r7, #3895]	; 0xf37
 80005ac:	2300      	movs	r3, #0
 80005ae:	f887 3f36 	strb.w	r3, [r7, #3894]	; 0xf36
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	ws2812_pixel_all(&color[C_BLACK]);
 80005b2:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 80005b6:	3330      	adds	r3, #48	; 0x30
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 fd1f 	bl	8000ffc <ws2812_pixel_all>
	HAL_Delay(100);
 80005be:	2064      	movs	r0, #100	; 0x64
 80005c0:	f000 fe84 	bl	80012cc <HAL_Delay>
	ws2812_pixel(x, y, &color[x % 16]);
 80005c4:	f897 3f37 	ldrb.w	r3, [r7, #3895]	; 0xf37
 80005c8:	f003 020f 	and.w	r2, r3, #15
 80005cc:	f507 6170 	add.w	r1, r7, #3840	; 0xf00
 80005d0:	4613      	mov	r3, r2
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	4413      	add	r3, r2
 80005d6:	18ca      	adds	r2, r1, r3
 80005d8:	f897 1f36 	ldrb.w	r1, [r7, #3894]	; 0xf36
 80005dc:	f897 3f37 	ldrb.w	r3, [r7, #3895]	; 0xf37
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fc9b 	bl	8000f1c <ws2812_pixel>
	//ws2812_pixel_all(&color[C_BLUE]);
	HAL_Delay(100);
 80005e6:	2064      	movs	r0, #100	; 0x64
 80005e8:	f000 fe70 	bl	80012cc <HAL_Delay>

    x++;
 80005ec:	f897 3f37 	ldrb.w	r3, [r7, #3895]	; 0xf37
 80005f0:	3301      	adds	r3, #1
 80005f2:	f887 3f37 	strb.w	r3, [r7, #3895]	; 0xf37
    if (x == WS2812_NUM_LEDS_X)
 80005f6:	f897 3f37 	ldrb.w	r3, [r7, #3895]	; 0xf37
 80005fa:	2b28      	cmp	r3, #40	; 0x28
 80005fc:	d107      	bne.n	800060e <main+0x13e>
    {
      x = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	f887 3f37 	strb.w	r3, [r7, #3895]	; 0xf37
      y++;
 8000604:	f897 3f36 	ldrb.w	r3, [r7, #3894]	; 0xf36
 8000608:	3301      	adds	r3, #1
 800060a:	f887 3f36 	strb.w	r3, [r7, #3894]	; 0xf36
    }
    if (y == WS2812_NUM_LEDS_Y) y = 0;
 800060e:	f897 3f36 	ldrb.w	r3, [r7, #3894]	; 0xf36
 8000612:	2b18      	cmp	r3, #24
 8000614:	d1cd      	bne.n	80005b2 <main+0xe2>
 8000616:	2300      	movs	r3, #0
 8000618:	f887 3f36 	strb.w	r3, [r7, #3894]	; 0xf36
	ws2812_pixel_all(&color[C_BLACK]);
 800061c:	e7c9      	b.n	80005b2 <main+0xe2>
 800061e:	bf00      	nop
 8000620:	08004098 	.word	0x08004098

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f003 fcf8 	bl	8004028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <SystemClock_Config+0xd0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a28      	ldr	r2, [pc, #160]	; (80006f4 <SystemClock_Config+0xd0>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <SystemClock_Config+0xd0>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <SystemClock_Config+0xd4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xd4>)
 8000672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xd4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000698:	2310      	movs	r3, #16
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800069c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a6:	2307      	movs	r3, #7
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fc72 	bl	8001f98 <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ba:	f000 f9d7 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2302      	movs	r3, #2
 80006c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2102      	movs	r1, #2
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fed4 	bl	8002488 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006e6:	f000 f9c1 	bl	8000a6c <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_SPI2_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <MX_SPI2_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_SPI2_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_SPI2_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_SPI2_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_SPI2_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_SPI2_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_SPI2_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_SPI2_Init+0x64>)
 8000730:	2218      	movs	r2, #24
 8000732:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_SPI2_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_SPI2_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_SPI2_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_SPI2_Init+0x64>)
 8000748:	220a      	movs	r2, #10
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_SPI2_Init+0x64>)
 800074e:	f002 f8bb 	bl	80028c8 <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f988 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000028 	.word	0x20000028
 8000764:	40003800 	.word	0x40003800

08000768 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08e      	sub	sp, #56	; 0x38
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
 8000794:	615a      	str	r2, [r3, #20]
 8000796:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000798:	4b2c      	ldr	r3, [pc, #176]	; (800084c <MX_TIM2_Init+0xe4>)
 800079a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800079e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <MX_TIM2_Init+0xe4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a6:	4b29      	ldr	r3, [pc, #164]	; (800084c <MX_TIM2_Init+0xe4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80007ac:	4b27      	ldr	r3, [pc, #156]	; (800084c <MX_TIM2_Init+0xe4>)
 80007ae:	2264      	movs	r2, #100	; 0x64
 80007b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_TIM2_Init+0xe4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b8:	4b24      	ldr	r3, [pc, #144]	; (800084c <MX_TIM2_Init+0xe4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007be:	4823      	ldr	r0, [pc, #140]	; (800084c <MX_TIM2_Init+0xe4>)
 80007c0:	f002 fc2a 	bl	8003018 <HAL_TIM_Base_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80007ca:	f000 f94f 	bl	8000a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d8:	4619      	mov	r1, r3
 80007da:	481c      	ldr	r0, [pc, #112]	; (800084c <MX_TIM2_Init+0xe4>)
 80007dc:	f002 fd86 	bl	80032ec <HAL_TIM_ConfigClockSource>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80007e6:	f000 f941 	bl	8000a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007ea:	4818      	ldr	r0, [pc, #96]	; (800084c <MX_TIM2_Init+0xe4>)
 80007ec:	f002 fc63 	bl	80030b6 <HAL_TIM_PWM_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80007f6:	f000 f939 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	4619      	mov	r1, r3
 8000808:	4810      	ldr	r0, [pc, #64]	; (800084c <MX_TIM2_Init+0xe4>)
 800080a:	f003 f8dd 	bl	80039c8 <HAL_TIMEx_MasterConfigSynchronization>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000814:	f000 f92a 	bl	8000a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000818:	2360      	movs	r3, #96	; 0x60
 800081a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2208      	movs	r2, #8
 800082c:	4619      	mov	r1, r3
 800082e:	4807      	ldr	r0, [pc, #28]	; (800084c <MX_TIM2_Init+0xe4>)
 8000830:	f002 fc9a 	bl	8003168 <HAL_TIM_PWM_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800083a:	f000 f917 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800083e:	4803      	ldr	r0, [pc, #12]	; (800084c <MX_TIM2_Init+0xe4>)
 8000840:	f000 fa7e 	bl	8000d40 <HAL_TIM_MspPostInit>

}
 8000844:	bf00      	nop
 8000846:	3738      	adds	r7, #56	; 0x38
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000e0 	.word	0x200000e0

08000850 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000864:	463b      	mov	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_TIM3_Init+0x94>)
 800086e:	4a1e      	ldr	r2, [pc, #120]	; (80008e8 <MX_TIM3_Init+0x98>)
 8000870:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_TIM3_Init+0x94>)
 8000874:	2200      	movs	r2, #0
 8000876:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_TIM3_Init+0x94>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_TIM3_Init+0x94>)
 8000880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000884:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_TIM3_Init+0x94>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_TIM3_Init+0x94>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000892:	4814      	ldr	r0, [pc, #80]	; (80008e4 <MX_TIM3_Init+0x94>)
 8000894:	f002 fbc0 	bl	8003018 <HAL_TIM_Base_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800089e:	f000 f8e5 	bl	8000a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	4619      	mov	r1, r3
 80008ae:	480d      	ldr	r0, [pc, #52]	; (80008e4 <MX_TIM3_Init+0x94>)
 80008b0:	f002 fd1c 	bl	80032ec <HAL_TIM_ConfigClockSource>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f000 f8d7 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008c6:	463b      	mov	r3, r7
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	; (80008e4 <MX_TIM3_Init+0x94>)
 80008cc:	f003 f87c 	bl	80039c8 <HAL_TIMEx_MasterConfigSynchronization>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80008d6:	f000 f8c9 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000128 	.word	0x20000128
 80008e8:	40000400 	.word	0x40000400

080008ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <MX_USART2_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000924:	f003 f8be 	bl	8003aa4 <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800092e:	f000 f89d 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200001d0 	.word	0x200001d0
 800093c:	40004400 	.word	0x40004400

08000940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <MX_DMA_Init+0x4c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a0f      	ldr	r2, [pc, #60]	; (800098c <MX_DMA_Init+0x4c>)
 8000950:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <MX_DMA_Init+0x4c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	200c      	movs	r0, #12
 8000968:	f000 fdaf 	bl	80014ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800096c:	200c      	movs	r0, #12
 800096e:	f000 fdc8 	bl	8001502 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	200f      	movs	r0, #15
 8000978:	f000 fda7 	bl	80014ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800097c:	200f      	movs	r0, #15
 800097e:	f000 fdc0 	bl	8001502 <HAL_NVIC_EnableIRQ>

}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a2c      	ldr	r2, [pc, #176]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a25      	ldr	r2, [pc, #148]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a1e      	ldr	r2, [pc, #120]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_GPIO_Init+0xd0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <MX_GPIO_Init+0xd0>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_GPIO_Init+0xd0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2120      	movs	r1, #32
 8000a1a:	4812      	ldr	r0, [pc, #72]	; (8000a64 <MX_GPIO_Init+0xd4>)
 8000a1c:	f001 faa2 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	480c      	ldr	r0, [pc, #48]	; (8000a68 <MX_GPIO_Init+0xd8>)
 8000a38:	f001 f910 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_GPIO_Init+0xd4>)
 8000a54:	f001 f902 	bl	8001c5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a58:	bf00      	nop
 8000a5a:	3728      	adds	r7, #40	; 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020000 	.word	0x40020000
 8000a68:	40020800 	.word	0x40020800

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ab6:	2007      	movs	r0, #7
 8000ab8:	f000 fcfc 	bl	80014b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a44      	ldr	r2, [pc, #272]	; (8000bf8 <HAL_SPI_MspInit+0x130>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	f040 8081 	bne.w	8000bee <HAL_SPI_MspInit+0x126>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	4b42      	ldr	r3, [pc, #264]	; (8000bfc <HAL_SPI_MspInit+0x134>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	4a41      	ldr	r2, [pc, #260]	; (8000bfc <HAL_SPI_MspInit+0x134>)
 8000af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afa:	6413      	str	r3, [r2, #64]	; 0x40
 8000afc:	4b3f      	ldr	r3, [pc, #252]	; (8000bfc <HAL_SPI_MspInit+0x134>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	4b3b      	ldr	r3, [pc, #236]	; (8000bfc <HAL_SPI_MspInit+0x134>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	4a3a      	ldr	r2, [pc, #232]	; (8000bfc <HAL_SPI_MspInit+0x134>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6313      	str	r3, [r2, #48]	; 0x30
 8000b18:	4b38      	ldr	r3, [pc, #224]	; (8000bfc <HAL_SPI_MspInit+0x134>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	4b34      	ldr	r3, [pc, #208]	; (8000bfc <HAL_SPI_MspInit+0x134>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	4a33      	ldr	r2, [pc, #204]	; (8000bfc <HAL_SPI_MspInit+0x134>)
 8000b2e:	f043 0302 	orr.w	r3, r3, #2
 8000b32:	6313      	str	r3, [r2, #48]	; 0x30
 8000b34:	4b31      	ldr	r3, [pc, #196]	; (8000bfc <HAL_SPI_MspInit+0x134>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	f003 0302 	and.w	r3, r3, #2
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b40:	2308      	movs	r3, #8
 8000b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b50:	2305      	movs	r3, #5
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4829      	ldr	r0, [pc, #164]	; (8000c00 <HAL_SPI_MspInit+0x138>)
 8000b5c:	f001 f87e 	bl	8001c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b72:	2305      	movs	r3, #5
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4821      	ldr	r0, [pc, #132]	; (8000c04 <HAL_SPI_MspInit+0x13c>)
 8000b7e:	f001 f86d 	bl	8001c5c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000b82:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <HAL_SPI_MspInit+0x140>)
 8000b84:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <HAL_SPI_MspInit+0x144>)
 8000b86:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <HAL_SPI_MspInit+0x140>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <HAL_SPI_MspInit+0x140>)
 8000b90:	2240      	movs	r2, #64	; 0x40
 8000b92:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <HAL_SPI_MspInit+0x140>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <HAL_SPI_MspInit+0x140>)
 8000b9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ba0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_SPI_MspInit+0x140>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <HAL_SPI_MspInit+0x140>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_SPI_MspInit+0x140>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_SPI_MspInit+0x140>)
 8000bb6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000bba:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_SPI_MspInit+0x140>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000bc2:	4811      	ldr	r0, [pc, #68]	; (8000c08 <HAL_SPI_MspInit+0x140>)
 8000bc4:	f000 fcb8 	bl	8001538 <HAL_DMA_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8000bce:	f7ff ff4d 	bl	8000a6c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	; (8000c08 <HAL_SPI_MspInit+0x140>)
 8000bd6:	649a      	str	r2, [r3, #72]	; 0x48
 8000bd8:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <HAL_SPI_MspInit+0x140>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2024      	movs	r0, #36	; 0x24
 8000be4:	f000 fc71 	bl	80014ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000be8:	2024      	movs	r0, #36	; 0x24
 8000bea:	f000 fc8a 	bl	8001502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40003800 	.word	0x40003800
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020800 	.word	0x40020800
 8000c04:	40020400 	.word	0x40020400
 8000c08:	20000080 	.word	0x20000080
 8000c0c:	40026070 	.word	0x40026070

08000c10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c30:	d164      	bne.n	8000cfc <HAL_TIM_Base_MspInit+0xec>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b3d      	ldr	r3, [pc, #244]	; (8000d2c <HAL_TIM_Base_MspInit+0x11c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a3c      	ldr	r2, [pc, #240]	; (8000d2c <HAL_TIM_Base_MspInit+0x11c>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b3a      	ldr	r3, [pc, #232]	; (8000d2c <HAL_TIM_Base_MspInit+0x11c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <HAL_TIM_Base_MspInit+0x11c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a35      	ldr	r2, [pc, #212]	; (8000d2c <HAL_TIM_Base_MspInit+0x11c>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b33      	ldr	r3, [pc, #204]	; (8000d2c <HAL_TIM_Base_MspInit+0x11c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	482a      	ldr	r0, [pc, #168]	; (8000d30 <HAL_TIM_Base_MspInit+0x120>)
 8000c88:	f000 ffe8 	bl	8001c5c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 8000c8c:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <HAL_TIM_Base_MspInit+0x124>)
 8000c8e:	4a2a      	ldr	r2, [pc, #168]	; (8000d38 <HAL_TIM_Base_MspInit+0x128>)
 8000c90:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 8000c92:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <HAL_TIM_Base_MspInit+0x124>)
 8000c94:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000c98:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c9a:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <HAL_TIM_Base_MspInit+0x124>)
 8000c9c:	2240      	movs	r2, #64	; 0x40
 8000c9e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca0:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <HAL_TIM_Base_MspInit+0x124>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8000ca6:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <HAL_TIM_Base_MspInit+0x124>)
 8000ca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cac:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cae:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <HAL_TIM_Base_MspInit+0x124>)
 8000cb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cb4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <HAL_TIM_Base_MspInit+0x124>)
 8000cb8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cbc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_TIM_Base_MspInit+0x124>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <HAL_TIM_Base_MspInit+0x124>)
 8000cc6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cca:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ccc:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <HAL_TIM_Base_MspInit+0x124>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 8000cd2:	4818      	ldr	r0, [pc, #96]	; (8000d34 <HAL_TIM_Base_MspInit+0x124>)
 8000cd4:	f000 fc30 	bl	8001538 <HAL_DMA_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_TIM_Base_MspInit+0xd2>
    {
      Error_Handler();
 8000cde:	f7ff fec5 	bl	8000a6c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <HAL_TIM_Base_MspInit+0x124>)
 8000ce6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ce8:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <HAL_TIM_Base_MspInit+0x124>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <HAL_TIM_Base_MspInit+0x124>)
 8000cf2:	621a      	str	r2, [r3, #32]
 8000cf4:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <HAL_TIM_Base_MspInit+0x124>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cfa:	e012      	b.n	8000d22 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <HAL_TIM_Base_MspInit+0x12c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d10d      	bne.n	8000d22 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_TIM_Base_MspInit+0x11c>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <HAL_TIM_Base_MspInit+0x11c>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <HAL_TIM_Base_MspInit+0x11c>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
}
 8000d22:	bf00      	nop
 8000d24:	3728      	adds	r7, #40	; 0x28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000
 8000d34:	20000170 	.word	0x20000170
 8000d38:	40026028 	.word	0x40026028
 8000d3c:	40000400 	.word	0x40000400

08000d40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d60:	d11e      	bne.n	8000da0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HAL_TIM_MspPostInit+0x68>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <HAL_TIM_MspPostInit+0x68>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <HAL_TIM_MspPostInit+0x68>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d90:	2301      	movs	r3, #1
 8000d92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4804      	ldr	r0, [pc, #16]	; (8000dac <HAL_TIM_MspPostInit+0x6c>)
 8000d9c:	f000 ff5e 	bl	8001c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000da0:	bf00      	nop
 8000da2:	3720      	adds	r7, #32
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020400 	.word	0x40020400

08000db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <HAL_UART_MspInit+0x84>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d12b      	bne.n	8000e2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e0a:	230c      	movs	r3, #12
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_UART_MspInit+0x8c>)
 8000e26:	f000 ff19 	bl	8001c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40004400 	.word	0x40004400
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8c:	f000 f9fe 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <DMA1_Stream1_IRQHandler+0x10>)
 8000e9a:	f000 fc75 	bl	8001788 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000170 	.word	0x20000170

08000ea8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <DMA1_Stream4_IRQHandler+0x10>)
 8000eae:	f000 fc6b 	bl	8001788 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000080 	.word	0x20000080

08000ebc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <SPI2_IRQHandler+0x10>)
 8000ec2:	f001 fe41 	bl	8002b48 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000028 	.word	0x20000028

08000ed0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <SystemInit+0x20>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <SystemInit+0x20>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <ws2812_init>:

uint8_t ws2812_buffer[WS2812_BUFFER_SIZE];

// set all pixels to 0 (off)
void ws2812_init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  memset(ws2812_buffer, 0, WS2812_BUFFER_SIZE); // fill buffer with 0s
 8000ef8:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8000efc:	2100      	movs	r1, #0
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <ws2812_init+0x20>)
 8000f00:	f003 f892 	bl	8004028 <memset>
  HAL_SPI_Transmit_DMA(&hspi2, ws2812_buffer, WS2812_BUFFER_SIZE); // write buffer to LEDs
 8000f04:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8000f08:	4902      	ldr	r1, [pc, #8]	; (8000f14 <ws2812_init+0x20>)
 8000f0a:	4803      	ldr	r0, [pc, #12]	; (8000f18 <ws2812_init+0x24>)
 8000f0c:	f001 fd66 	bl	80029dc <HAL_SPI_Transmit_DMA>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000214 	.word	0x20000214
 8000f18:	20000028 	.word	0x20000028

08000f1c <ws2812_pixel>:

// set one pixel to given color
void ws2812_pixel(uint8_t _x, uint8_t _y, ColorRGB_t* color)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	603a      	str	r2, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	71bb      	strb	r3, [r7, #6]
  uint8_t* ptr = &ws2812_buffer[24 * coord2Index(_x, _y)];
 8000f2c:	79ba      	ldrb	r2, [r7, #6]
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f90a 	bl	800114c <coord2Index>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <ws2812_pixel+0xdc>)
 8000f48:	4413      	add	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]
  WS2812_FILL_BUFFER(color->g);
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	72fb      	strb	r3, [r7, #11]
 8000f50:	e014      	b.n	8000f7c <ws2812_pixel+0x60>
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	789a      	ldrb	r2, [r3, #2]
 8000f56:	7afb      	ldrb	r3, [r7, #11]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d005      	beq.n	8000f6c <ws2812_pixel+0x50>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	60fa      	str	r2, [r7, #12]
 8000f66:	22fc      	movs	r2, #252	; 0xfc
 8000f68:	701a      	strb	r2, [r3, #0]
 8000f6a:	e004      	b.n	8000f76 <ws2812_pixel+0x5a>
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	60fa      	str	r2, [r7, #12]
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	701a      	strb	r2, [r3, #0]
 8000f76:	7afb      	ldrb	r3, [r7, #11]
 8000f78:	085b      	lsrs	r3, r3, #1
 8000f7a:	72fb      	strb	r3, [r7, #11]
 8000f7c:	7afb      	ldrb	r3, [r7, #11]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1e7      	bne.n	8000f52 <ws2812_pixel+0x36>
  WS2812_FILL_BUFFER(color->r);
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	72bb      	strb	r3, [r7, #10]
 8000f86:	e014      	b.n	8000fb2 <ws2812_pixel+0x96>
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	785a      	ldrb	r2, [r3, #1]
 8000f8c:	7abb      	ldrb	r3, [r7, #10]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d005      	beq.n	8000fa2 <ws2812_pixel+0x86>
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	1c5a      	adds	r2, r3, #1
 8000f9a:	60fa      	str	r2, [r7, #12]
 8000f9c:	22fc      	movs	r2, #252	; 0xfc
 8000f9e:	701a      	strb	r2, [r3, #0]
 8000fa0:	e004      	b.n	8000fac <ws2812_pixel+0x90>
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	60fa      	str	r2, [r7, #12]
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	7abb      	ldrb	r3, [r7, #10]
 8000fae:	085b      	lsrs	r3, r3, #1
 8000fb0:	72bb      	strb	r3, [r7, #10]
 8000fb2:	7abb      	ldrb	r3, [r7, #10]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1e7      	bne.n	8000f88 <ws2812_pixel+0x6c>
  WS2812_FILL_BUFFER(color->b);
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	727b      	strb	r3, [r7, #9]
 8000fbc:	e014      	b.n	8000fe8 <ws2812_pixel+0xcc>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	781a      	ldrb	r2, [r3, #0]
 8000fc2:	7a7b      	ldrb	r3, [r7, #9]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d005      	beq.n	8000fd8 <ws2812_pixel+0xbc>
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	60fa      	str	r2, [r7, #12]
 8000fd2:	22fc      	movs	r2, #252	; 0xfc
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	e004      	b.n	8000fe2 <ws2812_pixel+0xc6>
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	60fa      	str	r2, [r7, #12]
 8000fde:	2280      	movs	r2, #128	; 0x80
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	7a7b      	ldrb	r3, [r7, #9]
 8000fe4:	085b      	lsrs	r3, r3, #1
 8000fe6:	727b      	strb	r3, [r7, #9]
 8000fe8:	7a7b      	ldrb	r3, [r7, #9]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1e7      	bne.n	8000fbe <ws2812_pixel+0xa2>
}
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000214 	.word	0x20000214

08000ffc <ws2812_pixel_all>:

// set all pixels to given color
void ws2812_pixel_all(ColorRGB_t* color)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint8_t* ptr = ws2812_buffer;
 8001004:	4b31      	ldr	r3, [pc, #196]	; (80010cc <ws2812_pixel_all+0xd0>)
 8001006:	617b      	str	r3, [r7, #20]
  for (uint16_t i = 0; i < WS2812_NUM_LEDS; ++i) 
 8001008:	2300      	movs	r3, #0
 800100a:	827b      	strh	r3, [r7, #18]
 800100c:	e053      	b.n	80010b6 <ws2812_pixel_all+0xba>
  {
    WS2812_FILL_BUFFER(color->g);
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	747b      	strb	r3, [r7, #17]
 8001012:	e014      	b.n	800103e <ws2812_pixel_all+0x42>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	789a      	ldrb	r2, [r3, #2]
 8001018:	7c7b      	ldrb	r3, [r7, #17]
 800101a:	4013      	ands	r3, r2
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d005      	beq.n	800102e <ws2812_pixel_all+0x32>
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	1c5a      	adds	r2, r3, #1
 8001026:	617a      	str	r2, [r7, #20]
 8001028:	22fc      	movs	r2, #252	; 0xfc
 800102a:	701a      	strb	r2, [r3, #0]
 800102c:	e004      	b.n	8001038 <ws2812_pixel_all+0x3c>
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	617a      	str	r2, [r7, #20]
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	701a      	strb	r2, [r3, #0]
 8001038:	7c7b      	ldrb	r3, [r7, #17]
 800103a:	085b      	lsrs	r3, r3, #1
 800103c:	747b      	strb	r3, [r7, #17]
 800103e:	7c7b      	ldrb	r3, [r7, #17]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1e7      	bne.n	8001014 <ws2812_pixel_all+0x18>
    WS2812_FILL_BUFFER(color->r);
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	743b      	strb	r3, [r7, #16]
 8001048:	e014      	b.n	8001074 <ws2812_pixel_all+0x78>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	785a      	ldrb	r2, [r3, #1]
 800104e:	7c3b      	ldrb	r3, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d005      	beq.n	8001064 <ws2812_pixel_all+0x68>
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	617a      	str	r2, [r7, #20]
 800105e:	22fc      	movs	r2, #252	; 0xfc
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	e004      	b.n	800106e <ws2812_pixel_all+0x72>
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	617a      	str	r2, [r7, #20]
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	7c3b      	ldrb	r3, [r7, #16]
 8001070:	085b      	lsrs	r3, r3, #1
 8001072:	743b      	strb	r3, [r7, #16]
 8001074:	7c3b      	ldrb	r3, [r7, #16]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1e7      	bne.n	800104a <ws2812_pixel_all+0x4e>
    WS2812_FILL_BUFFER(color->b);
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	e014      	b.n	80010aa <ws2812_pixel_all+0xae>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	4013      	ands	r3, r2
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <ws2812_pixel_all+0x9e>
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	617a      	str	r2, [r7, #20]
 8001094:	22fc      	movs	r2, #252	; 0xfc
 8001096:	701a      	strb	r2, [r3, #0]
 8001098:	e004      	b.n	80010a4 <ws2812_pixel_all+0xa8>
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	617a      	str	r2, [r7, #20]
 80010a0:	2280      	movs	r2, #128	; 0x80
 80010a2:	701a      	strb	r2, [r3, #0]
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	085b      	lsrs	r3, r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1e7      	bne.n	8001080 <ws2812_pixel_all+0x84>
  for (uint16_t i = 0; i < WS2812_NUM_LEDS; ++i) 
 80010b0:	8a7b      	ldrh	r3, [r7, #18]
 80010b2:	3301      	adds	r3, #1
 80010b4:	827b      	strh	r3, [r7, #18]
 80010b6:	8a7b      	ldrh	r3, [r7, #18]
 80010b8:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 80010bc:	d3a7      	bcc.n	800100e <ws2812_pixel_all+0x12>
  }
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	371c      	adds	r7, #28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	20000214 	.word	0x20000214

080010d0 <ws2812_pixel_pic>:

// draw picture on matrix
void ws2812_pixel_pic(ColorRGB_t* picture[WS2812_NUM_LEDS_Y][WS2812_NUM_LEDS_X])
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  for (uint8_t x = 0; x < WS2812_NUM_LEDS_X; x++)
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e01b      	b.n	8001116 <ws2812_pixel_pic+0x46>
  {
    for (uint8_t y = 0; y < WS2812_NUM_LEDS_Y; y++)
 80010de:	2300      	movs	r3, #0
 80010e0:	73bb      	strb	r3, [r7, #14]
 80010e2:	e012      	b.n	800110a <ws2812_pixel_pic+0x3a>
    {
      ws2812_pixel(x, y, picture[y][x]);
 80010e4:	7bba      	ldrb	r2, [r7, #14]
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	015b      	lsls	r3, r3, #5
 80010ee:	461a      	mov	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010fa:	7bb9      	ldrb	r1, [r7, #14]
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff0c 	bl	8000f1c <ws2812_pixel>
    for (uint8_t y = 0; y < WS2812_NUM_LEDS_Y; y++)
 8001104:	7bbb      	ldrb	r3, [r7, #14]
 8001106:	3301      	adds	r3, #1
 8001108:	73bb      	strb	r3, [r7, #14]
 800110a:	7bbb      	ldrb	r3, [r7, #14]
 800110c:	2b17      	cmp	r3, #23
 800110e:	d9e9      	bls.n	80010e4 <ws2812_pixel_pic+0x14>
  for (uint8_t x = 0; x < WS2812_NUM_LEDS_X; x++)
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	3301      	adds	r3, #1
 8001114:	73fb      	strb	r3, [r7, #15]
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	2b27      	cmp	r3, #39	; 0x27
 800111a:	d9e0      	bls.n	80010de <ws2812_pixel_pic+0xe>
    }
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  // Restart transmission when buffer tx is completed
  HAL_SPI_Transmit_DMA(&hspi2, ws2812_buffer, WS2812_BUFFER_SIZE);
 8001130:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8001134:	4903      	ldr	r1, [pc, #12]	; (8001144 <HAL_SPI_TxCpltCallback+0x1c>)
 8001136:	4804      	ldr	r0, [pc, #16]	; (8001148 <HAL_SPI_TxCpltCallback+0x20>)
 8001138:	f001 fc50 	bl	80029dc <HAL_SPI_Transmit_DMA>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000214 	.word	0x20000214
 8001148:	20000028 	.word	0x20000028

0800114c <coord2Index>:

uint16_t coord2Index (uint8_t _x, uint8_t _y)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	460a      	mov	r2, r1
 8001156:	71fb      	strb	r3, [r7, #7]
 8001158:	4613      	mov	r3, r2
 800115a:	71bb      	strb	r3, [r7, #6]
    { 168, 169, 170, 171, 172, 173, 174, 175, 360, 361, 362, 363, 364, 365, 366, 367, 552, 553, 554, 555, 556, 557, 558, 559, 744, 745, 746, 747, 748, 749, 750, 751, 936, 937, 938, 939, 940, 941, 942, 943 },
    { 176, 177, 178, 179, 180, 181, 182, 183, 368, 369, 370, 371, 372, 373, 374, 375, 560, 561, 562, 563, 564, 565, 566, 567, 752, 753, 754, 755, 756, 757, 758, 759, 944, 945, 946, 947, 948, 949, 950, 951 },
    { 184, 185, 186, 187, 188, 189, 190, 191, 376, 377, 378, 379, 380, 381, 382, 383, 568, 569, 570, 571, 572, 573, 574, 575, 760, 761, 762, 763, 764, 765, 766, 767, 952, 953, 954, 955, 956, 957, 958, 959 }
  };

  if (_x > WS2812_NUM_LEDS_X - 1) _x = WS2812_NUM_LEDS_X - 1;
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b27      	cmp	r3, #39	; 0x27
 8001160:	d901      	bls.n	8001166 <coord2Index+0x1a>
 8001162:	2327      	movs	r3, #39	; 0x27
 8001164:	71fb      	strb	r3, [r7, #7]
  if (_y > WS2812_NUM_LEDS_Y - 1) _y = WS2812_NUM_LEDS_Y - 1;
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	2b17      	cmp	r3, #23
 800116a:	d901      	bls.n	8001170 <coord2Index+0x24>
 800116c:	2317      	movs	r3, #23
 800116e:	71bb      	strb	r3, [r7, #6]

  return lookup_table[_y][_x];
 8001170:	79ba      	ldrb	r2, [r7, #6]
 8001172:	79f9      	ldrb	r1, [r7, #7]
 8001174:	4806      	ldr	r0, [pc, #24]	; (8001190 <coord2Index+0x44>)
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	440b      	add	r3, r1
 8001180:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	080040e4 	.word	0x080040e4

08001194 <Reset_Handler>:
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011cc <LoopFillZerobss+0x12>
 8001198:	480d      	ldr	r0, [pc, #52]	; (80011d0 <LoopFillZerobss+0x16>)
 800119a:	490e      	ldr	r1, [pc, #56]	; (80011d4 <LoopFillZerobss+0x1a>)
 800119c:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <LoopFillZerobss+0x1e>)
 800119e:	2300      	movs	r3, #0
 80011a0:	e002      	b.n	80011a8 <LoopCopyDataInit>

080011a2 <CopyDataInit>:
 80011a2:	58d4      	ldr	r4, [r2, r3]
 80011a4:	50c4      	str	r4, [r0, r3]
 80011a6:	3304      	adds	r3, #4

080011a8 <LoopCopyDataInit>:
 80011a8:	18c4      	adds	r4, r0, r3
 80011aa:	428c      	cmp	r4, r1
 80011ac:	d3f9      	bcc.n	80011a2 <CopyDataInit>
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <LoopFillZerobss+0x22>)
 80011b0:	4c0b      	ldr	r4, [pc, #44]	; (80011e0 <LoopFillZerobss+0x26>)
 80011b2:	2300      	movs	r3, #0
 80011b4:	e001      	b.n	80011ba <LoopFillZerobss>

080011b6 <FillZerobss>:
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	3204      	adds	r2, #4

080011ba <LoopFillZerobss>:
 80011ba:	42a2      	cmp	r2, r4
 80011bc:	d3fb      	bcc.n	80011b6 <FillZerobss>
 80011be:	f7ff fe87 	bl	8000ed0 <SystemInit>
 80011c2:	f002 ff39 	bl	8004038 <__libc_init_array>
 80011c6:	f7ff f983 	bl	80004d0 <main>
 80011ca:	4770      	bx	lr
 80011cc:	20018000 	.word	0x20018000
 80011d0:	20000000 	.word	0x20000000
 80011d4:	2000000c 	.word	0x2000000c
 80011d8:	0800487c 	.word	0x0800487c
 80011dc:	2000000c 	.word	0x2000000c
 80011e0:	20005c54 	.word	0x20005c54

080011e4 <ADC_IRQHandler>:
 80011e4:	e7fe      	b.n	80011e4 <ADC_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <HAL_Init+0x40>)
 80011f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_Init+0x40>)
 80011fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_Init+0x40>)
 800120a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001210:	2003      	movs	r0, #3
 8001212:	f000 f94f 	bl	80014b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001216:	2000      	movs	r0, #0
 8001218:	f000 f808 	bl	800122c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800121c:	f7ff fc2c 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023c00 	.word	0x40023c00

0800122c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_InitTick+0x54>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_InitTick+0x58>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f967 	bl	800151e <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e00e      	b.n	8001278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d80a      	bhi.n	8001276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001268:	f000 f92f 	bl	80014ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <HAL_InitTick+0x5c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e000      	b.n	8001278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000000 	.word	0x20000000
 8001284:	20000008 	.word	0x20000008
 8001288:	20000004 	.word	0x20000004

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000008 	.word	0x20000008
 80012b0:	20005c50 	.word	0x20005c50

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20005c50 	.word	0x20005c50

080012cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff ffee 	bl	80012b4 <HAL_GetTick>
 80012d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012e4:	d005      	beq.n	80012f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_Delay+0x44>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012f2:	bf00      	nop
 80012f4:	f7ff ffde 	bl	80012b4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d8f7      	bhi.n	80012f4 <HAL_Delay+0x28>
  {
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000008 	.word	0x20000008

08001314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800133c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4907      	ldr	r1, [pc, #28]	; (80013b0 <__NVIC_EnableIRQ+0x38>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	; (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
         );
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	; 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001480:	d301      	bcc.n	8001486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001482:	2301      	movs	r3, #1
 8001484:	e00f      	b.n	80014a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <SysTick_Config+0x40>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148e:	210f      	movs	r1, #15
 8001490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001494:	f7ff ff8e 	bl	80013b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <SysTick_Config+0x40>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SysTick_Config+0x40>)
 80014a0:	2207      	movs	r2, #7
 80014a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	e000e010 	.word	0xe000e010

080014b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff29 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014dc:	f7ff ff3e 	bl	800135c <__NVIC_GetPriorityGrouping>
 80014e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	6978      	ldr	r0, [r7, #20]
 80014e8:	f7ff ff8e 	bl	8001408 <NVIC_EncodePriority>
 80014ec:	4602      	mov	r2, r0
 80014ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff5d 	bl	80013b4 <__NVIC_SetPriority>
}
 80014fa:	bf00      	nop
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff31 	bl	8001378 <__NVIC_EnableIRQ>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ffa2 	bl	8001470 <SysTick_Config>
 800152c:	4603      	mov	r3, r0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff feb6 	bl	80012b4 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e099      	b.n	8001688 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2202      	movs	r2, #2
 8001558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0201 	bic.w	r2, r2, #1
 8001572:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001574:	e00f      	b.n	8001596 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001576:	f7ff fe9d 	bl	80012b4 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b05      	cmp	r3, #5
 8001582:	d908      	bls.n	8001596 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2220      	movs	r2, #32
 8001588:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2203      	movs	r2, #3
 800158e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e078      	b.n	8001688 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1e8      	bne.n	8001576 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	4b38      	ldr	r3, [pc, #224]	; (8001690 <HAL_DMA_Init+0x158>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d107      	bne.n	8001600 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	4313      	orrs	r3, r2
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f023 0307 	bic.w	r3, r3, #7
 8001616:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	4313      	orrs	r3, r2
 8001620:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	2b04      	cmp	r3, #4
 8001628:	d117      	bne.n	800165a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	4313      	orrs	r3, r2
 8001632:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00e      	beq.n	800165a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 fa91 	bl	8001b64 <DMA_CheckFifoParam>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d008      	beq.n	800165a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2240      	movs	r2, #64	; 0x40
 800164c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001656:	2301      	movs	r3, #1
 8001658:	e016      	b.n	8001688 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 fa48 	bl	8001af8 <DMA_CalcBaseAndBitshift>
 8001668:	4603      	mov	r3, r0
 800166a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001670:	223f      	movs	r2, #63	; 0x3f
 8001672:	409a      	lsls	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	f010803f 	.word	0xf010803f

08001694 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
 80016a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_DMA_Start_IT+0x26>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e040      	b.n	800173c <HAL_DMA_Start_IT+0xa8>
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d12f      	bne.n	800172e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2202      	movs	r2, #2
 80016d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 f9da 	bl	8001a9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ec:	223f      	movs	r2, #63	; 0x3f
 80016ee:	409a      	lsls	r2, r3
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0216 	orr.w	r2, r2, #22
 8001702:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	2b00      	cmp	r3, #0
 800170a:	d007      	beq.n	800171c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f042 0208 	orr.w	r2, r2, #8
 800171a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0201 	orr.w	r2, r2, #1
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	e005      	b.n	800173a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001736:	2302      	movs	r3, #2
 8001738:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800173a:	7dfb      	ldrb	r3, [r7, #23]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d004      	beq.n	8001762 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2280      	movs	r2, #128	; 0x80
 800175c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00c      	b.n	800177c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2205      	movs	r2, #5
 8001766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0201 	bic.w	r2, r2, #1
 8001778:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001794:	4b8e      	ldr	r3, [pc, #568]	; (80019d0 <HAL_DMA_IRQHandler+0x248>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a8e      	ldr	r2, [pc, #568]	; (80019d4 <HAL_DMA_IRQHandler+0x24c>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	0a9b      	lsrs	r3, r3, #10
 80017a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b2:	2208      	movs	r2, #8
 80017b4:	409a      	lsls	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4013      	ands	r3, r2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d01a      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d013      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0204 	bic.w	r2, r2, #4
 80017da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e0:	2208      	movs	r2, #8
 80017e2:	409a      	lsls	r2, r3
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ec:	f043 0201 	orr.w	r2, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f8:	2201      	movs	r2, #1
 80017fa:	409a      	lsls	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4013      	ands	r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d012      	beq.n	800182a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00b      	beq.n	800182a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001816:	2201      	movs	r2, #1
 8001818:	409a      	lsls	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001822:	f043 0202 	orr.w	r2, r3, #2
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182e:	2204      	movs	r2, #4
 8001830:	409a      	lsls	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4013      	ands	r3, r2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d012      	beq.n	8001860 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00b      	beq.n	8001860 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184c:	2204      	movs	r2, #4
 800184e:	409a      	lsls	r2, r3
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001858:	f043 0204 	orr.w	r2, r3, #4
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001864:	2210      	movs	r2, #16
 8001866:	409a      	lsls	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4013      	ands	r3, r2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d043      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b00      	cmp	r3, #0
 800187c:	d03c      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001882:	2210      	movs	r2, #16
 8001884:	409a      	lsls	r2, r3
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d018      	beq.n	80018ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d108      	bne.n	80018b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d024      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	4798      	blx	r3
 80018b6:	e01f      	b.n	80018f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d01b      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	4798      	blx	r3
 80018c8:	e016      	b.n	80018f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d107      	bne.n	80018e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0208 	bic.w	r2, r2, #8
 80018e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fc:	2220      	movs	r2, #32
 80018fe:	409a      	lsls	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4013      	ands	r3, r2
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 808f 	beq.w	8001a28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0310 	and.w	r3, r3, #16
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 8087 	beq.w	8001a28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191e:	2220      	movs	r2, #32
 8001920:	409a      	lsls	r2, r3
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b05      	cmp	r3, #5
 8001930:	d136      	bne.n	80019a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0216 	bic.w	r2, r2, #22
 8001940:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695a      	ldr	r2, [r3, #20]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001950:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	2b00      	cmp	r3, #0
 8001958:	d103      	bne.n	8001962 <HAL_DMA_IRQHandler+0x1da>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800195e:	2b00      	cmp	r3, #0
 8001960:	d007      	beq.n	8001972 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0208 	bic.w	r2, r2, #8
 8001970:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001976:	223f      	movs	r2, #63	; 0x3f
 8001978:	409a      	lsls	r2, r3
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001992:	2b00      	cmp	r3, #0
 8001994:	d07e      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	4798      	blx	r3
        }
        return;
 800199e:	e079      	b.n	8001a94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d01d      	beq.n	80019ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10d      	bne.n	80019d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d031      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	4798      	blx	r3
 80019cc:	e02c      	b.n	8001a28 <HAL_DMA_IRQHandler+0x2a0>
 80019ce:	bf00      	nop
 80019d0:	20000000 	.word	0x20000000
 80019d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d023      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4798      	blx	r3
 80019e8:	e01e      	b.n	8001a28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10f      	bne.n	8001a18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0210 	bic.w	r2, r2, #16
 8001a06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d032      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d022      	beq.n	8001a82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2205      	movs	r2, #5
 8001a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	3301      	adds	r3, #1
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d307      	bcc.n	8001a70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f2      	bne.n	8001a54 <HAL_DMA_IRQHandler+0x2cc>
 8001a6e:	e000      	b.n	8001a72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	4798      	blx	r3
 8001a92:	e000      	b.n	8001a96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a94:	bf00      	nop
    }
  }
}
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ab8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b40      	cmp	r3, #64	; 0x40
 8001ac8:	d108      	bne.n	8001adc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ada:	e007      	b.n	8001aec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	60da      	str	r2, [r3, #12]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	3b10      	subs	r3, #16
 8001b08:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <DMA_CalcBaseAndBitshift+0x64>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	091b      	lsrs	r3, r3, #4
 8001b10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b12:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <DMA_CalcBaseAndBitshift+0x68>)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d909      	bls.n	8001b3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b2e:	f023 0303 	bic.w	r3, r3, #3
 8001b32:	1d1a      	adds	r2, r3, #4
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	659a      	str	r2, [r3, #88]	; 0x58
 8001b38:	e007      	b.n	8001b4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b42:	f023 0303 	bic.w	r3, r3, #3
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	aaaaaaab 	.word	0xaaaaaaab
 8001b60:	08004864 	.word	0x08004864

08001b64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d11f      	bne.n	8001bbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d856      	bhi.n	8001c32 <DMA_CheckFifoParam+0xce>
 8001b84:	a201      	add	r2, pc, #4	; (adr r2, 8001b8c <DMA_CheckFifoParam+0x28>)
 8001b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8a:	bf00      	nop
 8001b8c:	08001b9d 	.word	0x08001b9d
 8001b90:	08001baf 	.word	0x08001baf
 8001b94:	08001b9d 	.word	0x08001b9d
 8001b98:	08001c33 	.word	0x08001c33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d046      	beq.n	8001c36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bac:	e043      	b.n	8001c36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bb6:	d140      	bne.n	8001c3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bbc:	e03d      	b.n	8001c3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bc6:	d121      	bne.n	8001c0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d837      	bhi.n	8001c3e <DMA_CheckFifoParam+0xda>
 8001bce:	a201      	add	r2, pc, #4	; (adr r2, 8001bd4 <DMA_CheckFifoParam+0x70>)
 8001bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd4:	08001be5 	.word	0x08001be5
 8001bd8:	08001beb 	.word	0x08001beb
 8001bdc:	08001be5 	.word	0x08001be5
 8001be0:	08001bfd 	.word	0x08001bfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
      break;
 8001be8:	e030      	b.n	8001c4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d025      	beq.n	8001c42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bfa:	e022      	b.n	8001c42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c04:	d11f      	bne.n	8001c46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c0a:	e01c      	b.n	8001c46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d903      	bls.n	8001c1a <DMA_CheckFifoParam+0xb6>
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d003      	beq.n	8001c20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c18:	e018      	b.n	8001c4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8001c1e:	e015      	b.n	8001c4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00e      	beq.n	8001c4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c30:	e00b      	b.n	8001c4a <DMA_CheckFifoParam+0xe6>
      break;
 8001c32:	bf00      	nop
 8001c34:	e00a      	b.n	8001c4c <DMA_CheckFifoParam+0xe8>
      break;
 8001c36:	bf00      	nop
 8001c38:	e008      	b.n	8001c4c <DMA_CheckFifoParam+0xe8>
      break;
 8001c3a:	bf00      	nop
 8001c3c:	e006      	b.n	8001c4c <DMA_CheckFifoParam+0xe8>
      break;
 8001c3e:	bf00      	nop
 8001c40:	e004      	b.n	8001c4c <DMA_CheckFifoParam+0xe8>
      break;
 8001c42:	bf00      	nop
 8001c44:	e002      	b.n	8001c4c <DMA_CheckFifoParam+0xe8>
      break;   
 8001c46:	bf00      	nop
 8001c48:	e000      	b.n	8001c4c <DMA_CheckFifoParam+0xe8>
      break;
 8001c4a:	bf00      	nop
    }
  } 
  
  return status; 
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop

08001c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	e159      	b.n	8001f2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c78:	2201      	movs	r2, #1
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	f040 8148 	bne.w	8001f26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d005      	beq.n	8001cae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d130      	bne.n	8001d10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 0201 	and.w	r2, r3, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d017      	beq.n	8001d4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d123      	bne.n	8001da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	08da      	lsrs	r2, r3, #3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3208      	adds	r2, #8
 8001d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	220f      	movs	r2, #15
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	08da      	lsrs	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3208      	adds	r2, #8
 8001d9a:	69b9      	ldr	r1, [r7, #24]
 8001d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	2203      	movs	r2, #3
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0203 	and.w	r2, r3, #3
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80a2 	beq.w	8001f26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b57      	ldr	r3, [pc, #348]	; (8001f44 <HAL_GPIO_Init+0x2e8>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	4a56      	ldr	r2, [pc, #344]	; (8001f44 <HAL_GPIO_Init+0x2e8>)
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df0:	6453      	str	r3, [r2, #68]	; 0x44
 8001df2:	4b54      	ldr	r3, [pc, #336]	; (8001f44 <HAL_GPIO_Init+0x2e8>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dfe:	4a52      	ldr	r2, [pc, #328]	; (8001f48 <HAL_GPIO_Init+0x2ec>)
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	3302      	adds	r3, #2
 8001e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	220f      	movs	r2, #15
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a49      	ldr	r2, [pc, #292]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d019      	beq.n	8001e5e <HAL_GPIO_Init+0x202>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a48      	ldr	r2, [pc, #288]	; (8001f50 <HAL_GPIO_Init+0x2f4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <HAL_GPIO_Init+0x1fe>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a47      	ldr	r2, [pc, #284]	; (8001f54 <HAL_GPIO_Init+0x2f8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00d      	beq.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a46      	ldr	r2, [pc, #280]	; (8001f58 <HAL_GPIO_Init+0x2fc>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d007      	beq.n	8001e52 <HAL_GPIO_Init+0x1f6>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a45      	ldr	r2, [pc, #276]	; (8001f5c <HAL_GPIO_Init+0x300>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_GPIO_Init+0x1f2>
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	e008      	b.n	8001e60 <HAL_GPIO_Init+0x204>
 8001e4e:	2307      	movs	r3, #7
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x204>
 8001e52:	2303      	movs	r3, #3
 8001e54:	e004      	b.n	8001e60 <HAL_GPIO_Init+0x204>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e002      	b.n	8001e60 <HAL_GPIO_Init+0x204>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_GPIO_Init+0x204>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	69fa      	ldr	r2, [r7, #28]
 8001e62:	f002 0203 	and.w	r2, r2, #3
 8001e66:	0092      	lsls	r2, r2, #2
 8001e68:	4093      	lsls	r3, r2
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e70:	4935      	ldr	r1, [pc, #212]	; (8001f48 <HAL_GPIO_Init+0x2ec>)
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	3302      	adds	r3, #2
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e7e:	4b38      	ldr	r3, [pc, #224]	; (8001f60 <HAL_GPIO_Init+0x304>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ea2:	4a2f      	ldr	r2, [pc, #188]	; (8001f60 <HAL_GPIO_Init+0x304>)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <HAL_GPIO_Init+0x304>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ecc:	4a24      	ldr	r2, [pc, #144]	; (8001f60 <HAL_GPIO_Init+0x304>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ed2:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <HAL_GPIO_Init+0x304>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ef6:	4a1a      	ldr	r2, [pc, #104]	; (8001f60 <HAL_GPIO_Init+0x304>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001efc:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <HAL_GPIO_Init+0x304>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f20:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <HAL_GPIO_Init+0x304>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	61fb      	str	r3, [r7, #28]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	2b0f      	cmp	r3, #15
 8001f30:	f67f aea2 	bls.w	8001c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3724      	adds	r7, #36	; 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40013800 	.word	0x40013800
 8001f4c:	40020000 	.word	0x40020000
 8001f50:	40020400 	.word	0x40020400
 8001f54:	40020800 	.word	0x40020800
 8001f58:	40020c00 	.word	0x40020c00
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40013c00 	.word	0x40013c00

08001f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
 8001f70:	4613      	mov	r3, r2
 8001f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f74:	787b      	ldrb	r3, [r7, #1]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f80:	e003      	b.n	8001f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f82:	887b      	ldrh	r3, [r7, #2]
 8001f84:	041a      	lsls	r2, r3, #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	619a      	str	r2, [r3, #24]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e267      	b.n	800247a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d075      	beq.n	80020a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fb6:	4b88      	ldr	r3, [pc, #544]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d00c      	beq.n	8001fdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fc2:	4b85      	ldr	r3, [pc, #532]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d112      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fce:	4b82      	ldr	r3, [pc, #520]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fda:	d10b      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fdc:	4b7e      	ldr	r3, [pc, #504]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d05b      	beq.n	80020a0 <HAL_RCC_OscConfig+0x108>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d157      	bne.n	80020a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e242      	b.n	800247a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffc:	d106      	bne.n	800200c <HAL_RCC_OscConfig+0x74>
 8001ffe:	4b76      	ldr	r3, [pc, #472]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a75      	ldr	r2, [pc, #468]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e01d      	b.n	8002048 <HAL_RCC_OscConfig+0xb0>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0x98>
 8002016:	4b70      	ldr	r3, [pc, #448]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a6f      	ldr	r2, [pc, #444]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 800201c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b6d      	ldr	r3, [pc, #436]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a6c      	ldr	r2, [pc, #432]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e00b      	b.n	8002048 <HAL_RCC_OscConfig+0xb0>
 8002030:	4b69      	ldr	r3, [pc, #420]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a68      	ldr	r2, [pc, #416]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 8002036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b66      	ldr	r3, [pc, #408]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a65      	ldr	r2, [pc, #404]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 8002042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d013      	beq.n	8002078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff f930 	bl	80012b4 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002058:	f7ff f92c 	bl	80012b4 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e207      	b.n	800247a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	4b5b      	ldr	r3, [pc, #364]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0xc0>
 8002076:	e014      	b.n	80020a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff f91c 	bl	80012b4 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002080:	f7ff f918 	bl	80012b4 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	; 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e1f3      	b.n	800247a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	4b51      	ldr	r3, [pc, #324]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0xe8>
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d063      	beq.n	8002176 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ae:	4b4a      	ldr	r3, [pc, #296]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00b      	beq.n	80020d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ba:	4b47      	ldr	r3, [pc, #284]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d11c      	bne.n	8002100 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020c6:	4b44      	ldr	r3, [pc, #272]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d116      	bne.n	8002100 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d2:	4b41      	ldr	r3, [pc, #260]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_RCC_OscConfig+0x152>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d001      	beq.n	80020ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e1c7      	b.n	800247a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ea:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4937      	ldr	r1, [pc, #220]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fe:	e03a      	b.n	8002176 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002108:	4b34      	ldr	r3, [pc, #208]	; (80021dc <HAL_RCC_OscConfig+0x244>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210e:	f7ff f8d1 	bl	80012b4 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002116:	f7ff f8cd 	bl	80012b4 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e1a8      	b.n	800247a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002128:	4b2b      	ldr	r3, [pc, #172]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002134:	4b28      	ldr	r3, [pc, #160]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4925      	ldr	r1, [pc, #148]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 8002144:	4313      	orrs	r3, r2
 8002146:	600b      	str	r3, [r1, #0]
 8002148:	e015      	b.n	8002176 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214a:	4b24      	ldr	r3, [pc, #144]	; (80021dc <HAL_RCC_OscConfig+0x244>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7ff f8b0 	bl	80012b4 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002158:	f7ff f8ac 	bl	80012b4 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e187      	b.n	800247a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216a:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d036      	beq.n	80021f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d016      	beq.n	80021b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800218a:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <HAL_RCC_OscConfig+0x248>)
 800218c:	2201      	movs	r2, #1
 800218e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7ff f890 	bl	80012b4 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002198:	f7ff f88c 	bl	80012b4 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e167      	b.n	800247a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_OscConfig+0x240>)
 80021ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x200>
 80021b6:	e01b      	b.n	80021f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <HAL_RCC_OscConfig+0x248>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021be:	f7ff f879 	bl	80012b4 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c4:	e00e      	b.n	80021e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c6:	f7ff f875 	bl	80012b4 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d907      	bls.n	80021e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e150      	b.n	800247a <HAL_RCC_OscConfig+0x4e2>
 80021d8:	40023800 	.word	0x40023800
 80021dc:	42470000 	.word	0x42470000
 80021e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e4:	4b88      	ldr	r3, [pc, #544]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 80021e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1ea      	bne.n	80021c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 8097 	beq.w	800232c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002202:	4b81      	ldr	r3, [pc, #516]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10f      	bne.n	800222e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	4b7d      	ldr	r3, [pc, #500]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	4a7c      	ldr	r2, [pc, #496]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 8002218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221c:	6413      	str	r3, [r2, #64]	; 0x40
 800221e:	4b7a      	ldr	r3, [pc, #488]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222a:	2301      	movs	r3, #1
 800222c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222e:	4b77      	ldr	r3, [pc, #476]	; (800240c <HAL_RCC_OscConfig+0x474>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002236:	2b00      	cmp	r3, #0
 8002238:	d118      	bne.n	800226c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223a:	4b74      	ldr	r3, [pc, #464]	; (800240c <HAL_RCC_OscConfig+0x474>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a73      	ldr	r2, [pc, #460]	; (800240c <HAL_RCC_OscConfig+0x474>)
 8002240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002246:	f7ff f835 	bl	80012b4 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224e:	f7ff f831 	bl	80012b4 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e10c      	b.n	800247a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002260:	4b6a      	ldr	r3, [pc, #424]	; (800240c <HAL_RCC_OscConfig+0x474>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d106      	bne.n	8002282 <HAL_RCC_OscConfig+0x2ea>
 8002274:	4b64      	ldr	r3, [pc, #400]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 8002276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002278:	4a63      	ldr	r2, [pc, #396]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6713      	str	r3, [r2, #112]	; 0x70
 8002280:	e01c      	b.n	80022bc <HAL_RCC_OscConfig+0x324>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2b05      	cmp	r3, #5
 8002288:	d10c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x30c>
 800228a:	4b5f      	ldr	r3, [pc, #380]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 800228c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228e:	4a5e      	ldr	r2, [pc, #376]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	6713      	str	r3, [r2, #112]	; 0x70
 8002296:	4b5c      	ldr	r3, [pc, #368]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229a:	4a5b      	ldr	r2, [pc, #364]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6713      	str	r3, [r2, #112]	; 0x70
 80022a2:	e00b      	b.n	80022bc <HAL_RCC_OscConfig+0x324>
 80022a4:	4b58      	ldr	r3, [pc, #352]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 80022a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a8:	4a57      	ldr	r2, [pc, #348]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 80022aa:	f023 0301 	bic.w	r3, r3, #1
 80022ae:	6713      	str	r3, [r2, #112]	; 0x70
 80022b0:	4b55      	ldr	r3, [pc, #340]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b4:	4a54      	ldr	r2, [pc, #336]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 80022b6:	f023 0304 	bic.w	r3, r3, #4
 80022ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d015      	beq.n	80022f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c4:	f7fe fff6 	bl	80012b4 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022cc:	f7fe fff2 	bl	80012b4 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e0cb      	b.n	800247a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e2:	4b49      	ldr	r3, [pc, #292]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 80022e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0ee      	beq.n	80022cc <HAL_RCC_OscConfig+0x334>
 80022ee:	e014      	b.n	800231a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f0:	f7fe ffe0 	bl	80012b4 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f6:	e00a      	b.n	800230e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f8:	f7fe ffdc 	bl	80012b4 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	; 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e0b5      	b.n	800247a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230e:	4b3e      	ldr	r3, [pc, #248]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1ee      	bne.n	80022f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800231a:	7dfb      	ldrb	r3, [r7, #23]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d105      	bne.n	800232c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002320:	4b39      	ldr	r3, [pc, #228]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	4a38      	ldr	r2, [pc, #224]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 8002326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800232a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 80a1 	beq.w	8002478 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002336:	4b34      	ldr	r3, [pc, #208]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b08      	cmp	r3, #8
 8002340:	d05c      	beq.n	80023fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d141      	bne.n	80023ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234a:	4b31      	ldr	r3, [pc, #196]	; (8002410 <HAL_RCC_OscConfig+0x478>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7fe ffb0 	bl	80012b4 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe ffac 	bl	80012b4 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e087      	b.n	800247a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236a:	4b27      	ldr	r3, [pc, #156]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69da      	ldr	r2, [r3, #28]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	019b      	lsls	r3, r3, #6
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	085b      	lsrs	r3, r3, #1
 800238e:	3b01      	subs	r3, #1
 8002390:	041b      	lsls	r3, r3, #16
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	061b      	lsls	r3, r3, #24
 800239a:	491b      	ldr	r1, [pc, #108]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a0:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <HAL_RCC_OscConfig+0x478>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a6:	f7fe ff85 	bl	80012b4 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ae:	f7fe ff81 	bl	80012b4 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e05c      	b.n	800247a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x416>
 80023cc:	e054      	b.n	8002478 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <HAL_RCC_OscConfig+0x478>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7fe ff6e 	bl	80012b4 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023dc:	f7fe ff6a 	bl	80012b4 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e045      	b.n	800247a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_RCC_OscConfig+0x470>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x444>
 80023fa:	e03d      	b.n	8002478 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d107      	bne.n	8002414 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e038      	b.n	800247a <HAL_RCC_OscConfig+0x4e2>
 8002408:	40023800 	.word	0x40023800
 800240c:	40007000 	.word	0x40007000
 8002410:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_RCC_OscConfig+0x4ec>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d028      	beq.n	8002474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d121      	bne.n	8002474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243a:	429a      	cmp	r2, r3
 800243c:	d11a      	bne.n	8002474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002444:	4013      	ands	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800244a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800244c:	4293      	cmp	r3, r2
 800244e:	d111      	bne.n	8002474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245a:	085b      	lsrs	r3, r3, #1
 800245c:	3b01      	subs	r3, #1
 800245e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002460:	429a      	cmp	r2, r3
 8002462:	d107      	bne.n	8002474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800

08002488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0cc      	b.n	8002636 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800249c:	4b68      	ldr	r3, [pc, #416]	; (8002640 <HAL_RCC_ClockConfig+0x1b8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d90c      	bls.n	80024c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	4b65      	ldr	r3, [pc, #404]	; (8002640 <HAL_RCC_ClockConfig+0x1b8>)
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b63      	ldr	r3, [pc, #396]	; (8002640 <HAL_RCC_ClockConfig+0x1b8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0b8      	b.n	8002636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d020      	beq.n	8002512 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024dc:	4b59      	ldr	r3, [pc, #356]	; (8002644 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4a58      	ldr	r2, [pc, #352]	; (8002644 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f4:	4b53      	ldr	r3, [pc, #332]	; (8002644 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4a52      	ldr	r2, [pc, #328]	; (8002644 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002500:	4b50      	ldr	r3, [pc, #320]	; (8002644 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	494d      	ldr	r1, [pc, #308]	; (8002644 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d044      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d107      	bne.n	8002536 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	4b47      	ldr	r3, [pc, #284]	; (8002644 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d119      	bne.n	8002566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e07f      	b.n	8002636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d003      	beq.n	8002546 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002542:	2b03      	cmp	r3, #3
 8002544:	d107      	bne.n	8002556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002546:	4b3f      	ldr	r3, [pc, #252]	; (8002644 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e06f      	b.n	8002636 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002556:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <HAL_RCC_ClockConfig+0x1bc>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e067      	b.n	8002636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002566:	4b37      	ldr	r3, [pc, #220]	; (8002644 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f023 0203 	bic.w	r2, r3, #3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	4934      	ldr	r1, [pc, #208]	; (8002644 <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	4313      	orrs	r3, r2
 8002576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002578:	f7fe fe9c 	bl	80012b4 <HAL_GetTick>
 800257c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257e:	e00a      	b.n	8002596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002580:	f7fe fe98 	bl	80012b4 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	; 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e04f      	b.n	8002636 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002596:	4b2b      	ldr	r3, [pc, #172]	; (8002644 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 020c 	and.w	r2, r3, #12
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d1eb      	bne.n	8002580 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025a8:	4b25      	ldr	r3, [pc, #148]	; (8002640 <HAL_RCC_ClockConfig+0x1b8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d20c      	bcs.n	80025d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b6:	4b22      	ldr	r3, [pc, #136]	; (8002640 <HAL_RCC_ClockConfig+0x1b8>)
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025be:	4b20      	ldr	r3, [pc, #128]	; (8002640 <HAL_RCC_ClockConfig+0x1b8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d001      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e032      	b.n	8002636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025dc:	4b19      	ldr	r3, [pc, #100]	; (8002644 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4916      	ldr	r1, [pc, #88]	; (8002644 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d009      	beq.n	800260e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	490e      	ldr	r1, [pc, #56]	; (8002644 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	4313      	orrs	r3, r2
 800260c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800260e:	f000 f821 	bl	8002654 <HAL_RCC_GetSysClockFreq>
 8002612:	4602      	mov	r2, r0
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	490a      	ldr	r1, [pc, #40]	; (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 8002620:	5ccb      	ldrb	r3, [r1, r3]
 8002622:	fa22 f303 	lsr.w	r3, r2, r3
 8002626:	4a09      	ldr	r2, [pc, #36]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_RCC_ClockConfig+0x1c8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fdfc 	bl	800122c <HAL_InitTick>

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023c00 	.word	0x40023c00
 8002644:	40023800 	.word	0x40023800
 8002648:	080040cc 	.word	0x080040cc
 800264c:	20000000 	.word	0x20000000
 8002650:	20000004 	.word	0x20000004

08002654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002658:	b094      	sub	sp, #80	; 0x50
 800265a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	647b      	str	r3, [r7, #68]	; 0x44
 8002660:	2300      	movs	r3, #0
 8002662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002664:	2300      	movs	r3, #0
 8002666:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800266c:	4b79      	ldr	r3, [pc, #484]	; (8002854 <HAL_RCC_GetSysClockFreq+0x200>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b08      	cmp	r3, #8
 8002676:	d00d      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0x40>
 8002678:	2b08      	cmp	r3, #8
 800267a:	f200 80e1 	bhi.w	8002840 <HAL_RCC_GetSysClockFreq+0x1ec>
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x34>
 8002682:	2b04      	cmp	r3, #4
 8002684:	d003      	beq.n	800268e <HAL_RCC_GetSysClockFreq+0x3a>
 8002686:	e0db      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002688:	4b73      	ldr	r3, [pc, #460]	; (8002858 <HAL_RCC_GetSysClockFreq+0x204>)
 800268a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800268c:	e0db      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800268e:	4b73      	ldr	r3, [pc, #460]	; (800285c <HAL_RCC_GetSysClockFreq+0x208>)
 8002690:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002692:	e0d8      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002694:	4b6f      	ldr	r3, [pc, #444]	; (8002854 <HAL_RCC_GetSysClockFreq+0x200>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800269c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800269e:	4b6d      	ldr	r3, [pc, #436]	; (8002854 <HAL_RCC_GetSysClockFreq+0x200>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d063      	beq.n	8002772 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026aa:	4b6a      	ldr	r3, [pc, #424]	; (8002854 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	099b      	lsrs	r3, r3, #6
 80026b0:	2200      	movs	r2, #0
 80026b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80026b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
 80026be:	2300      	movs	r3, #0
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
 80026c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026c6:	4622      	mov	r2, r4
 80026c8:	462b      	mov	r3, r5
 80026ca:	f04f 0000 	mov.w	r0, #0
 80026ce:	f04f 0100 	mov.w	r1, #0
 80026d2:	0159      	lsls	r1, r3, #5
 80026d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d8:	0150      	lsls	r0, r2, #5
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	4621      	mov	r1, r4
 80026e0:	1a51      	subs	r1, r2, r1
 80026e2:	6139      	str	r1, [r7, #16]
 80026e4:	4629      	mov	r1, r5
 80026e6:	eb63 0301 	sbc.w	r3, r3, r1
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026f8:	4659      	mov	r1, fp
 80026fa:	018b      	lsls	r3, r1, #6
 80026fc:	4651      	mov	r1, sl
 80026fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002702:	4651      	mov	r1, sl
 8002704:	018a      	lsls	r2, r1, #6
 8002706:	4651      	mov	r1, sl
 8002708:	ebb2 0801 	subs.w	r8, r2, r1
 800270c:	4659      	mov	r1, fp
 800270e:	eb63 0901 	sbc.w	r9, r3, r1
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800271e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002722:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002726:	4690      	mov	r8, r2
 8002728:	4699      	mov	r9, r3
 800272a:	4623      	mov	r3, r4
 800272c:	eb18 0303 	adds.w	r3, r8, r3
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	462b      	mov	r3, r5
 8002734:	eb49 0303 	adc.w	r3, r9, r3
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002746:	4629      	mov	r1, r5
 8002748:	024b      	lsls	r3, r1, #9
 800274a:	4621      	mov	r1, r4
 800274c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002750:	4621      	mov	r1, r4
 8002752:	024a      	lsls	r2, r1, #9
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800275a:	2200      	movs	r2, #0
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
 800275e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002760:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002764:	f7fd fd36 	bl	80001d4 <__aeabi_uldivmod>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4613      	mov	r3, r2
 800276e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002770:	e058      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002772:	4b38      	ldr	r3, [pc, #224]	; (8002854 <HAL_RCC_GetSysClockFreq+0x200>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	099b      	lsrs	r3, r3, #6
 8002778:	2200      	movs	r2, #0
 800277a:	4618      	mov	r0, r3
 800277c:	4611      	mov	r1, r2
 800277e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002782:	623b      	str	r3, [r7, #32]
 8002784:	2300      	movs	r3, #0
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
 8002788:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800278c:	4642      	mov	r2, r8
 800278e:	464b      	mov	r3, r9
 8002790:	f04f 0000 	mov.w	r0, #0
 8002794:	f04f 0100 	mov.w	r1, #0
 8002798:	0159      	lsls	r1, r3, #5
 800279a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800279e:	0150      	lsls	r0, r2, #5
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4641      	mov	r1, r8
 80027a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80027aa:	4649      	mov	r1, r9
 80027ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027c4:	ebb2 040a 	subs.w	r4, r2, sl
 80027c8:	eb63 050b 	sbc.w	r5, r3, fp
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	00eb      	lsls	r3, r5, #3
 80027d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027da:	00e2      	lsls	r2, r4, #3
 80027dc:	4614      	mov	r4, r2
 80027de:	461d      	mov	r5, r3
 80027e0:	4643      	mov	r3, r8
 80027e2:	18e3      	adds	r3, r4, r3
 80027e4:	603b      	str	r3, [r7, #0]
 80027e6:	464b      	mov	r3, r9
 80027e8:	eb45 0303 	adc.w	r3, r5, r3
 80027ec:	607b      	str	r3, [r7, #4]
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027fa:	4629      	mov	r1, r5
 80027fc:	028b      	lsls	r3, r1, #10
 80027fe:	4621      	mov	r1, r4
 8002800:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002804:	4621      	mov	r1, r4
 8002806:	028a      	lsls	r2, r1, #10
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800280e:	2200      	movs	r2, #0
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	61fa      	str	r2, [r7, #28]
 8002814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002818:	f7fd fcdc 	bl	80001d4 <__aeabi_uldivmod>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4613      	mov	r3, r2
 8002822:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_RCC_GetSysClockFreq+0x200>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	0c1b      	lsrs	r3, r3, #16
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	3301      	adds	r3, #1
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002834:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002838:	fbb2 f3f3 	udiv	r3, r2, r3
 800283c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800283e:	e002      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_RCC_GetSysClockFreq+0x204>)
 8002842:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002848:	4618      	mov	r0, r3
 800284a:	3750      	adds	r7, #80	; 0x50
 800284c:	46bd      	mov	sp, r7
 800284e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800
 8002858:	00f42400 	.word	0x00f42400
 800285c:	007a1200 	.word	0x007a1200

08002860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002864:	4b03      	ldr	r3, [pc, #12]	; (8002874 <HAL_RCC_GetHCLKFreq+0x14>)
 8002866:	681b      	ldr	r3, [r3, #0]
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	20000000 	.word	0x20000000

08002878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800287c:	f7ff fff0 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	0a9b      	lsrs	r3, r3, #10
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4903      	ldr	r1, [pc, #12]	; (800289c <HAL_RCC_GetPCLK1Freq+0x24>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40023800 	.word	0x40023800
 800289c:	080040dc 	.word	0x080040dc

080028a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028a4:	f7ff ffdc 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	0b5b      	lsrs	r3, r3, #13
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	4903      	ldr	r1, [pc, #12]	; (80028c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b6:	5ccb      	ldrb	r3, [r1, r3]
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028bc:	4618      	mov	r0, r3
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40023800 	.word	0x40023800
 80028c4:	080040dc 	.word	0x080040dc

080028c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e07b      	b.n	80029d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d108      	bne.n	80028f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ea:	d009      	beq.n	8002900 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	61da      	str	r2, [r3, #28]
 80028f2:	e005      	b.n	8002900 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe f8d4 	bl	8000ac8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002936:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002984:	ea42 0103 	orr.w	r1, r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	0c1b      	lsrs	r3, r3, #16
 800299e:	f003 0104 	and.w	r1, r3, #4
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	f003 0210 	and.w	r2, r3, #16
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	69da      	ldr	r2, [r3, #28]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	4613      	mov	r3, r2
 80029e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_SPI_Transmit_DMA+0x20>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e09b      	b.n	8002b34 <HAL_SPI_Transmit_DMA+0x158>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d002      	beq.n	8002a16 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002a10:	2302      	movs	r3, #2
 8002a12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a14:	e089      	b.n	8002b2a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <HAL_SPI_Transmit_DMA+0x46>
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d102      	bne.n	8002a28 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a26:	e080      	b.n	8002b2a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	88fa      	ldrh	r2, [r7, #6]
 8002a46:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a6e:	d10f      	bne.n	8002a90 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a94:	4a29      	ldr	r2, [pc, #164]	; (8002b3c <HAL_SPI_Transmit_DMA+0x160>)
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a9c:	4a28      	ldr	r2, [pc, #160]	; (8002b40 <HAL_SPI_Transmit_DMA+0x164>)
 8002a9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa4:	4a27      	ldr	r2, [pc, #156]	; (8002b44 <HAL_SPI_Transmit_DMA+0x168>)
 8002aa6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aac:	2200      	movs	r2, #0
 8002aae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	4619      	mov	r1, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	330c      	adds	r3, #12
 8002ac0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ac6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002ac8:	f7fe fde4 	bl	8001694 <HAL_DMA_Start_IT>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00c      	beq.n	8002aec <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad6:	f043 0210 	orr.w	r2, r3, #16
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002aea:	e01e      	b.n	8002b2a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af6:	2b40      	cmp	r3, #64	; 0x40
 8002af8:	d007      	beq.n	8002b0a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b08:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0220 	orr.w	r2, r2, #32
 8002b18:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0202 	orr.w	r2, r2, #2
 8002b28:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	08002e01 	.word	0x08002e01
 8002b40:	08002d59 	.word	0x08002d59
 8002b44:	08002e1d 	.word	0x08002e1d

08002b48 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10e      	bne.n	8002b88 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d009      	beq.n	8002b88 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d004      	beq.n	8002b88 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	4798      	blx	r3
    return;
 8002b86:	e0ce      	b.n	8002d26 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <HAL_SPI_IRQHandler+0x5e>
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d004      	beq.n	8002ba6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	4798      	blx	r3
    return;
 8002ba4:	e0bf      	b.n	8002d26 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <HAL_SPI_IRQHandler+0x7e>
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d105      	bne.n	8002bc6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80b0 	beq.w	8002d26 <HAL_SPI_IRQHandler+0x1de>
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	f003 0320 	and.w	r3, r3, #32
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80aa 	beq.w	8002d26 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d023      	beq.n	8002c24 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d011      	beq.n	8002c0c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bec:	f043 0204 	orr.w	r2, r3, #4
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	e00b      	b.n	8002c24 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	693b      	ldr	r3, [r7, #16]
        return;
 8002c22:	e080      	b.n	8002d26 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d014      	beq.n	8002c58 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c32:	f043 0201 	orr.w	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00c      	beq.n	8002c7c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c66:	f043 0208 	orr.w	r2, r3, #8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d04f      	beq.n	8002d24 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c92:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d104      	bne.n	8002cb0 <HAL_SPI_IRQHandler+0x168>
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d034      	beq.n	8002d1a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0203 	bic.w	r2, r2, #3
 8002cbe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d011      	beq.n	8002cec <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ccc:	4a17      	ldr	r2, [pc, #92]	; (8002d2c <HAL_SPI_IRQHandler+0x1e4>)
 8002cce:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe fd35 	bl	8001744 <HAL_DMA_Abort_IT>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d016      	beq.n	8002d22 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf8:	4a0c      	ldr	r2, [pc, #48]	; (8002d2c <HAL_SPI_IRQHandler+0x1e4>)
 8002cfa:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe fd1f 	bl	8001744 <HAL_DMA_Abort_IT>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002d18:	e003      	b.n	8002d22 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f812 	bl	8002d44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002d20:	e000      	b.n	8002d24 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002d22:	bf00      	nop
    return;
 8002d24:	bf00      	nop
  }
}
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	08002e5d 	.word	0x08002e5d

08002d30 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d64:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d66:	f7fe faa5 	bl	80012b4 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d7a:	d03b      	beq.n	8002df4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0220 	bic.w	r2, r2, #32
 8002d8a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0202 	bic.w	r2, r2, #2
 8002d9a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	2164      	movs	r1, #100	; 0x64
 8002da0:	6978      	ldr	r0, [r7, #20]
 8002da2:	f000 f8f7 	bl	8002f94 <SPI_EndRxTxTransaction>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db0:	f043 0220 	orr.w	r2, r3, #32
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10a      	bne.n	8002dd6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002dec:	6978      	ldr	r0, [r7, #20]
 8002dee:	f7ff ffa9 	bl	8002d44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002df2:	e002      	b.n	8002dfa <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002df4:	6978      	ldr	r0, [r7, #20]
 8002df6:	f7fe f997 	bl	8001128 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f7ff ff8e 	bl	8002d30 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0203 	bic.w	r2, r2, #3
 8002e38:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3e:	f043 0210 	orr.w	r2, r3, #16
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f7ff ff78 	bl	8002d44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7ff ff64 	bl	8002d44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e7c:	bf00      	nop
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	4613      	mov	r3, r2
 8002e92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e94:	f7fe fa0e 	bl	80012b4 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ea4:	f7fe fa06 	bl	80012b4 <HAL_GetTick>
 8002ea8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002eaa:	4b39      	ldr	r3, [pc, #228]	; (8002f90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	015b      	lsls	r3, r3, #5
 8002eb0:	0d1b      	lsrs	r3, r3, #20
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	fb02 f303 	mul.w	r3, r2, r3
 8002eb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eba:	e054      	b.n	8002f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec2:	d050      	beq.n	8002f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ec4:	f7fe f9f6 	bl	80012b4 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d902      	bls.n	8002eda <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d13d      	bne.n	8002f56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ee8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ef2:	d111      	bne.n	8002f18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efc:	d004      	beq.n	8002f08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f06:	d107      	bne.n	8002f18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f20:	d10f      	bne.n	8002f42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e017      	b.n	8002f86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	bf0c      	ite	eq
 8002f76:	2301      	moveq	r3, #1
 8002f78:	2300      	movne	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d19b      	bne.n	8002ebc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3720      	adds	r7, #32
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000000 	.word	0x20000000

08002f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <SPI_EndRxTxTransaction+0x7c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1b      	ldr	r2, [pc, #108]	; (8003014 <SPI_EndRxTxTransaction+0x80>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	0d5b      	lsrs	r3, r3, #21
 8002fac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fb0:	fb02 f303 	mul.w	r3, r2, r3
 8002fb4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fbe:	d112      	bne.n	8002fe6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2180      	movs	r1, #128	; 0x80
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f7ff ff5a 	bl	8002e84 <SPI_WaitFlagStateUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d016      	beq.n	8003004 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fda:	f043 0220 	orr.w	r2, r3, #32
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e00f      	b.n	8003006 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffc:	2b80      	cmp	r3, #128	; 0x80
 8002ffe:	d0f2      	beq.n	8002fe6 <SPI_EndRxTxTransaction+0x52>
 8003000:	e000      	b.n	8003004 <SPI_EndRxTxTransaction+0x70>
        break;
 8003002:	bf00      	nop
  }

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000000 	.word	0x20000000
 8003014:	165e9f81 	.word	0x165e9f81

08003018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e041      	b.n	80030ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd fde6 	bl	8000c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3304      	adds	r3, #4
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f000 fa10 	bl	800347c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e041      	b.n	800314c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d106      	bne.n	80030e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f839 	bl	8003154 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2202      	movs	r2, #2
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3304      	adds	r3, #4
 80030f2:	4619      	mov	r1, r3
 80030f4:	4610      	mov	r0, r2
 80030f6:	f000 f9c1 	bl	800347c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003182:	2302      	movs	r3, #2
 8003184:	e0ae      	b.n	80032e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b0c      	cmp	r3, #12
 8003192:	f200 809f 	bhi.w	80032d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003196:	a201      	add	r2, pc, #4	; (adr r2, 800319c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319c:	080031d1 	.word	0x080031d1
 80031a0:	080032d5 	.word	0x080032d5
 80031a4:	080032d5 	.word	0x080032d5
 80031a8:	080032d5 	.word	0x080032d5
 80031ac:	08003211 	.word	0x08003211
 80031b0:	080032d5 	.word	0x080032d5
 80031b4:	080032d5 	.word	0x080032d5
 80031b8:	080032d5 	.word	0x080032d5
 80031bc:	08003253 	.word	0x08003253
 80031c0:	080032d5 	.word	0x080032d5
 80031c4:	080032d5 	.word	0x080032d5
 80031c8:	080032d5 	.word	0x080032d5
 80031cc:	08003293 	.word	0x08003293
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 f9d0 	bl	800357c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0208 	orr.w	r2, r2, #8
 80031ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0204 	bic.w	r2, r2, #4
 80031fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6999      	ldr	r1, [r3, #24]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	619a      	str	r2, [r3, #24]
      break;
 800320e:	e064      	b.n	80032da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fa16 	bl	8003648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800322a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6999      	ldr	r1, [r3, #24]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	021a      	lsls	r2, r3, #8
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	619a      	str	r2, [r3, #24]
      break;
 8003250:	e043      	b.n	80032da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fa61 	bl	8003720 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0208 	orr.w	r2, r2, #8
 800326c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0204 	bic.w	r2, r2, #4
 800327c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69d9      	ldr	r1, [r3, #28]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	61da      	str	r2, [r3, #28]
      break;
 8003290:	e023      	b.n	80032da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	4618      	mov	r0, r3
 800329a:	f000 faab 	bl	80037f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69da      	ldr	r2, [r3, #28]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69d9      	ldr	r1, [r3, #28]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	021a      	lsls	r2, r3, #8
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	61da      	str	r2, [r3, #28]
      break;
 80032d2:	e002      	b.n	80032da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	75fb      	strb	r3, [r7, #23]
      break;
 80032d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_TIM_ConfigClockSource+0x1c>
 8003304:	2302      	movs	r3, #2
 8003306:	e0b4      	b.n	8003472 <HAL_TIM_ConfigClockSource+0x186>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800332e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003340:	d03e      	beq.n	80033c0 <HAL_TIM_ConfigClockSource+0xd4>
 8003342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003346:	f200 8087 	bhi.w	8003458 <HAL_TIM_ConfigClockSource+0x16c>
 800334a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334e:	f000 8086 	beq.w	800345e <HAL_TIM_ConfigClockSource+0x172>
 8003352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003356:	d87f      	bhi.n	8003458 <HAL_TIM_ConfigClockSource+0x16c>
 8003358:	2b70      	cmp	r3, #112	; 0x70
 800335a:	d01a      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0xa6>
 800335c:	2b70      	cmp	r3, #112	; 0x70
 800335e:	d87b      	bhi.n	8003458 <HAL_TIM_ConfigClockSource+0x16c>
 8003360:	2b60      	cmp	r3, #96	; 0x60
 8003362:	d050      	beq.n	8003406 <HAL_TIM_ConfigClockSource+0x11a>
 8003364:	2b60      	cmp	r3, #96	; 0x60
 8003366:	d877      	bhi.n	8003458 <HAL_TIM_ConfigClockSource+0x16c>
 8003368:	2b50      	cmp	r3, #80	; 0x50
 800336a:	d03c      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0xfa>
 800336c:	2b50      	cmp	r3, #80	; 0x50
 800336e:	d873      	bhi.n	8003458 <HAL_TIM_ConfigClockSource+0x16c>
 8003370:	2b40      	cmp	r3, #64	; 0x40
 8003372:	d058      	beq.n	8003426 <HAL_TIM_ConfigClockSource+0x13a>
 8003374:	2b40      	cmp	r3, #64	; 0x40
 8003376:	d86f      	bhi.n	8003458 <HAL_TIM_ConfigClockSource+0x16c>
 8003378:	2b30      	cmp	r3, #48	; 0x30
 800337a:	d064      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0x15a>
 800337c:	2b30      	cmp	r3, #48	; 0x30
 800337e:	d86b      	bhi.n	8003458 <HAL_TIM_ConfigClockSource+0x16c>
 8003380:	2b20      	cmp	r3, #32
 8003382:	d060      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0x15a>
 8003384:	2b20      	cmp	r3, #32
 8003386:	d867      	bhi.n	8003458 <HAL_TIM_ConfigClockSource+0x16c>
 8003388:	2b00      	cmp	r3, #0
 800338a:	d05c      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0x15a>
 800338c:	2b10      	cmp	r3, #16
 800338e:	d05a      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0x15a>
 8003390:	e062      	b.n	8003458 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6899      	ldr	r1, [r3, #8]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f000 faf1 	bl	8003988 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	609a      	str	r2, [r3, #8]
      break;
 80033be:	e04f      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	6899      	ldr	r1, [r3, #8]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f000 fada 	bl	8003988 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033e2:	609a      	str	r2, [r3, #8]
      break;
 80033e4:	e03c      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6859      	ldr	r1, [r3, #4]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	461a      	mov	r2, r3
 80033f4:	f000 fa4e 	bl	8003894 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2150      	movs	r1, #80	; 0x50
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 faa7 	bl	8003952 <TIM_ITRx_SetConfig>
      break;
 8003404:	e02c      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	6859      	ldr	r1, [r3, #4]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	461a      	mov	r2, r3
 8003414:	f000 fa6d 	bl	80038f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2160      	movs	r1, #96	; 0x60
 800341e:	4618      	mov	r0, r3
 8003420:	f000 fa97 	bl	8003952 <TIM_ITRx_SetConfig>
      break;
 8003424:	e01c      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	6859      	ldr	r1, [r3, #4]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	461a      	mov	r2, r3
 8003434:	f000 fa2e 	bl	8003894 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2140      	movs	r1, #64	; 0x40
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fa87 	bl	8003952 <TIM_ITRx_SetConfig>
      break;
 8003444:	e00c      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4619      	mov	r1, r3
 8003450:	4610      	mov	r0, r2
 8003452:	f000 fa7e 	bl	8003952 <TIM_ITRx_SetConfig>
      break;
 8003456:	e003      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
      break;
 800345c:	e000      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800345e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003470:	7bfb      	ldrb	r3, [r7, #15]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a34      	ldr	r2, [pc, #208]	; (8003560 <TIM_Base_SetConfig+0xe4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00f      	beq.n	80034b4 <TIM_Base_SetConfig+0x38>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800349a:	d00b      	beq.n	80034b4 <TIM_Base_SetConfig+0x38>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a31      	ldr	r2, [pc, #196]	; (8003564 <TIM_Base_SetConfig+0xe8>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d007      	beq.n	80034b4 <TIM_Base_SetConfig+0x38>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a30      	ldr	r2, [pc, #192]	; (8003568 <TIM_Base_SetConfig+0xec>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d003      	beq.n	80034b4 <TIM_Base_SetConfig+0x38>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a2f      	ldr	r2, [pc, #188]	; (800356c <TIM_Base_SetConfig+0xf0>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d108      	bne.n	80034c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a25      	ldr	r2, [pc, #148]	; (8003560 <TIM_Base_SetConfig+0xe4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01b      	beq.n	8003506 <TIM_Base_SetConfig+0x8a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d4:	d017      	beq.n	8003506 <TIM_Base_SetConfig+0x8a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a22      	ldr	r2, [pc, #136]	; (8003564 <TIM_Base_SetConfig+0xe8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d013      	beq.n	8003506 <TIM_Base_SetConfig+0x8a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a21      	ldr	r2, [pc, #132]	; (8003568 <TIM_Base_SetConfig+0xec>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00f      	beq.n	8003506 <TIM_Base_SetConfig+0x8a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a20      	ldr	r2, [pc, #128]	; (800356c <TIM_Base_SetConfig+0xf0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00b      	beq.n	8003506 <TIM_Base_SetConfig+0x8a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a1f      	ldr	r2, [pc, #124]	; (8003570 <TIM_Base_SetConfig+0xf4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d007      	beq.n	8003506 <TIM_Base_SetConfig+0x8a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a1e      	ldr	r2, [pc, #120]	; (8003574 <TIM_Base_SetConfig+0xf8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d003      	beq.n	8003506 <TIM_Base_SetConfig+0x8a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a1d      	ldr	r2, [pc, #116]	; (8003578 <TIM_Base_SetConfig+0xfc>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d108      	bne.n	8003518 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800350c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a08      	ldr	r2, [pc, #32]	; (8003560 <TIM_Base_SetConfig+0xe4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d103      	bne.n	800354c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	615a      	str	r2, [r3, #20]
}
 8003552:	bf00      	nop
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40010000 	.word	0x40010000
 8003564:	40000400 	.word	0x40000400
 8003568:	40000800 	.word	0x40000800
 800356c:	40000c00 	.word	0x40000c00
 8003570:	40014000 	.word	0x40014000
 8003574:	40014400 	.word	0x40014400
 8003578:	40014800 	.word	0x40014800

0800357c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	f023 0201 	bic.w	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0303 	bic.w	r3, r3, #3
 80035b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f023 0302 	bic.w	r3, r3, #2
 80035c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <TIM_OC1_SetConfig+0xc8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d10c      	bne.n	80035f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f023 0308 	bic.w	r3, r3, #8
 80035de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f023 0304 	bic.w	r3, r3, #4
 80035f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a13      	ldr	r2, [pc, #76]	; (8003644 <TIM_OC1_SetConfig+0xc8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d111      	bne.n	800361e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	621a      	str	r2, [r3, #32]
}
 8003638:	bf00      	nop
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	40010000 	.word	0x40010000

08003648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	f023 0210 	bic.w	r2, r3, #16
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f023 0320 	bic.w	r3, r3, #32
 8003692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a1e      	ldr	r2, [pc, #120]	; (800371c <TIM_OC2_SetConfig+0xd4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d10d      	bne.n	80036c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a15      	ldr	r2, [pc, #84]	; (800371c <TIM_OC2_SetConfig+0xd4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d113      	bne.n	80036f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	621a      	str	r2, [r3, #32]
}
 800370e:	bf00      	nop
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40010000 	.word	0x40010000

08003720 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0303 	bic.w	r3, r3, #3
 8003756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	021b      	lsls	r3, r3, #8
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a1d      	ldr	r2, [pc, #116]	; (80037f0 <TIM_OC3_SetConfig+0xd0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d10d      	bne.n	800379a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a14      	ldr	r2, [pc, #80]	; (80037f0 <TIM_OC3_SetConfig+0xd0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d113      	bne.n	80037ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	621a      	str	r2, [r3, #32]
}
 80037e4:	bf00      	nop
 80037e6:	371c      	adds	r7, #28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	40010000 	.word	0x40010000

080037f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800382a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800383e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	031b      	lsls	r3, r3, #12
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a10      	ldr	r2, [pc, #64]	; (8003890 <TIM_OC4_SetConfig+0x9c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d109      	bne.n	8003868 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800385a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	019b      	lsls	r3, r3, #6
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	621a      	str	r2, [r3, #32]
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40010000 	.word	0x40010000

08003894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	f023 0201 	bic.w	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f023 030a 	bic.w	r3, r3, #10
 80038d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b087      	sub	sp, #28
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f023 0210 	bic.w	r2, r3, #16
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800391c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	031b      	lsls	r3, r3, #12
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800392e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003952:	b480      	push	{r7}
 8003954:	b085      	sub	sp, #20
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	f043 0307 	orr.w	r3, r3, #7
 8003974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	609a      	str	r2, [r3, #8]
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	021a      	lsls	r2, r3, #8
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	609a      	str	r2, [r3, #8]
}
 80039bc:	bf00      	nop
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039dc:	2302      	movs	r3, #2
 80039de:	e050      	b.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1c      	ldr	r2, [pc, #112]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d018      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2c:	d013      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a18      	ldr	r2, [pc, #96]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00e      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a16      	ldr	r2, [pc, #88]	; (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d009      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a15      	ldr	r2, [pc, #84]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a13      	ldr	r2, [pc, #76]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10c      	bne.n	8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40010000 	.word	0x40010000
 8003a94:	40000400 	.word	0x40000400
 8003a98:	40000800 	.word	0x40000800
 8003a9c:	40000c00 	.word	0x40000c00
 8003aa0:	40014000 	.word	0x40014000

08003aa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e03f      	b.n	8003b36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fd f970 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2224      	movs	r2, #36	; 0x24
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f829 	bl	8003b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695a      	ldr	r2, [r3, #20]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b44:	b0c0      	sub	sp, #256	; 0x100
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5c:	68d9      	ldr	r1, [r3, #12]
 8003b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	ea40 0301 	orr.w	r3, r0, r1
 8003b68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b98:	f021 010c 	bic.w	r1, r1, #12
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ba6:	430b      	orrs	r3, r1
 8003ba8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bba:	6999      	ldr	r1, [r3, #24]
 8003bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	ea40 0301 	orr.w	r3, r0, r1
 8003bc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	4b8f      	ldr	r3, [pc, #572]	; (8003e0c <UART_SetConfig+0x2cc>)
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d005      	beq.n	8003be0 <UART_SetConfig+0xa0>
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	4b8d      	ldr	r3, [pc, #564]	; (8003e10 <UART_SetConfig+0x2d0>)
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d104      	bne.n	8003bea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003be0:	f7fe fe5e 	bl	80028a0 <HAL_RCC_GetPCLK2Freq>
 8003be4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003be8:	e003      	b.n	8003bf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bea:	f7fe fe45 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8003bee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bfc:	f040 810c 	bne.w	8003e18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c12:	4622      	mov	r2, r4
 8003c14:	462b      	mov	r3, r5
 8003c16:	1891      	adds	r1, r2, r2
 8003c18:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c1a:	415b      	adcs	r3, r3
 8003c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c22:	4621      	mov	r1, r4
 8003c24:	eb12 0801 	adds.w	r8, r2, r1
 8003c28:	4629      	mov	r1, r5
 8003c2a:	eb43 0901 	adc.w	r9, r3, r1
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c42:	4690      	mov	r8, r2
 8003c44:	4699      	mov	r9, r3
 8003c46:	4623      	mov	r3, r4
 8003c48:	eb18 0303 	adds.w	r3, r8, r3
 8003c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c50:	462b      	mov	r3, r5
 8003c52:	eb49 0303 	adc.w	r3, r9, r3
 8003c56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c6e:	460b      	mov	r3, r1
 8003c70:	18db      	adds	r3, r3, r3
 8003c72:	653b      	str	r3, [r7, #80]	; 0x50
 8003c74:	4613      	mov	r3, r2
 8003c76:	eb42 0303 	adc.w	r3, r2, r3
 8003c7a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c84:	f7fc faa6 	bl	80001d4 <__aeabi_uldivmod>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4b61      	ldr	r3, [pc, #388]	; (8003e14 <UART_SetConfig+0x2d4>)
 8003c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	011c      	lsls	r4, r3, #4
 8003c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ca0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ca4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ca8:	4642      	mov	r2, r8
 8003caa:	464b      	mov	r3, r9
 8003cac:	1891      	adds	r1, r2, r2
 8003cae:	64b9      	str	r1, [r7, #72]	; 0x48
 8003cb0:	415b      	adcs	r3, r3
 8003cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003cb8:	4641      	mov	r1, r8
 8003cba:	eb12 0a01 	adds.w	sl, r2, r1
 8003cbe:	4649      	mov	r1, r9
 8003cc0:	eb43 0b01 	adc.w	fp, r3, r1
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cd8:	4692      	mov	sl, r2
 8003cda:	469b      	mov	fp, r3
 8003cdc:	4643      	mov	r3, r8
 8003cde:	eb1a 0303 	adds.w	r3, sl, r3
 8003ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ce6:	464b      	mov	r3, r9
 8003ce8:	eb4b 0303 	adc.w	r3, fp, r3
 8003cec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d04:	460b      	mov	r3, r1
 8003d06:	18db      	adds	r3, r3, r3
 8003d08:	643b      	str	r3, [r7, #64]	; 0x40
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	eb42 0303 	adc.w	r3, r2, r3
 8003d10:	647b      	str	r3, [r7, #68]	; 0x44
 8003d12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d1a:	f7fc fa5b 	bl	80001d4 <__aeabi_uldivmod>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4611      	mov	r1, r2
 8003d24:	4b3b      	ldr	r3, [pc, #236]	; (8003e14 <UART_SetConfig+0x2d4>)
 8003d26:	fba3 2301 	umull	r2, r3, r3, r1
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	2264      	movs	r2, #100	; 0x64
 8003d2e:	fb02 f303 	mul.w	r3, r2, r3
 8003d32:	1acb      	subs	r3, r1, r3
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d3a:	4b36      	ldr	r3, [pc, #216]	; (8003e14 <UART_SetConfig+0x2d4>)
 8003d3c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d48:	441c      	add	r4, r3
 8003d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	464b      	mov	r3, r9
 8003d60:	1891      	adds	r1, r2, r2
 8003d62:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d64:	415b      	adcs	r3, r3
 8003d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d6c:	4641      	mov	r1, r8
 8003d6e:	1851      	adds	r1, r2, r1
 8003d70:	6339      	str	r1, [r7, #48]	; 0x30
 8003d72:	4649      	mov	r1, r9
 8003d74:	414b      	adcs	r3, r1
 8003d76:	637b      	str	r3, [r7, #52]	; 0x34
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d84:	4659      	mov	r1, fp
 8003d86:	00cb      	lsls	r3, r1, #3
 8003d88:	4651      	mov	r1, sl
 8003d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d8e:	4651      	mov	r1, sl
 8003d90:	00ca      	lsls	r2, r1, #3
 8003d92:	4610      	mov	r0, r2
 8003d94:	4619      	mov	r1, r3
 8003d96:	4603      	mov	r3, r0
 8003d98:	4642      	mov	r2, r8
 8003d9a:	189b      	adds	r3, r3, r2
 8003d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003da0:	464b      	mov	r3, r9
 8003da2:	460a      	mov	r2, r1
 8003da4:	eb42 0303 	adc.w	r3, r2, r3
 8003da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003db8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003dbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	18db      	adds	r3, r3, r3
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	eb42 0303 	adc.w	r3, r2, r3
 8003dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003dd6:	f7fc f9fd 	bl	80001d4 <__aeabi_uldivmod>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <UART_SetConfig+0x2d4>)
 8003de0:	fba3 1302 	umull	r1, r3, r3, r2
 8003de4:	095b      	lsrs	r3, r3, #5
 8003de6:	2164      	movs	r1, #100	; 0x64
 8003de8:	fb01 f303 	mul.w	r3, r1, r3
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	3332      	adds	r3, #50	; 0x32
 8003df2:	4a08      	ldr	r2, [pc, #32]	; (8003e14 <UART_SetConfig+0x2d4>)
 8003df4:	fba2 2303 	umull	r2, r3, r2, r3
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	f003 0207 	and.w	r2, r3, #7
 8003dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4422      	add	r2, r4
 8003e06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e08:	e106      	b.n	8004018 <UART_SetConfig+0x4d8>
 8003e0a:	bf00      	nop
 8003e0c:	40011000 	.word	0x40011000
 8003e10:	40011400 	.word	0x40011400
 8003e14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e2a:	4642      	mov	r2, r8
 8003e2c:	464b      	mov	r3, r9
 8003e2e:	1891      	adds	r1, r2, r2
 8003e30:	6239      	str	r1, [r7, #32]
 8003e32:	415b      	adcs	r3, r3
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
 8003e36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e3a:	4641      	mov	r1, r8
 8003e3c:	1854      	adds	r4, r2, r1
 8003e3e:	4649      	mov	r1, r9
 8003e40:	eb43 0501 	adc.w	r5, r3, r1
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	00eb      	lsls	r3, r5, #3
 8003e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e52:	00e2      	lsls	r2, r4, #3
 8003e54:	4614      	mov	r4, r2
 8003e56:	461d      	mov	r5, r3
 8003e58:	4643      	mov	r3, r8
 8003e5a:	18e3      	adds	r3, r4, r3
 8003e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e60:	464b      	mov	r3, r9
 8003e62:	eb45 0303 	adc.w	r3, r5, r3
 8003e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e86:	4629      	mov	r1, r5
 8003e88:	008b      	lsls	r3, r1, #2
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e90:	4621      	mov	r1, r4
 8003e92:	008a      	lsls	r2, r1, #2
 8003e94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e98:	f7fc f99c 	bl	80001d4 <__aeabi_uldivmod>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4b60      	ldr	r3, [pc, #384]	; (8004024 <UART_SetConfig+0x4e4>)
 8003ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	011c      	lsls	r4, r3, #4
 8003eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003eb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003eb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ebc:	4642      	mov	r2, r8
 8003ebe:	464b      	mov	r3, r9
 8003ec0:	1891      	adds	r1, r2, r2
 8003ec2:	61b9      	str	r1, [r7, #24]
 8003ec4:	415b      	adcs	r3, r3
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ecc:	4641      	mov	r1, r8
 8003ece:	1851      	adds	r1, r2, r1
 8003ed0:	6139      	str	r1, [r7, #16]
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	414b      	adcs	r3, r1
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ee4:	4659      	mov	r1, fp
 8003ee6:	00cb      	lsls	r3, r1, #3
 8003ee8:	4651      	mov	r1, sl
 8003eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eee:	4651      	mov	r1, sl
 8003ef0:	00ca      	lsls	r2, r1, #3
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	4642      	mov	r2, r8
 8003efa:	189b      	adds	r3, r3, r2
 8003efc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f00:	464b      	mov	r3, r9
 8003f02:	460a      	mov	r2, r1
 8003f04:	eb42 0303 	adc.w	r3, r2, r3
 8003f08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f24:	4649      	mov	r1, r9
 8003f26:	008b      	lsls	r3, r1, #2
 8003f28:	4641      	mov	r1, r8
 8003f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f2e:	4641      	mov	r1, r8
 8003f30:	008a      	lsls	r2, r1, #2
 8003f32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f36:	f7fc f94d 	bl	80001d4 <__aeabi_uldivmod>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4b38      	ldr	r3, [pc, #224]	; (8004024 <UART_SetConfig+0x4e4>)
 8003f42:	fba3 2301 	umull	r2, r3, r3, r1
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2264      	movs	r2, #100	; 0x64
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	1acb      	subs	r3, r1, r3
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	3332      	adds	r3, #50	; 0x32
 8003f54:	4a33      	ldr	r2, [pc, #204]	; (8004024 <UART_SetConfig+0x4e4>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f60:	441c      	add	r4, r3
 8003f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f66:	2200      	movs	r2, #0
 8003f68:	673b      	str	r3, [r7, #112]	; 0x70
 8003f6a:	677a      	str	r2, [r7, #116]	; 0x74
 8003f6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f70:	4642      	mov	r2, r8
 8003f72:	464b      	mov	r3, r9
 8003f74:	1891      	adds	r1, r2, r2
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	415b      	adcs	r3, r3
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f80:	4641      	mov	r1, r8
 8003f82:	1851      	adds	r1, r2, r1
 8003f84:	6039      	str	r1, [r7, #0]
 8003f86:	4649      	mov	r1, r9
 8003f88:	414b      	adcs	r3, r1
 8003f8a:	607b      	str	r3, [r7, #4]
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f98:	4659      	mov	r1, fp
 8003f9a:	00cb      	lsls	r3, r1, #3
 8003f9c:	4651      	mov	r1, sl
 8003f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fa2:	4651      	mov	r1, sl
 8003fa4:	00ca      	lsls	r2, r1, #3
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4603      	mov	r3, r0
 8003fac:	4642      	mov	r2, r8
 8003fae:	189b      	adds	r3, r3, r2
 8003fb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	460a      	mov	r2, r1
 8003fb6:	eb42 0303 	adc.w	r3, r2, r3
 8003fba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8003fc6:	667a      	str	r2, [r7, #100]	; 0x64
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003fd4:	4649      	mov	r1, r9
 8003fd6:	008b      	lsls	r3, r1, #2
 8003fd8:	4641      	mov	r1, r8
 8003fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fde:	4641      	mov	r1, r8
 8003fe0:	008a      	lsls	r2, r1, #2
 8003fe2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fe6:	f7fc f8f5 	bl	80001d4 <__aeabi_uldivmod>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <UART_SetConfig+0x4e4>)
 8003ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff4:	095b      	lsrs	r3, r3, #5
 8003ff6:	2164      	movs	r1, #100	; 0x64
 8003ff8:	fb01 f303 	mul.w	r3, r1, r3
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	3332      	adds	r3, #50	; 0x32
 8004002:	4a08      	ldr	r2, [pc, #32]	; (8004024 <UART_SetConfig+0x4e4>)
 8004004:	fba2 2303 	umull	r2, r3, r2, r3
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	f003 020f 	and.w	r2, r3, #15
 800400e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4422      	add	r2, r4
 8004016:	609a      	str	r2, [r3, #8]
}
 8004018:	bf00      	nop
 800401a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800401e:	46bd      	mov	sp, r7
 8004020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004024:	51eb851f 	.word	0x51eb851f

08004028 <memset>:
 8004028:	4402      	add	r2, r0
 800402a:	4603      	mov	r3, r0
 800402c:	4293      	cmp	r3, r2
 800402e:	d100      	bne.n	8004032 <memset+0xa>
 8004030:	4770      	bx	lr
 8004032:	f803 1b01 	strb.w	r1, [r3], #1
 8004036:	e7f9      	b.n	800402c <memset+0x4>

08004038 <__libc_init_array>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	4d0d      	ldr	r5, [pc, #52]	; (8004070 <__libc_init_array+0x38>)
 800403c:	4c0d      	ldr	r4, [pc, #52]	; (8004074 <__libc_init_array+0x3c>)
 800403e:	1b64      	subs	r4, r4, r5
 8004040:	10a4      	asrs	r4, r4, #2
 8004042:	2600      	movs	r6, #0
 8004044:	42a6      	cmp	r6, r4
 8004046:	d109      	bne.n	800405c <__libc_init_array+0x24>
 8004048:	4d0b      	ldr	r5, [pc, #44]	; (8004078 <__libc_init_array+0x40>)
 800404a:	4c0c      	ldr	r4, [pc, #48]	; (800407c <__libc_init_array+0x44>)
 800404c:	f000 f818 	bl	8004080 <_init>
 8004050:	1b64      	subs	r4, r4, r5
 8004052:	10a4      	asrs	r4, r4, #2
 8004054:	2600      	movs	r6, #0
 8004056:	42a6      	cmp	r6, r4
 8004058:	d105      	bne.n	8004066 <__libc_init_array+0x2e>
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004060:	4798      	blx	r3
 8004062:	3601      	adds	r6, #1
 8004064:	e7ee      	b.n	8004044 <__libc_init_array+0xc>
 8004066:	f855 3b04 	ldr.w	r3, [r5], #4
 800406a:	4798      	blx	r3
 800406c:	3601      	adds	r6, #1
 800406e:	e7f2      	b.n	8004056 <__libc_init_array+0x1e>
 8004070:	08004874 	.word	0x08004874
 8004074:	08004874 	.word	0x08004874
 8004078:	08004874 	.word	0x08004874
 800407c:	08004878 	.word	0x08004878

08004080 <_init>:
 8004080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004082:	bf00      	nop
 8004084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004086:	bc08      	pop	{r3}
 8004088:	469e      	mov	lr, r3
 800408a:	4770      	bx	lr

0800408c <_fini>:
 800408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408e:	bf00      	nop
 8004090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004092:	bc08      	pop	{r3}
 8004094:	469e      	mov	lr, r3
 8004096:	4770      	bx	lr
