
Test_WS2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d68  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  08004efc  08004efc  00014efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800570c  0800570c  00020ff8  2**0
                  CONTENTS
  4 .ARM          00000008  0800570c  0800570c  0001570c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005714  08005714  00020ff8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005714  08005714  00015714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005718  08005718  00015718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ff8  20000000  0800571c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ddc  20000ff8  08006714  00020ff8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006dd4  08006714  00026dd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020ff8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00021028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001059f  00000000  00000000  0002106b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000280d  00000000  00000000  0003160a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd0  00000000  00000000  00033e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c3b  00000000  00000000  00034de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018023  00000000  00000000  00035a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012766  00000000  00000000  0004da46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000911cc  00000000  00000000  000601ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000454c  00000000  00000000  000f1378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f58c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000ff8 	.word	0x20000ff8
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004ee4 	.word	0x08004ee4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000ffc 	.word	0x20000ffc
 80001d0:	08004ee4 	.word	0x08004ee4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <initLookupTable>:
#include "lookup_table.h"

LookupTable lookupTable;

void initLookupTable(LookupTable* lookupTable, uint16_t rows, uint16_t cols) {
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	460b      	mov	r3, r1
 80004da:	807b      	strh	r3, [r7, #2]
 80004dc:	4613      	mov	r3, r2
 80004de:	803b      	strh	r3, [r7, #0]
    uint16_t r, c; /* index variables */

    /* check input */
    if (rows <= 0) exit(1); /* number of rows must be greater than 0 */
 80004e0:	887b      	ldrh	r3, [r7, #2]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d102      	bne.n	80004ec <initLookupTable+0x1c>
 80004e6:	2001      	movs	r0, #1
 80004e8:	f004 fb9e 	bl	8004c28 <exit>
    if (cols <= 0) exit(1); /* number of cols must be greater than 0 */
 80004ec:	883b      	ldrh	r3, [r7, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d102      	bne.n	80004f8 <initLookupTable+0x28>
 80004f2:	2001      	movs	r0, #1
 80004f4:	f004 fb98 	bl	8004c28 <exit>

    /* allocate memory */
    lookupTable->index = (uint16_t**) malloc(rows * sizeof(uint16_t*));
 80004f8:	887b      	ldrh	r3, [r7, #2]
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	4618      	mov	r0, r3
 80004fe:	f004 fba5 	bl	8004c4c <malloc>
 8000502:	4603      	mov	r3, r0
 8000504:	461a      	mov	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	605a      	str	r2, [r3, #4]
    for (r = 0; r < rows; r++) {
 800050a:	2300      	movs	r3, #0
 800050c:	81fb      	strh	r3, [r7, #14]
 800050e:	e00e      	b.n	800052e <initLookupTable+0x5e>
        lookupTable->index[r] = (uint16_t*) malloc(cols * sizeof(uint16_t));
 8000510:	883b      	ldrh	r3, [r7, #0]
 8000512:	0059      	lsls	r1, r3, #1
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	685a      	ldr	r2, [r3, #4]
 8000518:	89fb      	ldrh	r3, [r7, #14]
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	18d4      	adds	r4, r2, r3
 800051e:	4608      	mov	r0, r1
 8000520:	f004 fb94 	bl	8004c4c <malloc>
 8000524:	4603      	mov	r3, r0
 8000526:	6023      	str	r3, [r4, #0]
    for (r = 0; r < rows; r++) {
 8000528:	89fb      	ldrh	r3, [r7, #14]
 800052a:	3301      	adds	r3, #1
 800052c:	81fb      	strh	r3, [r7, #14]
 800052e:	89fa      	ldrh	r2, [r7, #14]
 8000530:	887b      	ldrh	r3, [r7, #2]
 8000532:	429a      	cmp	r2, r3
 8000534:	d3ec      	bcc.n	8000510 <initLookupTable+0x40>
    }

    /* set attrs */
    lookupTable->rows = rows;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	887a      	ldrh	r2, [r7, #2]
 800053a:	801a      	strh	r2, [r3, #0]
    lookupTable->cols = cols;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	883a      	ldrh	r2, [r7, #0]
 8000540:	805a      	strh	r2, [r3, #2]

    for (r = 0; r < rows; r++) {
 8000542:	2300      	movs	r3, #0
 8000544:	81fb      	strh	r3, [r7, #14]
 8000546:	e017      	b.n	8000578 <initLookupTable+0xa8>
        for (c = 0; c < cols; c++) {
 8000548:	2300      	movs	r3, #0
 800054a:	81bb      	strh	r3, [r7, #12]
 800054c:	e00d      	b.n	800056a <initLookupTable+0x9a>
            lookupTable->index[r][c] = 0;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	685a      	ldr	r2, [r3, #4]
 8000552:	89fb      	ldrh	r3, [r7, #14]
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	89bb      	ldrh	r3, [r7, #12]
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	4413      	add	r3, r2
 8000560:	2200      	movs	r2, #0
 8000562:	801a      	strh	r2, [r3, #0]
        for (c = 0; c < cols; c++) {
 8000564:	89bb      	ldrh	r3, [r7, #12]
 8000566:	3301      	adds	r3, #1
 8000568:	81bb      	strh	r3, [r7, #12]
 800056a:	89ba      	ldrh	r2, [r7, #12]
 800056c:	883b      	ldrh	r3, [r7, #0]
 800056e:	429a      	cmp	r2, r3
 8000570:	d3ed      	bcc.n	800054e <initLookupTable+0x7e>
    for (r = 0; r < rows; r++) {
 8000572:	89fb      	ldrh	r3, [r7, #14]
 8000574:	3301      	adds	r3, #1
 8000576:	81fb      	strh	r3, [r7, #14]
 8000578:	89fa      	ldrh	r2, [r7, #14]
 800057a:	887b      	ldrh	r3, [r7, #2]
 800057c:	429a      	cmp	r2, r3
 800057e:	d3e3      	bcc.n	8000548 <initLookupTable+0x78>
        }
    }
}
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bd90      	pop	{r4, r7, pc}
	...

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b5b0      	push	{r4, r5, r7, lr}
 800058e:	b0a4      	sub	sp, #144	; 0x90
 8000590:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  ColorRGB_t color[NUM_COLORS] = {
 8000592:	4bb5      	ldr	r3, [pc, #724]	; (8000868 <main+0x2dc>)
 8000594:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000598:	461d      	mov	r5, r3
 800059a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005aa:	6020      	str	r0, [r4, #0]
 80005ac:	3404      	adds	r4, #4
 80005ae:	8021      	strh	r1, [r4, #0]
    {128, 0,   128}, // C_TEAL
    {128, 128, 0  }, // C_VIOLET
    {128, 128, 0  }, // C_MAUVE
    {4,   4,   4  }  // C_WALL
  };
  ColorRGB_t darkColor[NUM_COLORS] = {
 80005b0:	4bae      	ldr	r3, [pc, #696]	; (800086c <main+0x2e0>)
 80005b2:	1d3c      	adds	r4, r7, #4
 80005b4:	461d      	mov	r5, r3
 80005b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005c6:	6020      	str	r0, [r4, #0]
 80005c8:	3404      	adds	r4, #4
 80005ca:	8021      	strh	r1, [r4, #0]
  {  1,   1,   1 }  // C_WALL
};
  //ColorRGB_t* pixel[WS2812_NUM_LEDS_Y][WS2812_NUM_LEDS_X] = {0}; // fill with &color[C_COLOR]
                                                                
  /* maze vars */
  uint8_t startX = 1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint8_t startY = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  uint8_t exitX = MAZE_WIDTH - 2;
 80005d8:	2325      	movs	r3, #37	; 0x25
 80005da:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
  uint8_t exitY = MAZE_HEIGHT - 1;
 80005de:	2316      	movs	r3, #22
 80005e0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

  uint8_t packageID = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

  uint16_t i = 0, x = 0, y = 0; // index variables
 80005ea:	2300      	movs	r3, #0
 80005ec:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80005f0:	2300      	movs	r3, #0
 80005f2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80005f6:	2300      	movs	r3, #0
 80005f8:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f001 fbd6 	bl	8001dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f940 	bl	8000884 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SystemInit();
 8000604:	f001 fa64 	bl	8001ad0 <SystemInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 faf2 	bl	8000bf0 <MX_GPIO_Init>
  MX_DMA_Init();
 800060c:	f000 fac8 	bl	8000ba0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000610:	f000 fa9c 	bl	8000b4c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000614:	f000 f9d8 	bl	80009c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000618:	f000 fa4a 	bl	8000ab0 <MX_TIM3_Init>
  MX_SPI2_Init();
 800061c:	f000 f99e 	bl	800095c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ws2812_init();
 8000620:	f001 fa68 	bl	8001af4 <ws2812_init>
  initMaze(&maze, MAZE_HEIGHT, MAZE_WIDTH, startX, startY, exitX, exitY);
 8000624:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8000628:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800062c:	9302      	str	r3, [sp, #8]
 800062e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	4613      	mov	r3, r2
 800063c:	2227      	movs	r2, #39	; 0x27
 800063e:	2117      	movs	r1, #23
 8000640:	488b      	ldr	r0, [pc, #556]	; (8000870 <main+0x2e4>)
 8000642:	f000 fb48 	bl	8000cd6 <initMaze>
  initPath(&path, MAZE_WIDTH * MAZE_HEIGHT);
 8000646:	f240 3181 	movw	r1, #897	; 0x381
 800064a:	488a      	ldr	r0, [pc, #552]	; (8000874 <main+0x2e8>)
 800064c:	f000 fc3f 	bl	8000ece <initPath>
  initPRNG(&rng, numbers, SIZE_NUMBERS);
 8000650:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000654:	4988      	ldr	r1, [pc, #544]	; (8000878 <main+0x2ec>)
 8000656:	4889      	ldr	r0, [pc, #548]	; (800087c <main+0x2f0>)
 8000658:	f000 ff8c 	bl	8001574 <initPRNG>
  initLookupTable(&lookupTable, WS2812_NUM_LEDS_Y, WS2812_NUM_LEDS_X);
 800065c:	2228      	movs	r2, #40	; 0x28
 800065e:	2118      	movs	r1, #24
 8000660:	4887      	ldr	r0, [pc, #540]	; (8000880 <main+0x2f4>)
 8000662:	f7ff ff35 	bl	80004d0 <initLookupTable>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	/* reset panel to black */
	ws2812_pixel_all(&color[C_BLACK]);
 8000666:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fad4 	bl	8001c18 <ws2812_pixel_all>

	/* set start and end point */
    startX++;
 8000670:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000674:	3301      	adds	r3, #1
 8000676:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (startX == MAZE_WIDTH - 1) startX = 1;
 800067a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800067e:	2b26      	cmp	r3, #38	; 0x26
 8000680:	d102      	bne.n	8000688 <main+0xfc>
 8000682:	2301      	movs	r3, #1
 8000684:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    exitX--;
 8000688:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800068c:	3b01      	subs	r3, #1
 800068e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    if (exitX == 0) exitX = MAZE_WIDTH - 2;
 8000692:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000696:	2b00      	cmp	r3, #0
 8000698:	d102      	bne.n	80006a0 <main+0x114>
 800069a:	2325      	movs	r3, #37	; 0x25
 800069c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

    /* set package color */
    packageID = C_GREEN;
 80006a0:	2303      	movs	r3, #3
 80006a2:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

	/* set new start and exit */
    maze.start.x = startX; maze.start.y = startY;
 80006a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80006aa:	4a71      	ldr	r2, [pc, #452]	; (8000870 <main+0x2e4>)
 80006ac:	6053      	str	r3, [r2, #4]
 80006ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80006b2:	4a6f      	ldr	r2, [pc, #444]	; (8000870 <main+0x2e4>)
 80006b4:	6093      	str	r3, [r2, #8]
    maze.exit.x = exitX; maze.exit.y = exitY;
 80006b6:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80006ba:	4a6d      	ldr	r2, [pc, #436]	; (8000870 <main+0x2e4>)
 80006bc:	6153      	str	r3, [r2, #20]
 80006be:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80006c2:	4a6b      	ldr	r2, [pc, #428]	; (8000870 <main+0x2e4>)
 80006c4:	6193      	str	r3, [r2, #24]

	/* generate and solve maze */
	generateMaze(&maze);
 80006c6:	486a      	ldr	r0, [pc, #424]	; (8000870 <main+0x2e4>)
 80006c8:	f000 fd2a 	bl	8001120 <generateMaze>
	solveMaze(&maze, &path);
 80006cc:	4969      	ldr	r1, [pc, #420]	; (8000874 <main+0x2e8>)
 80006ce:	4868      	ldr	r0, [pc, #416]	; (8000870 <main+0x2e4>)
 80006d0:	f000 fd62 	bl	8001198 <solveMaze>

	/* write maze */
	for (x = 0; x < MAZE_WIDTH; x++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80006da:	e02a      	b.n	8000732 <main+0x1a6>
	{
	  for (y = 0; y < MAZE_HEIGHT; y++)
 80006dc:	2300      	movs	r3, #0
 80006de:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80006e2:	e01d      	b.n	8000720 <main+0x194>
	  {
	    if (maze.grid[y][x] == WALL) ws2812_pixel(x, y, &color[C_WALL]);
 80006e4:	4b62      	ldr	r3, [pc, #392]	; (8000870 <main+0x2e4>)
 80006e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006e8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4413      	add	r3, r2
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80006f6:	4413      	add	r3, r2
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d10b      	bne.n	8000716 <main+0x18a>
 80006fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8000702:	b2d8      	uxtb	r0, r3
 8000704:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000708:	b2d9      	uxtb	r1, r3
 800070a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800070e:	3333      	adds	r3, #51	; 0x33
 8000710:	461a      	mov	r2, r3
 8000712:	f001 fa11 	bl	8001b38 <ws2812_pixel>
	  for (y = 0; y < MAZE_HEIGHT; y++)
 8000716:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800071a:	3301      	adds	r3, #1
 800071c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8000720:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000724:	2b16      	cmp	r3, #22
 8000726:	d9dd      	bls.n	80006e4 <main+0x158>
	for (x = 0; x < MAZE_WIDTH; x++)
 8000728:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800072c:	3301      	adds	r3, #1
 800072e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8000732:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8000736:	2b26      	cmp	r3, #38	; 0x26
 8000738:	d9d0      	bls.n	80006dc <main+0x150>
	  }
	}

	/* write solution */
	for (i = path.size - 1; i >= 1; i--)
 800073a:	4b4e      	ldr	r3, [pc, #312]	; (8000874 <main+0x2e8>)
 800073c:	889b      	ldrh	r3, [r3, #4]
 800073e:	3b01      	subs	r3, #1
 8000740:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8000744:	e077      	b.n	8000836 <main+0x2aa>
	{
      // HOTFIX: write start point at first iteration since it missing in path
      if (i == path.size - 1)
 8000746:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800074a:	4b4a      	ldr	r3, [pc, #296]	; (8000874 <main+0x2e8>)
 800074c:	889b      	ldrh	r3, [r3, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	429a      	cmp	r2, r3
 8000752:	d11f      	bne.n	8000794 <main+0x208>
      {
        ws2812_pixel(startX, startY, &color[packageID]);
 8000754:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8000758:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800075c:	4613      	mov	r3, r2
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	4413      	add	r3, r2
 8000762:	18ca      	adds	r2, r1, r3
 8000764:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 8000768:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800076c:	4618      	mov	r0, r3
 800076e:	f001 f9e3 	bl	8001b38 <ws2812_pixel>
        HAL_Delay(ANIMATION_DELAY_MS);
 8000772:	201e      	movs	r0, #30
 8000774:	f001 fb8c 	bl	8001e90 <HAL_Delay>
        ws2812_pixel(startX, startY, &darkColor[packageID]);
 8000778:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800077c:	1d39      	adds	r1, r7, #4
 800077e:	4613      	mov	r3, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	4413      	add	r3, r2
 8000784:	18ca      	adds	r2, r1, r3
 8000786:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 800078a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800078e:	4618      	mov	r0, r3
 8000790:	f001 f9d2 	bl	8001b38 <ws2812_pixel>
      }
      if (path.p[i].x != 0 && path.p[i].y != 0)
 8000794:	4b37      	ldr	r3, [pc, #220]	; (8000874 <main+0x2e8>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800079c:	011b      	lsls	r3, r3, #4
 800079e:	4413      	add	r3, r2
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d042      	beq.n	800082c <main+0x2a0>
 80007a6:	4b33      	ldr	r3, [pc, #204]	; (8000874 <main+0x2e8>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80007ae:	011b      	lsls	r3, r3, #4
 80007b0:	4413      	add	r3, r2
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d039      	beq.n	800082c <main+0x2a0>
      {
        ws2812_pixel(path.p[i].x, path.p[i].y, &color[packageID]); // TODO: start point is not in path
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <main+0x2e8>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	4413      	add	r3, r2
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	b2d8      	uxtb	r0, r3
 80007c8:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <main+0x2e8>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80007d0:	011b      	lsls	r3, r3, #4
 80007d2:	4413      	add	r3, r2
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	b2dc      	uxtb	r4, r3
 80007d8:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80007dc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80007e0:	4613      	mov	r3, r2
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	4413      	add	r3, r2
 80007e6:	440b      	add	r3, r1
 80007e8:	461a      	mov	r2, r3
 80007ea:	4621      	mov	r1, r4
 80007ec:	f001 f9a4 	bl	8001b38 <ws2812_pixel>
        HAL_Delay(ANIMATION_DELAY_MS);
 80007f0:	201e      	movs	r0, #30
 80007f2:	f001 fb4d 	bl	8001e90 <HAL_Delay>
        ws2812_pixel(path.p[i].x, path.p[i].y, &darkColor[packageID]);
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <main+0x2e8>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80007fe:	011b      	lsls	r3, r3, #4
 8000800:	4413      	add	r3, r2
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	b2d8      	uxtb	r0, r3
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <main+0x2e8>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800080e:	011b      	lsls	r3, r3, #4
 8000810:	4413      	add	r3, r2
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	b2dc      	uxtb	r4, r3
 8000816:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800081a:	1d39      	adds	r1, r7, #4
 800081c:	4613      	mov	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	440b      	add	r3, r1
 8000824:	461a      	mov	r2, r3
 8000826:	4621      	mov	r1, r4
 8000828:	f001 f986 	bl	8001b38 <ws2812_pixel>
	for (i = path.size - 1; i >= 1; i--)
 800082c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8000830:	3b01      	subs	r3, #1
 8000832:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8000836:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800083a:	2b00      	cmp	r3, #0
 800083c:	d183      	bne.n	8000746 <main+0x1ba>
      }
	}

    HAL_Delay(5*ANIMATION_DELAY_MS);
 800083e:	2096      	movs	r0, #150	; 0x96
 8000840:	f001 fb26 	bl	8001e90 <HAL_Delay>

    /* reset */
    resetMaze(&maze, startX, startY, exitX, exitY);
 8000844:	f897 007e 	ldrb.w	r0, [r7, #126]	; 0x7e
 8000848:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800084c:	f897 107f 	ldrb.w	r1, [r7, #127]	; 0x7f
 8000850:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	4603      	mov	r3, r0
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <main+0x2e4>)
 800085a:	f000 fa89 	bl	8000d70 <resetMaze>
    resetPath(&path);
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <main+0x2e8>)
 8000860:	f000 fb54 	bl	8000f0c <resetPath>
	ws2812_pixel_all(&color[C_BLACK]);
 8000864:	e6ff      	b.n	8000666 <main+0xda>
 8000866:	bf00      	nop
 8000868:	08004efc 	.word	0x08004efc
 800086c:	08004f34 	.word	0x08004f34
 8000870:	20001208 	.word	0x20001208
 8000874:	20001230 	.word	0x20001230
 8000878:	20000000 	.word	0x20000000
 800087c:	20001238 	.word	0x20001238
 8000880:	20001014 	.word	0x20001014

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	; 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	2230      	movs	r2, #48	; 0x30
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f004 fa96 	bl	8004dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b29      	ldr	r3, [pc, #164]	; (8000954 <SystemClock_Config+0xd0>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	4a28      	ldr	r2, [pc, #160]	; (8000954 <SystemClock_Config+0xd0>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40
 80008b8:	4b26      	ldr	r3, [pc, #152]	; (8000954 <SystemClock_Config+0xd0>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	4b23      	ldr	r3, [pc, #140]	; (8000958 <SystemClock_Config+0xd4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008d0:	4a21      	ldr	r2, [pc, #132]	; (8000958 <SystemClock_Config+0xd4>)
 80008d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <SystemClock_Config+0xd4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e4:	2302      	movs	r3, #2
 80008e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e8:	2301      	movs	r3, #1
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ec:	2310      	movs	r3, #16
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f0:	2302      	movs	r3, #2
 80008f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008f8:	2310      	movs	r3, #16
 80008fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000900:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000902:	2304      	movs	r3, #4
 8000904:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000906:	2307      	movs	r3, #7
 8000908:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	4618      	mov	r0, r3
 8000910:	f002 f924 	bl	8002b5c <HAL_RCC_OscConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800091a:	f000 f9d7 	bl	8000ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091e:	230f      	movs	r3, #15
 8000920:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000922:	2302      	movs	r3, #2
 8000924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800092a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2102      	movs	r1, #2
 800093a:	4618      	mov	r0, r3
 800093c:	f002 fb86 	bl	800304c <HAL_RCC_ClockConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000946:	f000 f9c1 	bl	8000ccc <Error_Handler>
  }
}
 800094a:	bf00      	nop
 800094c:	3750      	adds	r7, #80	; 0x50
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_SPI2_Init+0x64>)
 8000962:	4a18      	ldr	r2, [pc, #96]	; (80009c4 <MX_SPI2_Init+0x68>)
 8000964:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_SPI2_Init+0x64>)
 8000968:	f44f 7282 	mov.w	r2, #260	; 0x104
 800096c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_SPI2_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_SPI2_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_SPI2_Init+0x64>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_SPI2_Init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_SPI2_Init+0x64>)
 8000988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800098c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_SPI2_Init+0x64>)
 8000990:	2218      	movs	r2, #24
 8000992:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <MX_SPI2_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_SPI2_Init+0x64>)
 800099c:	2200      	movs	r2, #0
 800099e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <MX_SPI2_Init+0x64>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_SPI2_Init+0x64>)
 80009a8:	220a      	movs	r2, #10
 80009aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_SPI2_Init+0x64>)
 80009ae:	f002 fd6d 	bl	800348c <HAL_SPI_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009b8:	f000 f988 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2000101c 	.word	0x2000101c
 80009c4:	40003800 	.word	0x40003800

080009c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08e      	sub	sp, #56	; 0x38
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	f107 0320 	add.w	r3, r7, #32
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
 80009f4:	615a      	str	r2, [r3, #20]
 80009f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009f8:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <MX_TIM2_Init+0xe4>)
 80009fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a00:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <MX_TIM2_Init+0xe4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a06:	4b29      	ldr	r3, [pc, #164]	; (8000aac <MX_TIM2_Init+0xe4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000a0c:	4b27      	ldr	r3, [pc, #156]	; (8000aac <MX_TIM2_Init+0xe4>)
 8000a0e:	2264      	movs	r2, #100	; 0x64
 8000a10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a12:	4b26      	ldr	r3, [pc, #152]	; (8000aac <MX_TIM2_Init+0xe4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a18:	4b24      	ldr	r3, [pc, #144]	; (8000aac <MX_TIM2_Init+0xe4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a1e:	4823      	ldr	r0, [pc, #140]	; (8000aac <MX_TIM2_Init+0xe4>)
 8000a20:	f003 f8dc 	bl	8003bdc <HAL_TIM_Base_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000a2a:	f000 f94f 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	481c      	ldr	r0, [pc, #112]	; (8000aac <MX_TIM2_Init+0xe4>)
 8000a3c:	f003 fa38 	bl	8003eb0 <HAL_TIM_ConfigClockSource>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000a46:	f000 f941 	bl	8000ccc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a4a:	4818      	ldr	r0, [pc, #96]	; (8000aac <MX_TIM2_Init+0xe4>)
 8000a4c:	f003 f915 	bl	8003c7a <HAL_TIM_PWM_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000a56:	f000 f939 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	4619      	mov	r1, r3
 8000a68:	4810      	ldr	r0, [pc, #64]	; (8000aac <MX_TIM2_Init+0xe4>)
 8000a6a:	f003 fd8f 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000a74:	f000 f92a 	bl	8000ccc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a78:	2360      	movs	r3, #96	; 0x60
 8000a7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2208      	movs	r2, #8
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4807      	ldr	r0, [pc, #28]	; (8000aac <MX_TIM2_Init+0xe4>)
 8000a90:	f003 f94c 	bl	8003d2c <HAL_TIM_PWM_ConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000a9a:	f000 f917 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a9e:	4803      	ldr	r0, [pc, #12]	; (8000aac <MX_TIM2_Init+0xe4>)
 8000aa0:	f000 fefe 	bl	80018a0 <HAL_TIM_MspPostInit>

}
 8000aa4:	bf00      	nop
 8000aa6:	3738      	adds	r7, #56	; 0x38
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200010d4 	.word	0x200010d4

08000ab0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000acc:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <MX_TIM3_Init+0x94>)
 8000ace:	4a1e      	ldr	r2, [pc, #120]	; (8000b48 <MX_TIM3_Init+0x98>)
 8000ad0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_TIM3_Init+0x94>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_TIM3_Init+0x94>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_TIM3_Init+0x94>)
 8000ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <MX_TIM3_Init+0x94>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MX_TIM3_Init+0x94>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000af2:	4814      	ldr	r0, [pc, #80]	; (8000b44 <MX_TIM3_Init+0x94>)
 8000af4:	f003 f872 	bl	8003bdc <HAL_TIM_Base_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000afe:	f000 f8e5 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480d      	ldr	r0, [pc, #52]	; (8000b44 <MX_TIM3_Init+0x94>)
 8000b10:	f003 f9ce 	bl	8003eb0 <HAL_TIM_ConfigClockSource>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000b1a:	f000 f8d7 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b26:	463b      	mov	r3, r7
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4806      	ldr	r0, [pc, #24]	; (8000b44 <MX_TIM3_Init+0x94>)
 8000b2c:	f003 fd2e 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000b36:	f000 f8c9 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000111c 	.word	0x2000111c
 8000b48:	40000400 	.word	0x40000400

08000b4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <MX_USART2_UART_Init+0x50>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b84:	f003 fd70 	bl	8004668 <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b8e:	f000 f89d 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200011c4 	.word	0x200011c4
 8000b9c:	40004400 	.word	0x40004400

08000ba0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <MX_DMA_Init+0x4c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <MX_DMA_Init+0x4c>)
 8000bb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <MX_DMA_Init+0x4c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	200c      	movs	r0, #12
 8000bc8:	f001 fa61 	bl	800208e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000bcc:	200c      	movs	r0, #12
 8000bce:	f001 fa7a 	bl	80020c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	200f      	movs	r0, #15
 8000bd8:	f001 fa59 	bl	800208e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000bdc:	200f      	movs	r0, #15
 8000bde:	f001 fa72 	bl	80020c6 <HAL_NVIC_EnableIRQ>

}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800

08000bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <MX_GPIO_Init+0xd0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a2c      	ldr	r2, [pc, #176]	; (8000cc0 <MX_GPIO_Init+0xd0>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <MX_GPIO_Init+0xd0>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <MX_GPIO_Init+0xd0>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a25      	ldr	r2, [pc, #148]	; (8000cc0 <MX_GPIO_Init+0xd0>)
 8000c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <MX_GPIO_Init+0xd0>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <MX_GPIO_Init+0xd0>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a1e      	ldr	r2, [pc, #120]	; (8000cc0 <MX_GPIO_Init+0xd0>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <MX_GPIO_Init+0xd0>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_GPIO_Init+0xd0>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <MX_GPIO_Init+0xd0>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_GPIO_Init+0xd0>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2120      	movs	r1, #32
 8000c7a:	4812      	ldr	r0, [pc, #72]	; (8000cc4 <MX_GPIO_Init+0xd4>)
 8000c7c:	f001 ff54 	bl	8002b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c86:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <MX_GPIO_Init+0xd8>)
 8000c98:	f001 fdc2 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c9c:	2320      	movs	r3, #32
 8000c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <MX_GPIO_Init+0xd4>)
 8000cb4:	f001 fdb4 	bl	8002820 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	; 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020000 	.word	0x40020000
 8000cc8:	40020800 	.word	0x40020800

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
}
 8000cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <Error_Handler+0x8>

08000cd6 <initMaze>:
#include "prng.h"

Maze maze;
Path path;

void initMaze(Maze* maze, uint8_t rows, uint8_t cols, uint8_t startX, uint8_t startY, uint8_t exitX, uint8_t exitY) {
 8000cd6:	b590      	push	{r4, r7, lr}
 8000cd8:	b087      	sub	sp, #28
 8000cda:	af02      	add	r7, sp, #8
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	70fb      	strb	r3, [r7, #3]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70bb      	strb	r3, [r7, #2]
 8000cec:	4613      	mov	r3, r2
 8000cee:	707b      	strb	r3, [r7, #1]
    uint8_t r; /* index variable */

    /* check input */
    if (rows <= 0) exit(1); /* number of rows must be greater than 0 */
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d102      	bne.n	8000cfc <initMaze+0x26>
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f003 ff96 	bl	8004c28 <exit>
    if (cols <= 0) exit(1); /* number of cols must be greater than 0 */
 8000cfc:	78bb      	ldrb	r3, [r7, #2]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <initMaze+0x32>
 8000d02:	2001      	movs	r0, #1
 8000d04:	f003 ff90 	bl	8004c28 <exit>

    /* allocate memory */
    maze->grid = (uint8_t**) malloc(rows * sizeof(uint8_t*));
 8000d08:	78fb      	ldrb	r3, [r7, #3]
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 ff9d 	bl	8004c4c <malloc>
 8000d12:	4603      	mov	r3, r0
 8000d14:	461a      	mov	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24
    for (r = 0; r < rows; r++) {
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	73fb      	strb	r3, [r7, #15]
 8000d1e:	e00d      	b.n	8000d3c <initMaze+0x66>
        maze->grid[r] = (uint8_t*) malloc(cols * sizeof(uint8_t));
 8000d20:	78b9      	ldrb	r1, [r7, #2]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	18d4      	adds	r4, r2, r3
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	f003 ff8d 	bl	8004c4c <malloc>
 8000d32:	4603      	mov	r3, r0
 8000d34:	6023      	str	r3, [r4, #0]
    for (r = 0; r < rows; r++) {
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
 8000d3c:	7bfa      	ldrb	r2, [r7, #15]
 8000d3e:	78fb      	ldrb	r3, [r7, #3]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d3ed      	bcc.n	8000d20 <initMaze+0x4a>
    }

    /* set attrs */
    maze->rows = rows;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	78fa      	ldrb	r2, [r7, #3]
 8000d48:	701a      	strb	r2, [r3, #0]
    maze->cols = cols;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	78ba      	ldrb	r2, [r7, #2]
 8000d4e:	705a      	strb	r2, [r3, #1]
    resetMaze(maze, startX, startY, exitX, exitY);
 8000d50:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8000d54:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d58:	7879      	ldrb	r1, [r7, #1]
 8000d5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	4603      	mov	r3, r0
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f000 f804 	bl	8000d70 <resetMaze>
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd90      	pop	{r4, r7, pc}

08000d70 <resetMaze>:

void resetMaze(Maze* maze, uint8_t startX, uint8_t startY, uint8_t exitX, uint8_t exitY) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	4608      	mov	r0, r1
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4603      	mov	r3, r0
 8000d80:	70fb      	strb	r3, [r7, #3]
 8000d82:	460b      	mov	r3, r1
 8000d84:	70bb      	strb	r3, [r7, #2]
 8000d86:	4613      	mov	r3, r2
 8000d88:	707b      	strb	r3, [r7, #1]
    uint8_t r, c; /* index variables */

    /* check input */
    if (exitX >= maze->cols || exitY >= maze->rows) exit(1);                                            /* exit point has to be inside the maze */
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	785b      	ldrb	r3, [r3, #1]
 8000d8e:	787a      	ldrb	r2, [r7, #1]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d204      	bcs.n	8000d9e <resetMaze+0x2e>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	7e3a      	ldrb	r2, [r7, #24]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d302      	bcc.n	8000da4 <resetMaze+0x34>
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f003 ff42 	bl	8004c28 <exit>
    if (!((startX == 0 || startX == maze->cols-1) || (startY == 0 || startY == maze->rows-1))) exit(1); /* start point has to be on edge of maze */
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d011      	beq.n	8000dce <resetMaze+0x5e>
 8000daa:	78fa      	ldrb	r2, [r7, #3]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	785b      	ldrb	r3, [r3, #1]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d00b      	beq.n	8000dce <resetMaze+0x5e>
 8000db6:	78bb      	ldrb	r3, [r7, #2]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d008      	beq.n	8000dce <resetMaze+0x5e>
 8000dbc:	78ba      	ldrb	r2, [r7, #2]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d002      	beq.n	8000dce <resetMaze+0x5e>
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f003 ff2d 	bl	8004c28 <exit>
    if (!((exitX == 0 || exitX == maze->cols-1) || (exitY == 0 || exitY == maze->rows-1))) exit(1);     /* exit point has to be on edge of maze */
 8000dce:	787b      	ldrb	r3, [r7, #1]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d011      	beq.n	8000df8 <resetMaze+0x88>
 8000dd4:	787a      	ldrb	r2, [r7, #1]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	785b      	ldrb	r3, [r3, #1]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d00b      	beq.n	8000df8 <resetMaze+0x88>
 8000de0:	7e3b      	ldrb	r3, [r7, #24]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d008      	beq.n	8000df8 <resetMaze+0x88>
 8000de6:	7e3a      	ldrb	r2, [r7, #24]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d002      	beq.n	8000df8 <resetMaze+0x88>
 8000df2:	2001      	movs	r0, #1
 8000df4:	f003 ff18 	bl	8004c28 <exit>
    if ((startX == 0 || startX == maze->cols-1) && (startY == 0 || startY == maze->rows-1)) exit(1);    /* start point must not be on corner of maze */
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d005      	beq.n	8000e0a <resetMaze+0x9a>
 8000dfe:	78fa      	ldrb	r2, [r7, #3]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	785b      	ldrb	r3, [r3, #1]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d10b      	bne.n	8000e22 <resetMaze+0xb2>
 8000e0a:	78bb      	ldrb	r3, [r7, #2]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d005      	beq.n	8000e1c <resetMaze+0xac>
 8000e10:	78ba      	ldrb	r2, [r7, #2]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d102      	bne.n	8000e22 <resetMaze+0xb2>
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f003 ff03 	bl	8004c28 <exit>
    if ((exitX == 0 || exitX == maze->cols-1) && (exitY == 0 || exitY == maze->rows-1)) exit(1);        /* exit point must not be on corner of maze */
 8000e22:	787b      	ldrb	r3, [r7, #1]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d005      	beq.n	8000e34 <resetMaze+0xc4>
 8000e28:	787a      	ldrb	r2, [r7, #1]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	785b      	ldrb	r3, [r3, #1]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d10b      	bne.n	8000e4c <resetMaze+0xdc>
 8000e34:	7e3b      	ldrb	r3, [r7, #24]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d005      	beq.n	8000e46 <resetMaze+0xd6>
 8000e3a:	7e3a      	ldrb	r2, [r7, #24]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d102      	bne.n	8000e4c <resetMaze+0xdc>
 8000e46:	2001      	movs	r0, #1
 8000e48:	f003 feee 	bl	8004c28 <exit>

    /* set attrs */
    maze->start.x = startX;
 8000e4c:	78fa      	ldrb	r2, [r7, #3]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	605a      	str	r2, [r3, #4]
    maze->start.y = startY;
 8000e52:	78ba      	ldrb	r2, [r7, #2]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	609a      	str	r2, [r3, #8]
    maze->start.prevX = -1;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e5e:	60da      	str	r2, [r3, #12]
    maze->start.prevY = -1;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e66:	611a      	str	r2, [r3, #16]
    maze->exit.x = exitX;
 8000e68:	787a      	ldrb	r2, [r7, #1]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	615a      	str	r2, [r3, #20]
    maze->exit.y = exitY;
 8000e6e:	7e3a      	ldrb	r2, [r7, #24]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	619a      	str	r2, [r3, #24]
    maze->exit.prevX = -1;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e7a:	61da      	str	r2, [r3, #28]
    maze->exit.prevY = -1;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e82:	621a      	str	r2, [r3, #32]

    /* init maze grid as WALLs */
    for (r = 0; r < maze->rows; r++) {
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e017      	b.n	8000eba <resetMaze+0x14a>
        for (c = 0; c < maze->cols; c++) {
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73bb      	strb	r3, [r7, #14]
 8000e8e:	e00c      	b.n	8000eaa <resetMaze+0x13a>
            maze->grid[r][c] = WALL;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]
        for (c = 0; c < maze->cols; c++) {
 8000ea4:	7bbb      	ldrb	r3, [r7, #14]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	73bb      	strb	r3, [r7, #14]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	785b      	ldrb	r3, [r3, #1]
 8000eae:	7bba      	ldrb	r2, [r7, #14]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d3ed      	bcc.n	8000e90 <resetMaze+0x120>
    for (r = 0; r < maze->rows; r++) {
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	7bfa      	ldrb	r2, [r7, #15]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d3e2      	bcc.n	8000e8a <resetMaze+0x11a>
        }
    }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <initPath>:

void initPath(Path* path, uint16_t length) {
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	807b      	strh	r3, [r7, #2]
    path->p = (Point *) malloc(length * sizeof(Point));
 8000eda:	887b      	ldrh	r3, [r7, #2]
 8000edc:	011b      	lsls	r3, r3, #4
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f003 feb4 	bl	8004c4c <malloc>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	601a      	str	r2, [r3, #0]
    
    if (path == NULL) exit(1);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d102      	bne.n	8000ef8 <initPath+0x2a>
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f003 fe98 	bl	8004c28 <exit>
    
    path->size = length;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	887a      	ldrh	r2, [r7, #2]
 8000efc:	809a      	strh	r2, [r3, #4]
    resetPath(path);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f000 f804 	bl	8000f0c <resetPath>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <resetPath>:

void resetPath(Path* path) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    for (uint16_t i = 0; i < path->size; i++) {
 8000f14:	2300      	movs	r3, #0
 8000f16:	81fb      	strh	r3, [r7, #14]
 8000f18:	e020      	b.n	8000f5c <resetPath+0x50>
        path->p[i].x = 0;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	89fb      	ldrh	r3, [r7, #14]
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	4413      	add	r3, r2
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
        path->p[i].y = 0;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	89fb      	ldrh	r3, [r7, #14]
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	4413      	add	r3, r2
 8000f32:	2200      	movs	r2, #0
 8000f34:	605a      	str	r2, [r3, #4]
        path->p[i].prevX = -1;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	89fb      	ldrh	r3, [r7, #14]
 8000f3c:	011b      	lsls	r3, r3, #4
 8000f3e:	4413      	add	r3, r2
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f44:	609a      	str	r2, [r3, #8]
        path->p[i].prevY = -1;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	89fb      	ldrh	r3, [r7, #14]
 8000f4c:	011b      	lsls	r3, r3, #4
 8000f4e:	4413      	add	r3, r2
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f54:	60da      	str	r2, [r3, #12]
    for (uint16_t i = 0; i < path->size; i++) {
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	81fb      	strh	r3, [r7, #14]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	889b      	ldrh	r3, [r3, #4]
 8000f60:	89fa      	ldrh	r2, [r7, #14]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d3d9      	bcc.n	8000f1a <resetPath+0xe>
    }

    path->count = 0;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	80da      	strh	r2, [r3, #6]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <pathPush>:

void pathPush(Path* path, Point* point) {
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
    path->p[path->count] = *point;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	88db      	ldrh	r3, [r3, #6]
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	441a      	add	r2, r3
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	4614      	mov	r4, r2
 8000f92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    path->count++;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	88db      	ldrh	r3, [r3, #6]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	80da      	strh	r2, [r3, #6]

    if (path->count == path->size) exit(1);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	88da      	ldrh	r2, [r3, #6]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	889b      	ldrh	r3, [r3, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d102      	bne.n	8000fb6 <pathPush+0x3e>
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f003 fe39 	bl	8004c28 <exit>
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd90      	pop	{r4, r7, pc}
	...

08000fc0 <carveMaze>:

void carveMaze(Maze *maze, uint8_t x, uint8_t y) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	70bb      	strb	r3, [r7, #2]
    int x1, y1; /* coords of next cell */
    int x2, y2; /* coords of cell after next cell */
    int dx, dy; /* direction deltas */
    int dir = 0; /* direction. 0 = right; 1 = down; 2 = left; else = up */
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
    int count = 0; /* counts directions failed */
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]

    /* get initial direction */
    dir = getRand(&rng) % 4;
 8000fd8:	4850      	ldr	r0, [pc, #320]	; (800111c <carveMaze+0x15c>)
 8000fda:	f000 fae0 	bl	800159e <getRand>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	425a      	negs	r2, r3
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	f002 0203 	and.w	r2, r2, #3
 8000fea:	bf58      	it	pl
 8000fec:	4253      	negpl	r3, r2
 8000fee:	61fb      	str	r3, [r7, #28]

    /* try all 4 directions */
    while (count < 4) {
 8000ff0:	e08a      	b.n	8001108 <carveMaze+0x148>
        /* reset directions */
        dx = 0; dy = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]

        /* translate dir to direction deltas */
        switch (dir) {
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d00f      	beq.n	8001020 <carveMaze+0x60>
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	2b02      	cmp	r3, #2
 8001004:	dc10      	bgt.n	8001028 <carveMaze+0x68>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <carveMaze+0x54>
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d003      	beq.n	800101a <carveMaze+0x5a>
 8001012:	e009      	b.n	8001028 <carveMaze+0x68>
            case 0:  dx = 1;  break; /* right */
 8001014:	2301      	movs	r3, #1
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
 8001018:	e00a      	b.n	8001030 <carveMaze+0x70>
            case 1:  dy = 1;  break; /* down */
 800101a:	2301      	movs	r3, #1
 800101c:	623b      	str	r3, [r7, #32]
 800101e:	e007      	b.n	8001030 <carveMaze+0x70>
            case 2:  dx = -1; break; /* left */
 8001020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
 8001026:	e003      	b.n	8001030 <carveMaze+0x70>
            default: dy = -1; break; /* up */
 8001028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800102c:	623b      	str	r3, [r7, #32]
 800102e:	bf00      	nop
        }

        /* calculate new positions based on direction */
        x1 = x + dx;
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001034:	4413      	add	r3, r2
 8001036:	617b      	str	r3, [r7, #20]
        y1 = y + dy;
 8001038:	78bb      	ldrb	r3, [r7, #2]
 800103a:	6a3a      	ldr	r2, [r7, #32]
 800103c:	4413      	add	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        x2 = x1 + dx;
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	4413      	add	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]
        y2 = y1 + dy;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	4413      	add	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
        
        /* check if next two cells are in bounds and are walls */
        if (x2 >= 0 && x2 < maze->cols /* next cell in bounds? */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	db4b      	blt.n	80010ee <carveMaze+0x12e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	785b      	ldrb	r3, [r3, #1]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4293      	cmp	r3, r2
 8001060:	da45      	bge.n	80010ee <carveMaze+0x12e>
         && y2 >= 0 && y2 < maze->rows /* next next cell in bounds? */
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db42      	blt.n	80010ee <carveMaze+0x12e>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	4293      	cmp	r3, r2
 8001072:	da3c      	bge.n	80010ee <carveMaze+0x12e>
         && maze->grid[y1][x1] == WALL /* next cell wall? */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	4413      	add	r3, r2
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d131      	bne.n	80010ee <carveMaze+0x12e>
         && maze->grid[y2][x2] == WALL) { /* next next cell wall? */   
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d126      	bne.n	80010ee <carveMaze+0x12e>

            /* carve path */
            maze->grid[y1][x1] = PATH;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	4413      	add	r3, r2
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
            maze->grid[y2][x2] = PATH;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]

            /* move to new position */
            x = x2; y = y2;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	70fb      	strb	r3, [r7, #3]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	70bb      	strb	r3, [r7, #2]

            /* get new direction and reset counter */
            dir = getRand(&rng) % 4;
 80010d0:	4812      	ldr	r0, [pc, #72]	; (800111c <carveMaze+0x15c>)
 80010d2:	f000 fa64 	bl	800159e <getRand>
 80010d6:	4603      	mov	r3, r0
 80010d8:	425a      	negs	r2, r3
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	f002 0203 	and.w	r2, r2, #3
 80010e2:	bf58      	it	pl
 80010e4:	4253      	negpl	r3, r2
 80010e6:	61fb      	str	r3, [r7, #28]
            count = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	e00c      	b.n	8001108 <carveMaze+0x148>
        } else {
            /* change direction and increment counter if carving not possible */
            dir = (dir + 1) % 4;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3301      	adds	r3, #1
 80010f2:	425a      	negs	r2, r3
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	f002 0203 	and.w	r2, r2, #3
 80010fc:	bf58      	it	pl
 80010fe:	4253      	negpl	r3, r2
 8001100:	61fb      	str	r3, [r7, #28]
            count++;
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	3301      	adds	r3, #1
 8001106:	61bb      	str	r3, [r7, #24]
    while (count < 4) {
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	2b03      	cmp	r3, #3
 800110c:	f77f af71 	ble.w	8000ff2 <carveMaze+0x32>
        }
    }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20001238 	.word	0x20001238

08001120 <generateMaze>:

void generateMaze(Maze* maze) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
    uint8_t x, y;
    
    /* carve the maze */
    for(y = 1; y < maze->rows; y += 2) {
 8001128:	2301      	movs	r3, #1
 800112a:	73bb      	strb	r3, [r7, #14]
 800112c:	e013      	b.n	8001156 <generateMaze+0x36>
        for(x = 1; x < maze->cols; x += 2) {
 800112e:	2301      	movs	r3, #1
 8001130:	73fb      	strb	r3, [r7, #15]
 8001132:	e008      	b.n	8001146 <generateMaze+0x26>
            carveMaze(maze, x, y);
 8001134:	7bba      	ldrb	r2, [r7, #14]
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	4619      	mov	r1, r3
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff40 	bl	8000fc0 <carveMaze>
        for(x = 1; x < maze->cols; x += 2) {
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	3302      	adds	r3, #2
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	785b      	ldrb	r3, [r3, #1]
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	429a      	cmp	r2, r3
 800114e:	d3f1      	bcc.n	8001134 <generateMaze+0x14>
    for(y = 1; y < maze->rows; y += 2) {
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	3302      	adds	r3, #2
 8001154:	73bb      	strb	r3, [r7, #14]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	7bba      	ldrb	r2, [r7, #14]
 800115c:	429a      	cmp	r2, r3
 800115e:	d3e6      	bcc.n	800112e <generateMaze+0xe>
        }
    }
    
    /* set start and exit. */
    maze->grid[maze->start.y][maze->start.x] = START;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	6852      	ldr	r2, [r2, #4]
 8001172:	4413      	add	r3, r2
 8001174:	2202      	movs	r2, #2
 8001176:	701a      	strb	r2, [r3, #0]
    maze->grid[maze->exit.y][maze->exit.x] = EXIT;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	6952      	ldr	r2, [r2, #20]
 800118a:	4413      	add	r3, r2
 800118c:	2203      	movs	r2, #3
 800118e:	701a      	strb	r2, [r3, #0]
}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <solveMaze>:

void solveMaze(Maze* maze, Path* path) {
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b0b3      	sub	sp, #204	; 0xcc
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]

    if (maze == NULL || maze->grid == NULL || path == NULL) exit(1);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <solveMaze+0x1e>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <solveMaze+0x1e>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d102      	bne.n	80011bc <solveMaze+0x24>
 80011b6:	2001      	movs	r0, #1
 80011b8:	f003 fd36 	bl	8004c28 <exit>

    Point current; /* current point in maze */
    Point next; /* next point to move to */
    Point directions[4]; /* possible points to reach from current */
    uint16_t i = 0; /* index var */
 80011bc:	2300      	movs	r3, #0
 80011be:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6

    /* keep track of visited cells */
    bool** visited = malloc(maze->rows * sizeof(bool*));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f003 fd3f 	bl	8004c4c <malloc>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    for (i = 0; i < maze->rows; i++) {
 80011d4:	2300      	movs	r3, #0
 80011d6:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 80011da:	e012      	b.n	8001202 <solveMaze+0x6a>
        visited[i] = calloc(maze->cols, sizeof(bool));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	785b      	ldrb	r3, [r3, #1]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80011ec:	18d4      	adds	r4, r2, r3
 80011ee:	2101      	movs	r1, #1
 80011f0:	f003 fcfc 	bl	8004bec <calloc>
 80011f4:	4603      	mov	r3, r0
 80011f6:	6023      	str	r3, [r4, #0]
    for (i = 0; i < maze->rows; i++) {
 80011f8:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80011fc:	3301      	adds	r3, #1
 80011fe:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b29b      	uxth	r3, r3
 8001208:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 800120c:	429a      	cmp	r2, r3
 800120e:	d3e5      	bcc.n	80011dc <solveMaze+0x44>
    }

    /* queue stores next possible points during BFS */
    Point* queue = malloc(maze->rows * maze->cols * sizeof(Point));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	785b      	ldrb	r3, [r3, #1]
 800121a:	fb02 f303 	mul.w	r3, r2, r3
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	4618      	mov	r0, r3
 8001222:	f003 fd13 	bl	8004c4c <malloc>
 8001226:	4603      	mov	r3, r0
 8001228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    uint16_t front = 0; /* start of queue where elements are removed */
 800122c:	2300      	movs	r3, #0
 800122e:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
    uint16_t rear = 0; /* end of queue where new elements are added */
 8001232:	2300      	movs	r3, #0
 8001234:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2

    /* enqueue start point and mark it as visited */
    pathPush(path, &(maze->start));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3304      	adds	r3, #4
 800123c:	4619      	mov	r1, r3
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f7ff fe9a 	bl	8000f78 <pathPush>
    queue[rear++] = maze->start;
 8001244:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	f8a7 20c2 	strh.w	r2, [r7, #194]	; 0xc2
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001254:	441a      	add	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4614      	mov	r4, r2
 800125a:	3304      	adds	r3, #4
 800125c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800125e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    visited[maze->start.y][maze->start.x] = true;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800126c:	4413      	add	r3, r2
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6852      	ldr	r2, [r2, #4]
 8001274:	4413      	add	r3, r2
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]

    /* BFS loop */
    while (front < rear) {
 800127a:	e14c      	b.n	8001516 <solveMaze+0x37e>
        /* dequeue point */
        current = queue[front++];
 800127c:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8001280:	1c5a      	adds	r2, r3, #1
 8001282:	f8a7 20c4 	strh.w	r2, [r7, #196]	; 0xc4
 8001286:	011b      	lsls	r3, r3, #4
 8001288:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800128c:	4413      	add	r3, r2
 800128e:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001292:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001294:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        /* exit found? */
        if (maze->grid[current.y][current.x] == EXIT) {
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800129c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80012aa:	4413      	add	r3, r2
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d17b      	bne.n	80013aa <solveMaze+0x212>
            /* backtrack */
            while (!(current.x == maze->start.x && current.y == maze->start.y)) {
 80012b2:	e055      	b.n	8001360 <solveMaze+0x1c8>
                maze->grid[current.y][current.x] = SOLUTION; /* mark point as solution */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80012c6:	4413      	add	r3, r2
 80012c8:	2204      	movs	r2, #4
 80012ca:	701a      	strb	r2, [r3, #0]
                pathPush(path, &(Point){current.x, current.y, -1, -1}); /* add point to solution path */
 80012cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	4619      	mov	r1, r3
 80012ea:	6838      	ldr	r0, [r7, #0]
 80012ec:	f7ff fe44 	bl	8000f78 <pathPush>

                /* find previous point in path */
                for (i = 0; i < rear; i++) {
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 80012f6:	e02d      	b.n	8001354 <solveMaze+0x1bc>
                    if (queue[i].x == current.x && queue[i].y == current.y) {
 80012f8:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001302:	4413      	add	r3, r2
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800130a:	429a      	cmp	r2, r3
 800130c:	d11d      	bne.n	800134a <solveMaze+0x1b2>
 800130e:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001318:	4413      	add	r3, r2
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001320:	429a      	cmp	r2, r3
 8001322:	d112      	bne.n	800134a <solveMaze+0x1b2>
                        current.x = queue[i].prevX;
 8001324:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800132e:	4413      	add	r3, r2
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                        current.y = queue[i].prevY;
 8001336:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001340:	4413      	add	r3, r2
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                        break;
 8001348:	e00a      	b.n	8001360 <solveMaze+0x1c8>
                for (i = 0; i < rear; i++) {
 800134a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800134e:	3301      	adds	r3, #1
 8001350:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8001354:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8001358:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800135c:	429a      	cmp	r2, r3
 800135e:	d3cb      	bcc.n	80012f8 <solveMaze+0x160>
            while (!(current.x == maze->start.x && current.y == maze->start.y)) {
 8001360:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	429a      	cmp	r2, r3
 800136a:	d1a3      	bne.n	80012b4 <solveMaze+0x11c>
 800136c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	429a      	cmp	r2, r3
 8001376:	d19d      	bne.n	80012b4 <solveMaze+0x11c>
                    }
                }
            }

            /* mark start and exit in maze */
            maze->grid[maze->start.y][maze->start.x] = START;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6852      	ldr	r2, [r2, #4]
 800138a:	4413      	add	r3, r2
 800138c:	2202      	movs	r2, #2
 800138e:	701a      	strb	r2, [r3, #0]
            maze->grid[maze->exit.y][maze->exit.x] = EXIT;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6952      	ldr	r2, [r2, #20]
 80013a2:	4413      	add	r3, r2
 80013a4:	2203      	movs	r2, #3
 80013a6:	701a      	strb	r2, [r3, #0]

            break; /* exit found and path traced */
 80013a8:	e0be      	b.n	8001528 <solveMaze+0x390>
        }

        /* add adjacent cells to queue if they are valid */
        directions[0] = (Point){current.x + 1, current.y, current.x, current.y}; /* right */
 80013aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80013ae:	1c58      	adds	r0, r3, #1
 80013b0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80013b4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80013b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013bc:	65b8      	str	r0, [r7, #88]	; 0x58
 80013be:	65f9      	str	r1, [r7, #92]	; 0x5c
 80013c0:	663a      	str	r2, [r7, #96]	; 0x60
 80013c2:	667b      	str	r3, [r7, #100]	; 0x64
        directions[1] = (Point){current.x - 1, current.y, current.x, current.y}; /* left */
 80013c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80013c8:	1e58      	subs	r0, r3, #1
 80013ca:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80013ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80013d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013d6:	66b8      	str	r0, [r7, #104]	; 0x68
 80013d8:	66f9      	str	r1, [r7, #108]	; 0x6c
 80013da:	673a      	str	r2, [r7, #112]	; 0x70
 80013dc:	677b      	str	r3, [r7, #116]	; 0x74
        directions[2] = (Point){current.x, current.y + 1, current.x, current.y}; /* down */
 80013de:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80013e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013e6:	1c59      	adds	r1, r3, #1
 80013e8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80013ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013f0:	67b8      	str	r0, [r7, #120]	; 0x78
 80013f2:	67f9      	str	r1, [r7, #124]	; 0x7c
 80013f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80013f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        directions[3] = (Point){current.x, current.y - 1, current.x, current.y}; /* up */
 80013fc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001404:	1e59      	subs	r1, r3, #1
 8001406:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800140a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800140e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8001412:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8001416:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800141a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

        for (i = 0; i < 4; i++) {
 800141e:	2300      	movs	r3, #0
 8001420:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8001424:	e068      	b.n	80014f8 <solveMaze+0x360>
            next = directions[i];
 8001426:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	33c8      	adds	r3, #200	; 0xc8
 800142e:	443b      	add	r3, r7
 8001430:	3b70      	subs	r3, #112	; 0x70
 8001432:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8001436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001438:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (next.x >= 0 && next.x < maze->cols && next.y >= 0 && next.y < maze->rows) { /* in bounds? */
 800143c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001440:	2b00      	cmp	r3, #0
 8001442:	db54      	blt.n	80014ee <solveMaze+0x356>
 8001444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	7852      	ldrb	r2, [r2, #1]
 800144c:	4293      	cmp	r3, r2
 800144e:	da4e      	bge.n	80014ee <solveMaze+0x356>
 8001450:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001454:	2b00      	cmp	r3, #0
 8001456:	db4a      	blt.n	80014ee <solveMaze+0x356>
 8001458:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	4293      	cmp	r3, r2
 8001462:	da44      	bge.n	80014ee <solveMaze+0x356>
                if (!visited[next.y][next.x] && (maze->grid[next.y][next.x] == PATH || maze->grid[next.y][next.x] == EXIT)) {
 8001464:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800146e:	4413      	add	r3, r2
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001476:	4413      	add	r3, r2
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	f083 0301 	eor.w	r3, r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d034      	beq.n	80014ee <solveMaze+0x356>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001488:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001496:	4413      	add	r3, r2
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00c      	beq.n	80014b8 <solveMaze+0x320>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d11a      	bne.n	80014ee <solveMaze+0x356>
                    queue[rear++] = next;  /* enqueue valid adjacent cell */
 80014b8:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80014bc:	1c5a      	adds	r2, r3, #1
 80014be:	f8a7 20c2 	strh.w	r2, [r7, #194]	; 0xc2
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80014c8:	4413      	add	r3, r2
 80014ca:	461c      	mov	r4, r3
 80014cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    visited[next.y][next.x] = true;
 80014d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014e0:	4413      	add	r3, r2
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80014e8:	4413      	add	r3, r2
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < 4; i++) {
 80014ee:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80014f2:	3301      	adds	r3, #1
 80014f4:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 80014f8:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	d992      	bls.n	8001426 <solveMaze+0x28e>
                }
            }
        }
        /* break if writing beyond allocated memory */
        if (rear >= maze->rows * maze->cols) break;
 8001500:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	785b      	ldrb	r3, [r3, #1]
 800150e:	fb01 f303 	mul.w	r3, r1, r3
 8001512:	429a      	cmp	r2, r3
 8001514:	da07      	bge.n	8001526 <solveMaze+0x38e>
    while (front < rear) {
 8001516:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 800151a:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800151e:	429a      	cmp	r2, r3
 8001520:	f4ff aeac 	bcc.w	800127c <solveMaze+0xe4>
 8001524:	e000      	b.n	8001528 <solveMaze+0x390>
        if (rear >= maze->rows * maze->cols) break;
 8001526:	bf00      	nop
    }

    /* clean up */
    for (i = 0; i < maze->rows; i++) {
 8001528:	2300      	movs	r3, #0
 800152a:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800152e:	e00e      	b.n	800154e <solveMaze+0x3b6>
        free(visited[i]);
 8001530:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800153a:	4413      	add	r3, r2
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f003 fb8c 	bl	8004c5c <free>
    for (i = 0; i < maze->rows; i++) {
 8001544:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001548:	3301      	adds	r3, #1
 800154a:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8001558:	429a      	cmp	r2, r3
 800155a:	d3e9      	bcc.n	8001530 <solveMaze+0x398>
    }
    free(visited);
 800155c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001560:	f003 fb7c 	bl	8004c5c <free>
    free(queue);
 8001564:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001568:	f003 fb78 	bl	8004c5c <free>
}
 800156c:	bf00      	nop
 800156e:	37cc      	adds	r7, #204	; 0xcc
 8001570:	46bd      	mov	sp, r7
 8001572:	bd90      	pop	{r4, r7, pc}

08001574 <initPRNG>:
#include "prng.h"

PseudoRNG rng;

/* init PRNG with a pre-generated list of random numbers */
void initPRNG(PseudoRNG* rng, int* numbers, int size) {
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
    rng->num = numbers;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	601a      	str	r2, [r3, #0]
    rng->ind = 0;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2200      	movs	r2, #0
 800158a:	605a      	str	r2, [r3, #4]
    rng->size = size;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	609a      	str	r2, [r3, #8]
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <getRand>:

/* get next random number */
int getRand(PseudoRNG *rng) {
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
    rng->ind = (rng->ind + 1) % rng->size;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	3301      	adds	r3, #1
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6892      	ldr	r2, [r2, #8]
 80015b0:	fb93 f1f2 	sdiv	r1, r3, r2
 80015b4:	fb01 f202 	mul.w	r2, r1, r2
 80015b8:	1a9a      	subs	r2, r3, r2
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	605a      	str	r2, [r3, #4]
    return rng->num[rng->ind];
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_MspInit+0x4c>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	4a0f      	ldr	r2, [pc, #60]	; (8001624 <HAL_MspInit+0x4c>)
 80015e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ec:	6453      	str	r3, [r2, #68]	; 0x44
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <HAL_MspInit+0x4c>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_MspInit+0x4c>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a08      	ldr	r2, [pc, #32]	; (8001624 <HAL_MspInit+0x4c>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_MspInit+0x4c>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001616:	2007      	movs	r0, #7
 8001618:	f000 fd2e 	bl	8002078 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40023800 	.word	0x40023800

08001628 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a44      	ldr	r2, [pc, #272]	; (8001758 <HAL_SPI_MspInit+0x130>)
 8001646:	4293      	cmp	r3, r2
 8001648:	f040 8081 	bne.w	800174e <HAL_SPI_MspInit+0x126>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	4b42      	ldr	r3, [pc, #264]	; (800175c <HAL_SPI_MspInit+0x134>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	4a41      	ldr	r2, [pc, #260]	; (800175c <HAL_SPI_MspInit+0x134>)
 8001656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165a:	6413      	str	r3, [r2, #64]	; 0x40
 800165c:	4b3f      	ldr	r3, [pc, #252]	; (800175c <HAL_SPI_MspInit+0x134>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	4b3b      	ldr	r3, [pc, #236]	; (800175c <HAL_SPI_MspInit+0x134>)
 800166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001670:	4a3a      	ldr	r2, [pc, #232]	; (800175c <HAL_SPI_MspInit+0x134>)
 8001672:	f043 0304 	orr.w	r3, r3, #4
 8001676:	6313      	str	r3, [r2, #48]	; 0x30
 8001678:	4b38      	ldr	r3, [pc, #224]	; (800175c <HAL_SPI_MspInit+0x134>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	4b34      	ldr	r3, [pc, #208]	; (800175c <HAL_SPI_MspInit+0x134>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	4a33      	ldr	r2, [pc, #204]	; (800175c <HAL_SPI_MspInit+0x134>)
 800168e:	f043 0302 	orr.w	r3, r3, #2
 8001692:	6313      	str	r3, [r2, #48]	; 0x30
 8001694:	4b31      	ldr	r3, [pc, #196]	; (800175c <HAL_SPI_MspInit+0x134>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016a0:	2308      	movs	r3, #8
 80016a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016b0:	2305      	movs	r3, #5
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	4829      	ldr	r0, [pc, #164]	; (8001760 <HAL_SPI_MspInit+0x138>)
 80016bc:	f001 f8b0 	bl	8002820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016d2:	2305      	movs	r3, #5
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	4821      	ldr	r0, [pc, #132]	; (8001764 <HAL_SPI_MspInit+0x13c>)
 80016de:	f001 f89f 	bl	8002820 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80016e2:	4b21      	ldr	r3, [pc, #132]	; (8001768 <HAL_SPI_MspInit+0x140>)
 80016e4:	4a21      	ldr	r2, [pc, #132]	; (800176c <HAL_SPI_MspInit+0x144>)
 80016e6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80016e8:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <HAL_SPI_MspInit+0x140>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016ee:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <HAL_SPI_MspInit+0x140>)
 80016f0:	2240      	movs	r2, #64	; 0x40
 80016f2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f4:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_SPI_MspInit+0x140>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <HAL_SPI_MspInit+0x140>)
 80016fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001700:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_SPI_MspInit+0x140>)
 8001704:	2200      	movs	r2, #0
 8001706:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <HAL_SPI_MspInit+0x140>)
 800170a:	2200      	movs	r2, #0
 800170c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <HAL_SPI_MspInit+0x140>)
 8001710:	2200      	movs	r2, #0
 8001712:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_SPI_MspInit+0x140>)
 8001716:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800171a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_SPI_MspInit+0x140>)
 800171e:	2200      	movs	r2, #0
 8001720:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001722:	4811      	ldr	r0, [pc, #68]	; (8001768 <HAL_SPI_MspInit+0x140>)
 8001724:	f000 fcea 	bl	80020fc <HAL_DMA_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 800172e:	f7ff facd 	bl	8000ccc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a0c      	ldr	r2, [pc, #48]	; (8001768 <HAL_SPI_MspInit+0x140>)
 8001736:	649a      	str	r2, [r3, #72]	; 0x48
 8001738:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <HAL_SPI_MspInit+0x140>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	2024      	movs	r0, #36	; 0x24
 8001744:	f000 fca3 	bl	800208e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001748:	2024      	movs	r0, #36	; 0x24
 800174a:	f000 fcbc 	bl	80020c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40003800 	.word	0x40003800
 800175c:	40023800 	.word	0x40023800
 8001760:	40020800 	.word	0x40020800
 8001764:	40020400 	.word	0x40020400
 8001768:	20001074 	.word	0x20001074
 800176c:	40026070 	.word	0x40026070

08001770 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001790:	d164      	bne.n	800185c <HAL_TIM_Base_MspInit+0xec>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	4b3d      	ldr	r3, [pc, #244]	; (800188c <HAL_TIM_Base_MspInit+0x11c>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a3c      	ldr	r2, [pc, #240]	; (800188c <HAL_TIM_Base_MspInit+0x11c>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b3a      	ldr	r3, [pc, #232]	; (800188c <HAL_TIM_Base_MspInit+0x11c>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b36      	ldr	r3, [pc, #216]	; (800188c <HAL_TIM_Base_MspInit+0x11c>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a35      	ldr	r2, [pc, #212]	; (800188c <HAL_TIM_Base_MspInit+0x11c>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b33      	ldr	r3, [pc, #204]	; (800188c <HAL_TIM_Base_MspInit+0x11c>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017dc:	2301      	movs	r3, #1
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4619      	mov	r1, r3
 80017e6:	482a      	ldr	r0, [pc, #168]	; (8001890 <HAL_TIM_Base_MspInit+0x120>)
 80017e8:	f001 f81a 	bl	8002820 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 80017ec:	4b29      	ldr	r3, [pc, #164]	; (8001894 <HAL_TIM_Base_MspInit+0x124>)
 80017ee:	4a2a      	ldr	r2, [pc, #168]	; (8001898 <HAL_TIM_Base_MspInit+0x128>)
 80017f0:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 80017f2:	4b28      	ldr	r3, [pc, #160]	; (8001894 <HAL_TIM_Base_MspInit+0x124>)
 80017f4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80017f8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <HAL_TIM_Base_MspInit+0x124>)
 80017fc:	2240      	movs	r2, #64	; 0x40
 80017fe:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <HAL_TIM_Base_MspInit+0x124>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <HAL_TIM_Base_MspInit+0x124>)
 8001808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800180c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_TIM_Base_MspInit+0x124>)
 8001810:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001814:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001816:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <HAL_TIM_Base_MspInit+0x124>)
 8001818:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800181c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_TIM_Base_MspInit+0x124>)
 8001820:	2200      	movs	r2, #0
 8001822:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_TIM_Base_MspInit+0x124>)
 8001826:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800182a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_TIM_Base_MspInit+0x124>)
 800182e:	2200      	movs	r2, #0
 8001830:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 8001832:	4818      	ldr	r0, [pc, #96]	; (8001894 <HAL_TIM_Base_MspInit+0x124>)
 8001834:	f000 fc62 	bl	80020fc <HAL_DMA_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_TIM_Base_MspInit+0xd2>
    {
      Error_Handler();
 800183e:	f7ff fa45 	bl	8000ccc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a13      	ldr	r2, [pc, #76]	; (8001894 <HAL_TIM_Base_MspInit+0x124>)
 8001846:	62da      	str	r2, [r3, #44]	; 0x2c
 8001848:	4a12      	ldr	r2, [pc, #72]	; (8001894 <HAL_TIM_Base_MspInit+0x124>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a10      	ldr	r2, [pc, #64]	; (8001894 <HAL_TIM_Base_MspInit+0x124>)
 8001852:	621a      	str	r2, [r3, #32]
 8001854:	4a0f      	ldr	r2, [pc, #60]	; (8001894 <HAL_TIM_Base_MspInit+0x124>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800185a:	e012      	b.n	8001882 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0e      	ldr	r2, [pc, #56]	; (800189c <HAL_TIM_Base_MspInit+0x12c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d10d      	bne.n	8001882 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_TIM_Base_MspInit+0x11c>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a07      	ldr	r2, [pc, #28]	; (800188c <HAL_TIM_Base_MspInit+0x11c>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_TIM_Base_MspInit+0x11c>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
}
 8001882:	bf00      	nop
 8001884:	3728      	adds	r7, #40	; 0x28
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800
 8001890:	40020000 	.word	0x40020000
 8001894:	20001164 	.word	0x20001164
 8001898:	40026028 	.word	0x40026028
 800189c:	40000400 	.word	0x40000400

080018a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c0:	d11e      	bne.n	8001900 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_TIM_MspPostInit+0x68>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a0f      	ldr	r2, [pc, #60]	; (8001908 <HAL_TIM_MspPostInit+0x68>)
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <HAL_TIM_MspPostInit+0x68>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018f0:	2301      	movs	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	4619      	mov	r1, r3
 80018fa:	4804      	ldr	r0, [pc, #16]	; (800190c <HAL_TIM_MspPostInit+0x6c>)
 80018fc:	f000 ff90 	bl	8002820 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001900:	bf00      	nop
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	40020400 	.word	0x40020400

08001910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a19      	ldr	r2, [pc, #100]	; (8001994 <HAL_UART_MspInit+0x84>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d12b      	bne.n	800198a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_UART_MspInit+0x88>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	4a17      	ldr	r2, [pc, #92]	; (8001998 <HAL_UART_MspInit+0x88>)
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	6413      	str	r3, [r2, #64]	; 0x40
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_UART_MspInit+0x88>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_UART_MspInit+0x88>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a10      	ldr	r2, [pc, #64]	; (8001998 <HAL_UART_MspInit+0x88>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_UART_MspInit+0x88>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800196a:	230c      	movs	r3, #12
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800197a:	2307      	movs	r3, #7
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <HAL_UART_MspInit+0x8c>)
 8001986:	f000 ff4b 	bl	8002820 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40004400 	.word	0x40004400
 8001998:	40023800 	.word	0x40023800
 800199c:	40020000 	.word	0x40020000

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <NMI_Handler+0x4>

080019a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <MemManage_Handler+0x4>

080019b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <BusFault_Handler+0x4>

080019b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <UsageFault_Handler+0x4>

080019be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ec:	f000 fa30 	bl	8001e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <DMA1_Stream1_IRQHandler+0x10>)
 80019fa:	f000 fca7 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20001164 	.word	0x20001164

08001a08 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <DMA1_Stream4_IRQHandler+0x10>)
 8001a0e:	f000 fc9d 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20001074 	.word	0x20001074

08001a1c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <SPI2_IRQHandler+0x10>)
 8001a22:	f001 fe73 	bl	800370c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000101c 	.word	0x2000101c

08001a30 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a3a:	f003 f9db 	bl	8004df4 <__errno>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2216      	movs	r2, #22
 8001a42:	601a      	str	r2, [r3, #0]
  return -1;
 8001a44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_exit>:

void _exit (int status)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ffe7 	bl	8001a30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a62:	e7fe      	b.n	8001a62 <_exit+0x12>

08001a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a6c:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <_sbrk+0x5c>)
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <_sbrk+0x60>)
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <_sbrk+0x64>)
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <_sbrk+0x68>)
 8001a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d207      	bcs.n	8001aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a94:	f003 f9ae 	bl	8004df4 <__errno>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aa2:	e009      	b.n	8001ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <_sbrk+0x64>)
 8001ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20018000 	.word	0x20018000
 8001ac4:	00000400 	.word	0x00000400
 8001ac8:	20001244 	.word	0x20001244
 8001acc:	20006dd8 	.word	0x20006dd8

08001ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <SystemInit+0x20>)
 8001ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ada:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <SystemInit+0x20>)
 8001adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <ws2812_init>:

uint8_t ws2812_buffer[WS2812_BUFFER_SIZE];

// set all pixels to 0 (off)
void ws2812_init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
  memset(ws2812_buffer, 0, WS2812_BUFFER_SIZE); // fill buffer with 0s
 8001afa:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8001afe:	2100      	movs	r1, #0
 8001b00:	480b      	ldr	r0, [pc, #44]	; (8001b30 <ws2812_init+0x3c>)
 8001b02:	f003 f95f 	bl	8004dc4 <memset>
  HAL_SPI_Transmit_DMA(&hspi2, ws2812_buffer, WS2812_BUFFER_SIZE); // write buffer to LEDs
 8001b06:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8001b0a:	4909      	ldr	r1, [pc, #36]	; (8001b30 <ws2812_init+0x3c>)
 8001b0c:	4809      	ldr	r0, [pc, #36]	; (8001b34 <ws2812_init+0x40>)
 8001b0e:	f001 fd47 	bl	80035a0 <HAL_SPI_Transmit_DMA>
  ws2812_pixel_all(&(ColorRGB_t){0, 0, 0}); // set LEDs to black
 8001b12:	2300      	movs	r3, #0
 8001b14:	713b      	strb	r3, [r7, #4]
 8001b16:	2300      	movs	r3, #0
 8001b18:	717b      	strb	r3, [r7, #5]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	71bb      	strb	r3, [r7, #6]
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 f879 	bl	8001c18 <ws2812_pixel_all>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20001248 	.word	0x20001248
 8001b34:	2000101c 	.word	0x2000101c

08001b38 <ws2812_pixel>:

// set one pixel to given color
void ws2812_pixel(uint8_t _x, uint8_t _y, ColorRGB_t* color)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	603a      	str	r2, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
 8001b44:	460b      	mov	r3, r1
 8001b46:	71bb      	strb	r3, [r7, #6]
  uint8_t* ptr = &ws2812_buffer[24 * coord2Index(_x, _y)];
 8001b48:	79ba      	ldrb	r2, [r7, #6]
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f8de 	bl	8001d10 <coord2Index>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <ws2812_pixel+0xdc>)
 8001b64:	4413      	add	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
  WS2812_FILL_BUFFER(color->g);
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	72fb      	strb	r3, [r7, #11]
 8001b6c:	e014      	b.n	8001b98 <ws2812_pixel+0x60>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	789a      	ldrb	r2, [r3, #2]
 8001b72:	7afb      	ldrb	r3, [r7, #11]
 8001b74:	4013      	ands	r3, r2
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <ws2812_pixel+0x50>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	60fa      	str	r2, [r7, #12]
 8001b82:	22fc      	movs	r2, #252	; 0xfc
 8001b84:	701a      	strb	r2, [r3, #0]
 8001b86:	e004      	b.n	8001b92 <ws2812_pixel+0x5a>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	60fa      	str	r2, [r7, #12]
 8001b8e:	2280      	movs	r2, #128	; 0x80
 8001b90:	701a      	strb	r2, [r3, #0]
 8001b92:	7afb      	ldrb	r3, [r7, #11]
 8001b94:	085b      	lsrs	r3, r3, #1
 8001b96:	72fb      	strb	r3, [r7, #11]
 8001b98:	7afb      	ldrb	r3, [r7, #11]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1e7      	bne.n	8001b6e <ws2812_pixel+0x36>
  WS2812_FILL_BUFFER(color->r);
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	72bb      	strb	r3, [r7, #10]
 8001ba2:	e014      	b.n	8001bce <ws2812_pixel+0x96>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	785a      	ldrb	r2, [r3, #1]
 8001ba8:	7abb      	ldrb	r3, [r7, #10]
 8001baa:	4013      	ands	r3, r2
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <ws2812_pixel+0x86>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	60fa      	str	r2, [r7, #12]
 8001bb8:	22fc      	movs	r2, #252	; 0xfc
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	e004      	b.n	8001bc8 <ws2812_pixel+0x90>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	60fa      	str	r2, [r7, #12]
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	7abb      	ldrb	r3, [r7, #10]
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	72bb      	strb	r3, [r7, #10]
 8001bce:	7abb      	ldrb	r3, [r7, #10]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1e7      	bne.n	8001ba4 <ws2812_pixel+0x6c>
  WS2812_FILL_BUFFER(color->b);
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	727b      	strb	r3, [r7, #9]
 8001bd8:	e014      	b.n	8001c04 <ws2812_pixel+0xcc>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	781a      	ldrb	r2, [r3, #0]
 8001bde:	7a7b      	ldrb	r3, [r7, #9]
 8001be0:	4013      	ands	r3, r2
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <ws2812_pixel+0xbc>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	60fa      	str	r2, [r7, #12]
 8001bee:	22fc      	movs	r2, #252	; 0xfc
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	e004      	b.n	8001bfe <ws2812_pixel+0xc6>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	60fa      	str	r2, [r7, #12]
 8001bfa:	2280      	movs	r2, #128	; 0x80
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	7a7b      	ldrb	r3, [r7, #9]
 8001c00:	085b      	lsrs	r3, r3, #1
 8001c02:	727b      	strb	r3, [r7, #9]
 8001c04:	7a7b      	ldrb	r3, [r7, #9]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1e7      	bne.n	8001bda <ws2812_pixel+0xa2>
}
 8001c0a:	bf00      	nop
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20001248 	.word	0x20001248

08001c18 <ws2812_pixel_all>:

// set all pixels to given color
void ws2812_pixel_all(ColorRGB_t* color)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint8_t* ptr = ws2812_buffer;
 8001c20:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <ws2812_pixel_all+0xd0>)
 8001c22:	617b      	str	r3, [r7, #20]
  for (uint16_t i = 0; i < WS2812_NUM_LEDS; ++i) 
 8001c24:	2300      	movs	r3, #0
 8001c26:	827b      	strh	r3, [r7, #18]
 8001c28:	e053      	b.n	8001cd2 <ws2812_pixel_all+0xba>
  {
    WS2812_FILL_BUFFER(color->g);
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	747b      	strb	r3, [r7, #17]
 8001c2e:	e014      	b.n	8001c5a <ws2812_pixel_all+0x42>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	789a      	ldrb	r2, [r3, #2]
 8001c34:	7c7b      	ldrb	r3, [r7, #17]
 8001c36:	4013      	ands	r3, r2
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d005      	beq.n	8001c4a <ws2812_pixel_all+0x32>
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	617a      	str	r2, [r7, #20]
 8001c44:	22fc      	movs	r2, #252	; 0xfc
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	e004      	b.n	8001c54 <ws2812_pixel_all+0x3c>
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	617a      	str	r2, [r7, #20]
 8001c50:	2280      	movs	r2, #128	; 0x80
 8001c52:	701a      	strb	r2, [r3, #0]
 8001c54:	7c7b      	ldrb	r3, [r7, #17]
 8001c56:	085b      	lsrs	r3, r3, #1
 8001c58:	747b      	strb	r3, [r7, #17]
 8001c5a:	7c7b      	ldrb	r3, [r7, #17]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1e7      	bne.n	8001c30 <ws2812_pixel_all+0x18>
    WS2812_FILL_BUFFER(color->r);
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	743b      	strb	r3, [r7, #16]
 8001c64:	e014      	b.n	8001c90 <ws2812_pixel_all+0x78>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	785a      	ldrb	r2, [r3, #1]
 8001c6a:	7c3b      	ldrb	r3, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <ws2812_pixel_all+0x68>
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	617a      	str	r2, [r7, #20]
 8001c7a:	22fc      	movs	r2, #252	; 0xfc
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	e004      	b.n	8001c8a <ws2812_pixel_all+0x72>
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	617a      	str	r2, [r7, #20]
 8001c86:	2280      	movs	r2, #128	; 0x80
 8001c88:	701a      	strb	r2, [r3, #0]
 8001c8a:	7c3b      	ldrb	r3, [r7, #16]
 8001c8c:	085b      	lsrs	r3, r3, #1
 8001c8e:	743b      	strb	r3, [r7, #16]
 8001c90:	7c3b      	ldrb	r3, [r7, #16]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1e7      	bne.n	8001c66 <ws2812_pixel_all+0x4e>
    WS2812_FILL_BUFFER(color->b);
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	73fb      	strb	r3, [r7, #15]
 8001c9a:	e014      	b.n	8001cc6 <ws2812_pixel_all+0xae>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <ws2812_pixel_all+0x9e>
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	617a      	str	r2, [r7, #20]
 8001cb0:	22fc      	movs	r2, #252	; 0xfc
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	e004      	b.n	8001cc0 <ws2812_pixel_all+0xa8>
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	617a      	str	r2, [r7, #20]
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	701a      	strb	r2, [r3, #0]
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	085b      	lsrs	r3, r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1e7      	bne.n	8001c9c <ws2812_pixel_all+0x84>
  for (uint16_t i = 0; i < WS2812_NUM_LEDS; ++i) 
 8001ccc:	8a7b      	ldrh	r3, [r7, #18]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	827b      	strh	r3, [r7, #18]
 8001cd2:	8a7b      	ldrh	r3, [r7, #18]
 8001cd4:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8001cd8:	d3a7      	bcc.n	8001c2a <ws2812_pixel_all+0x12>
  }
}
 8001cda:	bf00      	nop
 8001cdc:	bf00      	nop
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	20001248 	.word	0x20001248

08001cec <HAL_SPI_TxCpltCallback>:
    }
  }
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  // Restart transmission when buffer tx is completed
  HAL_SPI_Transmit_DMA(&hspi2, ws2812_buffer, WS2812_BUFFER_SIZE);
 8001cf4:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8001cf8:	4903      	ldr	r1, [pc, #12]	; (8001d08 <HAL_SPI_TxCpltCallback+0x1c>)
 8001cfa:	4804      	ldr	r0, [pc, #16]	; (8001d0c <HAL_SPI_TxCpltCallback+0x20>)
 8001cfc:	f001 fc50 	bl	80035a0 <HAL_SPI_Transmit_DMA>
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20001248 	.word	0x20001248
 8001d0c:	2000101c 	.word	0x2000101c

08001d10 <coord2Index>:

uint16_t coord2Index (uint8_t _x, uint8_t _y)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	460a      	mov	r2, r1
 8001d1a:	71fb      	strb	r3, [r7, #7]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	71bb      	strb	r3, [r7, #6]
{ 176,177,178,179,180,181,182,183,368,369,370,371,372,373,374,375,560,561,562,563,564,565,566,567,752,753,754,755,756,757,758,759,944,945,946,947,948,949,950,951 },
{ 184,185,186,187,188,189,190,191,376,377,378,379,380,381,382,383,568,569,570,571,572,573,574,575,760,761,762,763,764,765,766,767,952,953,954,955,956,957,958,959 }

};

  if (_x > WS2812_NUM_LEDS_X - 1) _x = WS2812_NUM_LEDS_X - 1;
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	2b27      	cmp	r3, #39	; 0x27
 8001d24:	d901      	bls.n	8001d2a <coord2Index+0x1a>
 8001d26:	2327      	movs	r3, #39	; 0x27
 8001d28:	71fb      	strb	r3, [r7, #7]
  if (_y > WS2812_NUM_LEDS_Y - 1) _y = WS2812_NUM_LEDS_Y - 1;
 8001d2a:	79bb      	ldrb	r3, [r7, #6]
 8001d2c:	2b17      	cmp	r3, #23
 8001d2e:	d901      	bls.n	8001d34 <coord2Index+0x24>
 8001d30:	2317      	movs	r3, #23
 8001d32:	71bb      	strb	r3, [r7, #6]

  return lookup_table[_y][_x];
 8001d34:	79ba      	ldrb	r2, [r7, #6]
 8001d36:	79f9      	ldrb	r1, [r7, #7]
 8001d38:	4806      	ldr	r0, [pc, #24]	; (8001d54 <coord2Index+0x44>)
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	440b      	add	r3, r1
 8001d44:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	08004f84 	.word	0x08004f84

08001d58 <Reset_Handler>:
 8001d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d90 <LoopFillZerobss+0x12>
 8001d5c:	480d      	ldr	r0, [pc, #52]	; (8001d94 <LoopFillZerobss+0x16>)
 8001d5e:	490e      	ldr	r1, [pc, #56]	; (8001d98 <LoopFillZerobss+0x1a>)
 8001d60:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <LoopFillZerobss+0x1e>)
 8001d62:	2300      	movs	r3, #0
 8001d64:	e002      	b.n	8001d6c <LoopCopyDataInit>

08001d66 <CopyDataInit>:
 8001d66:	58d4      	ldr	r4, [r2, r3]
 8001d68:	50c4      	str	r4, [r0, r3]
 8001d6a:	3304      	adds	r3, #4

08001d6c <LoopCopyDataInit>:
 8001d6c:	18c4      	adds	r4, r0, r3
 8001d6e:	428c      	cmp	r4, r1
 8001d70:	d3f9      	bcc.n	8001d66 <CopyDataInit>
 8001d72:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <LoopFillZerobss+0x22>)
 8001d74:	4c0b      	ldr	r4, [pc, #44]	; (8001da4 <LoopFillZerobss+0x26>)
 8001d76:	2300      	movs	r3, #0
 8001d78:	e001      	b.n	8001d7e <LoopFillZerobss>

08001d7a <FillZerobss>:
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	3204      	adds	r2, #4

08001d7e <LoopFillZerobss>:
 8001d7e:	42a2      	cmp	r2, r4
 8001d80:	d3fb      	bcc.n	8001d7a <FillZerobss>
 8001d82:	f7ff fea5 	bl	8001ad0 <SystemInit>
 8001d86:	f003 f83b 	bl	8004e00 <__libc_init_array>
 8001d8a:	f7fe fbff 	bl	800058c <main>
 8001d8e:	4770      	bx	lr
 8001d90:	20018000 	.word	0x20018000
 8001d94:	20000000 	.word	0x20000000
 8001d98:	20000ff8 	.word	0x20000ff8
 8001d9c:	0800571c 	.word	0x0800571c
 8001da0:	20000ff8 	.word	0x20000ff8
 8001da4:	20006dd4 	.word	0x20006dd4

08001da8 <ADC_IRQHandler>:
 8001da8:	e7fe      	b.n	8001da8 <ADC_IRQHandler>
	...

08001dac <HAL_Init>:
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_Init+0x40>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <HAL_Init+0x40>)
 8001db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_Init+0x40>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <HAL_Init+0x40>)
 8001dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_Init+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a07      	ldr	r2, [pc, #28]	; (8001dec <HAL_Init+0x40>)
 8001dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f000 f94f 	bl	8002078 <HAL_NVIC_SetPriorityGrouping>
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f000 f808 	bl	8001df0 <HAL_InitTick>
 8001de0:	f7ff fbfa 	bl	80015d8 <HAL_MspInit>
 8001de4:	2300      	movs	r3, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023c00 	.word	0x40023c00

08001df0 <HAL_InitTick>:
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_InitTick+0x54>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_InitTick+0x58>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 f967 	bl	80020e2 <HAL_SYSTICK_Config>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_InitTick+0x2e>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00e      	b.n	8001e3c <HAL_InitTick+0x4c>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b0f      	cmp	r3, #15
 8001e22:	d80a      	bhi.n	8001e3a <HAL_InitTick+0x4a>
 8001e24:	2200      	movs	r2, #0
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e2c:	f000 f92f 	bl	800208e <HAL_NVIC_SetPriority>
 8001e30:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <HAL_InitTick+0x5c>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	2300      	movs	r3, #0
 8001e38:	e000      	b.n	8001e3c <HAL_InitTick+0x4c>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000f9c 	.word	0x20000f9c
 8001e48:	20000fa4 	.word	0x20000fa4
 8001e4c:	20000fa0 	.word	0x20000fa0

08001e50 <HAL_IncTick>:
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_IncTick+0x20>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_IncTick+0x24>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <HAL_IncTick+0x24>)
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000fa4 	.word	0x20000fa4
 8001e74:	20006c84 	.word	0x20006c84

08001e78 <HAL_GetTick>:
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_GetTick+0x14>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20006c84 	.word	0x20006c84

08001e90 <HAL_Delay>:
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	f7ff ffee 	bl	8001e78 <HAL_GetTick>
 8001e9c:	60b8      	str	r0, [r7, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ea8:	d005      	beq.n	8001eb6 <HAL_Delay+0x26>
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_Delay+0x44>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	bf00      	nop
 8001eb8:	f7ff ffde 	bl	8001e78 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d8f7      	bhi.n	8001eb8 <HAL_Delay+0x28>
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000fa4 	.word	0x20000fa4

08001ed8 <__NVIC_SetPriorityGrouping>:
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <__NVIC_SetPriorityGrouping+0x44>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	021a      	lsls	r2, r3, #8
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	60d3      	str	r3, [r2, #12]
 8001f10:	bf00      	nop
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_GetPriorityGrouping>:
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <__NVIC_GetPriorityGrouping+0x18>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	4618      	mov	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <__NVIC_EnableIRQ>:
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	db0b      	blt.n	8001f66 <__NVIC_EnableIRQ+0x2a>
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	f003 021f 	and.w	r2, r3, #31
 8001f54:	4907      	ldr	r1, [pc, #28]	; (8001f74 <__NVIC_EnableIRQ+0x38>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	095b      	lsrs	r3, r3, #5
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000e100 	.word	0xe000e100

08001f78 <__NVIC_SetPriority>:
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	71fb      	strb	r3, [r7, #7]
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	db0a      	blt.n	8001fa2 <__NVIC_SetPriority+0x2a>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	490c      	ldr	r1, [pc, #48]	; (8001fc4 <__NVIC_SetPriority+0x4c>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	0112      	lsls	r2, r2, #4
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001fa0:	e00a      	b.n	8001fb8 <__NVIC_SetPriority+0x40>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4908      	ldr	r1, [pc, #32]	; (8001fc8 <__NVIC_SetPriority+0x50>)
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	3b04      	subs	r3, #4
 8001fb0:	0112      	lsls	r2, r2, #4
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	761a      	strb	r2, [r3, #24]
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000e100 	.word	0xe000e100
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <NVIC_EncodePriority>:
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	; 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	61fb      	str	r3, [r7, #28]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f1c3 0307 	rsb	r3, r3, #7
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	bf28      	it	cs
 8001fea:	2304      	movcs	r3, #4
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d902      	bls.n	8001ffc <NVIC_EncodePriority+0x30>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3b03      	subs	r3, #3
 8001ffa:	e000      	b.n	8001ffe <NVIC_EncodePriority+0x32>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43da      	mvns	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	401a      	ands	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	409a      	lsls	r2, r3
 8002014:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	43d9      	mvns	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	400b      	ands	r3, r1
 8002024:	4313      	orrs	r3, r2
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	; 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <SysTick_Config>:
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002044:	d301      	bcc.n	800204a <SysTick_Config+0x16>
 8002046:	2301      	movs	r3, #1
 8002048:	e00f      	b.n	800206a <SysTick_Config+0x36>
 800204a:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <SysTick_Config+0x40>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	6053      	str	r3, [r2, #4]
 8002052:	210f      	movs	r1, #15
 8002054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002058:	f7ff ff8e 	bl	8001f78 <__NVIC_SetPriority>
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <SysTick_Config+0x40>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
 8002062:	4b04      	ldr	r3, [pc, #16]	; (8002074 <SysTick_Config+0x40>)
 8002064:	2207      	movs	r2, #7
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	2300      	movs	r3, #0
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	e000e010 	.word	0xe000e010

08002078 <HAL_NVIC_SetPriorityGrouping>:
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ff29 	bl	8001ed8 <__NVIC_SetPriorityGrouping>
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_SetPriority>:
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	73fb      	strb	r3, [r7, #15]
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	f7ff ff3e 	bl	8001f20 <__NVIC_GetPriorityGrouping>
 80020a4:	6178      	str	r0, [r7, #20]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	6978      	ldr	r0, [r7, #20]
 80020ac:	f7ff ff8e 	bl	8001fcc <NVIC_EncodePriority>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff5d 	bl	8001f78 <__NVIC_SetPriority>
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_EnableIRQ>:
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	71fb      	strb	r3, [r7, #7]
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff31 	bl	8001f3c <__NVIC_EnableIRQ>
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_SYSTICK_Config>:
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ffa2 	bl	8002034 <SysTick_Config>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_DMA_Init>:
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	f7ff feb6 	bl	8001e78 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_DMA_Init+0x1c>
 8002114:	2301      	movs	r3, #1
 8002116:	e099      	b.n	800224c <HAL_DMA_Init+0x150>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0201 	bic.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	e00f      	b.n	800215a <HAL_DMA_Init+0x5e>
 800213a:	f7ff fe9d 	bl	8001e78 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b05      	cmp	r3, #5
 8002146:	d908      	bls.n	800215a <HAL_DMA_Init+0x5e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2220      	movs	r2, #32
 800214c:	655a      	str	r2, [r3, #84]	; 0x54
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2203      	movs	r2, #3
 8002152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002156:	2303      	movs	r3, #3
 8002158:	e078      	b.n	800224c <HAL_DMA_Init+0x150>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1e8      	bne.n	800213a <HAL_DMA_Init+0x3e>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	4b38      	ldr	r3, [pc, #224]	; (8002254 <HAL_DMA_Init+0x158>)
 8002174:	4013      	ands	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d107      	bne.n	80021c4 <HAL_DMA_Init+0xc8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	4313      	orrs	r3, r2
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f023 0307 	bic.w	r3, r3, #7
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d117      	bne.n	800221e <HAL_DMA_Init+0x122>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00e      	beq.n	800221e <HAL_DMA_Init+0x122>
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 fa91 	bl	8002728 <DMA_CheckFifoParam>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_DMA_Init+0x122>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2240      	movs	r2, #64	; 0x40
 8002210:	655a      	str	r2, [r3, #84]	; 0x54
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800221a:	2301      	movs	r3, #1
 800221c:	e016      	b.n	800224c <HAL_DMA_Init+0x150>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	615a      	str	r2, [r3, #20]
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fa48 	bl	80026bc <DMA_CalcBaseAndBitshift>
 800222c:	4603      	mov	r3, r0
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002234:	223f      	movs	r2, #63	; 0x3f
 8002236:	409a      	lsls	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800224a:	2300      	movs	r3, #0
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	f010803f 	.word	0xf010803f

08002258 <HAL_DMA_Start_IT>:
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	2300      	movs	r3, #0
 8002268:	75fb      	strb	r3, [r7, #23]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_DMA_Start_IT+0x26>
 800227a:	2302      	movs	r3, #2
 800227c:	e040      	b.n	8002300 <HAL_DMA_Start_IT+0xa8>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d12f      	bne.n	80022f2 <HAL_DMA_Start_IT+0x9a>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2202      	movs	r2, #2
 8002296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	655a      	str	r2, [r3, #84]	; 0x54
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f9da 	bl	8002660 <DMA_SetConfig>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b0:	223f      	movs	r2, #63	; 0x3f
 80022b2:	409a      	lsls	r2, r3
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0216 	orr.w	r2, r2, #22
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <HAL_DMA_Start_IT+0x88>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0208 	orr.w	r2, r2, #8
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	e005      	b.n	80022fe <HAL_DMA_Start_IT+0xa6>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80022fa:	2302      	movs	r3, #2
 80022fc:	75fb      	strb	r3, [r7, #23]
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_DMA_Abort_IT>:
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d004      	beq.n	8002326 <HAL_DMA_Abort_IT+0x1e>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
 8002322:	2301      	movs	r3, #1
 8002324:	e00c      	b.n	8002340 <HAL_DMA_Abort_IT+0x38>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2205      	movs	r2, #5
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0201 	bic.w	r2, r2, #1
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	2300      	movs	r3, #0
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_DMA_IRQHandler>:
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	4b8e      	ldr	r3, [pc, #568]	; (8002594 <HAL_DMA_IRQHandler+0x248>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a8e      	ldr	r2, [pc, #568]	; (8002598 <HAL_DMA_IRQHandler+0x24c>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	0a9b      	lsrs	r3, r3, #10
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002376:	2208      	movs	r2, #8
 8002378:	409a      	lsls	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d01a      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x6c>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d013      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x6c>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0204 	bic.w	r2, r2, #4
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a4:	2208      	movs	r2, #8
 80023a6:	409a      	lsls	r2, r3
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	2201      	movs	r2, #1
 80023be:	409a      	lsls	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d012      	beq.n	80023ee <HAL_DMA_IRQHandler+0xa2>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00b      	beq.n	80023ee <HAL_DMA_IRQHandler+0xa2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023da:	2201      	movs	r2, #1
 80023dc:	409a      	lsls	r2, r3
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	f043 0202 	orr.w	r2, r3, #2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	2204      	movs	r2, #4
 80023f4:	409a      	lsls	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d012      	beq.n	8002424 <HAL_DMA_IRQHandler+0xd8>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00b      	beq.n	8002424 <HAL_DMA_IRQHandler+0xd8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	2204      	movs	r2, #4
 8002412:	409a      	lsls	r2, r3
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	f043 0204 	orr.w	r2, r3, #4
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	655a      	str	r2, [r3, #84]	; 0x54
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	2210      	movs	r2, #16
 800242a:	409a      	lsls	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d043      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d03c      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002446:	2210      	movs	r2, #16
 8002448:	409a      	lsls	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	609a      	str	r2, [r3, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d018      	beq.n	800248e <HAL_DMA_IRQHandler+0x142>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d108      	bne.n	800247c <HAL_DMA_IRQHandler+0x130>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d024      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
 800247a:	e01f      	b.n	80024bc <HAL_DMA_IRQHandler+0x170>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01b      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4798      	blx	r3
 800248c:	e016      	b.n	80024bc <HAL_DMA_IRQHandler+0x170>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d107      	bne.n	80024ac <HAL_DMA_IRQHandler+0x160>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0208 	bic.w	r2, r2, #8
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c0:	2220      	movs	r2, #32
 80024c2:	409a      	lsls	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 808f 	beq.w	80025ec <HAL_DMA_IRQHandler+0x2a0>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8087 	beq.w	80025ec <HAL_DMA_IRQHandler+0x2a0>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	2220      	movs	r2, #32
 80024e4:	409a      	lsls	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	d136      	bne.n	8002564 <HAL_DMA_IRQHandler+0x218>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0216 	bic.w	r2, r2, #22
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002514:	615a      	str	r2, [r3, #20]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d103      	bne.n	8002526 <HAL_DMA_IRQHandler+0x1da>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <HAL_DMA_IRQHandler+0x1ea>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0208 	bic.w	r2, r2, #8
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253a:	223f      	movs	r2, #63	; 0x3f
 800253c:	409a      	lsls	r2, r3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002556:	2b00      	cmp	r3, #0
 8002558:	d07e      	beq.n	8002658 <HAL_DMA_IRQHandler+0x30c>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
 8002562:	e079      	b.n	8002658 <HAL_DMA_IRQHandler+0x30c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d01d      	beq.n	80025ae <HAL_DMA_IRQHandler+0x262>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10d      	bne.n	800259c <HAL_DMA_IRQHandler+0x250>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	2b00      	cmp	r3, #0
 8002586:	d031      	beq.n	80025ec <HAL_DMA_IRQHandler+0x2a0>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	4798      	blx	r3
 8002590:	e02c      	b.n	80025ec <HAL_DMA_IRQHandler+0x2a0>
 8002592:	bf00      	nop
 8002594:	20000f9c 	.word	0x20000f9c
 8002598:	1b4e81b5 	.word	0x1b4e81b5
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d023      	beq.n	80025ec <HAL_DMA_IRQHandler+0x2a0>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	4798      	blx	r3
 80025ac:	e01e      	b.n	80025ec <HAL_DMA_IRQHandler+0x2a0>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10f      	bne.n	80025dc <HAL_DMA_IRQHandler+0x290>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0210 	bic.w	r2, r2, #16
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_DMA_IRQHandler+0x2a0>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	4798      	blx	r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d032      	beq.n	800265a <HAL_DMA_IRQHandler+0x30e>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d022      	beq.n	8002646 <HAL_DMA_IRQHandler+0x2fa>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2205      	movs	r2, #5
 8002604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	3301      	adds	r3, #1
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	429a      	cmp	r2, r3
 8002622:	d307      	bcc.n	8002634 <HAL_DMA_IRQHandler+0x2e8>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f2      	bne.n	8002618 <HAL_DMA_IRQHandler+0x2cc>
 8002632:	e000      	b.n	8002636 <HAL_DMA_IRQHandler+0x2ea>
 8002634:	bf00      	nop
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_DMA_IRQHandler+0x30e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	4798      	blx	r3
 8002656:	e000      	b.n	800265a <HAL_DMA_IRQHandler+0x30e>
 8002658:	bf00      	nop
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <DMA_SetConfig>:
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	d108      	bne.n	80026a0 <DMA_SetConfig+0x40>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	e007      	b.n	80026b0 <DMA_SetConfig+0x50>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	60da      	str	r2, [r3, #12]
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <DMA_CalcBaseAndBitshift>:
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	3b10      	subs	r3, #16
 80026cc:	4a14      	ldr	r2, [pc, #80]	; (8002720 <DMA_CalcBaseAndBitshift+0x64>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	4a13      	ldr	r2, [pc, #76]	; (8002724 <DMA_CalcBaseAndBitshift+0x68>)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d909      	bls.n	80026fe <DMA_CalcBaseAndBitshift+0x42>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026f2:	f023 0303 	bic.w	r3, r3, #3
 80026f6:	1d1a      	adds	r2, r3, #4
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	659a      	str	r2, [r3, #88]	; 0x58
 80026fc:	e007      	b.n	800270e <DMA_CalcBaseAndBitshift+0x52>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002706:	f023 0303 	bic.w	r3, r3, #3
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6593      	str	r3, [r2, #88]	; 0x58
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	aaaaaaab 	.word	0xaaaaaaab
 8002724:	08005704 	.word	0x08005704

08002728 <DMA_CheckFifoParam>:
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d11f      	bne.n	8002782 <DMA_CheckFifoParam+0x5a>
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b03      	cmp	r3, #3
 8002746:	d856      	bhi.n	80027f6 <DMA_CheckFifoParam+0xce>
 8002748:	a201      	add	r2, pc, #4	; (adr r2, 8002750 <DMA_CheckFifoParam+0x28>)
 800274a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274e:	bf00      	nop
 8002750:	08002761 	.word	0x08002761
 8002754:	08002773 	.word	0x08002773
 8002758:	08002761 	.word	0x08002761
 800275c:	080027f7 	.word	0x080027f7
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d046      	beq.n	80027fa <DMA_CheckFifoParam+0xd2>
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
 8002770:	e043      	b.n	80027fa <DMA_CheckFifoParam+0xd2>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800277a:	d140      	bne.n	80027fe <DMA_CheckFifoParam+0xd6>
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
 8002780:	e03d      	b.n	80027fe <DMA_CheckFifoParam+0xd6>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278a:	d121      	bne.n	80027d0 <DMA_CheckFifoParam+0xa8>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d837      	bhi.n	8002802 <DMA_CheckFifoParam+0xda>
 8002792:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <DMA_CheckFifoParam+0x70>)
 8002794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002798:	080027a9 	.word	0x080027a9
 800279c:	080027af 	.word	0x080027af
 80027a0:	080027a9 	.word	0x080027a9
 80027a4:	080027c1 	.word	0x080027c1
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
 80027ac:	e030      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d025      	beq.n	8002806 <DMA_CheckFifoParam+0xde>
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	e022      	b.n	8002806 <DMA_CheckFifoParam+0xde>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027c8:	d11f      	bne.n	800280a <DMA_CheckFifoParam+0xe2>
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	e01c      	b.n	800280a <DMA_CheckFifoParam+0xe2>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d903      	bls.n	80027de <DMA_CheckFifoParam+0xb6>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d003      	beq.n	80027e4 <DMA_CheckFifoParam+0xbc>
 80027dc:	e018      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
 80027e2:	e015      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00e      	beq.n	800280e <DMA_CheckFifoParam+0xe6>
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
 80027f4:	e00b      	b.n	800280e <DMA_CheckFifoParam+0xe6>
 80027f6:	bf00      	nop
 80027f8:	e00a      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
 80027fa:	bf00      	nop
 80027fc:	e008      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
 80027fe:	bf00      	nop
 8002800:	e006      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
 8002802:	bf00      	nop
 8002804:	e004      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
 8002806:	bf00      	nop
 8002808:	e002      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
 800280a:	bf00      	nop
 800280c:	e000      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
 800280e:	bf00      	nop
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop

08002820 <HAL_GPIO_Init>:
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	e159      	b.n	8002af0 <HAL_GPIO_Init+0x2d0>
 800283c:	2201      	movs	r2, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	429a      	cmp	r2, r3
 8002856:	f040 8148 	bne.w	8002aea <HAL_GPIO_Init+0x2ca>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d005      	beq.n	8002872 <HAL_GPIO_Init+0x52>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d130      	bne.n	80028d4 <HAL_GPIO_Init+0xb4>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	61bb      	str	r3, [r7, #24]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	2203      	movs	r2, #3
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	61bb      	str	r3, [r7, #24]
 80028a8:	2201      	movs	r2, #1
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 0201 	and.w	r2, r3, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d017      	beq.n	8002910 <HAL_GPIO_Init+0xf0>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	61bb      	str	r3, [r7, #24]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	2203      	movs	r2, #3
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	60da      	str	r2, [r3, #12]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d123      	bne.n	8002964 <HAL_GPIO_Init+0x144>
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	08da      	lsrs	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3208      	adds	r2, #8
 8002924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	220f      	movs	r2, #15
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	08da      	lsrs	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3208      	adds	r2, #8
 800295e:	69b9      	ldr	r1, [r7, #24]
 8002960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2203      	movs	r2, #3
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0203 	and.w	r2, r3, #3
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80a2 	beq.w	8002aea <HAL_GPIO_Init+0x2ca>
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	4b57      	ldr	r3, [pc, #348]	; (8002b08 <HAL_GPIO_Init+0x2e8>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	4a56      	ldr	r2, [pc, #344]	; (8002b08 <HAL_GPIO_Init+0x2e8>)
 80029b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b4:	6453      	str	r3, [r2, #68]	; 0x44
 80029b6:	4b54      	ldr	r3, [pc, #336]	; (8002b08 <HAL_GPIO_Init+0x2e8>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a52      	ldr	r2, [pc, #328]	; (8002b0c <HAL_GPIO_Init+0x2ec>)
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	089b      	lsrs	r3, r3, #2
 80029c8:	3302      	adds	r3, #2
 80029ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ce:	61bb      	str	r3, [r7, #24]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	220f      	movs	r2, #15
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a49      	ldr	r2, [pc, #292]	; (8002b10 <HAL_GPIO_Init+0x2f0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d019      	beq.n	8002a22 <HAL_GPIO_Init+0x202>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a48      	ldr	r2, [pc, #288]	; (8002b14 <HAL_GPIO_Init+0x2f4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d013      	beq.n	8002a1e <HAL_GPIO_Init+0x1fe>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a47      	ldr	r2, [pc, #284]	; (8002b18 <HAL_GPIO_Init+0x2f8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00d      	beq.n	8002a1a <HAL_GPIO_Init+0x1fa>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a46      	ldr	r2, [pc, #280]	; (8002b1c <HAL_GPIO_Init+0x2fc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d007      	beq.n	8002a16 <HAL_GPIO_Init+0x1f6>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a45      	ldr	r2, [pc, #276]	; (8002b20 <HAL_GPIO_Init+0x300>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d101      	bne.n	8002a12 <HAL_GPIO_Init+0x1f2>
 8002a0e:	2304      	movs	r3, #4
 8002a10:	e008      	b.n	8002a24 <HAL_GPIO_Init+0x204>
 8002a12:	2307      	movs	r3, #7
 8002a14:	e006      	b.n	8002a24 <HAL_GPIO_Init+0x204>
 8002a16:	2303      	movs	r3, #3
 8002a18:	e004      	b.n	8002a24 <HAL_GPIO_Init+0x204>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e002      	b.n	8002a24 <HAL_GPIO_Init+0x204>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_GPIO_Init+0x204>
 8002a22:	2300      	movs	r3, #0
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	f002 0203 	and.w	r2, r2, #3
 8002a2a:	0092      	lsls	r2, r2, #2
 8002a2c:	4093      	lsls	r3, r2
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	4935      	ldr	r1, [pc, #212]	; (8002b0c <HAL_GPIO_Init+0x2ec>)
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	089b      	lsrs	r3, r3, #2
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002a42:	4b38      	ldr	r3, [pc, #224]	; (8002b24 <HAL_GPIO_Init+0x304>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x246>
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	4a2f      	ldr	r2, [pc, #188]	; (8002b24 <HAL_GPIO_Init+0x304>)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	6093      	str	r3, [r2, #8]
 8002a6c:	4b2d      	ldr	r3, [pc, #180]	; (8002b24 <HAL_GPIO_Init+0x304>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x270>
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	4a24      	ldr	r2, [pc, #144]	; (8002b24 <HAL_GPIO_Init+0x304>)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	60d3      	str	r3, [r2, #12]
 8002a96:	4b23      	ldr	r3, [pc, #140]	; (8002b24 <HAL_GPIO_Init+0x304>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	61bb      	str	r3, [r7, #24]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0x29a>
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <HAL_GPIO_Init+0x304>)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	6053      	str	r3, [r2, #4]
 8002ac0:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <HAL_GPIO_Init+0x304>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x2c4>
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	4a0f      	ldr	r2, [pc, #60]	; (8002b24 <HAL_GPIO_Init+0x304>)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3301      	adds	r3, #1
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	2b0f      	cmp	r3, #15
 8002af4:	f67f aea2 	bls.w	800283c <HAL_GPIO_Init+0x1c>
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	3724      	adds	r7, #36	; 0x24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	40020000 	.word	0x40020000
 8002b14:	40020400 	.word	0x40020400
 8002b18:	40020800 	.word	0x40020800
 8002b1c:	40020c00 	.word	0x40020c00
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40013c00 	.word	0x40013c00

08002b28 <HAL_GPIO_WritePin>:
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
 8002b34:	4613      	mov	r3, r2
 8002b36:	707b      	strb	r3, [r7, #1]
 8002b38:	787b      	ldrb	r3, [r7, #1]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_WritePin+0x1e>
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	619a      	str	r2, [r3, #24]
 8002b44:	e003      	b.n	8002b4e <HAL_GPIO_WritePin+0x26>
 8002b46:	887b      	ldrh	r3, [r7, #2]
 8002b48:	041a      	lsls	r2, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	619a      	str	r2, [r3, #24]
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_RCC_OscConfig>:
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x12>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e267      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d075      	beq.n	8002c66 <HAL_RCC_OscConfig+0x10a>
 8002b7a:	4b88      	ldr	r3, [pc, #544]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d00c      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x44>
 8002b86:	4b85      	ldr	r3, [pc, #532]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d112      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x5c>
 8002b92:	4b82      	ldr	r3, [pc, #520]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x5c>
 8002ba0:	4b7e      	ldr	r3, [pc, #504]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d05b      	beq.n	8002c64 <HAL_RCC_OscConfig+0x108>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d157      	bne.n	8002c64 <HAL_RCC_OscConfig+0x108>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e242      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc0:	d106      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x74>
 8002bc2:	4b76      	ldr	r3, [pc, #472]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a75      	ldr	r2, [pc, #468]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e01d      	b.n	8002c0c <HAL_RCC_OscConfig+0xb0>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x98>
 8002bda:	4b70      	ldr	r3, [pc, #448]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a6f      	ldr	r2, [pc, #444]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b6d      	ldr	r3, [pc, #436]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6c      	ldr	r2, [pc, #432]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0xb0>
 8002bf4:	4b69      	ldr	r3, [pc, #420]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a68      	ldr	r2, [pc, #416]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b66      	ldr	r3, [pc, #408]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a65      	ldr	r2, [pc, #404]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_RCC_OscConfig+0xe0>
 8002c14:	f7ff f930 	bl	8001e78 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xd2>
 8002c1c:	f7ff f92c 	bl	8001e78 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xd2>
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e207      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002c2e:	4b5b      	ldr	r3, [pc, #364]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0xc0>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x10a>
 8002c3c:	f7ff f91c 	bl	8001e78 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0xfa>
 8002c44:	f7ff f918 	bl	8001e78 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0xfa>
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1f3      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002c56:	4b51      	ldr	r3, [pc, #324]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0xe8>
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x10a>
 8002c64:	bf00      	nop
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d063      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1de>
 8002c72:	4b4a      	ldr	r3, [pc, #296]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_RCC_OscConfig+0x13a>
 8002c7e:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d11c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x168>
 8002c8a:	4b44      	ldr	r3, [pc, #272]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x168>
 8002c96:	4b41      	ldr	r3, [pc, #260]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_RCC_OscConfig+0x152>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x152>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e1c7      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002cae:	4b3b      	ldr	r3, [pc, #236]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4937      	ldr	r1, [pc, #220]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
 8002cc2:	e03a      	b.n	8002d3a <HAL_RCC_OscConfig+0x1de>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1b2>
 8002ccc:	4b34      	ldr	r3, [pc, #208]	; (8002da0 <HAL_RCC_OscConfig+0x244>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	f7ff f8d1 	bl	8001e78 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x190>
 8002cda:	f7ff f8cd 	bl	8001e78 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x190>
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e1a8      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002cec:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x17e>
 8002cf8:	4b28      	ldr	r3, [pc, #160]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4925      	ldr	r1, [pc, #148]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
 8002d0c:	e015      	b.n	8002d3a <HAL_RCC_OscConfig+0x1de>
 8002d0e:	4b24      	ldr	r3, [pc, #144]	; (8002da0 <HAL_RCC_OscConfig+0x244>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	f7ff f8b0 	bl	8001e78 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x1d2>
 8002d1c:	f7ff f8ac 	bl	8001e78 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x1d2>
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e187      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002d2e:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x1c0>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d036      	beq.n	8002db4 <HAL_RCC_OscConfig+0x258>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d016      	beq.n	8002d7c <HAL_RCC_OscConfig+0x220>
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <HAL_RCC_OscConfig+0x248>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	f7ff f890 	bl	8001e78 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x212>
 8002d5c:	f7ff f88c 	bl	8001e78 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x212>
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e167      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x200>
 8002d7a:	e01b      	b.n	8002db4 <HAL_RCC_OscConfig+0x258>
 8002d7c:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <HAL_RCC_OscConfig+0x248>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	f7ff f879 	bl	8001e78 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]
 8002d88:	e00e      	b.n	8002da8 <HAL_RCC_OscConfig+0x24c>
 8002d8a:	f7ff f875 	bl	8001e78 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d907      	bls.n	8002da8 <HAL_RCC_OscConfig+0x24c>
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e150      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	42470000 	.word	0x42470000
 8002da4:	42470e80 	.word	0x42470e80
 8002da8:	4b88      	ldr	r3, [pc, #544]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1ea      	bne.n	8002d8a <HAL_RCC_OscConfig+0x22e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8097 	beq.w	8002ef0 <HAL_RCC_OscConfig+0x394>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	75fb      	strb	r3, [r7, #23]
 8002dc6:	4b81      	ldr	r3, [pc, #516]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10f      	bne.n	8002df2 <HAL_RCC_OscConfig+0x296>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	4b7d      	ldr	r3, [pc, #500]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	4a7c      	ldr	r2, [pc, #496]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40
 8002de2:	4b7a      	ldr	r3, [pc, #488]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
 8002df2:	4b77      	ldr	r3, [pc, #476]	; (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d118      	bne.n	8002e30 <HAL_RCC_OscConfig+0x2d4>
 8002dfe:	4b74      	ldr	r3, [pc, #464]	; (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a73      	ldr	r2, [pc, #460]	; (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	f7ff f835 	bl	8001e78 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x2c8>
 8002e12:	f7ff f831 	bl	8001e78 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x2c8>
 8002e20:	2303      	movs	r3, #3
 8002e22:	e10c      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002e24:	4b6a      	ldr	r3, [pc, #424]	; (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x2b6>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x2ea>
 8002e38:	4b64      	ldr	r3, [pc, #400]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	4a63      	ldr	r2, [pc, #396]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6713      	str	r3, [r2, #112]	; 0x70
 8002e44:	e01c      	b.n	8002e80 <HAL_RCC_OscConfig+0x324>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x30c>
 8002e4e:	4b5f      	ldr	r3, [pc, #380]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	4a5e      	ldr	r2, [pc, #376]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e54:	f043 0304 	orr.w	r3, r3, #4
 8002e58:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5a:	4b5c      	ldr	r3, [pc, #368]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	4a5b      	ldr	r2, [pc, #364]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6713      	str	r3, [r2, #112]	; 0x70
 8002e66:	e00b      	b.n	8002e80 <HAL_RCC_OscConfig+0x324>
 8002e68:	4b58      	ldr	r3, [pc, #352]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6c:	4a57      	ldr	r2, [pc, #348]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e6e:	f023 0301 	bic.w	r3, r3, #1
 8002e72:	6713      	str	r3, [r2, #112]	; 0x70
 8002e74:	4b55      	ldr	r3, [pc, #340]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	4a54      	ldr	r2, [pc, #336]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e7a:	f023 0304 	bic.w	r3, r3, #4
 8002e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d015      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x358>
 8002e88:	f7fe fff6 	bl	8001e78 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x34a>
 8002e90:	f7fe fff2 	bl	8001e78 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x34a>
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e0cb      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002ea6:	4b49      	ldr	r3, [pc, #292]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0ee      	beq.n	8002e90 <HAL_RCC_OscConfig+0x334>
 8002eb2:	e014      	b.n	8002ede <HAL_RCC_OscConfig+0x382>
 8002eb4:	f7fe ffe0 	bl	8001e78 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x376>
 8002ebc:	f7fe ffdc 	bl	8001e78 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x376>
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e0b5      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002ed2:	4b3e      	ldr	r3, [pc, #248]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1ee      	bne.n	8002ebc <HAL_RCC_OscConfig+0x360>
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d105      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x394>
 8002ee4:	4b39      	ldr	r3, [pc, #228]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	4a38      	ldr	r2, [pc, #224]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eee:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80a1 	beq.w	800303c <HAL_RCC_OscConfig+0x4e0>
 8002efa:	4b34      	ldr	r3, [pc, #208]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d05c      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x464>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d141      	bne.n	8002f92 <HAL_RCC_OscConfig+0x436>
 8002f0e:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <HAL_RCC_OscConfig+0x478>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	f7fe ffb0 	bl	8001e78 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x3d2>
 8002f1c:	f7fe ffac 	bl	8001e78 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x3d2>
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e087      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002f2e:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69da      	ldr	r2, [r3, #28]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	019b      	lsls	r3, r3, #6
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	3b01      	subs	r3, #1
 8002f54:	041b      	lsls	r3, r3, #16
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	061b      	lsls	r3, r3, #24
 8002f5e:	491b      	ldr	r1, [pc, #108]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <HAL_RCC_OscConfig+0x478>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	f7fe ff85 	bl	8001e78 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x428>
 8002f72:	f7fe ff81 	bl	8001e78 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x428>
 8002f80:	2303      	movs	r3, #3
 8002f82:	e05c      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002f84:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x416>
 8002f90:	e054      	b.n	800303c <HAL_RCC_OscConfig+0x4e0>
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <HAL_RCC_OscConfig+0x478>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	f7fe ff6e 	bl	8001e78 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x456>
 8002fa0:	f7fe ff6a 	bl	8001e78 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x456>
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e045      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002fb2:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x444>
 8002fbe:	e03d      	b.n	800303c <HAL_RCC_OscConfig+0x4e0>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d107      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x47c>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e038      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40007000 	.word	0x40007000
 8002fd4:	42470060 	.word	0x42470060
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <HAL_RCC_OscConfig+0x4ec>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d028      	beq.n	8003038 <HAL_RCC_OscConfig+0x4dc>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d121      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d11a      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003008:	4013      	ands	r3, r2
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800300e:	0192      	lsls	r2, r2, #6
 8003010:	4293      	cmp	r3, r2
 8003012:	d111      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	085b      	lsrs	r3, r3, #1
 8003020:	3b01      	subs	r3, #1
 8003022:	041b      	lsls	r3, r3, #16
 8003024:	429a      	cmp	r2, r3
 8003026:	d107      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	061b      	lsls	r3, r3, #24
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_OscConfig+0x4e0>
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 800303c:	2300      	movs	r3, #0
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800

0800304c <HAL_RCC_ClockConfig>:
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCC_ClockConfig+0x14>
 800305c:	2301      	movs	r3, #1
 800305e:	e0cc      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
 8003060:	4b68      	ldr	r3, [pc, #416]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d90c      	bls.n	8003088 <HAL_RCC_ClockConfig+0x3c>
 800306e:	4b65      	ldr	r3, [pc, #404]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]
 8003076:	4b63      	ldr	r3, [pc, #396]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x3c>
 8003084:	2301      	movs	r3, #1
 8003086:	e0b8      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x8a>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_ClockConfig+0x60>
 80030a0:	4b59      	ldr	r3, [pc, #356]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4a58      	ldr	r2, [pc, #352]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030aa:	6093      	str	r3, [r2, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x78>
 80030b8:	4b53      	ldr	r3, [pc, #332]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a52      	ldr	r2, [pc, #328]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030c2:	6093      	str	r3, [r2, #8]
 80030c4:	4b50      	ldr	r3, [pc, #320]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	494d      	ldr	r1, [pc, #308]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d044      	beq.n	800316c <HAL_RCC_ClockConfig+0x120>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xae>
 80030ea:	4b47      	ldr	r3, [pc, #284]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d119      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e07f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d003      	beq.n	800310a <HAL_RCC_ClockConfig+0xbe>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b03      	cmp	r3, #3
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0xce>
 800310a:	4b3f      	ldr	r3, [pc, #252]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
 8003116:	2301      	movs	r3, #1
 8003118:	e06f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
 800311a:	4b3b      	ldr	r3, [pc, #236]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
 8003126:	2301      	movs	r3, #1
 8003128:	e067      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
 800312a:	4b37      	ldr	r3, [pc, #220]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f023 0203 	bic.w	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4934      	ldr	r1, [pc, #208]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	4313      	orrs	r3, r2
 800313a:	608b      	str	r3, [r1, #8]
 800313c:	f7fe fe9c 	bl	8001e78 <HAL_GetTick>
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	e00a      	b.n	800315a <HAL_RCC_ClockConfig+0x10e>
 8003144:	f7fe fe98 	bl	8001e78 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003152:	4293      	cmp	r3, r2
 8003154:	d901      	bls.n	800315a <HAL_RCC_ClockConfig+0x10e>
 8003156:	2303      	movs	r3, #3
 8003158:	e04f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
 800315a:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 020c 	and.w	r2, r3, #12
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	429a      	cmp	r2, r3
 800316a:	d1eb      	bne.n	8003144 <HAL_RCC_ClockConfig+0xf8>
 800316c:	4b25      	ldr	r3, [pc, #148]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d20c      	bcs.n	8003194 <HAL_RCC_ClockConfig+0x148>
 800317a:	4b22      	ldr	r3, [pc, #136]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]
 8003182:	4b20      	ldr	r3, [pc, #128]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x148>
 8003190:	2301      	movs	r3, #1
 8003192:	e032      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x166>
 80031a0:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4916      	ldr	r1, [pc, #88]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x186>
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	490e      	ldr	r1, [pc, #56]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
 80031d2:	f000 f821 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80031d6:	4602      	mov	r2, r0
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	490a      	ldr	r1, [pc, #40]	; (800320c <HAL_RCC_ClockConfig+0x1c0>)
 80031e4:	5ccb      	ldrb	r3, [r1, r3]
 80031e6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ea:	4a09      	ldr	r2, [pc, #36]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe fdfc 	bl	8001df0 <HAL_InitTick>
 80031f8:	2300      	movs	r3, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40023c00 	.word	0x40023c00
 8003208:	40023800 	.word	0x40023800
 800320c:	08004f6c 	.word	0x08004f6c
 8003210:	20000f9c 	.word	0x20000f9c
 8003214:	20000fa0 	.word	0x20000fa0

08003218 <HAL_RCC_GetSysClockFreq>:
 8003218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800321c:	b094      	sub	sp, #80	; 0x50
 800321e:	af00      	add	r7, sp, #0
 8003220:	2300      	movs	r3, #0
 8003222:	647b      	str	r3, [r7, #68]	; 0x44
 8003224:	2300      	movs	r3, #0
 8003226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003228:	2300      	movs	r3, #0
 800322a:	643b      	str	r3, [r7, #64]	; 0x40
 800322c:	2300      	movs	r3, #0
 800322e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003230:	4b79      	ldr	r3, [pc, #484]	; (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b08      	cmp	r3, #8
 800323a:	d00d      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x40>
 800323c:	2b08      	cmp	r3, #8
 800323e:	f200 80e1 	bhi.w	8003404 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x34>
 8003246:	2b04      	cmp	r3, #4
 8003248:	d003      	beq.n	8003252 <HAL_RCC_GetSysClockFreq+0x3a>
 800324a:	e0db      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x1ec>
 800324c:	4b73      	ldr	r3, [pc, #460]	; (800341c <HAL_RCC_GetSysClockFreq+0x204>)
 800324e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003250:	e0db      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x1f2>
 8003252:	4b73      	ldr	r3, [pc, #460]	; (8003420 <HAL_RCC_GetSysClockFreq+0x208>)
 8003254:	64bb      	str	r3, [r7, #72]	; 0x48
 8003256:	e0d8      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x1f2>
 8003258:	4b6f      	ldr	r3, [pc, #444]	; (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003260:	647b      	str	r3, [r7, #68]	; 0x44
 8003262:	4b6d      	ldr	r3, [pc, #436]	; (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d063      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0x11e>
 800326e:	4b6a      	ldr	r3, [pc, #424]	; (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	099b      	lsrs	r3, r3, #6
 8003274:	2200      	movs	r2, #0
 8003276:	63bb      	str	r3, [r7, #56]	; 0x38
 8003278:	63fa      	str	r2, [r7, #60]	; 0x3c
 800327a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003280:	633b      	str	r3, [r7, #48]	; 0x30
 8003282:	2300      	movs	r3, #0
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
 8003286:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800328a:	4622      	mov	r2, r4
 800328c:	462b      	mov	r3, r5
 800328e:	f04f 0000 	mov.w	r0, #0
 8003292:	f04f 0100 	mov.w	r1, #0
 8003296:	0159      	lsls	r1, r3, #5
 8003298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800329c:	0150      	lsls	r0, r2, #5
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4621      	mov	r1, r4
 80032a4:	1a51      	subs	r1, r2, r1
 80032a6:	6139      	str	r1, [r7, #16]
 80032a8:	4629      	mov	r1, r5
 80032aa:	eb63 0301 	sbc.w	r3, r3, r1
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032bc:	4659      	mov	r1, fp
 80032be:	018b      	lsls	r3, r1, #6
 80032c0:	4651      	mov	r1, sl
 80032c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032c6:	4651      	mov	r1, sl
 80032c8:	018a      	lsls	r2, r1, #6
 80032ca:	4651      	mov	r1, sl
 80032cc:	ebb2 0801 	subs.w	r8, r2, r1
 80032d0:	4659      	mov	r1, fp
 80032d2:	eb63 0901 	sbc.w	r9, r3, r1
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ea:	4690      	mov	r8, r2
 80032ec:	4699      	mov	r9, r3
 80032ee:	4623      	mov	r3, r4
 80032f0:	eb18 0303 	adds.w	r3, r8, r3
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	462b      	mov	r3, r5
 80032f8:	eb49 0303 	adc.w	r3, r9, r3
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800330a:	4629      	mov	r1, r5
 800330c:	024b      	lsls	r3, r1, #9
 800330e:	4621      	mov	r1, r4
 8003310:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003314:	4621      	mov	r1, r4
 8003316:	024a      	lsls	r2, r1, #9
 8003318:	4610      	mov	r0, r2
 800331a:	4619      	mov	r1, r3
 800331c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800331e:	2200      	movs	r2, #0
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
 8003322:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003324:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003328:	f7fc ff54 	bl	80001d4 <__aeabi_uldivmod>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4613      	mov	r3, r2
 8003332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003334:	e058      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x1d0>
 8003336:	4b38      	ldr	r3, [pc, #224]	; (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	099b      	lsrs	r3, r3, #6
 800333c:	2200      	movs	r2, #0
 800333e:	4618      	mov	r0, r3
 8003340:	4611      	mov	r1, r2
 8003342:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003346:	623b      	str	r3, [r7, #32]
 8003348:	2300      	movs	r3, #0
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
 800334c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003350:	4642      	mov	r2, r8
 8003352:	464b      	mov	r3, r9
 8003354:	f04f 0000 	mov.w	r0, #0
 8003358:	f04f 0100 	mov.w	r1, #0
 800335c:	0159      	lsls	r1, r3, #5
 800335e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003362:	0150      	lsls	r0, r2, #5
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4641      	mov	r1, r8
 800336a:	ebb2 0a01 	subs.w	sl, r2, r1
 800336e:	4649      	mov	r1, r9
 8003370:	eb63 0b01 	sbc.w	fp, r3, r1
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003380:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003384:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003388:	ebb2 040a 	subs.w	r4, r2, sl
 800338c:	eb63 050b 	sbc.w	r5, r3, fp
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	00eb      	lsls	r3, r5, #3
 800339a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800339e:	00e2      	lsls	r2, r4, #3
 80033a0:	4614      	mov	r4, r2
 80033a2:	461d      	mov	r5, r3
 80033a4:	4643      	mov	r3, r8
 80033a6:	18e3      	adds	r3, r4, r3
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	464b      	mov	r3, r9
 80033ac:	eb45 0303 	adc.w	r3, r5, r3
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033be:	4629      	mov	r1, r5
 80033c0:	028b      	lsls	r3, r1, #10
 80033c2:	4621      	mov	r1, r4
 80033c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033c8:	4621      	mov	r1, r4
 80033ca:	028a      	lsls	r2, r1, #10
 80033cc:	4610      	mov	r0, r2
 80033ce:	4619      	mov	r1, r3
 80033d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d2:	2200      	movs	r2, #0
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	61fa      	str	r2, [r7, #28]
 80033d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033dc:	f7fc fefa 	bl	80001d4 <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4613      	mov	r3, r2
 80033e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	0c1b      	lsrs	r3, r3, #16
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	3301      	adds	r3, #1
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	643b      	str	r3, [r7, #64]	; 0x40
 80033f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	64bb      	str	r3, [r7, #72]	; 0x48
 8003402:	e002      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x1f2>
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_GetSysClockFreq+0x204>)
 8003406:	64bb      	str	r3, [r7, #72]	; 0x48
 8003408:	bf00      	nop
 800340a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340c:	4618      	mov	r0, r3
 800340e:	3750      	adds	r7, #80	; 0x50
 8003410:	46bd      	mov	sp, r7
 8003412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800
 800341c:	00f42400 	.word	0x00f42400
 8003420:	007a1200 	.word	0x007a1200

08003424 <HAL_RCC_GetHCLKFreq>:
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
 8003428:	4b03      	ldr	r3, [pc, #12]	; (8003438 <HAL_RCC_GetHCLKFreq+0x14>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	20000f9c 	.word	0x20000f9c

0800343c <HAL_RCC_GetPCLK1Freq>:
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
 8003440:	f7ff fff0 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	0a9b      	lsrs	r3, r3, #10
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4903      	ldr	r1, [pc, #12]	; (8003460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003452:	5ccb      	ldrb	r3, [r1, r3]
 8003454:	fa22 f303 	lsr.w	r3, r2, r3
 8003458:	4618      	mov	r0, r3
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40023800 	.word	0x40023800
 8003460:	08004f7c 	.word	0x08004f7c

08003464 <HAL_RCC_GetPCLK2Freq>:
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
 8003468:	f7ff ffdc 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 800346c:	4602      	mov	r2, r0
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	0b5b      	lsrs	r3, r3, #13
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	4903      	ldr	r1, [pc, #12]	; (8003488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800347a:	5ccb      	ldrb	r3, [r1, r3]
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
 8003480:	4618      	mov	r0, r3
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40023800 	.word	0x40023800
 8003488:	08004f7c 	.word	0x08004f7c

0800348c <HAL_SPI_Init>:
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_SPI_Init+0x12>
 800349a:	2301      	movs	r3, #1
 800349c:	e07b      	b.n	8003596 <HAL_SPI_Init+0x10a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d108      	bne.n	80034b8 <HAL_SPI_Init+0x2c>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ae:	d009      	beq.n	80034c4 <HAL_SPI_Init+0x38>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	61da      	str	r2, [r3, #28]
 80034b6:	e005      	b.n	80034c4 <HAL_SPI_Init+0x38>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	611a      	str	r2, [r3, #16]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	615a      	str	r2, [r3, #20]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	629a      	str	r2, [r3, #40]	; 0x28
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_SPI_Init+0x58>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fe f8a2 	bl	8001628 <HAL_SPI_MspInit>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003548:	ea42 0103 	orr.w	r1, r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	f003 0104 	and.w	r1, r3, #4
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	f003 0210 	and.w	r2, r3, #16
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003584:	61da      	str	r2, [r3, #28]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003594:	2300      	movs	r3, #0
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <HAL_SPI_Transmit_DMA>:
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	4613      	mov	r3, r2
 80035ac:	80fb      	strh	r3, [r7, #6]
 80035ae:	2300      	movs	r3, #0
 80035b0:	75fb      	strb	r3, [r7, #23]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_SPI_Transmit_DMA+0x20>
 80035bc:	2302      	movs	r3, #2
 80035be:	e09b      	b.n	80036f8 <HAL_SPI_Transmit_DMA+0x158>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d002      	beq.n	80035da <HAL_SPI_Transmit_DMA+0x3a>
 80035d4:	2302      	movs	r3, #2
 80035d6:	75fb      	strb	r3, [r7, #23]
 80035d8:	e089      	b.n	80036ee <HAL_SPI_Transmit_DMA+0x14e>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <HAL_SPI_Transmit_DMA+0x46>
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d102      	bne.n	80035ec <HAL_SPI_Transmit_DMA+0x4c>
 80035e6:	2301      	movs	r3, #1
 80035e8:	75fb      	strb	r3, [r7, #23]
 80035ea:	e080      	b.n	80036ee <HAL_SPI_Transmit_DMA+0x14e>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2203      	movs	r2, #3
 80035f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	88fa      	ldrh	r2, [r7, #6]
 8003604:	869a      	strh	r2, [r3, #52]	; 0x34
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	88fa      	ldrh	r2, [r7, #6]
 800360a:	86da      	strh	r2, [r3, #54]	; 0x36
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	639a      	str	r2, [r3, #56]	; 0x38
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	645a      	str	r2, [r3, #68]	; 0x44
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	87da      	strh	r2, [r3, #62]	; 0x3e
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003632:	d10f      	bne.n	8003654 <HAL_SPI_Transmit_DMA+0xb4>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003658:	4a29      	ldr	r2, [pc, #164]	; (8003700 <HAL_SPI_Transmit_DMA+0x160>)
 800365a:	641a      	str	r2, [r3, #64]	; 0x40
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003660:	4a28      	ldr	r2, [pc, #160]	; (8003704 <HAL_SPI_Transmit_DMA+0x164>)
 8003662:	63da      	str	r2, [r3, #60]	; 0x3c
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003668:	4a27      	ldr	r2, [pc, #156]	; (8003708 <HAL_SPI_Transmit_DMA+0x168>)
 800366a:	64da      	str	r2, [r3, #76]	; 0x4c
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003670:	2200      	movs	r2, #0
 8003672:	651a      	str	r2, [r3, #80]	; 0x50
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	4619      	mov	r1, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	330c      	adds	r3, #12
 8003684:	461a      	mov	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800368a:	b29b      	uxth	r3, r3
 800368c:	f7fe fde4 	bl	8002258 <HAL_DMA_Start_IT>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00c      	beq.n	80036b0 <HAL_SPI_Transmit_DMA+0x110>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369a:	f043 0210 	orr.w	r2, r3, #16
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	655a      	str	r2, [r3, #84]	; 0x54
 80036a2:	2301      	movs	r3, #1
 80036a4:	75fb      	strb	r3, [r7, #23]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80036ae:	e01e      	b.n	80036ee <HAL_SPI_Transmit_DMA+0x14e>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ba:	2b40      	cmp	r3, #64	; 0x40
 80036bc:	d007      	beq.n	80036ce <HAL_SPI_Transmit_DMA+0x12e>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f042 0220 	orr.w	r2, r2, #32
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0202 	orr.w	r2, r2, #2
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	080039c5 	.word	0x080039c5
 8003704:	0800391d 	.word	0x0800391d
 8003708:	080039e1 	.word	0x080039e1

0800370c <HAL_SPI_IRQHandler>:
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10e      	bne.n	800374c <HAL_SPI_IRQHandler+0x40>
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d009      	beq.n	800374c <HAL_SPI_IRQHandler+0x40>
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d004      	beq.n	800374c <HAL_SPI_IRQHandler+0x40>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	4798      	blx	r3
 800374a:	e0ce      	b.n	80038ea <HAL_SPI_IRQHandler+0x1de>
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d009      	beq.n	800376a <HAL_SPI_IRQHandler+0x5e>
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <HAL_SPI_IRQHandler+0x5e>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4798      	blx	r3
 8003768:	e0bf      	b.n	80038ea <HAL_SPI_IRQHandler+0x1de>
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <HAL_SPI_IRQHandler+0x7e>
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d105      	bne.n	800378a <HAL_SPI_IRQHandler+0x7e>
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80b0 	beq.w	80038ea <HAL_SPI_IRQHandler+0x1de>
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80aa 	beq.w	80038ea <HAL_SPI_IRQHandler+0x1de>
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d023      	beq.n	80037e8 <HAL_SPI_IRQHandler+0xdc>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d011      	beq.n	80037d0 <HAL_SPI_IRQHandler+0xc4>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b0:	f043 0204 	orr.w	r2, r3, #4
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	655a      	str	r2, [r3, #84]	; 0x54
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	e00b      	b.n	80037e8 <HAL_SPI_IRQHandler+0xdc>
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	e080      	b.n	80038ea <HAL_SPI_IRQHandler+0x1de>
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d014      	beq.n	800381c <HAL_SPI_IRQHandler+0x110>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	f043 0201 	orr.w	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	655a      	str	r2, [r3, #84]	; 0x54
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00c      	beq.n	8003840 <HAL_SPI_IRQHandler+0x134>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382a:	f043 0208 	orr.w	r2, r3, #8
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	655a      	str	r2, [r3, #84]	; 0x54
 8003832:	2300      	movs	r3, #0
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003844:	2b00      	cmp	r3, #0
 8003846:	d04f      	beq.n	80038e8 <HAL_SPI_IRQHandler+0x1dc>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d104      	bne.n	8003874 <HAL_SPI_IRQHandler+0x168>
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d034      	beq.n	80038de <HAL_SPI_IRQHandler+0x1d2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0203 	bic.w	r2, r2, #3
 8003882:	605a      	str	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003888:	2b00      	cmp	r3, #0
 800388a:	d011      	beq.n	80038b0 <HAL_SPI_IRQHandler+0x1a4>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003890:	4a17      	ldr	r2, [pc, #92]	; (80038f0 <HAL_SPI_IRQHandler+0x1e4>)
 8003892:	651a      	str	r2, [r3, #80]	; 0x50
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003898:	4618      	mov	r0, r3
 800389a:	f7fe fd35 	bl	8002308 <HAL_DMA_Abort_IT>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_SPI_IRQHandler+0x1a4>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	655a      	str	r2, [r3, #84]	; 0x54
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d016      	beq.n	80038e6 <HAL_SPI_IRQHandler+0x1da>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038bc:	4a0c      	ldr	r2, [pc, #48]	; (80038f0 <HAL_SPI_IRQHandler+0x1e4>)
 80038be:	651a      	str	r2, [r3, #80]	; 0x50
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fe fd1f 	bl	8002308 <HAL_DMA_Abort_IT>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <HAL_SPI_IRQHandler+0x1da>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	655a      	str	r2, [r3, #84]	; 0x54
 80038dc:	e003      	b.n	80038e6 <HAL_SPI_IRQHandler+0x1da>
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f812 	bl	8003908 <HAL_SPI_ErrorCallback>
 80038e4:	e000      	b.n	80038e8 <HAL_SPI_IRQHandler+0x1dc>
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	3720      	adds	r7, #32
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	08003a21 	.word	0x08003a21

080038f4 <HAL_SPI_TxHalfCpltCallback>:
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_SPI_ErrorCallback>:
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <SPI_DMATransmitCplt>:
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	f7fe faa5 	bl	8001e78 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800393e:	d03b      	beq.n	80039b8 <SPI_DMATransmitCplt+0x9c>
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0220 	bic.w	r2, r2, #32
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0202 	bic.w	r2, r2, #2
 800395e:	605a      	str	r2, [r3, #4]
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	2164      	movs	r1, #100	; 0x64
 8003964:	6978      	ldr	r0, [r7, #20]
 8003966:	f000 f8f7 	bl	8003b58 <SPI_EndRxTxTransaction>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <SPI_DMATransmitCplt+0x60>
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003974:	f043 0220 	orr.w	r2, r3, #32
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	655a      	str	r2, [r3, #84]	; 0x54
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10a      	bne.n	800399a <SPI_DMATransmitCplt+0x7e>
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2200      	movs	r2, #0
 800399e:	86da      	strh	r2, [r3, #54]	; 0x36
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <SPI_DMATransmitCplt+0x9c>
 80039b0:	6978      	ldr	r0, [r7, #20]
 80039b2:	f7ff ffa9 	bl	8003908 <HAL_SPI_ErrorCallback>
 80039b6:	e002      	b.n	80039be <SPI_DMATransmitCplt+0xa2>
 80039b8:	6978      	ldr	r0, [r7, #20]
 80039ba:	f7fe f997 	bl	8001cec <HAL_SPI_TxCpltCallback>
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <SPI_DMAHalfTransmitCplt>:
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f7ff ff8e 	bl	80038f4 <HAL_SPI_TxHalfCpltCallback>
 80039d8:	bf00      	nop
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <SPI_DMAError>:
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0203 	bic.w	r2, r2, #3
 80039fc:	605a      	str	r2, [r3, #4]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a02:	f043 0210 	orr.w	r2, r3, #16
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	655a      	str	r2, [r3, #84]	; 0x54
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f7ff ff78 	bl	8003908 <HAL_SPI_ErrorCallback>
 8003a18:	bf00      	nop
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <SPI_DMAAbortOnError>:
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f7ff ff64 	bl	8003908 <HAL_SPI_ErrorCallback>
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <SPI_WaitFlagStateUntilTimeout>:
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	4613      	mov	r3, r2
 8003a56:	71fb      	strb	r3, [r7, #7]
 8003a58:	f7fe fa0e 	bl	8001e78 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	4413      	add	r3, r2
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	f7fe fa06 	bl	8001e78 <HAL_GetTick>
 8003a6c:	61b8      	str	r0, [r7, #24]
 8003a6e:	4b39      	ldr	r3, [pc, #228]	; (8003b54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	015b      	lsls	r3, r3, #5
 8003a74:	0d1b      	lsrs	r3, r3, #20
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	fb02 f303 	mul.w	r3, r2, r3
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	e054      	b.n	8003b2a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a86:	d050      	beq.n	8003b2a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8003a88:	f7fe f9f6 	bl	8001e78 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d902      	bls.n	8003a9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d13d      	bne.n	8003b1a <SPI_WaitFlagStateUntilTimeout+0xd2>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003aac:	605a      	str	r2, [r3, #4]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ab6:	d111      	bne.n	8003adc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ac0:	d004      	beq.n	8003acc <SPI_WaitFlagStateUntilTimeout+0x84>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aca:	d107      	bne.n	8003adc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae4:	d10f      	bne.n	8003b06 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003b16:	2303      	movs	r3, #3
 8003b18:	e017      	b.n	8003b4a <SPI_WaitFlagStateUntilTimeout+0x102>
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8003b20:	2300      	movs	r3, #0
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4013      	ands	r3, r2
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	bf0c      	ite	eq
 8003b3a:	2301      	moveq	r3, #1
 8003b3c:	2300      	movne	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d19b      	bne.n	8003a80 <SPI_WaitFlagStateUntilTimeout+0x38>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3720      	adds	r7, #32
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20000f9c 	.word	0x20000f9c

08003b58 <SPI_EndRxTxTransaction>:
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <SPI_EndRxTxTransaction+0x7c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <SPI_EndRxTxTransaction+0x80>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	0d5b      	lsrs	r3, r3, #21
 8003b70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b74:	fb02 f303 	mul.w	r3, r2, r3
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b82:	d112      	bne.n	8003baa <SPI_EndRxTxTransaction+0x52>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2180      	movs	r1, #128	; 0x80
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f7ff ff5a 	bl	8003a48 <SPI_WaitFlagStateUntilTimeout>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d016      	beq.n	8003bc8 <SPI_EndRxTxTransaction+0x70>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9e:	f043 0220 	orr.w	r2, r3, #32
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	655a      	str	r2, [r3, #84]	; 0x54
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e00f      	b.n	8003bca <SPI_EndRxTxTransaction+0x72>
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <SPI_EndRxTxTransaction+0x6e>
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc0:	2b80      	cmp	r3, #128	; 0x80
 8003bc2:	d0f2      	beq.n	8003baa <SPI_EndRxTxTransaction+0x52>
 8003bc4:	e000      	b.n	8003bc8 <SPI_EndRxTxTransaction+0x70>
 8003bc6:	bf00      	nop
 8003bc8:	2300      	movs	r3, #0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000f9c 	.word	0x20000f9c
 8003bd8:	165e9f81 	.word	0x165e9f81

08003bdc <HAL_TIM_Base_Init>:
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_TIM_Base_Init+0x12>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e041      	b.n	8003c72 <HAL_TIM_Base_Init+0x96>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_TIM_Base_Init+0x2c>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd fdb4 	bl	8001770 <HAL_TIM_Base_MspInit>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f000 fa10 	bl	8004040 <TIM_Base_SetConfig>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c70:	2300      	movs	r3, #0
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_TIM_PWM_Init>:
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_TIM_PWM_Init+0x12>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e041      	b.n	8003d10 <HAL_TIM_PWM_Init+0x96>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d106      	bne.n	8003ca6 <HAL_TIM_PWM_Init+0x2c>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f839 	bl	8003d18 <HAL_TIM_PWM_MspInit>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2202      	movs	r2, #2
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	f000 f9c1 	bl	8004040 <TIM_Base_SetConfig>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d0e:	2300      	movs	r3, #0
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_TIM_PWM_MspInit>:
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_TIM_PWM_ConfigChannel>:
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	75fb      	strb	r3, [r7, #23]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e0ae      	b.n	8003ea8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b0c      	cmp	r3, #12
 8003d56:	f200 809f 	bhi.w	8003e98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d5a:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003d95 	.word	0x08003d95
 8003d64:	08003e99 	.word	0x08003e99
 8003d68:	08003e99 	.word	0x08003e99
 8003d6c:	08003e99 	.word	0x08003e99
 8003d70:	08003dd5 	.word	0x08003dd5
 8003d74:	08003e99 	.word	0x08003e99
 8003d78:	08003e99 	.word	0x08003e99
 8003d7c:	08003e99 	.word	0x08003e99
 8003d80:	08003e17 	.word	0x08003e17
 8003d84:	08003e99 	.word	0x08003e99
 8003d88:	08003e99 	.word	0x08003e99
 8003d8c:	08003e99 	.word	0x08003e99
 8003d90:	08003e57 	.word	0x08003e57
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 f9d0 	bl	8004140 <TIM_OC1_SetConfig>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0208 	orr.w	r2, r2, #8
 8003dae:	619a      	str	r2, [r3, #24]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0204 	bic.w	r2, r2, #4
 8003dbe:	619a      	str	r2, [r3, #24]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6999      	ldr	r1, [r3, #24]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	619a      	str	r2, [r3, #24]
 8003dd2:	e064      	b.n	8003e9e <HAL_TIM_PWM_ConfigChannel+0x172>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fa16 	bl	800420c <TIM_OC2_SetConfig>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dee:	619a      	str	r2, [r3, #24]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dfe:	619a      	str	r2, [r3, #24]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6999      	ldr	r1, [r3, #24]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	021a      	lsls	r2, r3, #8
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	619a      	str	r2, [r3, #24]
 8003e14:	e043      	b.n	8003e9e <HAL_TIM_PWM_ConfigChannel+0x172>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fa61 	bl	80042e4 <TIM_OC3_SetConfig>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69da      	ldr	r2, [r3, #28]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0208 	orr.w	r2, r2, #8
 8003e30:	61da      	str	r2, [r3, #28]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69da      	ldr	r2, [r3, #28]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0204 	bic.w	r2, r2, #4
 8003e40:	61da      	str	r2, [r3, #28]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69d9      	ldr	r1, [r3, #28]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	61da      	str	r2, [r3, #28]
 8003e54:	e023      	b.n	8003e9e <HAL_TIM_PWM_ConfigChannel+0x172>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 faab 	bl	80043b8 <TIM_OC4_SetConfig>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e70:	61da      	str	r2, [r3, #28]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69da      	ldr	r2, [r3, #28]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e80:	61da      	str	r2, [r3, #28]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69d9      	ldr	r1, [r3, #28]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	021a      	lsls	r2, r3, #8
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	61da      	str	r2, [r3, #28]
 8003e96:	e002      	b.n	8003e9e <HAL_TIM_PWM_ConfigChannel+0x172>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	75fb      	strb	r3, [r7, #23]
 8003e9c:	bf00      	nop
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ea6:	7dfb      	ldrb	r3, [r7, #23]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_TIM_ConfigClockSource>:
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	73fb      	strb	r3, [r7, #15]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_TIM_ConfigClockSource+0x1c>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e0b4      	b.n	8004036 <HAL_TIM_ConfigClockSource+0x186>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003eea:	60bb      	str	r3, [r7, #8]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f04:	d03e      	beq.n	8003f84 <HAL_TIM_ConfigClockSource+0xd4>
 8003f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f0a:	f200 8087 	bhi.w	800401c <HAL_TIM_ConfigClockSource+0x16c>
 8003f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f12:	f000 8086 	beq.w	8004022 <HAL_TIM_ConfigClockSource+0x172>
 8003f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f1a:	d87f      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b70      	cmp	r3, #112	; 0x70
 8003f1e:	d01a      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0xa6>
 8003f20:	2b70      	cmp	r3, #112	; 0x70
 8003f22:	d87b      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b60      	cmp	r3, #96	; 0x60
 8003f26:	d050      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x11a>
 8003f28:	2b60      	cmp	r3, #96	; 0x60
 8003f2a:	d877      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b50      	cmp	r3, #80	; 0x50
 8003f2e:	d03c      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0xfa>
 8003f30:	2b50      	cmp	r3, #80	; 0x50
 8003f32:	d873      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x16c>
 8003f34:	2b40      	cmp	r3, #64	; 0x40
 8003f36:	d058      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x13a>
 8003f38:	2b40      	cmp	r3, #64	; 0x40
 8003f3a:	d86f      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x16c>
 8003f3c:	2b30      	cmp	r3, #48	; 0x30
 8003f3e:	d064      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x15a>
 8003f40:	2b30      	cmp	r3, #48	; 0x30
 8003f42:	d86b      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x16c>
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	d060      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x15a>
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d867      	bhi.n	800401c <HAL_TIM_ConfigClockSource+0x16c>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d05c      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x15a>
 8003f50:	2b10      	cmp	r3, #16
 8003f52:	d05a      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x15a>
 8003f54:	e062      	b.n	800401c <HAL_TIM_ConfigClockSource+0x16c>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6899      	ldr	r1, [r3, #8]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f000 faf1 	bl	800454c <TIM_ETR_SetConfig>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	609a      	str	r2, [r3, #8]
 8003f82:	e04f      	b.n	8004024 <HAL_TIM_ConfigClockSource+0x174>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6899      	ldr	r1, [r3, #8]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f000 fada 	bl	800454c <TIM_ETR_SetConfig>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	e03c      	b.n	8004024 <HAL_TIM_ConfigClockSource+0x174>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6859      	ldr	r1, [r3, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f000 fa4e 	bl	8004458 <TIM_TI1_ConfigInputStage>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2150      	movs	r1, #80	; 0x50
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 faa7 	bl	8004516 <TIM_ITRx_SetConfig>
 8003fc8:	e02c      	b.n	8004024 <HAL_TIM_ConfigClockSource+0x174>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6859      	ldr	r1, [r3, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f000 fa6d 	bl	80044b6 <TIM_TI2_ConfigInputStage>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2160      	movs	r1, #96	; 0x60
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fa97 	bl	8004516 <TIM_ITRx_SetConfig>
 8003fe8:	e01c      	b.n	8004024 <HAL_TIM_ConfigClockSource+0x174>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6859      	ldr	r1, [r3, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f000 fa2e 	bl	8004458 <TIM_TI1_ConfigInputStage>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2140      	movs	r1, #64	; 0x40
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fa87 	bl	8004516 <TIM_ITRx_SetConfig>
 8004008:	e00c      	b.n	8004024 <HAL_TIM_ConfigClockSource+0x174>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4619      	mov	r1, r3
 8004014:	4610      	mov	r0, r2
 8004016:	f000 fa7e 	bl	8004516 <TIM_ITRx_SetConfig>
 800401a:	e003      	b.n	8004024 <HAL_TIM_ConfigClockSource+0x174>
 800401c:	2301      	movs	r3, #1
 800401e:	73fb      	strb	r3, [r7, #15]
 8004020:	e000      	b.n	8004024 <HAL_TIM_ConfigClockSource+0x174>
 8004022:	bf00      	nop
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <TIM_Base_SetConfig>:
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a34      	ldr	r2, [pc, #208]	; (8004124 <TIM_Base_SetConfig+0xe4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00f      	beq.n	8004078 <TIM_Base_SetConfig+0x38>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405e:	d00b      	beq.n	8004078 <TIM_Base_SetConfig+0x38>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a31      	ldr	r2, [pc, #196]	; (8004128 <TIM_Base_SetConfig+0xe8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d007      	beq.n	8004078 <TIM_Base_SetConfig+0x38>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a30      	ldr	r2, [pc, #192]	; (800412c <TIM_Base_SetConfig+0xec>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d003      	beq.n	8004078 <TIM_Base_SetConfig+0x38>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a2f      	ldr	r2, [pc, #188]	; (8004130 <TIM_Base_SetConfig+0xf0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d108      	bne.n	800408a <TIM_Base_SetConfig+0x4a>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a25      	ldr	r2, [pc, #148]	; (8004124 <TIM_Base_SetConfig+0xe4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d01b      	beq.n	80040ca <TIM_Base_SetConfig+0x8a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004098:	d017      	beq.n	80040ca <TIM_Base_SetConfig+0x8a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a22      	ldr	r2, [pc, #136]	; (8004128 <TIM_Base_SetConfig+0xe8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d013      	beq.n	80040ca <TIM_Base_SetConfig+0x8a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a21      	ldr	r2, [pc, #132]	; (800412c <TIM_Base_SetConfig+0xec>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00f      	beq.n	80040ca <TIM_Base_SetConfig+0x8a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a20      	ldr	r2, [pc, #128]	; (8004130 <TIM_Base_SetConfig+0xf0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00b      	beq.n	80040ca <TIM_Base_SetConfig+0x8a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <TIM_Base_SetConfig+0xf4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <TIM_Base_SetConfig+0x8a>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a1e      	ldr	r2, [pc, #120]	; (8004138 <TIM_Base_SetConfig+0xf8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_Base_SetConfig+0x8a>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a1d      	ldr	r2, [pc, #116]	; (800413c <TIM_Base_SetConfig+0xfc>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d108      	bne.n	80040dc <TIM_Base_SetConfig+0x9c>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a08      	ldr	r2, [pc, #32]	; (8004124 <TIM_Base_SetConfig+0xe4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d103      	bne.n	8004110 <TIM_Base_SetConfig+0xd0>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	631a      	str	r2, [r3, #48]	; 0x30
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	615a      	str	r2, [r3, #20]
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40010000 	.word	0x40010000
 8004128:	40000400 	.word	0x40000400
 800412c:	40000800 	.word	0x40000800
 8004130:	40000c00 	.word	0x40000c00
 8004134:	40014000 	.word	0x40014000
 8004138:	40014400 	.word	0x40014400
 800413c:	40014800 	.word	0x40014800

08004140 <TIM_OC1_SetConfig>:
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f023 0201 	bic.w	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	621a      	str	r2, [r3, #32]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0303 	bic.w	r3, r3, #3
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f023 0302 	bic.w	r3, r3, #2
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a1c      	ldr	r2, [pc, #112]	; (8004208 <TIM_OC1_SetConfig+0xc8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d10c      	bne.n	80041b6 <TIM_OC1_SetConfig+0x76>
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f023 0308 	bic.w	r3, r3, #8
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f023 0304 	bic.w	r3, r3, #4
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a13      	ldr	r2, [pc, #76]	; (8004208 <TIM_OC1_SetConfig+0xc8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d111      	bne.n	80041e2 <TIM_OC1_SetConfig+0xa2>
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	605a      	str	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	619a      	str	r2, [r3, #24]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	635a      	str	r2, [r3, #52]	; 0x34
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	621a      	str	r2, [r3, #32]
 80041fc:	bf00      	nop
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	40010000 	.word	0x40010000

0800420c <TIM_OC2_SetConfig>:
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f023 0210 	bic.w	r2, r3, #16
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	621a      	str	r2, [r3, #32]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f023 0320 	bic.w	r3, r3, #32
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a1e      	ldr	r2, [pc, #120]	; (80042e0 <TIM_OC2_SetConfig+0xd4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d10d      	bne.n	8004288 <TIM_OC2_SetConfig+0x7c>
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a15      	ldr	r2, [pc, #84]	; (80042e0 <TIM_OC2_SetConfig+0xd4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d113      	bne.n	80042b8 <TIM_OC2_SetConfig+0xac>
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800429e:	613b      	str	r3, [r7, #16]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	605a      	str	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	619a      	str	r2, [r3, #24]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	639a      	str	r2, [r3, #56]	; 0x38
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	621a      	str	r2, [r3, #32]
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40010000 	.word	0x40010000

080042e4 <TIM_OC3_SetConfig>:
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	621a      	str	r2, [r3, #32]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0303 	bic.w	r3, r3, #3
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a1d      	ldr	r2, [pc, #116]	; (80043b4 <TIM_OC3_SetConfig+0xd0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d10d      	bne.n	800435e <TIM_OC3_SetConfig+0x7a>
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a14      	ldr	r2, [pc, #80]	; (80043b4 <TIM_OC3_SetConfig+0xd0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d113      	bne.n	800438e <TIM_OC3_SetConfig+0xaa>
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	605a      	str	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	61da      	str	r2, [r3, #28]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	621a      	str	r2, [r3, #32]
 80043a8:	bf00      	nop
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	40010000 	.word	0x40010000

080043b8 <TIM_OC4_SetConfig>:
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	621a      	str	r2, [r3, #32]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	021b      	lsls	r3, r3, #8
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	031b      	lsls	r3, r3, #12
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a10      	ldr	r2, [pc, #64]	; (8004454 <TIM_OC4_SetConfig+0x9c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d109      	bne.n	800442c <TIM_OC4_SetConfig+0x74>
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	019b      	lsls	r3, r3, #6
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	61da      	str	r2, [r3, #28]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	641a      	str	r2, [r3, #64]	; 0x40
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	621a      	str	r2, [r3, #32]
 8004446:	bf00      	nop
 8004448:	371c      	adds	r7, #28
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40010000 	.word	0x40010000

08004458 <TIM_TI1_ConfigInputStage>:
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f023 0201 	bic.w	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	621a      	str	r2, [r3, #32]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f023 030a 	bic.w	r3, r3, #10
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	619a      	str	r2, [r3, #24]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	621a      	str	r2, [r3, #32]
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <TIM_TI2_ConfigInputStage>:
 80044b6:	b480      	push	{r7}
 80044b8:	b087      	sub	sp, #28
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	f023 0210 	bic.w	r2, r3, #16
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	621a      	str	r2, [r3, #32]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	031b      	lsls	r3, r3, #12
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	619a      	str	r2, [r3, #24]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	621a      	str	r2, [r3, #32]
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <TIM_ITRx_SetConfig>:
 8004516:	b480      	push	{r7}
 8004518:	b085      	sub	sp, #20
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	f043 0307 	orr.w	r3, r3, #7
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <TIM_ETR_SetConfig>:
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	021a      	lsls	r2, r3, #8
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	431a      	orrs	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4313      	orrs	r3, r2
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	4313      	orrs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	609a      	str	r2, [r3, #8]
 8004580:	bf00      	nop
 8004582:	371c      	adds	r7, #28
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_TIMEx_MasterConfigSynchronization>:
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e050      	b.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	60bb      	str	r3, [r7, #8]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	605a      	str	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d018      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f0:	d013      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a18      	ldr	r2, [pc, #96]	; (8004658 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00e      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a16      	ldr	r2, [pc, #88]	; (800465c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d009      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a15      	ldr	r2, [pc, #84]	; (8004660 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d004      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a13      	ldr	r2, [pc, #76]	; (8004664 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d10c      	bne.n	8004634 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	4313      	orrs	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	609a      	str	r2, [r3, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004644:	2300      	movs	r3, #0
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40010000 	.word	0x40010000
 8004658:	40000400 	.word	0x40000400
 800465c:	40000800 	.word	0x40000800
 8004660:	40000c00 	.word	0x40000c00
 8004664:	40014000 	.word	0x40014000

08004668 <HAL_UART_Init>:
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_UART_Init+0x12>
 8004676:	2301      	movs	r3, #1
 8004678:	e03f      	b.n	80046fa <HAL_UART_Init+0x92>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <HAL_UART_Init+0x2c>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fd f93e 	bl	8001910 <HAL_UART_MspInit>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2224      	movs	r2, #36	; 0x24
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046aa:	60da      	str	r2, [r3, #12]
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f829 	bl	8004704 <UART_SetConfig>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046c0:	611a      	str	r2, [r3, #16]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695a      	ldr	r2, [r3, #20]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046d0:	615a      	str	r2, [r3, #20]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046e0:	60da      	str	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	641a      	str	r2, [r3, #64]	; 0x40
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046f8:	2300      	movs	r3, #0
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <UART_SetConfig>:
 8004704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004708:	b0c0      	sub	sp, #256	; 0x100
 800470a:	af00      	add	r7, sp, #0
 800470c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004720:	68d9      	ldr	r1, [r3, #12]
 8004722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	ea40 0301 	orr.w	r3, r0, r1
 800472c:	6113      	str	r3, [r2, #16]
 800472e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	431a      	orrs	r2, r3
 800473c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	431a      	orrs	r2, r3
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800475c:	f021 010c 	bic.w	r1, r1, #12
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800476a:	430b      	orrs	r3, r1
 800476c:	60d3      	str	r3, [r2, #12]
 800476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800477a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477e:	6999      	ldr	r1, [r3, #24]
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	ea40 0301 	orr.w	r3, r0, r1
 800478a:	6153      	str	r3, [r2, #20]
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	4b8f      	ldr	r3, [pc, #572]	; (80049d0 <UART_SetConfig+0x2cc>)
 8004794:	429a      	cmp	r2, r3
 8004796:	d005      	beq.n	80047a4 <UART_SetConfig+0xa0>
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	4b8d      	ldr	r3, [pc, #564]	; (80049d4 <UART_SetConfig+0x2d0>)
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d104      	bne.n	80047ae <UART_SetConfig+0xaa>
 80047a4:	f7fe fe5e 	bl	8003464 <HAL_RCC_GetPCLK2Freq>
 80047a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047ac:	e003      	b.n	80047b6 <UART_SetConfig+0xb2>
 80047ae:	f7fe fe45 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 80047b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c0:	f040 810c 	bne.w	80049dc <UART_SetConfig+0x2d8>
 80047c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047c8:	2200      	movs	r2, #0
 80047ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047d6:	4622      	mov	r2, r4
 80047d8:	462b      	mov	r3, r5
 80047da:	1891      	adds	r1, r2, r2
 80047dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80047de:	415b      	adcs	r3, r3
 80047e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047e6:	4621      	mov	r1, r4
 80047e8:	eb12 0801 	adds.w	r8, r2, r1
 80047ec:	4629      	mov	r1, r5
 80047ee:	eb43 0901 	adc.w	r9, r3, r1
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004802:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004806:	4690      	mov	r8, r2
 8004808:	4699      	mov	r9, r3
 800480a:	4623      	mov	r3, r4
 800480c:	eb18 0303 	adds.w	r3, r8, r3
 8004810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004814:	462b      	mov	r3, r5
 8004816:	eb49 0303 	adc.w	r3, r9, r3
 800481a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800481e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800482a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800482e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004832:	460b      	mov	r3, r1
 8004834:	18db      	adds	r3, r3, r3
 8004836:	653b      	str	r3, [r7, #80]	; 0x50
 8004838:	4613      	mov	r3, r2
 800483a:	eb42 0303 	adc.w	r3, r2, r3
 800483e:	657b      	str	r3, [r7, #84]	; 0x54
 8004840:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004844:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004848:	f7fb fcc4 	bl	80001d4 <__aeabi_uldivmod>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4b61      	ldr	r3, [pc, #388]	; (80049d8 <UART_SetConfig+0x2d4>)
 8004852:	fba3 2302 	umull	r2, r3, r3, r2
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	011c      	lsls	r4, r3, #4
 800485a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800485e:	2200      	movs	r2, #0
 8004860:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004864:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004868:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800486c:	4642      	mov	r2, r8
 800486e:	464b      	mov	r3, r9
 8004870:	1891      	adds	r1, r2, r2
 8004872:	64b9      	str	r1, [r7, #72]	; 0x48
 8004874:	415b      	adcs	r3, r3
 8004876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004878:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800487c:	4641      	mov	r1, r8
 800487e:	eb12 0a01 	adds.w	sl, r2, r1
 8004882:	4649      	mov	r1, r9
 8004884:	eb43 0b01 	adc.w	fp, r3, r1
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004894:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004898:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800489c:	4692      	mov	sl, r2
 800489e:	469b      	mov	fp, r3
 80048a0:	4643      	mov	r3, r8
 80048a2:	eb1a 0303 	adds.w	r3, sl, r3
 80048a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048aa:	464b      	mov	r3, r9
 80048ac:	eb4b 0303 	adc.w	r3, fp, r3
 80048b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048c8:	460b      	mov	r3, r1
 80048ca:	18db      	adds	r3, r3, r3
 80048cc:	643b      	str	r3, [r7, #64]	; 0x40
 80048ce:	4613      	mov	r3, r2
 80048d0:	eb42 0303 	adc.w	r3, r2, r3
 80048d4:	647b      	str	r3, [r7, #68]	; 0x44
 80048d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048de:	f7fb fc79 	bl	80001d4 <__aeabi_uldivmod>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4611      	mov	r1, r2
 80048e8:	4b3b      	ldr	r3, [pc, #236]	; (80049d8 <UART_SetConfig+0x2d4>)
 80048ea:	fba3 2301 	umull	r2, r3, r3, r1
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	2264      	movs	r2, #100	; 0x64
 80048f2:	fb02 f303 	mul.w	r3, r2, r3
 80048f6:	1acb      	subs	r3, r1, r3
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048fe:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <UART_SetConfig+0x2d4>)
 8004900:	fba3 2302 	umull	r2, r3, r3, r2
 8004904:	095b      	lsrs	r3, r3, #5
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800490c:	441c      	add	r4, r3
 800490e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004912:	2200      	movs	r2, #0
 8004914:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004918:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800491c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004920:	4642      	mov	r2, r8
 8004922:	464b      	mov	r3, r9
 8004924:	1891      	adds	r1, r2, r2
 8004926:	63b9      	str	r1, [r7, #56]	; 0x38
 8004928:	415b      	adcs	r3, r3
 800492a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800492c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004930:	4641      	mov	r1, r8
 8004932:	1851      	adds	r1, r2, r1
 8004934:	6339      	str	r1, [r7, #48]	; 0x30
 8004936:	4649      	mov	r1, r9
 8004938:	414b      	adcs	r3, r1
 800493a:	637b      	str	r3, [r7, #52]	; 0x34
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004948:	4659      	mov	r1, fp
 800494a:	00cb      	lsls	r3, r1, #3
 800494c:	4651      	mov	r1, sl
 800494e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004952:	4651      	mov	r1, sl
 8004954:	00ca      	lsls	r2, r1, #3
 8004956:	4610      	mov	r0, r2
 8004958:	4619      	mov	r1, r3
 800495a:	4603      	mov	r3, r0
 800495c:	4642      	mov	r2, r8
 800495e:	189b      	adds	r3, r3, r2
 8004960:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004964:	464b      	mov	r3, r9
 8004966:	460a      	mov	r2, r1
 8004968:	eb42 0303 	adc.w	r3, r2, r3
 800496c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800497c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004980:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004984:	460b      	mov	r3, r1
 8004986:	18db      	adds	r3, r3, r3
 8004988:	62bb      	str	r3, [r7, #40]	; 0x28
 800498a:	4613      	mov	r3, r2
 800498c:	eb42 0303 	adc.w	r3, r2, r3
 8004990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004992:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004996:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800499a:	f7fb fc1b 	bl	80001d4 <__aeabi_uldivmod>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <UART_SetConfig+0x2d4>)
 80049a4:	fba3 1302 	umull	r1, r3, r3, r2
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	2164      	movs	r1, #100	; 0x64
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	3332      	adds	r3, #50	; 0x32
 80049b6:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <UART_SetConfig+0x2d4>)
 80049b8:	fba2 2303 	umull	r2, r3, r2, r3
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	f003 0207 	and.w	r2, r3, #7
 80049c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4422      	add	r2, r4
 80049ca:	609a      	str	r2, [r3, #8]
 80049cc:	e106      	b.n	8004bdc <UART_SetConfig+0x4d8>
 80049ce:	bf00      	nop
 80049d0:	40011000 	.word	0x40011000
 80049d4:	40011400 	.word	0x40011400
 80049d8:	51eb851f 	.word	0x51eb851f
 80049dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049e0:	2200      	movs	r2, #0
 80049e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049ee:	4642      	mov	r2, r8
 80049f0:	464b      	mov	r3, r9
 80049f2:	1891      	adds	r1, r2, r2
 80049f4:	6239      	str	r1, [r7, #32]
 80049f6:	415b      	adcs	r3, r3
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
 80049fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049fe:	4641      	mov	r1, r8
 8004a00:	1854      	adds	r4, r2, r1
 8004a02:	4649      	mov	r1, r9
 8004a04:	eb43 0501 	adc.w	r5, r3, r1
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	00eb      	lsls	r3, r5, #3
 8004a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a16:	00e2      	lsls	r2, r4, #3
 8004a18:	4614      	mov	r4, r2
 8004a1a:	461d      	mov	r5, r3
 8004a1c:	4643      	mov	r3, r8
 8004a1e:	18e3      	adds	r3, r4, r3
 8004a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a24:	464b      	mov	r3, r9
 8004a26:	eb45 0303 	adc.w	r3, r5, r3
 8004a2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	008b      	lsls	r3, r1, #2
 8004a4e:	4621      	mov	r1, r4
 8004a50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a54:	4621      	mov	r1, r4
 8004a56:	008a      	lsls	r2, r1, #2
 8004a58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a5c:	f7fb fbba 	bl	80001d4 <__aeabi_uldivmod>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4b60      	ldr	r3, [pc, #384]	; (8004be8 <UART_SetConfig+0x4e4>)
 8004a66:	fba3 2302 	umull	r2, r3, r3, r2
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	011c      	lsls	r4, r3, #4
 8004a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a72:	2200      	movs	r2, #0
 8004a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a80:	4642      	mov	r2, r8
 8004a82:	464b      	mov	r3, r9
 8004a84:	1891      	adds	r1, r2, r2
 8004a86:	61b9      	str	r1, [r7, #24]
 8004a88:	415b      	adcs	r3, r3
 8004a8a:	61fb      	str	r3, [r7, #28]
 8004a8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a90:	4641      	mov	r1, r8
 8004a92:	1851      	adds	r1, r2, r1
 8004a94:	6139      	str	r1, [r7, #16]
 8004a96:	4649      	mov	r1, r9
 8004a98:	414b      	adcs	r3, r1
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004aa8:	4659      	mov	r1, fp
 8004aaa:	00cb      	lsls	r3, r1, #3
 8004aac:	4651      	mov	r1, sl
 8004aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ab2:	4651      	mov	r1, sl
 8004ab4:	00ca      	lsls	r2, r1, #3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4603      	mov	r3, r0
 8004abc:	4642      	mov	r2, r8
 8004abe:	189b      	adds	r3, r3, r2
 8004ac0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ac4:	464b      	mov	r3, r9
 8004ac6:	460a      	mov	r2, r1
 8004ac8:	eb42 0303 	adc.w	r3, r2, r3
 8004acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ada:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ae8:	4649      	mov	r1, r9
 8004aea:	008b      	lsls	r3, r1, #2
 8004aec:	4641      	mov	r1, r8
 8004aee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004af2:	4641      	mov	r1, r8
 8004af4:	008a      	lsls	r2, r1, #2
 8004af6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004afa:	f7fb fb6b 	bl	80001d4 <__aeabi_uldivmod>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4611      	mov	r1, r2
 8004b04:	4b38      	ldr	r3, [pc, #224]	; (8004be8 <UART_SetConfig+0x4e4>)
 8004b06:	fba3 2301 	umull	r2, r3, r3, r1
 8004b0a:	095b      	lsrs	r3, r3, #5
 8004b0c:	2264      	movs	r2, #100	; 0x64
 8004b0e:	fb02 f303 	mul.w	r3, r2, r3
 8004b12:	1acb      	subs	r3, r1, r3
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	3332      	adds	r3, #50	; 0x32
 8004b18:	4a33      	ldr	r2, [pc, #204]	; (8004be8 <UART_SetConfig+0x4e4>)
 8004b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b24:	441c      	add	r4, r3
 8004b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	673b      	str	r3, [r7, #112]	; 0x70
 8004b2e:	677a      	str	r2, [r7, #116]	; 0x74
 8004b30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b34:	4642      	mov	r2, r8
 8004b36:	464b      	mov	r3, r9
 8004b38:	1891      	adds	r1, r2, r2
 8004b3a:	60b9      	str	r1, [r7, #8]
 8004b3c:	415b      	adcs	r3, r3
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b44:	4641      	mov	r1, r8
 8004b46:	1851      	adds	r1, r2, r1
 8004b48:	6039      	str	r1, [r7, #0]
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	414b      	adcs	r3, r1
 8004b4e:	607b      	str	r3, [r7, #4]
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b5c:	4659      	mov	r1, fp
 8004b5e:	00cb      	lsls	r3, r1, #3
 8004b60:	4651      	mov	r1, sl
 8004b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b66:	4651      	mov	r1, sl
 8004b68:	00ca      	lsls	r2, r1, #3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4603      	mov	r3, r0
 8004b70:	4642      	mov	r2, r8
 8004b72:	189b      	adds	r3, r3, r2
 8004b74:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b76:	464b      	mov	r3, r9
 8004b78:	460a      	mov	r2, r1
 8004b7a:	eb42 0303 	adc.w	r3, r2, r3
 8004b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	663b      	str	r3, [r7, #96]	; 0x60
 8004b8a:	667a      	str	r2, [r7, #100]	; 0x64
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b98:	4649      	mov	r1, r9
 8004b9a:	008b      	lsls	r3, r1, #2
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ba2:	4641      	mov	r1, r8
 8004ba4:	008a      	lsls	r2, r1, #2
 8004ba6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004baa:	f7fb fb13 	bl	80001d4 <__aeabi_uldivmod>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	; (8004be8 <UART_SetConfig+0x4e4>)
 8004bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	2164      	movs	r1, #100	; 0x64
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	3332      	adds	r3, #50	; 0x32
 8004bc6:	4a08      	ldr	r2, [pc, #32]	; (8004be8 <UART_SetConfig+0x4e4>)
 8004bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bcc:	095b      	lsrs	r3, r3, #5
 8004bce:	f003 020f 	and.w	r2, r3, #15
 8004bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4422      	add	r2, r4
 8004bda:	609a      	str	r2, [r3, #8]
 8004bdc:	bf00      	nop
 8004bde:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004be2:	46bd      	mov	sp, r7
 8004be4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004be8:	51eb851f 	.word	0x51eb851f

08004bec <calloc>:
 8004bec:	4b02      	ldr	r3, [pc, #8]	; (8004bf8 <calloc+0xc>)
 8004bee:	460a      	mov	r2, r1
 8004bf0:	4601      	mov	r1, r0
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	f000 b802 	b.w	8004bfc <_calloc_r>
 8004bf8:	20000ff4 	.word	0x20000ff4

08004bfc <_calloc_r>:
 8004bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bfe:	fba1 2402 	umull	r2, r4, r1, r2
 8004c02:	b94c      	cbnz	r4, 8004c18 <_calloc_r+0x1c>
 8004c04:	4611      	mov	r1, r2
 8004c06:	9201      	str	r2, [sp, #4]
 8004c08:	f000 f850 	bl	8004cac <_malloc_r>
 8004c0c:	9a01      	ldr	r2, [sp, #4]
 8004c0e:	4605      	mov	r5, r0
 8004c10:	b930      	cbnz	r0, 8004c20 <_calloc_r+0x24>
 8004c12:	4628      	mov	r0, r5
 8004c14:	b003      	add	sp, #12
 8004c16:	bd30      	pop	{r4, r5, pc}
 8004c18:	220c      	movs	r2, #12
 8004c1a:	6002      	str	r2, [r0, #0]
 8004c1c:	2500      	movs	r5, #0
 8004c1e:	e7f8      	b.n	8004c12 <_calloc_r+0x16>
 8004c20:	4621      	mov	r1, r4
 8004c22:	f000 f8cf 	bl	8004dc4 <memset>
 8004c26:	e7f4      	b.n	8004c12 <_calloc_r+0x16>

08004c28 <exit>:
 8004c28:	b508      	push	{r3, lr}
 8004c2a:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <exit+0x1c>)
 8004c2c:	4604      	mov	r4, r0
 8004c2e:	b113      	cbz	r3, 8004c36 <exit+0xe>
 8004c30:	2100      	movs	r1, #0
 8004c32:	f3af 8000 	nop.w
 8004c36:	4b04      	ldr	r3, [pc, #16]	; (8004c48 <exit+0x20>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	b103      	cbz	r3, 8004c3e <exit+0x16>
 8004c3c:	4798      	blx	r3
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f7fc ff06 	bl	8001a50 <_exit>
 8004c44:	00000000 	.word	0x00000000
 8004c48:	20006dc8 	.word	0x20006dc8

08004c4c <malloc>:
 8004c4c:	4b02      	ldr	r3, [pc, #8]	; (8004c58 <malloc+0xc>)
 8004c4e:	4601      	mov	r1, r0
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	f000 b82b 	b.w	8004cac <_malloc_r>
 8004c56:	bf00      	nop
 8004c58:	20000ff4 	.word	0x20000ff4

08004c5c <free>:
 8004c5c:	4b02      	ldr	r3, [pc, #8]	; (8004c68 <free+0xc>)
 8004c5e:	4601      	mov	r1, r0
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	f000 b8f3 	b.w	8004e4c <_free_r>
 8004c66:	bf00      	nop
 8004c68:	20000ff4 	.word	0x20000ff4

08004c6c <sbrk_aligned>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	4e0e      	ldr	r6, [pc, #56]	; (8004ca8 <sbrk_aligned+0x3c>)
 8004c70:	460c      	mov	r4, r1
 8004c72:	6831      	ldr	r1, [r6, #0]
 8004c74:	4605      	mov	r5, r0
 8004c76:	b911      	cbnz	r1, 8004c7e <sbrk_aligned+0x12>
 8004c78:	f000 f8ac 	bl	8004dd4 <_sbrk_r>
 8004c7c:	6030      	str	r0, [r6, #0]
 8004c7e:	4621      	mov	r1, r4
 8004c80:	4628      	mov	r0, r5
 8004c82:	f000 f8a7 	bl	8004dd4 <_sbrk_r>
 8004c86:	1c43      	adds	r3, r0, #1
 8004c88:	d00a      	beq.n	8004ca0 <sbrk_aligned+0x34>
 8004c8a:	1cc4      	adds	r4, r0, #3
 8004c8c:	f024 0403 	bic.w	r4, r4, #3
 8004c90:	42a0      	cmp	r0, r4
 8004c92:	d007      	beq.n	8004ca4 <sbrk_aligned+0x38>
 8004c94:	1a21      	subs	r1, r4, r0
 8004c96:	4628      	mov	r0, r5
 8004c98:	f000 f89c 	bl	8004dd4 <_sbrk_r>
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d101      	bne.n	8004ca4 <sbrk_aligned+0x38>
 8004ca0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	20006c8c 	.word	0x20006c8c

08004cac <_malloc_r>:
 8004cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cb0:	1ccd      	adds	r5, r1, #3
 8004cb2:	f025 0503 	bic.w	r5, r5, #3
 8004cb6:	3508      	adds	r5, #8
 8004cb8:	2d0c      	cmp	r5, #12
 8004cba:	bf38      	it	cc
 8004cbc:	250c      	movcc	r5, #12
 8004cbe:	2d00      	cmp	r5, #0
 8004cc0:	4607      	mov	r7, r0
 8004cc2:	db01      	blt.n	8004cc8 <_malloc_r+0x1c>
 8004cc4:	42a9      	cmp	r1, r5
 8004cc6:	d905      	bls.n	8004cd4 <_malloc_r+0x28>
 8004cc8:	230c      	movs	r3, #12
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	2600      	movs	r6, #0
 8004cce:	4630      	mov	r0, r6
 8004cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004da8 <_malloc_r+0xfc>
 8004cd8:	f000 f868 	bl	8004dac <__malloc_lock>
 8004cdc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ce0:	461c      	mov	r4, r3
 8004ce2:	bb5c      	cbnz	r4, 8004d3c <_malloc_r+0x90>
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	f7ff ffc0 	bl	8004c6c <sbrk_aligned>
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	4604      	mov	r4, r0
 8004cf0:	d155      	bne.n	8004d9e <_malloc_r+0xf2>
 8004cf2:	f8d8 4000 	ldr.w	r4, [r8]
 8004cf6:	4626      	mov	r6, r4
 8004cf8:	2e00      	cmp	r6, #0
 8004cfa:	d145      	bne.n	8004d88 <_malloc_r+0xdc>
 8004cfc:	2c00      	cmp	r4, #0
 8004cfe:	d048      	beq.n	8004d92 <_malloc_r+0xe6>
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	4631      	mov	r1, r6
 8004d04:	4638      	mov	r0, r7
 8004d06:	eb04 0903 	add.w	r9, r4, r3
 8004d0a:	f000 f863 	bl	8004dd4 <_sbrk_r>
 8004d0e:	4581      	cmp	r9, r0
 8004d10:	d13f      	bne.n	8004d92 <_malloc_r+0xe6>
 8004d12:	6821      	ldr	r1, [r4, #0]
 8004d14:	1a6d      	subs	r5, r5, r1
 8004d16:	4629      	mov	r1, r5
 8004d18:	4638      	mov	r0, r7
 8004d1a:	f7ff ffa7 	bl	8004c6c <sbrk_aligned>
 8004d1e:	3001      	adds	r0, #1
 8004d20:	d037      	beq.n	8004d92 <_malloc_r+0xe6>
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	442b      	add	r3, r5
 8004d26:	6023      	str	r3, [r4, #0]
 8004d28:	f8d8 3000 	ldr.w	r3, [r8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d038      	beq.n	8004da2 <_malloc_r+0xf6>
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	42a2      	cmp	r2, r4
 8004d34:	d12b      	bne.n	8004d8e <_malloc_r+0xe2>
 8004d36:	2200      	movs	r2, #0
 8004d38:	605a      	str	r2, [r3, #4]
 8004d3a:	e00f      	b.n	8004d5c <_malloc_r+0xb0>
 8004d3c:	6822      	ldr	r2, [r4, #0]
 8004d3e:	1b52      	subs	r2, r2, r5
 8004d40:	d41f      	bmi.n	8004d82 <_malloc_r+0xd6>
 8004d42:	2a0b      	cmp	r2, #11
 8004d44:	d917      	bls.n	8004d76 <_malloc_r+0xca>
 8004d46:	1961      	adds	r1, r4, r5
 8004d48:	42a3      	cmp	r3, r4
 8004d4a:	6025      	str	r5, [r4, #0]
 8004d4c:	bf18      	it	ne
 8004d4e:	6059      	strne	r1, [r3, #4]
 8004d50:	6863      	ldr	r3, [r4, #4]
 8004d52:	bf08      	it	eq
 8004d54:	f8c8 1000 	streq.w	r1, [r8]
 8004d58:	5162      	str	r2, [r4, r5]
 8004d5a:	604b      	str	r3, [r1, #4]
 8004d5c:	4638      	mov	r0, r7
 8004d5e:	f104 060b 	add.w	r6, r4, #11
 8004d62:	f000 f829 	bl	8004db8 <__malloc_unlock>
 8004d66:	f026 0607 	bic.w	r6, r6, #7
 8004d6a:	1d23      	adds	r3, r4, #4
 8004d6c:	1af2      	subs	r2, r6, r3
 8004d6e:	d0ae      	beq.n	8004cce <_malloc_r+0x22>
 8004d70:	1b9b      	subs	r3, r3, r6
 8004d72:	50a3      	str	r3, [r4, r2]
 8004d74:	e7ab      	b.n	8004cce <_malloc_r+0x22>
 8004d76:	42a3      	cmp	r3, r4
 8004d78:	6862      	ldr	r2, [r4, #4]
 8004d7a:	d1dd      	bne.n	8004d38 <_malloc_r+0x8c>
 8004d7c:	f8c8 2000 	str.w	r2, [r8]
 8004d80:	e7ec      	b.n	8004d5c <_malloc_r+0xb0>
 8004d82:	4623      	mov	r3, r4
 8004d84:	6864      	ldr	r4, [r4, #4]
 8004d86:	e7ac      	b.n	8004ce2 <_malloc_r+0x36>
 8004d88:	4634      	mov	r4, r6
 8004d8a:	6876      	ldr	r6, [r6, #4]
 8004d8c:	e7b4      	b.n	8004cf8 <_malloc_r+0x4c>
 8004d8e:	4613      	mov	r3, r2
 8004d90:	e7cc      	b.n	8004d2c <_malloc_r+0x80>
 8004d92:	230c      	movs	r3, #12
 8004d94:	603b      	str	r3, [r7, #0]
 8004d96:	4638      	mov	r0, r7
 8004d98:	f000 f80e 	bl	8004db8 <__malloc_unlock>
 8004d9c:	e797      	b.n	8004cce <_malloc_r+0x22>
 8004d9e:	6025      	str	r5, [r4, #0]
 8004da0:	e7dc      	b.n	8004d5c <_malloc_r+0xb0>
 8004da2:	605b      	str	r3, [r3, #4]
 8004da4:	deff      	udf	#255	; 0xff
 8004da6:	bf00      	nop
 8004da8:	20006c88 	.word	0x20006c88

08004dac <__malloc_lock>:
 8004dac:	4801      	ldr	r0, [pc, #4]	; (8004db4 <__malloc_lock+0x8>)
 8004dae:	f000 b84b 	b.w	8004e48 <__retarget_lock_acquire_recursive>
 8004db2:	bf00      	nop
 8004db4:	20006dd0 	.word	0x20006dd0

08004db8 <__malloc_unlock>:
 8004db8:	4801      	ldr	r0, [pc, #4]	; (8004dc0 <__malloc_unlock+0x8>)
 8004dba:	f000 b846 	b.w	8004e4a <__retarget_lock_release_recursive>
 8004dbe:	bf00      	nop
 8004dc0:	20006dd0 	.word	0x20006dd0

08004dc4 <memset>:
 8004dc4:	4402      	add	r2, r0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d100      	bne.n	8004dce <memset+0xa>
 8004dcc:	4770      	bx	lr
 8004dce:	f803 1b01 	strb.w	r1, [r3], #1
 8004dd2:	e7f9      	b.n	8004dc8 <memset+0x4>

08004dd4 <_sbrk_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	4d06      	ldr	r5, [pc, #24]	; (8004df0 <_sbrk_r+0x1c>)
 8004dd8:	2300      	movs	r3, #0
 8004dda:	4604      	mov	r4, r0
 8004ddc:	4608      	mov	r0, r1
 8004dde:	602b      	str	r3, [r5, #0]
 8004de0:	f7fc fe40 	bl	8001a64 <_sbrk>
 8004de4:	1c43      	adds	r3, r0, #1
 8004de6:	d102      	bne.n	8004dee <_sbrk_r+0x1a>
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	b103      	cbz	r3, 8004dee <_sbrk_r+0x1a>
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	bd38      	pop	{r3, r4, r5, pc}
 8004df0:	20006dcc 	.word	0x20006dcc

08004df4 <__errno>:
 8004df4:	4b01      	ldr	r3, [pc, #4]	; (8004dfc <__errno+0x8>)
 8004df6:	6818      	ldr	r0, [r3, #0]
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20000ff4 	.word	0x20000ff4

08004e00 <__libc_init_array>:
 8004e00:	b570      	push	{r4, r5, r6, lr}
 8004e02:	4d0d      	ldr	r5, [pc, #52]	; (8004e38 <__libc_init_array+0x38>)
 8004e04:	4c0d      	ldr	r4, [pc, #52]	; (8004e3c <__libc_init_array+0x3c>)
 8004e06:	1b64      	subs	r4, r4, r5
 8004e08:	10a4      	asrs	r4, r4, #2
 8004e0a:	2600      	movs	r6, #0
 8004e0c:	42a6      	cmp	r6, r4
 8004e0e:	d109      	bne.n	8004e24 <__libc_init_array+0x24>
 8004e10:	4d0b      	ldr	r5, [pc, #44]	; (8004e40 <__libc_init_array+0x40>)
 8004e12:	4c0c      	ldr	r4, [pc, #48]	; (8004e44 <__libc_init_array+0x44>)
 8004e14:	f000 f866 	bl	8004ee4 <_init>
 8004e18:	1b64      	subs	r4, r4, r5
 8004e1a:	10a4      	asrs	r4, r4, #2
 8004e1c:	2600      	movs	r6, #0
 8004e1e:	42a6      	cmp	r6, r4
 8004e20:	d105      	bne.n	8004e2e <__libc_init_array+0x2e>
 8004e22:	bd70      	pop	{r4, r5, r6, pc}
 8004e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e28:	4798      	blx	r3
 8004e2a:	3601      	adds	r6, #1
 8004e2c:	e7ee      	b.n	8004e0c <__libc_init_array+0xc>
 8004e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e32:	4798      	blx	r3
 8004e34:	3601      	adds	r6, #1
 8004e36:	e7f2      	b.n	8004e1e <__libc_init_array+0x1e>
 8004e38:	08005714 	.word	0x08005714
 8004e3c:	08005714 	.word	0x08005714
 8004e40:	08005714 	.word	0x08005714
 8004e44:	08005718 	.word	0x08005718

08004e48 <__retarget_lock_acquire_recursive>:
 8004e48:	4770      	bx	lr

08004e4a <__retarget_lock_release_recursive>:
 8004e4a:	4770      	bx	lr

08004e4c <_free_r>:
 8004e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e4e:	2900      	cmp	r1, #0
 8004e50:	d044      	beq.n	8004edc <_free_r+0x90>
 8004e52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e56:	9001      	str	r0, [sp, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f1a1 0404 	sub.w	r4, r1, #4
 8004e5e:	bfb8      	it	lt
 8004e60:	18e4      	addlt	r4, r4, r3
 8004e62:	f7ff ffa3 	bl	8004dac <__malloc_lock>
 8004e66:	4a1e      	ldr	r2, [pc, #120]	; (8004ee0 <_free_r+0x94>)
 8004e68:	9801      	ldr	r0, [sp, #4]
 8004e6a:	6813      	ldr	r3, [r2, #0]
 8004e6c:	b933      	cbnz	r3, 8004e7c <_free_r+0x30>
 8004e6e:	6063      	str	r3, [r4, #4]
 8004e70:	6014      	str	r4, [r2, #0]
 8004e72:	b003      	add	sp, #12
 8004e74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e78:	f7ff bf9e 	b.w	8004db8 <__malloc_unlock>
 8004e7c:	42a3      	cmp	r3, r4
 8004e7e:	d908      	bls.n	8004e92 <_free_r+0x46>
 8004e80:	6825      	ldr	r5, [r4, #0]
 8004e82:	1961      	adds	r1, r4, r5
 8004e84:	428b      	cmp	r3, r1
 8004e86:	bf01      	itttt	eq
 8004e88:	6819      	ldreq	r1, [r3, #0]
 8004e8a:	685b      	ldreq	r3, [r3, #4]
 8004e8c:	1949      	addeq	r1, r1, r5
 8004e8e:	6021      	streq	r1, [r4, #0]
 8004e90:	e7ed      	b.n	8004e6e <_free_r+0x22>
 8004e92:	461a      	mov	r2, r3
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	b10b      	cbz	r3, 8004e9c <_free_r+0x50>
 8004e98:	42a3      	cmp	r3, r4
 8004e9a:	d9fa      	bls.n	8004e92 <_free_r+0x46>
 8004e9c:	6811      	ldr	r1, [r2, #0]
 8004e9e:	1855      	adds	r5, r2, r1
 8004ea0:	42a5      	cmp	r5, r4
 8004ea2:	d10b      	bne.n	8004ebc <_free_r+0x70>
 8004ea4:	6824      	ldr	r4, [r4, #0]
 8004ea6:	4421      	add	r1, r4
 8004ea8:	1854      	adds	r4, r2, r1
 8004eaa:	42a3      	cmp	r3, r4
 8004eac:	6011      	str	r1, [r2, #0]
 8004eae:	d1e0      	bne.n	8004e72 <_free_r+0x26>
 8004eb0:	681c      	ldr	r4, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	6053      	str	r3, [r2, #4]
 8004eb6:	440c      	add	r4, r1
 8004eb8:	6014      	str	r4, [r2, #0]
 8004eba:	e7da      	b.n	8004e72 <_free_r+0x26>
 8004ebc:	d902      	bls.n	8004ec4 <_free_r+0x78>
 8004ebe:	230c      	movs	r3, #12
 8004ec0:	6003      	str	r3, [r0, #0]
 8004ec2:	e7d6      	b.n	8004e72 <_free_r+0x26>
 8004ec4:	6825      	ldr	r5, [r4, #0]
 8004ec6:	1961      	adds	r1, r4, r5
 8004ec8:	428b      	cmp	r3, r1
 8004eca:	bf04      	itt	eq
 8004ecc:	6819      	ldreq	r1, [r3, #0]
 8004ece:	685b      	ldreq	r3, [r3, #4]
 8004ed0:	6063      	str	r3, [r4, #4]
 8004ed2:	bf04      	itt	eq
 8004ed4:	1949      	addeq	r1, r1, r5
 8004ed6:	6021      	streq	r1, [r4, #0]
 8004ed8:	6054      	str	r4, [r2, #4]
 8004eda:	e7ca      	b.n	8004e72 <_free_r+0x26>
 8004edc:	b003      	add	sp, #12
 8004ede:	bd30      	pop	{r4, r5, pc}
 8004ee0:	20006c88 	.word	0x20006c88

08004ee4 <_init>:
 8004ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee6:	bf00      	nop
 8004ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eea:	bc08      	pop	{r3}
 8004eec:	469e      	mov	lr, r3
 8004eee:	4770      	bx	lr

08004ef0 <_fini>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	bf00      	nop
 8004ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef6:	bc08      	pop	{r3}
 8004ef8:	469e      	mov	lr, r3
 8004efa:	4770      	bx	lr
