
Test_WS2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  08005b84  08005b84  00015b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063b8  080063b8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080063b8  080063b8  000163b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063c0  080063c0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063c0  080063c0  000163c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063c4  080063c4  000163c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080063c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dd50  2000006c  08006434  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ddbc  08006434  0002ddbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105f7  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027d5  00000000  00000000  000306d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00032eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c2c  00000000  00000000  00033e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018064  00000000  00000000  00034a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012ad6  00000000  00000000  0004caf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091132  00000000  00000000  0005f5ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004948  00000000  00000000  000f0700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f5048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b6c 	.word	0x08005b6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005b6c 	.word	0x08005b6c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b086      	sub	sp, #24
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	60f8      	str	r0, [r7, #12]
 80005d2:	60b9      	str	r1, [r7, #8]
 80005d4:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	e009      	b.n	80005f0 <_write+0x26>
    ITM_SendChar(*ptr++);
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	1c5a      	adds	r2, r3, #1
 80005e0:	60ba      	str	r2, [r7, #8]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ffc9 	bl	800057c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	3301      	adds	r3, #1
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	dbf1      	blt.n	80005dc <_write+0x12>
  }
  return len;
 80005f8:	687b      	ldr	r3, [r7, #4]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b5b0      	push	{r4, r5, r7, lr}
 8000606:	b096      	sub	sp, #88	; 0x58
 8000608:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  ColorRGB_t color[NUM_COLORS] = {
 800060a:	4b7e      	ldr	r3, [pc, #504]	; (8000804 <main+0x200>)
 800060c:	f107 0408 	add.w	r4, r7, #8
 8000610:	461d      	mov	r5, r3
 8000612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061e:	682b      	ldr	r3, [r5, #0]
 8000620:	461a      	mov	r2, r3
 8000622:	8022      	strh	r2, [r4, #0]
 8000624:	3402      	adds	r4, #2
 8000626:	0c1b      	lsrs	r3, r3, #16
 8000628:	7023      	strb	r3, [r4, #0]
    {0,   0,   0  }  // C_BLACK
  };
  //ColorRGB_t* pixel[WS2812_NUM_LEDS_Y][WS2812_NUM_LEDS_X] = {0}; // fill with &color[C_COLOR]
                                                                
  /* maze vars */
  uint8_t startX = 1;
 800062a:	2301      	movs	r3, #1
 800062c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  uint8_t startY = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  uint8_t exitX = WS2812_NUM_LEDS_X - 2;
 8000636:	2326      	movs	r3, #38	; 0x26
 8000638:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint8_t exitY = WS2812_NUM_LEDS_Y - 1;
 800063c:	2317      	movs	r3, #23
 800063e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  uint16_t i = 0, x = 0, y = 0; // index variables
 8000642:	2300      	movs	r3, #0
 8000644:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8000648:	2300      	movs	r3, #0
 800064a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800064e:	2300      	movs	r3, #0
 8000650:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f001 fbc6 	bl	8001de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f8e2 	bl	8000820 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SystemInit();
 800065c:	f001 fa54 	bl	8001b08 <SystemInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f000 fa94 	bl	8000b8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000664:	f000 fa6a 	bl	8000b3c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000668:	f000 fa3e 	bl	8000ae8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800066c:	f000 f97a 	bl	8000964 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000670:	f000 f9ec 	bl	8000a4c <MX_TIM3_Init>
  MX_SPI2_Init();
 8000674:	f000 f940 	bl	80008f8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ws2812_init();
 8000678:	f001 fa58 	bl	8001b2c <ws2812_init>
  initMaze(&maze, WS2812_NUM_LEDS_Y, WS2812_NUM_LEDS_X, startX, startY, exitX, exitY);
 800067c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8000680:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000684:	9302      	str	r3, [sp, #8]
 8000686:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	4613      	mov	r3, r2
 8000694:	2228      	movs	r2, #40	; 0x28
 8000696:	2118      	movs	r1, #24
 8000698:	485b      	ldr	r0, [pc, #364]	; (8000808 <main+0x204>)
 800069a:	f000 faea 	bl	8000c72 <initMaze>
  initPath(&path, WS2812_NUM_LEDS_Y * WS2812_NUM_LEDS_X);
 800069e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80006a2:	485a      	ldr	r0, [pc, #360]	; (800080c <main+0x208>)
 80006a4:	f000 fbc2 	bl	8000e2c <initPath>
  initPRNG(&rng, numbers, SIZE_NUMBERS);
 80006a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006ac:	4958      	ldr	r1, [pc, #352]	; (8000810 <main+0x20c>)
 80006ae:	4859      	ldr	r0, [pc, #356]	; (8000814 <main+0x210>)
 80006b0:	f000 ff28 	bl	8001504 <initPRNG>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  printf("Hello World \n");
 80006b4:	4858      	ldr	r0, [pc, #352]	; (8000818 <main+0x214>)
 80006b6:	f004 fc9b 	bl	8004ff0 <puts>
	/* reset panel to black */
	ws2812_pixel_all(&color[C_BLACK]);
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	3330      	adds	r3, #48	; 0x30
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 fac5 	bl	8001c50 <ws2812_pixel_all>
    //if (startX == WS2812_NUM_LEDS_X - 1) startX = 1;
    //exitX--;
    //if (exitX == 0) exitX = WS2812_NUM_LEDS_X - 2;

	/* set new start and exit */
    maze.start.x = startX; maze.start.y = startY;
 80006c6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80006ca:	4a4f      	ldr	r2, [pc, #316]	; (8000808 <main+0x204>)
 80006cc:	6053      	str	r3, [r2, #4]
 80006ce:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80006d2:	4a4d      	ldr	r2, [pc, #308]	; (8000808 <main+0x204>)
 80006d4:	6093      	str	r3, [r2, #8]
    maze.exit.x = exitX; maze.exit.y = exitY;
 80006d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006da:	4a4b      	ldr	r2, [pc, #300]	; (8000808 <main+0x204>)
 80006dc:	6153      	str	r3, [r2, #20]
 80006de:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80006e2:	4a49      	ldr	r2, [pc, #292]	; (8000808 <main+0x204>)
 80006e4:	6193      	str	r3, [r2, #24]

	/* generate and solve maze */
	generateMaze(&maze);
 80006e6:	4848      	ldr	r0, [pc, #288]	; (8000808 <main+0x204>)
 80006e8:	f000 fcc8 	bl	800107c <generateMaze>
	solveMaze(&maze, &path);
 80006ec:	4947      	ldr	r1, [pc, #284]	; (800080c <main+0x208>)
 80006ee:	4846      	ldr	r0, [pc, #280]	; (8000808 <main+0x204>)
 80006f0:	f000 fd04 	bl	80010fc <solveMaze>

	/* write maze */
	for (x = 0; x < WS2812_NUM_LEDS_X; x++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80006fa:	e032      	b.n	8000762 <main+0x15e>
	{
	  for (y = 0; y < WS2812_NUM_LEDS_Y; y++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000702:	e025      	b.n	8000750 <main+0x14c>
	  {
	    if (maze.grid[y][x] == WALL) ws2812_pixel(x, y, &(ColorRGB_t){15, 15, 15}); // C_WHITE is too bright
 8000704:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8000708:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 800070c:	483e      	ldr	r0, [pc, #248]	; (8000808 <main+0x204>)
 800070e:	4613      	mov	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	4403      	add	r3, r0
 8000718:	440b      	add	r3, r1
 800071a:	3324      	adds	r3, #36	; 0x24
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d111      	bne.n	8000746 <main+0x142>
 8000722:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000726:	b2d8      	uxtb	r0, r3
 8000728:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800072c:	b2d9      	uxtb	r1, r3
 800072e:	4a3b      	ldr	r2, [pc, #236]	; (800081c <main+0x218>)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	6812      	ldr	r2, [r2, #0]
 8000734:	4614      	mov	r4, r2
 8000736:	801c      	strh	r4, [r3, #0]
 8000738:	3302      	adds	r3, #2
 800073a:	0c12      	lsrs	r2, r2, #16
 800073c:	701a      	strb	r2, [r3, #0]
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	461a      	mov	r2, r3
 8000742:	f001 fa15 	bl	8001b70 <ws2812_pixel>
	  for (y = 0; y < WS2812_NUM_LEDS_Y; y++)
 8000746:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800074a:	3301      	adds	r3, #1
 800074c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000750:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000754:	2b17      	cmp	r3, #23
 8000756:	d9d5      	bls.n	8000704 <main+0x100>
	for (x = 0; x < WS2812_NUM_LEDS_X; x++)
 8000758:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800075c:	3301      	adds	r3, #1
 800075e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000762:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000766:	2b27      	cmp	r3, #39	; 0x27
 8000768:	d9c8      	bls.n	80006fc <main+0xf8>
	  }
	}

	/* solve maze */
	for (i = path.size - 1; i >= 1; i--)
 800076a:	4b28      	ldr	r3, [pc, #160]	; (800080c <main+0x208>)
 800076c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000770:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	; 0xc00
 8000774:	3b01      	subs	r3, #1
 8000776:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800077a:	e02d      	b.n	80007d8 <main+0x1d4>
	{
      if (path.p[i].x != 0 && path.p[i].y != 0)
 800077c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000780:	4a22      	ldr	r2, [pc, #136]	; (800080c <main+0x208>)
 8000782:	011b      	lsls	r3, r3, #4
 8000784:	4413      	add	r3, r2
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d020      	beq.n	80007ce <main+0x1ca>
 800078c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000790:	4a1e      	ldr	r2, [pc, #120]	; (800080c <main+0x208>)
 8000792:	011b      	lsls	r3, r3, #4
 8000794:	4413      	add	r3, r2
 8000796:	3304      	adds	r3, #4
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d017      	beq.n	80007ce <main+0x1ca>
      {
        ws2812_pixel(path.p[i].x, path.p[i].y, &color[C_RED]); // TODO: start point is not in path
 800079e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80007a2:	4a1a      	ldr	r2, [pc, #104]	; (800080c <main+0x208>)
 80007a4:	011b      	lsls	r3, r3, #4
 80007a6:	4413      	add	r3, r2
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	b2d8      	uxtb	r0, r3
 80007ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80007b0:	4a16      	ldr	r2, [pc, #88]	; (800080c <main+0x208>)
 80007b2:	011b      	lsls	r3, r3, #4
 80007b4:	4413      	add	r3, r2
 80007b6:	3304      	adds	r3, #4
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	b2d9      	uxtb	r1, r3
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	3303      	adds	r3, #3
 80007c2:	461a      	mov	r2, r3
 80007c4:	f001 f9d4 	bl	8001b70 <ws2812_pixel>
        HAL_Delay(ANIMATION_DELAY_MS);
 80007c8:	201e      	movs	r0, #30
 80007ca:	f001 fb7d 	bl	8001ec8 <HAL_Delay>
	for (i = path.size - 1; i >= 1; i--)
 80007ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80007d2:	3b01      	subs	r3, #1
 80007d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80007d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1cd      	bne.n	800077c <main+0x178>
      }
	}

    /* reset */
    resetMaze(&maze, startX, startY, exitX, exitY);
 80007e0:	f897 003f 	ldrb.w	r0, [r7, #63]	; 0x3f
 80007e4:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80007e8:	f897 1041 	ldrb.w	r1, [r7, #65]	; 0x41
 80007ec:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	4603      	mov	r3, r0
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <main+0x204>)
 80007f6:	f000 fa68 	bl	8000cca <resetMaze>
    resetPath(&path);
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <main+0x208>)
 80007fc:	f000 fb2a 	bl	8000e54 <resetPath>
	  printf("Hello World \n");
 8000800:	e758      	b.n	80006b4 <main+0xb0>
 8000802:	bf00      	nop
 8000804:	08005b94 	.word	0x08005b94
 8000808:	20000274 	.word	0x20000274
 800080c:	20000658 	.word	0x20000658
 8000810:	20000000 	.word	0x20000000
 8000814:	20008220 	.word	0x20008220
 8000818:	08005b84 	.word	0x08005b84
 800081c:	08005bc8 	.word	0x08005bc8

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	; 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	2230      	movs	r2, #48	; 0x30
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f004 fcbe 	bl	80051b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <SystemClock_Config+0xd0>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	4a28      	ldr	r2, [pc, #160]	; (80008f0 <SystemClock_Config+0xd0>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	; 0x40
 8000854:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <SystemClock_Config+0xd0>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <SystemClock_Config+0xd4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800086c:	4a21      	ldr	r2, [pc, #132]	; (80008f4 <SystemClock_Config+0xd4>)
 800086e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <SystemClock_Config+0xd4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000880:	2302      	movs	r3, #2
 8000882:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000884:	2301      	movs	r3, #1
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000888:	2310      	movs	r3, #16
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088c:	2302      	movs	r3, #2
 800088e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000890:	2300      	movs	r3, #0
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000894:	2310      	movs	r3, #16
 8000896:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000898:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800089c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800089e:	2304      	movs	r3, #4
 80008a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008a2:	2307      	movs	r3, #7
 80008a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	f107 0320 	add.w	r3, r7, #32
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 f972 	bl	8002b94 <HAL_RCC_OscConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008b6:	f000 f9d7 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	230f      	movs	r3, #15
 80008bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2302      	movs	r3, #2
 80008c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2102      	movs	r1, #2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 fbd4 	bl	8003084 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008e2:	f000 f9c1 	bl	8000c68 <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3750      	adds	r7, #80	; 0x50
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_SPI2_Init+0x64>)
 80008fe:	4a18      	ldr	r2, [pc, #96]	; (8000960 <MX_SPI2_Init+0x68>)
 8000900:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_SPI2_Init+0x64>)
 8000904:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000908:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_SPI2_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_SPI2_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_SPI2_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_SPI2_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_SPI2_Init+0x64>)
 8000924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000928:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_SPI2_Init+0x64>)
 800092c:	2218      	movs	r2, #24
 800092e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <MX_SPI2_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_SPI2_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <MX_SPI2_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_SPI2_Init+0x64>)
 8000944:	220a      	movs	r2, #10
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_SPI2_Init+0x64>)
 800094a:	f002 fdbb 	bl	80034c4 <HAL_SPI_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000954:	f000 f988 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000088 	.word	0x20000088
 8000960:	40003800 	.word	0x40003800

08000964 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08e      	sub	sp, #56	; 0x38
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000978:	f107 0320 	add.w	r3, r7, #32
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
 8000990:	615a      	str	r2, [r3, #20]
 8000992:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000994:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <MX_TIM2_Init+0xe4>)
 8000996:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800099a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800099c:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <MX_TIM2_Init+0xe4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a2:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <MX_TIM2_Init+0xe4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80009a8:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <MX_TIM2_Init+0xe4>)
 80009aa:	2264      	movs	r2, #100	; 0x64
 80009ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ae:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <MX_TIM2_Init+0xe4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b4:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <MX_TIM2_Init+0xe4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ba:	4823      	ldr	r0, [pc, #140]	; (8000a48 <MX_TIM2_Init+0xe4>)
 80009bc:	f003 f92a 	bl	8003c14 <HAL_TIM_Base_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80009c6:	f000 f94f 	bl	8000c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d4:	4619      	mov	r1, r3
 80009d6:	481c      	ldr	r0, [pc, #112]	; (8000a48 <MX_TIM2_Init+0xe4>)
 80009d8:	f003 fa86 	bl	8003ee8 <HAL_TIM_ConfigClockSource>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80009e2:	f000 f941 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009e6:	4818      	ldr	r0, [pc, #96]	; (8000a48 <MX_TIM2_Init+0xe4>)
 80009e8:	f003 f963 	bl	8003cb2 <HAL_TIM_PWM_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80009f2:	f000 f939 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009fe:	f107 0320 	add.w	r3, r7, #32
 8000a02:	4619      	mov	r1, r3
 8000a04:	4810      	ldr	r0, [pc, #64]	; (8000a48 <MX_TIM2_Init+0xe4>)
 8000a06:	f003 fddd 	bl	80045c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000a10:	f000 f92a 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a14:	2360      	movs	r3, #96	; 0x60
 8000a16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2208      	movs	r2, #8
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4807      	ldr	r0, [pc, #28]	; (8000a48 <MX_TIM2_Init+0xe4>)
 8000a2c:	f003 f99a 	bl	8003d64 <HAL_TIM_PWM_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000a36:	f000 f917 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a3a:	4803      	ldr	r0, [pc, #12]	; (8000a48 <MX_TIM2_Init+0xe4>)
 8000a3c:	f000 fefa 	bl	8001834 <HAL_TIM_MspPostInit>

}
 8000a40:	bf00      	nop
 8000a42:	3738      	adds	r7, #56	; 0x38
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000140 	.word	0x20000140

08000a4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	463b      	mov	r3, r7
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <MX_TIM3_Init+0x94>)
 8000a6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ae4 <MX_TIM3_Init+0x98>)
 8000a6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <MX_TIM3_Init+0x94>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_TIM3_Init+0x94>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <MX_TIM3_Init+0x94>)
 8000a7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_TIM3_Init+0x94>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_TIM3_Init+0x94>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a8e:	4814      	ldr	r0, [pc, #80]	; (8000ae0 <MX_TIM3_Init+0x94>)
 8000a90:	f003 f8c0 	bl	8003c14 <HAL_TIM_Base_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000a9a:	f000 f8e5 	bl	8000c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <MX_TIM3_Init+0x94>)
 8000aac:	f003 fa1c 	bl	8003ee8 <HAL_TIM_ConfigClockSource>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000ab6:	f000 f8d7 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <MX_TIM3_Init+0x94>)
 8000ac8:	f003 fd7c 	bl	80045c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000ad2:	f000 f8c9 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000188 	.word	0x20000188
 8000ae4:	40000400 	.word	0x40000400

08000ae8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <MX_USART2_UART_Init+0x50>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b20:	f003 fdbe 	bl	80046a0 <HAL_UART_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b2a:	f000 f89d 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000230 	.word	0x20000230
 8000b38:	40004400 	.word	0x40004400

08000b3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <MX_DMA_Init+0x4c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	; (8000b88 <MX_DMA_Init+0x4c>)
 8000b4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <MX_DMA_Init+0x4c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	200c      	movs	r0, #12
 8000b64:	f001 faaf 	bl	80020c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b68:	200c      	movs	r0, #12
 8000b6a:	f001 fac8 	bl	80020fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2100      	movs	r1, #0
 8000b72:	200f      	movs	r0, #15
 8000b74:	f001 faa7 	bl	80020c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b78:	200f      	movs	r0, #15
 8000b7a:	f001 fac0 	bl	80020fe <HAL_NVIC_EnableIRQ>

}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a2c      	ldr	r2, [pc, #176]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a25      	ldr	r2, [pc, #148]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a1e      	ldr	r2, [pc, #120]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2120      	movs	r1, #32
 8000c16:	4812      	ldr	r0, [pc, #72]	; (8000c60 <MX_GPIO_Init+0xd4>)
 8000c18:	f001 ffa2 	bl	8002b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c22:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	480c      	ldr	r0, [pc, #48]	; (8000c64 <MX_GPIO_Init+0xd8>)
 8000c34:	f001 fe10 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c38:	2320      	movs	r3, #32
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4804      	ldr	r0, [pc, #16]	; (8000c60 <MX_GPIO_Init+0xd4>)
 8000c50:	f001 fe02 	bl	8002858 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020000 	.word	0x40020000
 8000c64:	40020800 	.word	0x40020800

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>

08000c72 <initMaze>:
#include<stdio.h>

Maze maze;
Path path;

void initMaze(Maze* maze, uint8_t rows, uint8_t cols, uint8_t startX, uint8_t startY, uint8_t exitX, uint8_t exitY) {
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b084      	sub	sp, #16
 8000c76:	af02      	add	r7, sp, #8
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4603      	mov	r3, r0
 8000c82:	70fb      	strb	r3, [r7, #3]
 8000c84:	460b      	mov	r3, r1
 8000c86:	70bb      	strb	r3, [r7, #2]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	707b      	strb	r3, [r7, #1]
    //uint8_t r; /* index variable */

    /* check input */
    if (rows <= 0) exit(1); /* number of rows must be greater than 0 */
 8000c8c:	78fb      	ldrb	r3, [r7, #3]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d102      	bne.n	8000c98 <initMaze+0x26>
 8000c92:	2001      	movs	r0, #1
 8000c94:	f003 ffc6 	bl	8004c24 <exit>
    if (cols <= 0) exit(1); /* number of cols must be greater than 0 */
 8000c98:	78bb      	ldrb	r3, [r7, #2]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <initMaze+0x32>
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f003 ffc0 	bl	8004c24 <exit>
    //    //maze->grid[r] = (uint8_t*) malloc(cols * sizeof(uint8_t));
    //    maze->grid[r] = (uint8_t*) custom_malloc(cols * sizeof(uint8_t));
    //}

    /* set attrs */
    maze->rows = rows;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	78fa      	ldrb	r2, [r7, #3]
 8000ca8:	701a      	strb	r2, [r3, #0]
    maze->cols = cols;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	78ba      	ldrb	r2, [r7, #2]
 8000cae:	705a      	strb	r2, [r3, #1]
    resetMaze(maze, startX, startY, exitX, exitY);
 8000cb0:	7d38      	ldrb	r0, [r7, #20]
 8000cb2:	7c3a      	ldrb	r2, [r7, #16]
 8000cb4:	7879      	ldrb	r1, [r7, #1]
 8000cb6:	7e3b      	ldrb	r3, [r7, #24]
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 f804 	bl	8000cca <resetMaze>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <resetMaze>:

void resetMaze(Maze* maze, uint8_t startX, uint8_t startY, uint8_t exitX, uint8_t exitY) {
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b084      	sub	sp, #16
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	4608      	mov	r0, r1
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4603      	mov	r3, r0
 8000cda:	70fb      	strb	r3, [r7, #3]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70bb      	strb	r3, [r7, #2]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	707b      	strb	r3, [r7, #1]
    uint8_t r, c; /* index variables */

    /* check input */
    if (exitX >= maze->cols || exitY >= maze->rows) exit(1);                                            /* exit point has to be inside the maze */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	785b      	ldrb	r3, [r3, #1]
 8000ce8:	787a      	ldrb	r2, [r7, #1]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d204      	bcs.n	8000cf8 <resetMaze+0x2e>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	7e3a      	ldrb	r2, [r7, #24]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d302      	bcc.n	8000cfe <resetMaze+0x34>
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f003 ff93 	bl	8004c24 <exit>
    if (!((startX == 0 || startX == maze->cols-1) || (startY == 0 || startY == maze->rows-1))) exit(1); /* start point has to be on edge of maze */
 8000cfe:	78fb      	ldrb	r3, [r7, #3]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d011      	beq.n	8000d28 <resetMaze+0x5e>
 8000d04:	78fa      	ldrb	r2, [r7, #3]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	785b      	ldrb	r3, [r3, #1]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d00b      	beq.n	8000d28 <resetMaze+0x5e>
 8000d10:	78bb      	ldrb	r3, [r7, #2]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d008      	beq.n	8000d28 <resetMaze+0x5e>
 8000d16:	78ba      	ldrb	r2, [r7, #2]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d002      	beq.n	8000d28 <resetMaze+0x5e>
 8000d22:	2001      	movs	r0, #1
 8000d24:	f003 ff7e 	bl	8004c24 <exit>
    if (!((exitX == 0 || exitX == maze->cols-1) || (exitY == 0 || exitY == maze->rows-1))) exit(1);     /* exit point has to be on edge of maze */
 8000d28:	787b      	ldrb	r3, [r7, #1]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d011      	beq.n	8000d52 <resetMaze+0x88>
 8000d2e:	787a      	ldrb	r2, [r7, #1]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	785b      	ldrb	r3, [r3, #1]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d00b      	beq.n	8000d52 <resetMaze+0x88>
 8000d3a:	7e3b      	ldrb	r3, [r7, #24]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d008      	beq.n	8000d52 <resetMaze+0x88>
 8000d40:	7e3a      	ldrb	r2, [r7, #24]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d002      	beq.n	8000d52 <resetMaze+0x88>
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f003 ff69 	bl	8004c24 <exit>
    if ((startX == 0 || startX == maze->cols-1) && (startY == 0 || startY == maze->rows-1)) exit(1);    /* start point must not be on corner of maze */
 8000d52:	78fb      	ldrb	r3, [r7, #3]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d005      	beq.n	8000d64 <resetMaze+0x9a>
 8000d58:	78fa      	ldrb	r2, [r7, #3]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	785b      	ldrb	r3, [r3, #1]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d10b      	bne.n	8000d7c <resetMaze+0xb2>
 8000d64:	78bb      	ldrb	r3, [r7, #2]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d005      	beq.n	8000d76 <resetMaze+0xac>
 8000d6a:	78ba      	ldrb	r2, [r7, #2]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d102      	bne.n	8000d7c <resetMaze+0xb2>
 8000d76:	2001      	movs	r0, #1
 8000d78:	f003 ff54 	bl	8004c24 <exit>
    if ((exitX == 0 || exitX == maze->cols-1) && (exitY == 0 || exitY == maze->rows-1)) exit(1);        /* exit point must not be on corner of maze */
 8000d7c:	787b      	ldrb	r3, [r7, #1]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d005      	beq.n	8000d8e <resetMaze+0xc4>
 8000d82:	787a      	ldrb	r2, [r7, #1]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	785b      	ldrb	r3, [r3, #1]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d10b      	bne.n	8000da6 <resetMaze+0xdc>
 8000d8e:	7e3b      	ldrb	r3, [r7, #24]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d005      	beq.n	8000da0 <resetMaze+0xd6>
 8000d94:	7e3a      	ldrb	r2, [r7, #24]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d102      	bne.n	8000da6 <resetMaze+0xdc>
 8000da0:	2001      	movs	r0, #1
 8000da2:	f003 ff3f 	bl	8004c24 <exit>

    /* set attrs */
    maze->start.x = startX;
 8000da6:	78fa      	ldrb	r2, [r7, #3]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	605a      	str	r2, [r3, #4]
    maze->start.y = startY;
 8000dac:	78ba      	ldrb	r2, [r7, #2]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	609a      	str	r2, [r3, #8]
    maze->start.prevX = -1;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295
 8000db8:	60da      	str	r2, [r3, #12]
    maze->start.prevY = -1;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	611a      	str	r2, [r3, #16]
    maze->exit.x = exitX;
 8000dc2:	787a      	ldrb	r2, [r7, #1]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	615a      	str	r2, [r3, #20]
    maze->exit.y = exitY;
 8000dc8:	7e3a      	ldrb	r2, [r7, #24]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	619a      	str	r2, [r3, #24]
    maze->exit.prevX = -1;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	61da      	str	r2, [r3, #28]
    maze->exit.prevY = -1;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	621a      	str	r2, [r3, #32]

    /* init maze grid as WALLs */
    for (r = 0; r < maze->rows; r++) {
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]
 8000de2:	e019      	b.n	8000e18 <resetMaze+0x14e>
        for (c = 0; c < maze->cols; c++) {
 8000de4:	2300      	movs	r3, #0
 8000de6:	73bb      	strb	r3, [r7, #14]
 8000de8:	e00e      	b.n	8000e08 <resetMaze+0x13e>
            maze->grid[r][c] = WALL;
 8000dea:	7bfa      	ldrb	r2, [r7, #15]
 8000dec:	7bb9      	ldrb	r1, [r7, #14]
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	4613      	mov	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	4403      	add	r3, r0
 8000dfa:	440b      	add	r3, r1
 8000dfc:	3324      	adds	r3, #36	; 0x24
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
        for (c = 0; c < maze->cols; c++) {
 8000e02:	7bbb      	ldrb	r3, [r7, #14]
 8000e04:	3301      	adds	r3, #1
 8000e06:	73bb      	strb	r3, [r7, #14]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	785b      	ldrb	r3, [r3, #1]
 8000e0c:	7bba      	ldrb	r2, [r7, #14]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d3eb      	bcc.n	8000dea <resetMaze+0x120>
    for (r = 0; r < maze->rows; r++) {
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	3301      	adds	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d3e0      	bcc.n	8000de4 <resetMaze+0x11a>
        }
    }
}
 8000e22:	bf00      	nop
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <initPath>:

void initPath(Path* path, uint16_t length) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
    ////path->p = (Point *) malloc(length * sizeof(Point));
    //path->p = (Point *) custom_malloc(length * sizeof(Point));
    
    //if (path == NULL) exit(1);
    
    path->size = length;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000e3e:	461a      	mov	r2, r3
 8000e40:	887b      	ldrh	r3, [r7, #2]
 8000e42:	f8a2 3c00 	strh.w	r3, [r2, #3072]	; 0xc00
    resetPath(path);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f000 f804 	bl	8000e54 <resetPath>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <resetPath>:

void resetPath(Path* path) {
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
    for (uint16_t i = 0; i < path->size; i++) {
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	81fb      	strh	r3, [r7, #14]
 8000e60:	e01f      	b.n	8000ea2 <resetPath+0x4e>
        path->p[i].x = 0;
 8000e62:	89fb      	ldrh	r3, [r7, #14]
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	4413      	add	r3, r2
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
        path->p[i].y = 0;
 8000e6e:	89fb      	ldrh	r3, [r7, #14]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	011b      	lsls	r3, r3, #4
 8000e74:	4413      	add	r3, r2
 8000e76:	3304      	adds	r3, #4
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
        path->p[i].prevX = -1;
 8000e7c:	89fb      	ldrh	r3, [r7, #14]
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	011b      	lsls	r3, r3, #4
 8000e82:	4413      	add	r3, r2
 8000e84:	3308      	adds	r3, #8
 8000e86:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8a:	601a      	str	r2, [r3, #0]
        path->p[i].prevY = -1;
 8000e8c:	89fb      	ldrh	r3, [r7, #14]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	011b      	lsls	r3, r3, #4
 8000e92:	4413      	add	r3, r2
 8000e94:	330c      	adds	r3, #12
 8000e96:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9a:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < path->size; i++) {
 8000e9c:	89fb      	ldrh	r3, [r7, #14]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	81fb      	strh	r3, [r7, #14]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000ea8:	f8b3 3c00 	ldrh.w	r3, [r3, #3072]	; 0xc00
 8000eac:	89fa      	ldrh	r2, [r7, #14]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d3d7      	bcc.n	8000e62 <resetPath+0xe>
    }
}
 8000eb2:	bf00      	nop
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <pathPush>:

void pathPush(Path* path, Point* point) {
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
    static uint16_t cnt = 0; /* counter for path array */

    path->p[cnt] = *point;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <pathPush+0x4c>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	011b      	lsls	r3, r3, #4
 8000ed2:	441a      	add	r2, r3
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	4614      	mov	r4, r2
 8000ed8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    cnt++;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <pathPush+0x4c>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <pathPush+0x4c>)
 8000ee8:	801a      	strh	r2, [r3, #0]

    if (cnt == path->size) exit(1);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000ef0:	f8b3 2c00 	ldrh.w	r2, [r3, #3072]	; 0xc00
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <pathPush+0x4c>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d102      	bne.n	8000f02 <pathPush+0x42>
 8000efc:	2001      	movs	r0, #1
 8000efe:	f003 fe91 	bl	8004c24 <exit>
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd90      	pop	{r4, r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	2000425c 	.word	0x2000425c

08000f10 <carveMaze>:

void carveMaze(Maze *maze, uint8_t x, uint8_t y) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70fb      	strb	r3, [r7, #3]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	70bb      	strb	r3, [r7, #2]
    int x1, y1; /* coords of next cell */
    int x2, y2; /* coords of cell after next cell */
    int dx, dy; /* direction deltas */
    int dir; /* direction. 0 = right; 1 = down; 2 = left; else = up */
    int count = 0; /* counts directions failed */
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]

    /* get initial direction */
    dir = getRand(&rng) % 4;
 8000f24:	4854      	ldr	r0, [pc, #336]	; (8001078 <carveMaze+0x168>)
 8000f26:	f000 fb02 	bl	800152e <getRand>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	425a      	negs	r2, r3
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	f002 0203 	and.w	r2, r2, #3
 8000f36:	bf58      	it	pl
 8000f38:	4253      	negpl	r3, r2
 8000f3a:	61fb      	str	r3, [r7, #28]

    /* try all 4 directions */
    while (count < 4) {
 8000f3c:	e092      	b.n	8001064 <carveMaze+0x154>
        /* reset directions */
        dx = 0; dy = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]

        /* translate dir to direction deltas */
        switch (dir) {
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d00f      	beq.n	8000f6c <carveMaze+0x5c>
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	dc10      	bgt.n	8000f74 <carveMaze+0x64>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <carveMaze+0x50>
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d003      	beq.n	8000f66 <carveMaze+0x56>
 8000f5e:	e009      	b.n	8000f74 <carveMaze+0x64>
            case 0:  dx = 1;  break; /* right */
 8000f60:	2301      	movs	r3, #1
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
 8000f64:	e00a      	b.n	8000f7c <carveMaze+0x6c>
            case 1:  dy = 1;  break; /* down */
 8000f66:	2301      	movs	r3, #1
 8000f68:	623b      	str	r3, [r7, #32]
 8000f6a:	e007      	b.n	8000f7c <carveMaze+0x6c>
            case 2:  dx = -1; break; /* left */
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
 8000f72:	e003      	b.n	8000f7c <carveMaze+0x6c>
            default: dy = -1; break; /* up */
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
 8000f78:	623b      	str	r3, [r7, #32]
 8000f7a:	bf00      	nop
        }

        /* calculate new positions based on direction */
        x1 = x + dx;
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f80:	4413      	add	r3, r2
 8000f82:	617b      	str	r3, [r7, #20]
        y1 = y + dy;
 8000f84:	78bb      	ldrb	r3, [r7, #2]
 8000f86:	6a3a      	ldr	r2, [r7, #32]
 8000f88:	4413      	add	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        x2 = x1 + dx;
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	4413      	add	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]
        y2 = y1 + dy;
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	6a3b      	ldr	r3, [r7, #32]
 8000f98:	4413      	add	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
        
        /* check if next two cells are in bounds and are walls */
        if (x2 >= 0 && x2 < maze->cols /* next cell in bounds? */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	db53      	blt.n	800104a <carveMaze+0x13a>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	785b      	ldrb	r3, [r3, #1]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4293      	cmp	r3, r2
 8000fac:	da4d      	bge.n	800104a <carveMaze+0x13a>
         && y2 >= 0 && y2 < maze->rows /* next next cell in bounds? */
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db4a      	blt.n	800104a <carveMaze+0x13a>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	da44      	bge.n	800104a <carveMaze+0x13a>
         && maze->grid[y1][x1] == WALL /* next cell wall? */
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	18ca      	adds	r2, r1, r3
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3324      	adds	r3, #36	; 0x24
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d137      	bne.n	800104a <carveMaze+0x13a>
         && maze->grid[y2][x2] == WALL) { /* next next cell wall? */   
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	68ba      	ldr	r2, [r7, #8]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	18ca      	adds	r2, r1, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	3324      	adds	r3, #36	; 0x24
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d12a      	bne.n	800104a <carveMaze+0x13a>

            /* carve path */
            maze->grid[y1][x1] = PATH;
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	18ca      	adds	r2, r1, r3
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	4413      	add	r3, r2
 8001006:	3324      	adds	r3, #36	; 0x24
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
            maze->grid[y2][x2] = PATH;
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	18ca      	adds	r2, r1, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4413      	add	r3, r2
 800101e:	3324      	adds	r3, #36	; 0x24
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]

            /* move to new position */
            x = x2; y = y2;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	70fb      	strb	r3, [r7, #3]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	70bb      	strb	r3, [r7, #2]

            /* get new direction and reset counter */
            dir = getRand(&rng) % 4;
 800102c:	4812      	ldr	r0, [pc, #72]	; (8001078 <carveMaze+0x168>)
 800102e:	f000 fa7e 	bl	800152e <getRand>
 8001032:	4603      	mov	r3, r0
 8001034:	425a      	negs	r2, r3
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	f002 0203 	and.w	r2, r2, #3
 800103e:	bf58      	it	pl
 8001040:	4253      	negpl	r3, r2
 8001042:	61fb      	str	r3, [r7, #28]
            count = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
 8001048:	e00c      	b.n	8001064 <carveMaze+0x154>
        } else {
            /* change direction and increment counter if carving not possible */
            dir = (dir + 1) % 4;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3301      	adds	r3, #1
 800104e:	425a      	negs	r2, r3
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	f002 0203 	and.w	r2, r2, #3
 8001058:	bf58      	it	pl
 800105a:	4253      	negpl	r3, r2
 800105c:	61fb      	str	r3, [r7, #28]
            count++;
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	3301      	adds	r3, #1
 8001062:	61bb      	str	r3, [r7, #24]
    while (count < 4) {
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	2b03      	cmp	r3, #3
 8001068:	f77f af69 	ble.w	8000f3e <carveMaze+0x2e>
        }
    }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3728      	adds	r7, #40	; 0x28
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20008220 	.word	0x20008220

0800107c <generateMaze>:

void generateMaze(Maze* maze) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    uint8_t x, y;
    
    /* carve the maze */
    for(y = 1; y < maze->rows; y += 2) {
 8001084:	2301      	movs	r3, #1
 8001086:	73bb      	strb	r3, [r7, #14]
 8001088:	e013      	b.n	80010b2 <generateMaze+0x36>
        for(x = 1; x < maze->cols; x += 2) {
 800108a:	2301      	movs	r3, #1
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	e008      	b.n	80010a2 <generateMaze+0x26>
            carveMaze(maze, x, y);
 8001090:	7bba      	ldrb	r2, [r7, #14]
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	4619      	mov	r1, r3
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ff3a 	bl	8000f10 <carveMaze>
        for(x = 1; x < maze->cols; x += 2) {
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	3302      	adds	r3, #2
 80010a0:	73fb      	strb	r3, [r7, #15]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	785b      	ldrb	r3, [r3, #1]
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d3f1      	bcc.n	8001090 <generateMaze+0x14>
    for(y = 1; y < maze->rows; y += 2) {
 80010ac:	7bbb      	ldrb	r3, [r7, #14]
 80010ae:	3302      	adds	r3, #2
 80010b0:	73bb      	strb	r3, [r7, #14]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	7bba      	ldrb	r2, [r7, #14]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d3e6      	bcc.n	800108a <generateMaze+0xe>
        }
    }
    
    /* set start and exit. */
    maze->grid[maze->start.y][maze->start.x] = START;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6859      	ldr	r1, [r3, #4]
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4403      	add	r3, r0
 80010d0:	440b      	add	r3, r1
 80010d2:	3324      	adds	r3, #36	; 0x24
 80010d4:	2202      	movs	r2, #2
 80010d6:	701a      	strb	r2, [r3, #0]
    maze->grid[maze->exit.y][maze->exit.x] = EXIT;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	699a      	ldr	r2, [r3, #24]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6959      	ldr	r1, [r3, #20]
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4403      	add	r3, r0
 80010ec:	440b      	add	r3, r1
 80010ee:	3324      	adds	r3, #36	; 0x24
 80010f0:	2203      	movs	r2, #3
 80010f2:	701a      	strb	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <solveMaze>:

void solveMaze(Maze* maze, Path* path) {
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b0b7      	sub	sp, #220	; 0xdc
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	int iterations = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    if (maze == NULL || maze->grid == NULL || path == NULL) exit(1);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d006      	beq.n	8001120 <solveMaze+0x24>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3324      	adds	r3, #36	; 0x24
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <solveMaze+0x24>
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d102      	bne.n	8001126 <solveMaze+0x2a>
 8001120:	2001      	movs	r0, #1
 8001122:	f003 fd7f 	bl	8004c24 <exit>

    Point current; /* current point in maze */
    Point next; /* next point to move to */
    Point directions[4]; /* possible points to reach from current */
    //uint16_t i = 0; /* index var */
    uint16_t i, j = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
    //for (i = 0; i < maze->rows; i++) {
    //    //visited[i] = calloc(maze->cols, sizeof(bool));
    //    visited[i] = custom_calloc(maze->cols, sizeof(bool));
    //}
    static bool visited[WS2812_NUM_LEDS_Y][WS2812_NUM_LEDS_X];
    for (i = 0; i < WS2812_NUM_LEDS_Y; i++) {
 800112c:	2300      	movs	r3, #0
 800112e:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8001132:	e01e      	b.n	8001172 <solveMaze+0x76>
        for (j = 0; j < WS2812_NUM_LEDS_X; j++) {
 8001134:	2300      	movs	r3, #0
 8001136:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 800113a:	e011      	b.n	8001160 <solveMaze+0x64>
            visited[i][j] = false;
 800113c:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 8001140:	f8b7 10d0 	ldrh.w	r1, [r7, #208]	; 0xd0
 8001144:	489e      	ldr	r0, [pc, #632]	; (80013c0 <solveMaze+0x2c4>)
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	4403      	add	r3, r0
 8001150:	440b      	add	r3, r1
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < WS2812_NUM_LEDS_X; j++) {
 8001156:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800115a:	3301      	adds	r3, #1
 800115c:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 8001160:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8001164:	2b27      	cmp	r3, #39	; 0x27
 8001166:	d9e9      	bls.n	800113c <solveMaze+0x40>
    for (i = 0; i < WS2812_NUM_LEDS_Y; i++) {
 8001168:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800116c:	3301      	adds	r3, #1
 800116e:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8001172:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8001176:	2b17      	cmp	r3, #23
 8001178:	d9dc      	bls.n	8001134 <solveMaze+0x38>

    /* queue stores next possible points during BFS */
    ////Point* queue = malloc(maze->rows * maze->cols * sizeof(Point));
    //Point* queue = custom_malloc(maze->rows * maze->cols * sizeof(Point));
    static Point queue[WS2812_NUM_LEDS];
    for (i = 0; i < WS2812_NUM_LEDS; i++) {
 800117a:	2300      	movs	r3, #0
 800117c:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8001180:	e00f      	b.n	80011a2 <solveMaze+0xa6>
        queue[i] = (Point){0, 0, -1, -1};
 8001182:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8001186:	4a8f      	ldr	r2, [pc, #572]	; (80013c4 <solveMaze+0x2c8>)
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	4413      	add	r3, r2
 800118c:	4a8e      	ldr	r2, [pc, #568]	; (80013c8 <solveMaze+0x2cc>)
 800118e:	461c      	mov	r4, r3
 8001190:	4613      	mov	r3, r2
 8001192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001194:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (i = 0; i < WS2812_NUM_LEDS; i++) {
 8001198:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800119c:	3301      	adds	r3, #1
 800119e:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 80011a2:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80011a6:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 80011aa:	d3ea      	bcc.n	8001182 <solveMaze+0x86>
    }
    uint16_t front = 0; /* start of queue where elements are removed */
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    uint16_t rear = 0; /* end of queue where new elements are added */
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc

    /* enqueue start point and mark it as visited */
    pathPush(path, &maze->start);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3304      	adds	r3, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	6838      	ldr	r0, [r7, #0]
 80011c0:	f7ff fe7e 	bl	8000ec0 <pathPush>
    queue[rear++] = maze->start;
 80011c4:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80011c8:	1c5a      	adds	r2, r3, #1
 80011ca:	f8a7 20cc 	strh.w	r2, [r7, #204]	; 0xcc
 80011ce:	4a7d      	ldr	r2, [pc, #500]	; (80013c4 <solveMaze+0x2c8>)
 80011d0:	011b      	lsls	r3, r3, #4
 80011d2:	441a      	add	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4614      	mov	r4, r2
 80011d8:	3304      	adds	r3, #4
 80011da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    visited[maze->start.y][maze->start.x] = true;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6859      	ldr	r1, [r3, #4]
 80011e8:	4875      	ldr	r0, [pc, #468]	; (80013c0 <solveMaze+0x2c4>)
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	4403      	add	r3, r0
 80011f4:	440b      	add	r3, r1
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]

    /* BFS loop */
    while (front < rear) {
 80011fa:	e171      	b.n	80014e0 <solveMaze+0x3e4>
        /* dequeue point */
        current = queue[front++];
 80011fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001200:	1c5a      	adds	r2, r3, #1
 8001202:	f8a7 20ce 	strh.w	r2, [r7, #206]	; 0xce
 8001206:	4a6f      	ldr	r2, [pc, #444]	; (80013c4 <solveMaze+0x2c8>)
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	4413      	add	r3, r2
 800120c:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 8001210:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001212:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        /* exit found? */
        if (maze->grid[current.y][current.x] == EXIT) {
 8001216:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800121a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	4403      	add	r3, r0
 800122a:	440b      	add	r3, r1
 800122c:	3324      	adds	r3, #36	; 0x24
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b03      	cmp	r3, #3
 8001232:	f040 8082 	bne.w	800133a <solveMaze+0x23e>
            /* backtrack */
            while (!(current.x == maze->start.x && current.y == maze->start.y)) {
 8001236:	e056      	b.n	80012e6 <solveMaze+0x1ea>
                maze->grid[current.y][current.x] = SOLUTION; /* mark point as solution */
 8001238:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800123c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4403      	add	r3, r0
 800124c:	440b      	add	r3, r1
 800124e:	3324      	adds	r3, #36	; 0x24
 8001250:	2204      	movs	r2, #4
 8001252:	701a      	strb	r2, [r3, #0]
                pathPush(path, &(Point){current.x, current.y, -1, -1}); /* add point to solution path */
 8001254:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	4619      	mov	r1, r3
 8001272:	6838      	ldr	r0, [r7, #0]
 8001274:	f7ff fe24 	bl	8000ec0 <pathPush>

                /* find previous point in path */
                for (i = 0; i < rear; i++) {
 8001278:	2300      	movs	r3, #0
 800127a:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 800127e:	e02c      	b.n	80012da <solveMaze+0x1de>
                    if (queue[i].x == current.x && queue[i].y == current.y) {
 8001280:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8001284:	4a4f      	ldr	r2, [pc, #316]	; (80013c4 <solveMaze+0x2c8>)
 8001286:	011b      	lsls	r3, r3, #4
 8001288:	4413      	add	r3, r2
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001290:	429a      	cmp	r2, r3
 8001292:	d11d      	bne.n	80012d0 <solveMaze+0x1d4>
 8001294:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8001298:	4a4a      	ldr	r2, [pc, #296]	; (80013c4 <solveMaze+0x2c8>)
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	4413      	add	r3, r2
 800129e:	3304      	adds	r3, #4
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d112      	bne.n	80012d0 <solveMaze+0x1d4>
                        current.x = queue[i].prevX;
 80012aa:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80012ae:	4a45      	ldr	r2, [pc, #276]	; (80013c4 <solveMaze+0x2c8>)
 80012b0:	011b      	lsls	r3, r3, #4
 80012b2:	4413      	add	r3, r2
 80012b4:	3308      	adds	r3, #8
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                        current.y = queue[i].prevY;
 80012bc:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80012c0:	4a40      	ldr	r2, [pc, #256]	; (80013c4 <solveMaze+0x2c8>)
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	4413      	add	r3, r2
 80012c6:	330c      	adds	r3, #12
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                        break;
 80012ce:	e00a      	b.n	80012e6 <solveMaze+0x1ea>
                for (i = 0; i < rear; i++) {
 80012d0:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80012d4:	3301      	adds	r3, #1
 80012d6:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 80012da:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 80012de:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d3cc      	bcc.n	8001280 <solveMaze+0x184>
            while (!(current.x == maze->start.x && current.y == maze->start.y)) {
 80012e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d1a2      	bne.n	8001238 <solveMaze+0x13c>
 80012f2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d19c      	bne.n	8001238 <solveMaze+0x13c>
                    }
                }
            }

            /* mark start and exit in maze */
            maze->grid[maze->start.y][maze->start.x] = START;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6859      	ldr	r1, [r3, #4]
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	4403      	add	r3, r0
 8001312:	440b      	add	r3, r1
 8001314:	3324      	adds	r3, #36	; 0x24
 8001316:	2202      	movs	r2, #2
 8001318:	701a      	strb	r2, [r3, #0]
            maze->grid[maze->exit.y][maze->exit.x] = EXIT;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699a      	ldr	r2, [r3, #24]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6959      	ldr	r1, [r3, #20]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4403      	add	r3, r0
 800132e:	440b      	add	r3, r1
 8001330:	3324      	adds	r3, #36	; 0x24
 8001332:	2203      	movs	r2, #3
 8001334:	701a      	strb	r2, [r3, #0]

            break; /* exit found and path traced */
 8001336:	bf00      	nop
    //for (i = 0; i < maze->rows; i++) {
    //    custom_free(visited[i], maze->cols * sizeof(bool));
    //}
    //custom_free(visited, maze->rows * sizeof(bool*));
    //custom_free(queue, maze->rows * maze->cols * sizeof(Point));
}
 8001338:	e0d9      	b.n	80014ee <solveMaze+0x3f2>
        directions[0] = (Point){current.x + 1, current.y, current.x, current.y}; /* right */
 800133a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800133e:	1c58      	adds	r0, r3, #1
 8001340:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001344:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001348:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800134c:	66f8      	str	r0, [r7, #108]	; 0x6c
 800134e:	6739      	str	r1, [r7, #112]	; 0x70
 8001350:	677a      	str	r2, [r7, #116]	; 0x74
 8001352:	67bb      	str	r3, [r7, #120]	; 0x78
        directions[1] = (Point){current.x - 1, current.y, current.x, current.y}; /* left */
 8001354:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001358:	1e58      	subs	r0, r3, #1
 800135a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800135e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001362:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001366:	67f8      	str	r0, [r7, #124]	; 0x7c
 8001368:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800136c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001370:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        directions[2] = (Point){current.x, current.y + 1, current.x, current.y}; /* down */
 8001374:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001378:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800137c:	1c59      	adds	r1, r3, #1
 800137e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001382:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001386:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800138a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800138e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001392:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        directions[3] = (Point){current.x, current.y - 1, current.x, current.y}; /* up */
 8001396:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800139a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800139e:	1e59      	subs	r1, r3, #1
 80013a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80013a8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 80013ac:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80013b0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80013b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        for (i = 0; i < 4; i++) {
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 80013be:	e073      	b.n	80014a8 <solveMaze+0x3ac>
 80013c0:	20004260 	.word	0x20004260
 80013c4:	20004620 	.word	0x20004620
 80013c8:	08005bd4 	.word	0x08005bd4
            next = directions[i];
 80013cc:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	33d8      	adds	r3, #216	; 0xd8
 80013d4:	443b      	add	r3, r7
 80013d6:	3b6c      	subs	r3, #108	; 0x6c
 80013d8:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80013dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (next.x >= 0 && next.x < maze->cols && next.y >= 0 && next.y < maze->rows) {
 80013e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db59      	blt.n	800149e <solveMaze+0x3a2>
 80013ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	7852      	ldrb	r2, [r2, #1]
 80013f2:	4293      	cmp	r3, r2
 80013f4:	da53      	bge.n	800149e <solveMaze+0x3a2>
 80013f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	db4f      	blt.n	800149e <solveMaze+0x3a2>
 80013fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	4293      	cmp	r3, r2
 8001408:	da49      	bge.n	800149e <solveMaze+0x3a2>
                if (!visited[next.y][next.x] && (maze->grid[next.y][next.x] == PATH || maze->grid[next.y][next.x] == EXIT)) {
 800140a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800140e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8001412:	4839      	ldr	r0, [pc, #228]	; (80014f8 <solveMaze+0x3fc>)
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4403      	add	r3, r0
 800141e:	440b      	add	r3, r1
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	f083 0301 	eor.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d038      	beq.n	800149e <solveMaze+0x3a2>
 800142c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001430:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4403      	add	r3, r0
 8001440:	440b      	add	r3, r1
 8001442:	3324      	adds	r3, #36	; 0x24
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00e      	beq.n	8001468 <solveMaze+0x36c>
 800144a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800144e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4403      	add	r3, r0
 800145e:	440b      	add	r3, r1
 8001460:	3324      	adds	r3, #36	; 0x24
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b03      	cmp	r3, #3
 8001466:	d11a      	bne.n	800149e <solveMaze+0x3a2>
                    queue[rear++] = next;  /* enqueue valid adjacent cell */
 8001468:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	f8a7 20cc 	strh.w	r2, [r7, #204]	; 0xcc
 8001472:	4a22      	ldr	r2, [pc, #136]	; (80014fc <solveMaze+0x400>)
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	4413      	add	r3, r2
 8001478:	461c      	mov	r4, r3
 800147a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800147e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001480:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    visited[next.y][next.x] = true;
 8001484:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001488:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800148c:	481a      	ldr	r0, [pc, #104]	; (80014f8 <solveMaze+0x3fc>)
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4403      	add	r3, r0
 8001498:	440b      	add	r3, r1
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < 4; i++) {
 800149e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80014a2:	3301      	adds	r3, #1
 80014a4:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 80014a8:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d98d      	bls.n	80013cc <solveMaze+0x2d0>
        if (rear >= maze->rows * maze->cols) break;
 80014b0:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	785b      	ldrb	r3, [r3, #1]
 80014be:	fb01 f303 	mul.w	r3, r1, r3
 80014c2:	429a      	cmp	r2, r3
 80014c4:	da0a      	bge.n	80014dc <solveMaze+0x3e0>
        iterations++;
 80014c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80014ca:	3301      	adds	r3, #1
 80014cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        printf("%d \n", iterations);
 80014d0:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80014d4:	480a      	ldr	r0, [pc, #40]	; (8001500 <solveMaze+0x404>)
 80014d6:	f003 fd25 	bl	8004f24 <iprintf>
 80014da:	e001      	b.n	80014e0 <solveMaze+0x3e4>
        if (rear >= maze->rows * maze->cols) break;
 80014dc:	bf00      	nop
}
 80014de:	e006      	b.n	80014ee <solveMaze+0x3f2>
    while (front < rear) {
 80014e0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80014e4:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80014e8:	429a      	cmp	r2, r3
 80014ea:	f4ff ae87 	bcc.w	80011fc <solveMaze+0x100>
}
 80014ee:	bf00      	nop
 80014f0:	37dc      	adds	r7, #220	; 0xdc
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd90      	pop	{r4, r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20004260 	.word	0x20004260
 80014fc:	20004620 	.word	0x20004620
 8001500:	08005bcc 	.word	0x08005bcc

08001504 <initPRNG>:
#include "prng.h"

PseudoRNG rng;

/* init PRNG with a pre-generated list of random numbers */
void initPRNG(PseudoRNG* rng, int* numbers, int size) {
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
    rng->num = numbers;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	601a      	str	r2, [r3, #0]
    rng->ind = 0;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	605a      	str	r2, [r3, #4]
    rng->size = size;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	609a      	str	r2, [r3, #8]
}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <getRand>:

/* get next random number */
int getRand(PseudoRNG *rng) {
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
    int number = rng->num[rng->ind];
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	60fb      	str	r3, [r7, #12]
    rng->ind = (rng->ind + 1) % rng->size;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	3301      	adds	r3, #1
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6892      	ldr	r2, [r2, #8]
 8001550:	fb93 f1f2 	sdiv	r1, r3, r2
 8001554:	fb01 f202 	mul.w	r2, r1, r2
 8001558:	1a9a      	subs	r2, r3, r2
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	605a      	str	r2, [r3, #4]
    return number;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <HAL_MspInit+0x4c>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <HAL_MspInit+0x4c>)
 800157c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <HAL_MspInit+0x4c>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_MspInit+0x4c>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <HAL_MspInit+0x4c>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_MspInit+0x4c>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015aa:	2007      	movs	r0, #7
 80015ac:	f000 fd80 	bl	80020b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40023800 	.word	0x40023800

080015bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a44      	ldr	r2, [pc, #272]	; (80016ec <HAL_SPI_MspInit+0x130>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	f040 8081 	bne.w	80016e2 <HAL_SPI_MspInit+0x126>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	4b42      	ldr	r3, [pc, #264]	; (80016f0 <HAL_SPI_MspInit+0x134>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	4a41      	ldr	r2, [pc, #260]	; (80016f0 <HAL_SPI_MspInit+0x134>)
 80015ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
 80015f0:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <HAL_SPI_MspInit+0x134>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <HAL_SPI_MspInit+0x134>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	4a3a      	ldr	r2, [pc, #232]	; (80016f0 <HAL_SPI_MspInit+0x134>)
 8001606:	f043 0304 	orr.w	r3, r3, #4
 800160a:	6313      	str	r3, [r2, #48]	; 0x30
 800160c:	4b38      	ldr	r3, [pc, #224]	; (80016f0 <HAL_SPI_MspInit+0x134>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <HAL_SPI_MspInit+0x134>)
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	4a33      	ldr	r2, [pc, #204]	; (80016f0 <HAL_SPI_MspInit+0x134>)
 8001622:	f043 0302 	orr.w	r3, r3, #2
 8001626:	6313      	str	r3, [r2, #48]	; 0x30
 8001628:	4b31      	ldr	r3, [pc, #196]	; (80016f0 <HAL_SPI_MspInit+0x134>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001634:	2308      	movs	r3, #8
 8001636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001644:	2305      	movs	r3, #5
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	4829      	ldr	r0, [pc, #164]	; (80016f4 <HAL_SPI_MspInit+0x138>)
 8001650:	f001 f902 	bl	8002858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001666:	2305      	movs	r3, #5
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4821      	ldr	r0, [pc, #132]	; (80016f8 <HAL_SPI_MspInit+0x13c>)
 8001672:	f001 f8f1 	bl	8002858 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_SPI_MspInit+0x140>)
 8001678:	4a21      	ldr	r2, [pc, #132]	; (8001700 <HAL_SPI_MspInit+0x144>)
 800167a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800167c:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <HAL_SPI_MspInit+0x140>)
 800167e:	2200      	movs	r2, #0
 8001680:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <HAL_SPI_MspInit+0x140>)
 8001684:	2240      	movs	r2, #64	; 0x40
 8001686:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001688:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <HAL_SPI_MspInit+0x140>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_SPI_MspInit+0x140>)
 8001690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001694:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_SPI_MspInit+0x140>)
 8001698:	2200      	movs	r2, #0
 800169a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_SPI_MspInit+0x140>)
 800169e:	2200      	movs	r2, #0
 80016a0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <HAL_SPI_MspInit+0x140>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <HAL_SPI_MspInit+0x140>)
 80016aa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016ae:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_SPI_MspInit+0x140>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80016b6:	4811      	ldr	r0, [pc, #68]	; (80016fc <HAL_SPI_MspInit+0x140>)
 80016b8:	f000 fd3c 	bl	8002134 <HAL_DMA_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 80016c2:	f7ff fad1 	bl	8000c68 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a0c      	ldr	r2, [pc, #48]	; (80016fc <HAL_SPI_MspInit+0x140>)
 80016ca:	649a      	str	r2, [r3, #72]	; 0x48
 80016cc:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <HAL_SPI_MspInit+0x140>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	2024      	movs	r0, #36	; 0x24
 80016d8:	f000 fcf5 	bl	80020c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80016dc:	2024      	movs	r0, #36	; 0x24
 80016de:	f000 fd0e 	bl	80020fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	; 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40003800 	.word	0x40003800
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020800 	.word	0x40020800
 80016f8:	40020400 	.word	0x40020400
 80016fc:	200000e0 	.word	0x200000e0
 8001700:	40026070 	.word	0x40026070

08001704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001724:	d164      	bne.n	80017f0 <HAL_TIM_Base_MspInit+0xec>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <HAL_TIM_Base_MspInit+0x11c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a3c      	ldr	r2, [pc, #240]	; (8001820 <HAL_TIM_Base_MspInit+0x11c>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b3a      	ldr	r3, [pc, #232]	; (8001820 <HAL_TIM_Base_MspInit+0x11c>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b36      	ldr	r3, [pc, #216]	; (8001820 <HAL_TIM_Base_MspInit+0x11c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a35      	ldr	r2, [pc, #212]	; (8001820 <HAL_TIM_Base_MspInit+0x11c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b33      	ldr	r3, [pc, #204]	; (8001820 <HAL_TIM_Base_MspInit+0x11c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800175e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001770:	2301      	movs	r3, #1
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	482a      	ldr	r0, [pc, #168]	; (8001824 <HAL_TIM_Base_MspInit+0x120>)
 800177c:	f001 f86c 	bl	8002858 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 8001780:	4b29      	ldr	r3, [pc, #164]	; (8001828 <HAL_TIM_Base_MspInit+0x124>)
 8001782:	4a2a      	ldr	r2, [pc, #168]	; (800182c <HAL_TIM_Base_MspInit+0x128>)
 8001784:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 8001786:	4b28      	ldr	r3, [pc, #160]	; (8001828 <HAL_TIM_Base_MspInit+0x124>)
 8001788:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800178c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800178e:	4b26      	ldr	r3, [pc, #152]	; (8001828 <HAL_TIM_Base_MspInit+0x124>)
 8001790:	2240      	movs	r2, #64	; 0x40
 8001792:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <HAL_TIM_Base_MspInit+0x124>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 800179a:	4b23      	ldr	r3, [pc, #140]	; (8001828 <HAL_TIM_Base_MspInit+0x124>)
 800179c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017a2:	4b21      	ldr	r3, [pc, #132]	; (8001828 <HAL_TIM_Base_MspInit+0x124>)
 80017a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017a8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017aa:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <HAL_TIM_Base_MspInit+0x124>)
 80017ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 80017b2:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_TIM_Base_MspInit+0x124>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_TIM_Base_MspInit+0x124>)
 80017ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017be:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_TIM_Base_MspInit+0x124>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 80017c6:	4818      	ldr	r0, [pc, #96]	; (8001828 <HAL_TIM_Base_MspInit+0x124>)
 80017c8:	f000 fcb4 	bl	8002134 <HAL_DMA_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_TIM_Base_MspInit+0xd2>
    {
      Error_Handler();
 80017d2:	f7ff fa49 	bl	8000c68 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a13      	ldr	r2, [pc, #76]	; (8001828 <HAL_TIM_Base_MspInit+0x124>)
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
 80017dc:	4a12      	ldr	r2, [pc, #72]	; (8001828 <HAL_TIM_Base_MspInit+0x124>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a10      	ldr	r2, [pc, #64]	; (8001828 <HAL_TIM_Base_MspInit+0x124>)
 80017e6:	621a      	str	r2, [r3, #32]
 80017e8:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <HAL_TIM_Base_MspInit+0x124>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017ee:	e012      	b.n	8001816 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <HAL_TIM_Base_MspInit+0x12c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d10d      	bne.n	8001816 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_TIM_Base_MspInit+0x11c>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a07      	ldr	r2, [pc, #28]	; (8001820 <HAL_TIM_Base_MspInit+0x11c>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_TIM_Base_MspInit+0x11c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
}
 8001816:	bf00      	nop
 8001818:	3728      	adds	r7, #40	; 0x28
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800
 8001824:	40020000 	.word	0x40020000
 8001828:	200001d0 	.word	0x200001d0
 800182c:	40026028 	.word	0x40026028
 8001830:	40000400 	.word	0x40000400

08001834 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001854:	d11e      	bne.n	8001894 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_TIM_MspPostInit+0x68>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a0f      	ldr	r2, [pc, #60]	; (800189c <HAL_TIM_MspPostInit+0x68>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_TIM_MspPostInit+0x68>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001876:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001884:	2301      	movs	r3, #1
 8001886:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	4619      	mov	r1, r3
 800188e:	4804      	ldr	r0, [pc, #16]	; (80018a0 <HAL_TIM_MspPostInit+0x6c>)
 8001890:	f000 ffe2 	bl	8002858 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001894:	bf00      	nop
 8001896:	3720      	adds	r7, #32
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020400 	.word	0x40020400

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a19      	ldr	r2, [pc, #100]	; (8001928 <HAL_UART_MspInit+0x84>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d12b      	bne.n	800191e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_UART_MspInit+0x88>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a17      	ldr	r2, [pc, #92]	; (800192c <HAL_UART_MspInit+0x88>)
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_UART_MspInit+0x88>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_UART_MspInit+0x88>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <HAL_UART_MspInit+0x88>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_UART_MspInit+0x88>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018fe:	230c      	movs	r3, #12
 8001900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800190e:	2307      	movs	r3, #7
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <HAL_UART_MspInit+0x8c>)
 800191a:	f000 ff9d 	bl	8002858 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	; 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40004400 	.word	0x40004400
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <NMI_Handler+0x4>

0800193a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <HardFault_Handler+0x4>

08001940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <MemManage_Handler+0x4>

08001946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <UsageFault_Handler+0x4>

08001952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001980:	f000 fa82 	bl	8001e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <DMA1_Stream1_IRQHandler+0x10>)
 800198e:	f000 fcf9 	bl	8002384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200001d0 	.word	0x200001d0

0800199c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <DMA1_Stream4_IRQHandler+0x10>)
 80019a2:	f000 fcef 	bl	8002384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200000e0 	.word	0x200000e0

080019b0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <SPI2_IRQHandler+0x10>)
 80019b6:	f001 fec5 	bl	8003744 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000088 	.word	0x20000088

080019c4 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ce:	f003 fc4d 	bl	800526c <__errno>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2216      	movs	r2, #22
 80019d6:	601a      	str	r2, [r3, #0]
  return -1;
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_exit>:

void _exit (int status)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019ec:	f04f 31ff 	mov.w	r1, #4294967295
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ffe7 	bl	80019c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019f6:	e7fe      	b.n	80019f6 <_exit+0x12>

080019f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	e00a      	b.n	8001a20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a0a:	f3af 8000 	nop.w
 8001a0e:	4601      	mov	r1, r0
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	60ba      	str	r2, [r7, #8]
 8001a16:	b2ca      	uxtb	r2, r1
 8001a18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dbf0      	blt.n	8001a0a <_read+0x12>
  }

  return len;
 8001a28:	687b      	ldr	r3, [r7, #4]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a5a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <_isatty>:

int _isatty(int file)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa4:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <_sbrk+0x5c>)
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <_sbrk+0x60>)
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab0:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <_sbrk+0x64>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <_sbrk+0x68>)
 8001abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d207      	bcs.n	8001adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001acc:	f003 fbce 	bl	800526c <__errno>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ada:	e009      	b.n	8001af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <_sbrk+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <_sbrk+0x64>)
 8001aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20018000 	.word	0x20018000
 8001afc:	00000400 	.word	0x00000400
 8001b00:	2000822c 	.word	0x2000822c
 8001b04:	2000ddc0 	.word	0x2000ddc0

08001b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <SystemInit+0x20>)
 8001b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <SystemInit+0x20>)
 8001b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <ws2812_init>:

uint8_t ws2812_buffer[WS2812_BUFFER_SIZE];

// set all pixels to 0 (off)
void ws2812_init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
  memset(ws2812_buffer, 0, WS2812_BUFFER_SIZE); // fill buffer with 0s
 8001b32:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8001b36:	2100      	movs	r1, #0
 8001b38:	480b      	ldr	r0, [pc, #44]	; (8001b68 <ws2812_init+0x3c>)
 8001b3a:	f003 fb39 	bl	80051b0 <memset>
  HAL_SPI_Transmit_DMA(&hspi2, ws2812_buffer, WS2812_BUFFER_SIZE); // write buffer to LEDs
 8001b3e:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8001b42:	4909      	ldr	r1, [pc, #36]	; (8001b68 <ws2812_init+0x3c>)
 8001b44:	4809      	ldr	r0, [pc, #36]	; (8001b6c <ws2812_init+0x40>)
 8001b46:	f001 fd47 	bl	80035d8 <HAL_SPI_Transmit_DMA>
  ws2812_pixel_all(&(ColorRGB_t){0, 0, 0}); // set LEDs to black
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	713b      	strb	r3, [r7, #4]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	717b      	strb	r3, [r7, #5]
 8001b52:	2300      	movs	r3, #0
 8001b54:	71bb      	strb	r3, [r7, #6]
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 f879 	bl	8001c50 <ws2812_pixel_all>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20008230 	.word	0x20008230
 8001b6c:	20000088 	.word	0x20000088

08001b70 <ws2812_pixel>:

// set one pixel to given color
void ws2812_pixel(uint8_t _x, uint8_t _y, ColorRGB_t* color)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	603a      	str	r2, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	71bb      	strb	r3, [r7, #6]
  uint8_t* ptr = &ws2812_buffer[24 * coord2Index(_x, _y)];
 8001b80:	79ba      	ldrb	r2, [r7, #6]
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f8de 	bl	8001d48 <coord2Index>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <ws2812_pixel+0xdc>)
 8001b9c:	4413      	add	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
  WS2812_FILL_BUFFER(color->g);
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	72fb      	strb	r3, [r7, #11]
 8001ba4:	e014      	b.n	8001bd0 <ws2812_pixel+0x60>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	789a      	ldrb	r2, [r3, #2]
 8001baa:	7afb      	ldrb	r3, [r7, #11]
 8001bac:	4013      	ands	r3, r2
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <ws2812_pixel+0x50>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	60fa      	str	r2, [r7, #12]
 8001bba:	22fc      	movs	r2, #252	; 0xfc
 8001bbc:	701a      	strb	r2, [r3, #0]
 8001bbe:	e004      	b.n	8001bca <ws2812_pixel+0x5a>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	60fa      	str	r2, [r7, #12]
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	701a      	strb	r2, [r3, #0]
 8001bca:	7afb      	ldrb	r3, [r7, #11]
 8001bcc:	085b      	lsrs	r3, r3, #1
 8001bce:	72fb      	strb	r3, [r7, #11]
 8001bd0:	7afb      	ldrb	r3, [r7, #11]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1e7      	bne.n	8001ba6 <ws2812_pixel+0x36>
  WS2812_FILL_BUFFER(color->r);
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	72bb      	strb	r3, [r7, #10]
 8001bda:	e014      	b.n	8001c06 <ws2812_pixel+0x96>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	785a      	ldrb	r2, [r3, #1]
 8001be0:	7abb      	ldrb	r3, [r7, #10]
 8001be2:	4013      	ands	r3, r2
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d005      	beq.n	8001bf6 <ws2812_pixel+0x86>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	60fa      	str	r2, [r7, #12]
 8001bf0:	22fc      	movs	r2, #252	; 0xfc
 8001bf2:	701a      	strb	r2, [r3, #0]
 8001bf4:	e004      	b.n	8001c00 <ws2812_pixel+0x90>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	60fa      	str	r2, [r7, #12]
 8001bfc:	2280      	movs	r2, #128	; 0x80
 8001bfe:	701a      	strb	r2, [r3, #0]
 8001c00:	7abb      	ldrb	r3, [r7, #10]
 8001c02:	085b      	lsrs	r3, r3, #1
 8001c04:	72bb      	strb	r3, [r7, #10]
 8001c06:	7abb      	ldrb	r3, [r7, #10]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1e7      	bne.n	8001bdc <ws2812_pixel+0x6c>
  WS2812_FILL_BUFFER(color->b);
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	727b      	strb	r3, [r7, #9]
 8001c10:	e014      	b.n	8001c3c <ws2812_pixel+0xcc>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	781a      	ldrb	r2, [r3, #0]
 8001c16:	7a7b      	ldrb	r3, [r7, #9]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <ws2812_pixel+0xbc>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	60fa      	str	r2, [r7, #12]
 8001c26:	22fc      	movs	r2, #252	; 0xfc
 8001c28:	701a      	strb	r2, [r3, #0]
 8001c2a:	e004      	b.n	8001c36 <ws2812_pixel+0xc6>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	60fa      	str	r2, [r7, #12]
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	7a7b      	ldrb	r3, [r7, #9]
 8001c38:	085b      	lsrs	r3, r3, #1
 8001c3a:	727b      	strb	r3, [r7, #9]
 8001c3c:	7a7b      	ldrb	r3, [r7, #9]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1e7      	bne.n	8001c12 <ws2812_pixel+0xa2>
}
 8001c42:	bf00      	nop
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20008230 	.word	0x20008230

08001c50 <ws2812_pixel_all>:

// set all pixels to given color
void ws2812_pixel_all(ColorRGB_t* color)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint8_t* ptr = ws2812_buffer;
 8001c58:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <ws2812_pixel_all+0xd0>)
 8001c5a:	617b      	str	r3, [r7, #20]
  for (uint16_t i = 0; i < WS2812_NUM_LEDS; ++i) 
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	827b      	strh	r3, [r7, #18]
 8001c60:	e053      	b.n	8001d0a <ws2812_pixel_all+0xba>
  {
    WS2812_FILL_BUFFER(color->g);
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	747b      	strb	r3, [r7, #17]
 8001c66:	e014      	b.n	8001c92 <ws2812_pixel_all+0x42>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	789a      	ldrb	r2, [r3, #2]
 8001c6c:	7c7b      	ldrb	r3, [r7, #17]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <ws2812_pixel_all+0x32>
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	617a      	str	r2, [r7, #20]
 8001c7c:	22fc      	movs	r2, #252	; 0xfc
 8001c7e:	701a      	strb	r2, [r3, #0]
 8001c80:	e004      	b.n	8001c8c <ws2812_pixel_all+0x3c>
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	617a      	str	r2, [r7, #20]
 8001c88:	2280      	movs	r2, #128	; 0x80
 8001c8a:	701a      	strb	r2, [r3, #0]
 8001c8c:	7c7b      	ldrb	r3, [r7, #17]
 8001c8e:	085b      	lsrs	r3, r3, #1
 8001c90:	747b      	strb	r3, [r7, #17]
 8001c92:	7c7b      	ldrb	r3, [r7, #17]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1e7      	bne.n	8001c68 <ws2812_pixel_all+0x18>
    WS2812_FILL_BUFFER(color->r);
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	743b      	strb	r3, [r7, #16]
 8001c9c:	e014      	b.n	8001cc8 <ws2812_pixel_all+0x78>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	785a      	ldrb	r2, [r3, #1]
 8001ca2:	7c3b      	ldrb	r3, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <ws2812_pixel_all+0x68>
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	617a      	str	r2, [r7, #20]
 8001cb2:	22fc      	movs	r2, #252	; 0xfc
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	e004      	b.n	8001cc2 <ws2812_pixel_all+0x72>
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	617a      	str	r2, [r7, #20]
 8001cbe:	2280      	movs	r2, #128	; 0x80
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	7c3b      	ldrb	r3, [r7, #16]
 8001cc4:	085b      	lsrs	r3, r3, #1
 8001cc6:	743b      	strb	r3, [r7, #16]
 8001cc8:	7c3b      	ldrb	r3, [r7, #16]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1e7      	bne.n	8001c9e <ws2812_pixel_all+0x4e>
    WS2812_FILL_BUFFER(color->b);
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	73fb      	strb	r3, [r7, #15]
 8001cd2:	e014      	b.n	8001cfe <ws2812_pixel_all+0xae>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	781a      	ldrb	r2, [r3, #0]
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <ws2812_pixel_all+0x9e>
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	617a      	str	r2, [r7, #20]
 8001ce8:	22fc      	movs	r2, #252	; 0xfc
 8001cea:	701a      	strb	r2, [r3, #0]
 8001cec:	e004      	b.n	8001cf8 <ws2812_pixel_all+0xa8>
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	617a      	str	r2, [r7, #20]
 8001cf4:	2280      	movs	r2, #128	; 0x80
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	085b      	lsrs	r3, r3, #1
 8001cfc:	73fb      	strb	r3, [r7, #15]
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1e7      	bne.n	8001cd4 <ws2812_pixel_all+0x84>
  for (uint16_t i = 0; i < WS2812_NUM_LEDS; ++i) 
 8001d04:	8a7b      	ldrh	r3, [r7, #18]
 8001d06:	3301      	adds	r3, #1
 8001d08:	827b      	strh	r3, [r7, #18]
 8001d0a:	8a7b      	ldrh	r3, [r7, #18]
 8001d0c:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8001d10:	d3a7      	bcc.n	8001c62 <ws2812_pixel_all+0x12>
  }
}
 8001d12:	bf00      	nop
 8001d14:	bf00      	nop
 8001d16:	371c      	adds	r7, #28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	20008230 	.word	0x20008230

08001d24 <HAL_SPI_TxCpltCallback>:
    }
  }
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  // Restart transmission when buffer tx is completed
  HAL_SPI_Transmit_DMA(&hspi2, ws2812_buffer, WS2812_BUFFER_SIZE);
 8001d2c:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8001d30:	4903      	ldr	r1, [pc, #12]	; (8001d40 <HAL_SPI_TxCpltCallback+0x1c>)
 8001d32:	4804      	ldr	r0, [pc, #16]	; (8001d44 <HAL_SPI_TxCpltCallback+0x20>)
 8001d34:	f001 fc50 	bl	80035d8 <HAL_SPI_Transmit_DMA>
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20008230 	.word	0x20008230
 8001d44:	20000088 	.word	0x20000088

08001d48 <coord2Index>:

uint16_t coord2Index (uint8_t _x, uint8_t _y)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	460a      	mov	r2, r1
 8001d52:	71fb      	strb	r3, [r7, #7]
 8001d54:	4613      	mov	r3, r2
 8001d56:	71bb      	strb	r3, [r7, #6]
{ 176,177,178,179,180,181,182,183,368,369,370,371,372,373,374,375,560,561,562,563,564,565,566,567,752,753,754,755,756,757,758,759,944,945,946,947,948,949,950,951 },
{ 184,185,186,187,188,189,190,191,376,377,378,379,380,381,382,383,568,569,570,571,572,573,574,575,760,761,762,763,764,765,766,767,952,953,954,955,956,957,958,959 }

};

  if (_x > WS2812_NUM_LEDS_X - 1) _x = WS2812_NUM_LEDS_X - 1;
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	2b27      	cmp	r3, #39	; 0x27
 8001d5c:	d901      	bls.n	8001d62 <coord2Index+0x1a>
 8001d5e:	2327      	movs	r3, #39	; 0x27
 8001d60:	71fb      	strb	r3, [r7, #7]
  if (_y > WS2812_NUM_LEDS_Y - 1) _y = WS2812_NUM_LEDS_Y - 1;
 8001d62:	79bb      	ldrb	r3, [r7, #6]
 8001d64:	2b17      	cmp	r3, #23
 8001d66:	d901      	bls.n	8001d6c <coord2Index+0x24>
 8001d68:	2317      	movs	r3, #23
 8001d6a:	71bb      	strb	r3, [r7, #6]

  return lookup_table[_y][_x];
 8001d6c:	79ba      	ldrb	r2, [r7, #6]
 8001d6e:	79f9      	ldrb	r1, [r7, #7]
 8001d70:	4806      	ldr	r0, [pc, #24]	; (8001d8c <coord2Index+0x44>)
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	08005bfc 	.word	0x08005bfc

08001d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d94:	480d      	ldr	r0, [pc, #52]	; (8001dcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d96:	490e      	ldr	r1, [pc, #56]	; (8001dd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d98:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d9c:	e002      	b.n	8001da4 <LoopCopyDataInit>

08001d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da2:	3304      	adds	r3, #4

08001da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da8:	d3f9      	bcc.n	8001d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001daa:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dac:	4c0b      	ldr	r4, [pc, #44]	; (8001ddc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db0:	e001      	b.n	8001db6 <LoopFillZerobss>

08001db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db4:	3204      	adds	r2, #4

08001db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db8:	d3fb      	bcc.n	8001db2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dba:	f7ff fea5 	bl	8001b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dbe:	f003 fa5b 	bl	8005278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc2:	f7fe fc1f 	bl	8000604 <main>
  bx  lr    
 8001dc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001dd4:	080063c8 	.word	0x080063c8
  ldr r2, =_sbss
 8001dd8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001ddc:	2000ddbc 	.word	0x2000ddbc

08001de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de0:	e7fe      	b.n	8001de0 <ADC_IRQHandler>
	...

08001de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001de8:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_Init+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <HAL_Init+0x40>)
 8001dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_Init+0x40>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <HAL_Init+0x40>)
 8001dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_Init+0x40>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_Init+0x40>)
 8001e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f000 f94f 	bl	80020b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e12:	2000      	movs	r0, #0
 8001e14:	f000 f808 	bl	8001e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e18:	f7ff fba8 	bl	800156c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40023c00 	.word	0x40023c00

08001e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_InitTick+0x54>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_InitTick+0x58>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 f967 	bl	800211a <HAL_SYSTICK_Config>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00e      	b.n	8001e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b0f      	cmp	r3, #15
 8001e5a:	d80a      	bhi.n	8001e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	f000 f92f 	bl	80020c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e68:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <HAL_InitTick+0x5c>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e000      	b.n	8001e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000004 	.word	0x20000004
 8001e80:	2000000c 	.word	0x2000000c
 8001e84:	20000008 	.word	0x20000008

08001e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_IncTick+0x20>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_IncTick+0x24>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	4a04      	ldr	r2, [pc, #16]	; (8001eac <HAL_IncTick+0x24>)
 8001e9a:	6013      	str	r3, [r2, #0]
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	2000000c 	.word	0x2000000c
 8001eac:	2000dc6c 	.word	0x2000dc6c

08001eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <HAL_GetTick+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	2000dc6c 	.word	0x2000dc6c

08001ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed0:	f7ff ffee 	bl	8001eb0 <HAL_GetTick>
 8001ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee0:	d005      	beq.n	8001eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_Delay+0x44>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4413      	add	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eee:	bf00      	nop
 8001ef0:	f7ff ffde 	bl	8001eb0 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d8f7      	bhi.n	8001ef0 <HAL_Delay+0x28>
  {
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2000000c 	.word	0x2000000c

08001f10 <__NVIC_SetPriorityGrouping>:
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f42:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	60d3      	str	r3, [r2, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_GetPriorityGrouping>:
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <__NVIC_GetPriorityGrouping+0x18>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	f003 0307 	and.w	r3, r3, #7
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_EnableIRQ>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	db0b      	blt.n	8001f9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	f003 021f 	and.w	r2, r3, #31
 8001f8c:	4907      	ldr	r1, [pc, #28]	; (8001fac <__NVIC_EnableIRQ+0x38>)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	2001      	movs	r0, #1
 8001f96:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000e100 	.word	0xe000e100

08001fb0 <__NVIC_SetPriority>:
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	6039      	str	r1, [r7, #0]
 8001fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	db0a      	blt.n	8001fda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	490c      	ldr	r1, [pc, #48]	; (8001ffc <__NVIC_SetPriority+0x4c>)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	0112      	lsls	r2, r2, #4
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fd8:	e00a      	b.n	8001ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4908      	ldr	r1, [pc, #32]	; (8002000 <__NVIC_SetPriority+0x50>)
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	3b04      	subs	r3, #4
 8001fe8:	0112      	lsls	r2, r2, #4
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	440b      	add	r3, r1
 8001fee:	761a      	strb	r2, [r3, #24]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000e100 	.word	0xe000e100
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <NVIC_EncodePriority>:
{
 8002004:	b480      	push	{r7}
 8002006:	b089      	sub	sp, #36	; 0x24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f1c3 0307 	rsb	r3, r3, #7
 800201e:	2b04      	cmp	r3, #4
 8002020:	bf28      	it	cs
 8002022:	2304      	movcs	r3, #4
 8002024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3304      	adds	r3, #4
 800202a:	2b06      	cmp	r3, #6
 800202c:	d902      	bls.n	8002034 <NVIC_EncodePriority+0x30>
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3b03      	subs	r3, #3
 8002032:	e000      	b.n	8002036 <NVIC_EncodePriority+0x32>
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	f04f 32ff 	mov.w	r2, #4294967295
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	401a      	ands	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800204c:	f04f 31ff 	mov.w	r1, #4294967295
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	43d9      	mvns	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	4313      	orrs	r3, r2
}
 800205e:	4618      	mov	r0, r3
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <SysTick_Config>:
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800207c:	d301      	bcc.n	8002082 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800207e:	2301      	movs	r3, #1
 8002080:	e00f      	b.n	80020a2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <SysTick_Config+0x40>)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208a:	210f      	movs	r1, #15
 800208c:	f04f 30ff 	mov.w	r0, #4294967295
 8002090:	f7ff ff8e 	bl	8001fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <SysTick_Config+0x40>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209a:	4b04      	ldr	r3, [pc, #16]	; (80020ac <SysTick_Config+0x40>)
 800209c:	2207      	movs	r2, #7
 800209e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	e000e010 	.word	0xe000e010

080020b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ff29 	bl	8001f10 <__NVIC_SetPriorityGrouping>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d8:	f7ff ff3e 	bl	8001f58 <__NVIC_GetPriorityGrouping>
 80020dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	6978      	ldr	r0, [r7, #20]
 80020e4:	f7ff ff8e 	bl	8002004 <NVIC_EncodePriority>
 80020e8:	4602      	mov	r2, r0
 80020ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff5d 	bl	8001fb0 <__NVIC_SetPriority>
}
 80020f6:	bf00      	nop
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	4603      	mov	r3, r0
 8002106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff31 	bl	8001f74 <__NVIC_EnableIRQ>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ffa2 	bl	800206c <SysTick_Config>
 8002128:	4603      	mov	r3, r0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002140:	f7ff feb6 	bl	8001eb0 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e099      	b.n	8002284 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002170:	e00f      	b.n	8002192 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002172:	f7ff fe9d 	bl	8001eb0 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b05      	cmp	r3, #5
 800217e:	d908      	bls.n	8002192 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2220      	movs	r2, #32
 8002184:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2203      	movs	r2, #3
 800218a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e078      	b.n	8002284 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1e8      	bne.n	8002172 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	4b38      	ldr	r3, [pc, #224]	; (800228c <HAL_DMA_Init+0x158>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d107      	bne.n	80021fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	4313      	orrs	r3, r2
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f023 0307 	bic.w	r3, r3, #7
 8002212:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	2b04      	cmp	r3, #4
 8002224:	d117      	bne.n	8002256 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4313      	orrs	r3, r2
 800222e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00e      	beq.n	8002256 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 fa91 	bl	8002760 <DMA_CheckFifoParam>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2240      	movs	r2, #64	; 0x40
 8002248:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002252:	2301      	movs	r3, #1
 8002254:	e016      	b.n	8002284 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 fa48 	bl	80026f4 <DMA_CalcBaseAndBitshift>
 8002264:	4603      	mov	r3, r0
 8002266:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	223f      	movs	r2, #63	; 0x3f
 800226e:	409a      	lsls	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	f010803f 	.word	0xf010803f

08002290 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_DMA_Start_IT+0x26>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e040      	b.n	8002338 <HAL_DMA_Start_IT+0xa8>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d12f      	bne.n	800232a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2202      	movs	r2, #2
 80022ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f9da 	bl	8002698 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e8:	223f      	movs	r2, #63	; 0x3f
 80022ea:	409a      	lsls	r2, r3
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0216 	orr.w	r2, r2, #22
 80022fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	2b00      	cmp	r3, #0
 8002306:	d007      	beq.n	8002318 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0208 	orr.w	r2, r2, #8
 8002316:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0201 	orr.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	e005      	b.n	8002336 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002332:	2302      	movs	r3, #2
 8002334:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002336:	7dfb      	ldrb	r3, [r7, #23]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d004      	beq.n	800235e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e00c      	b.n	8002378 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2205      	movs	r2, #5
 8002362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0201 	bic.w	r2, r2, #1
 8002374:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002390:	4b8e      	ldr	r3, [pc, #568]	; (80025cc <HAL_DMA_IRQHandler+0x248>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a8e      	ldr	r2, [pc, #568]	; (80025d0 <HAL_DMA_IRQHandler+0x24c>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	0a9b      	lsrs	r3, r3, #10
 800239c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	2208      	movs	r2, #8
 80023b0:	409a      	lsls	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01a      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d013      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0204 	bic.w	r2, r2, #4
 80023d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	2208      	movs	r2, #8
 80023de:	409a      	lsls	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e8:	f043 0201 	orr.w	r2, r3, #1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f4:	2201      	movs	r2, #1
 80023f6:	409a      	lsls	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d012      	beq.n	8002426 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00b      	beq.n	8002426 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002412:	2201      	movs	r2, #1
 8002414:	409a      	lsls	r2, r3
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241e:	f043 0202 	orr.w	r2, r3, #2
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	2204      	movs	r2, #4
 800242c:	409a      	lsls	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4013      	ands	r3, r2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d012      	beq.n	800245c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00b      	beq.n	800245c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002448:	2204      	movs	r2, #4
 800244a:	409a      	lsls	r2, r3
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	f043 0204 	orr.w	r2, r3, #4
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002460:	2210      	movs	r2, #16
 8002462:	409a      	lsls	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d043      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d03c      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	2210      	movs	r2, #16
 8002480:	409a      	lsls	r2, r3
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d018      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d108      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d024      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	4798      	blx	r3
 80024b2:	e01f      	b.n	80024f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01b      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
 80024c4:	e016      	b.n	80024f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d107      	bne.n	80024e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0208 	bic.w	r2, r2, #8
 80024e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f8:	2220      	movs	r2, #32
 80024fa:	409a      	lsls	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 808f 	beq.w	8002624 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 8087 	beq.w	8002624 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251a:	2220      	movs	r2, #32
 800251c:	409a      	lsls	r2, r3
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b05      	cmp	r3, #5
 800252c:	d136      	bne.n	800259c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0216 	bic.w	r2, r2, #22
 800253c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695a      	ldr	r2, [r3, #20]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800254c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	d103      	bne.n	800255e <HAL_DMA_IRQHandler+0x1da>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255a:	2b00      	cmp	r3, #0
 800255c:	d007      	beq.n	800256e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0208 	bic.w	r2, r2, #8
 800256c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002572:	223f      	movs	r2, #63	; 0x3f
 8002574:	409a      	lsls	r2, r3
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258e:	2b00      	cmp	r3, #0
 8002590:	d07e      	beq.n	8002690 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	4798      	blx	r3
        }
        return;
 800259a:	e079      	b.n	8002690 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d01d      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10d      	bne.n	80025d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d031      	beq.n	8002624 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	4798      	blx	r3
 80025c8:	e02c      	b.n	8002624 <HAL_DMA_IRQHandler+0x2a0>
 80025ca:	bf00      	nop
 80025cc:	20000004 	.word	0x20000004
 80025d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d023      	beq.n	8002624 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	4798      	blx	r3
 80025e4:	e01e      	b.n	8002624 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10f      	bne.n	8002614 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0210 	bic.w	r2, r2, #16
 8002602:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	2b00      	cmp	r3, #0
 800262a:	d032      	beq.n	8002692 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d022      	beq.n	800267e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2205      	movs	r2, #5
 800263c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	3301      	adds	r3, #1
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	429a      	cmp	r2, r3
 800265a:	d307      	bcc.n	800266c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f2      	bne.n	8002650 <HAL_DMA_IRQHandler+0x2cc>
 800266a:	e000      	b.n	800266e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800266c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002682:	2b00      	cmp	r3, #0
 8002684:	d005      	beq.n	8002692 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
 800268e:	e000      	b.n	8002692 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002690:	bf00      	nop
    }
  }
}
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b40      	cmp	r3, #64	; 0x40
 80026c4:	d108      	bne.n	80026d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026d6:	e007      	b.n	80026e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	60da      	str	r2, [r3, #12]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	3b10      	subs	r3, #16
 8002704:	4a14      	ldr	r2, [pc, #80]	; (8002758 <DMA_CalcBaseAndBitshift+0x64>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800270e:	4a13      	ldr	r2, [pc, #76]	; (800275c <DMA_CalcBaseAndBitshift+0x68>)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4413      	add	r3, r2
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b03      	cmp	r3, #3
 8002720:	d909      	bls.n	8002736 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800272a:	f023 0303 	bic.w	r3, r3, #3
 800272e:	1d1a      	adds	r2, r3, #4
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	659a      	str	r2, [r3, #88]	; 0x58
 8002734:	e007      	b.n	8002746 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800273e:	f023 0303 	bic.w	r3, r3, #3
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	aaaaaaab 	.word	0xaaaaaaab
 800275c:	0800637c 	.word	0x0800637c

08002760 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d11f      	bne.n	80027ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b03      	cmp	r3, #3
 800277e:	d856      	bhi.n	800282e <DMA_CheckFifoParam+0xce>
 8002780:	a201      	add	r2, pc, #4	; (adr r2, 8002788 <DMA_CheckFifoParam+0x28>)
 8002782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002786:	bf00      	nop
 8002788:	08002799 	.word	0x08002799
 800278c:	080027ab 	.word	0x080027ab
 8002790:	08002799 	.word	0x08002799
 8002794:	0800282f 	.word	0x0800282f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d046      	beq.n	8002832 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a8:	e043      	b.n	8002832 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027b2:	d140      	bne.n	8002836 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b8:	e03d      	b.n	8002836 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027c2:	d121      	bne.n	8002808 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d837      	bhi.n	800283a <DMA_CheckFifoParam+0xda>
 80027ca:	a201      	add	r2, pc, #4	; (adr r2, 80027d0 <DMA_CheckFifoParam+0x70>)
 80027cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d0:	080027e1 	.word	0x080027e1
 80027d4:	080027e7 	.word	0x080027e7
 80027d8:	080027e1 	.word	0x080027e1
 80027dc:	080027f9 	.word	0x080027f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
      break;
 80027e4:	e030      	b.n	8002848 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d025      	beq.n	800283e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f6:	e022      	b.n	800283e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002800:	d11f      	bne.n	8002842 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002806:	e01c      	b.n	8002842 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d903      	bls.n	8002816 <DMA_CheckFifoParam+0xb6>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b03      	cmp	r3, #3
 8002812:	d003      	beq.n	800281c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002814:	e018      	b.n	8002848 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
      break;
 800281a:	e015      	b.n	8002848 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00e      	beq.n	8002846 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
      break;
 800282c:	e00b      	b.n	8002846 <DMA_CheckFifoParam+0xe6>
      break;
 800282e:	bf00      	nop
 8002830:	e00a      	b.n	8002848 <DMA_CheckFifoParam+0xe8>
      break;
 8002832:	bf00      	nop
 8002834:	e008      	b.n	8002848 <DMA_CheckFifoParam+0xe8>
      break;
 8002836:	bf00      	nop
 8002838:	e006      	b.n	8002848 <DMA_CheckFifoParam+0xe8>
      break;
 800283a:	bf00      	nop
 800283c:	e004      	b.n	8002848 <DMA_CheckFifoParam+0xe8>
      break;
 800283e:	bf00      	nop
 8002840:	e002      	b.n	8002848 <DMA_CheckFifoParam+0xe8>
      break;   
 8002842:	bf00      	nop
 8002844:	e000      	b.n	8002848 <DMA_CheckFifoParam+0xe8>
      break;
 8002846:	bf00      	nop
    }
  } 
  
  return status; 
 8002848:	7bfb      	ldrb	r3, [r7, #15]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop

08002858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	; 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	e159      	b.n	8002b28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002874:	2201      	movs	r2, #1
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	429a      	cmp	r2, r3
 800288e:	f040 8148 	bne.w	8002b22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b01      	cmp	r3, #1
 800289c:	d005      	beq.n	80028aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d130      	bne.n	800290c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	2203      	movs	r2, #3
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e0:	2201      	movs	r2, #1
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f003 0201 	and.w	r2, r3, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b03      	cmp	r3, #3
 8002916:	d017      	beq.n	8002948 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2203      	movs	r2, #3
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d123      	bne.n	800299c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	08da      	lsrs	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3208      	adds	r2, #8
 800295c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	220f      	movs	r2, #15
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	08da      	lsrs	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3208      	adds	r2, #8
 8002996:	69b9      	ldr	r1, [r7, #24]
 8002998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0203 	and.w	r2, r3, #3
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80a2 	beq.w	8002b22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	4b57      	ldr	r3, [pc, #348]	; (8002b40 <HAL_GPIO_Init+0x2e8>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	4a56      	ldr	r2, [pc, #344]	; (8002b40 <HAL_GPIO_Init+0x2e8>)
 80029e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ec:	6453      	str	r3, [r2, #68]	; 0x44
 80029ee:	4b54      	ldr	r3, [pc, #336]	; (8002b40 <HAL_GPIO_Init+0x2e8>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029fa:	4a52      	ldr	r2, [pc, #328]	; (8002b44 <HAL_GPIO_Init+0x2ec>)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	3302      	adds	r3, #2
 8002a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	220f      	movs	r2, #15
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a49      	ldr	r2, [pc, #292]	; (8002b48 <HAL_GPIO_Init+0x2f0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d019      	beq.n	8002a5a <HAL_GPIO_Init+0x202>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a48      	ldr	r2, [pc, #288]	; (8002b4c <HAL_GPIO_Init+0x2f4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_GPIO_Init+0x1fe>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a47      	ldr	r2, [pc, #284]	; (8002b50 <HAL_GPIO_Init+0x2f8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00d      	beq.n	8002a52 <HAL_GPIO_Init+0x1fa>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a46      	ldr	r2, [pc, #280]	; (8002b54 <HAL_GPIO_Init+0x2fc>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d007      	beq.n	8002a4e <HAL_GPIO_Init+0x1f6>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a45      	ldr	r2, [pc, #276]	; (8002b58 <HAL_GPIO_Init+0x300>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d101      	bne.n	8002a4a <HAL_GPIO_Init+0x1f2>
 8002a46:	2304      	movs	r3, #4
 8002a48:	e008      	b.n	8002a5c <HAL_GPIO_Init+0x204>
 8002a4a:	2307      	movs	r3, #7
 8002a4c:	e006      	b.n	8002a5c <HAL_GPIO_Init+0x204>
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e004      	b.n	8002a5c <HAL_GPIO_Init+0x204>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e002      	b.n	8002a5c <HAL_GPIO_Init+0x204>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_GPIO_Init+0x204>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	f002 0203 	and.w	r2, r2, #3
 8002a62:	0092      	lsls	r2, r2, #2
 8002a64:	4093      	lsls	r3, r2
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a6c:	4935      	ldr	r1, [pc, #212]	; (8002b44 <HAL_GPIO_Init+0x2ec>)
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	089b      	lsrs	r3, r3, #2
 8002a72:	3302      	adds	r3, #2
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a7a:	4b38      	ldr	r3, [pc, #224]	; (8002b5c <HAL_GPIO_Init+0x304>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a9e:	4a2f      	ldr	r2, [pc, #188]	; (8002b5c <HAL_GPIO_Init+0x304>)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aa4:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <HAL_GPIO_Init+0x304>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ac8:	4a24      	ldr	r2, [pc, #144]	; (8002b5c <HAL_GPIO_Init+0x304>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ace:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <HAL_GPIO_Init+0x304>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002af2:	4a1a      	ldr	r2, [pc, #104]	; (8002b5c <HAL_GPIO_Init+0x304>)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af8:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <HAL_GPIO_Init+0x304>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b1c:	4a0f      	ldr	r2, [pc, #60]	; (8002b5c <HAL_GPIO_Init+0x304>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3301      	adds	r3, #1
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b0f      	cmp	r3, #15
 8002b2c:	f67f aea2 	bls.w	8002874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	3724      	adds	r7, #36	; 0x24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40013800 	.word	0x40013800
 8002b48:	40020000 	.word	0x40020000
 8002b4c:	40020400 	.word	0x40020400
 8002b50:	40020800 	.word	0x40020800
 8002b54:	40020c00 	.word	0x40020c00
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40013c00 	.word	0x40013c00

08002b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	807b      	strh	r3, [r7, #2]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b70:	787b      	ldrb	r3, [r7, #1]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b76:	887a      	ldrh	r2, [r7, #2]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b7c:	e003      	b.n	8002b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b7e:	887b      	ldrh	r3, [r7, #2]
 8002b80:	041a      	lsls	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	619a      	str	r2, [r3, #24]
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e267      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d075      	beq.n	8002c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bb2:	4b88      	ldr	r3, [pc, #544]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d00c      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bbe:	4b85      	ldr	r3, [pc, #532]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d112      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bca:	4b82      	ldr	r3, [pc, #520]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd6:	d10b      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd8:	4b7e      	ldr	r3, [pc, #504]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d05b      	beq.n	8002c9c <HAL_RCC_OscConfig+0x108>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d157      	bne.n	8002c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e242      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf8:	d106      	bne.n	8002c08 <HAL_RCC_OscConfig+0x74>
 8002bfa:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a75      	ldr	r2, [pc, #468]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e01d      	b.n	8002c44 <HAL_RCC_OscConfig+0xb0>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x98>
 8002c12:	4b70      	ldr	r3, [pc, #448]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a6f      	ldr	r2, [pc, #444]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b6d      	ldr	r3, [pc, #436]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a6c      	ldr	r2, [pc, #432]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	e00b      	b.n	8002c44 <HAL_RCC_OscConfig+0xb0>
 8002c2c:	4b69      	ldr	r3, [pc, #420]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a68      	ldr	r2, [pc, #416]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b66      	ldr	r3, [pc, #408]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a65      	ldr	r2, [pc, #404]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d013      	beq.n	8002c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7ff f930 	bl	8001eb0 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c54:	f7ff f92c 	bl	8001eb0 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e207      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	4b5b      	ldr	r3, [pc, #364]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0xc0>
 8002c72:	e014      	b.n	8002c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7ff f91c 	bl	8001eb0 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7ff f918 	bl	8001eb0 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e1f3      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8e:	4b51      	ldr	r3, [pc, #324]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0xe8>
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d063      	beq.n	8002d72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002caa:	4b4a      	ldr	r3, [pc, #296]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00b      	beq.n	8002cce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb6:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d11c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc2:	4b44      	ldr	r3, [pc, #272]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d116      	bne.n	8002cfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cce:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d005      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x152>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d001      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e1c7      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce6:	4b3b      	ldr	r3, [pc, #236]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4937      	ldr	r1, [pc, #220]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfa:	e03a      	b.n	8002d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d020      	beq.n	8002d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d04:	4b34      	ldr	r3, [pc, #208]	; (8002dd8 <HAL_RCC_OscConfig+0x244>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7ff f8d1 	bl	8001eb0 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d12:	f7ff f8cd 	bl	8001eb0 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e1a8      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d24:	4b2b      	ldr	r3, [pc, #172]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d30:	4b28      	ldr	r3, [pc, #160]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4925      	ldr	r1, [pc, #148]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]
 8002d44:	e015      	b.n	8002d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d46:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_RCC_OscConfig+0x244>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7ff f8b0 	bl	8001eb0 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d54:	f7ff f8ac 	bl	8001eb0 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e187      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d66:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d036      	beq.n	8002dec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d016      	beq.n	8002db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <HAL_RCC_OscConfig+0x248>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7ff f890 	bl	8001eb0 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d94:	f7ff f88c 	bl	8001eb0 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e167      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da6:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x200>
 8002db2:	e01b      	b.n	8002dec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db4:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <HAL_RCC_OscConfig+0x248>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dba:	f7ff f879 	bl	8001eb0 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc0:	e00e      	b.n	8002de0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc2:	f7ff f875 	bl	8001eb0 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d907      	bls.n	8002de0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e150      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	42470000 	.word	0x42470000
 8002ddc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de0:	4b88      	ldr	r3, [pc, #544]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1ea      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8097 	beq.w	8002f28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfe:	4b81      	ldr	r3, [pc, #516]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10f      	bne.n	8002e2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	4b7d      	ldr	r3, [pc, #500]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4a7c      	ldr	r2, [pc, #496]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e18:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1a:	4b7a      	ldr	r3, [pc, #488]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e26:	2301      	movs	r3, #1
 8002e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2a:	4b77      	ldr	r3, [pc, #476]	; (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d118      	bne.n	8002e68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e36:	4b74      	ldr	r3, [pc, #464]	; (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a73      	ldr	r2, [pc, #460]	; (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e42:	f7ff f835 	bl	8001eb0 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4a:	f7ff f831 	bl	8001eb0 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e10c      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	4b6a      	ldr	r3, [pc, #424]	; (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d106      	bne.n	8002e7e <HAL_RCC_OscConfig+0x2ea>
 8002e70:	4b64      	ldr	r3, [pc, #400]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	4a63      	ldr	r2, [pc, #396]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7c:	e01c      	b.n	8002eb8 <HAL_RCC_OscConfig+0x324>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x30c>
 8002e86:	4b5f      	ldr	r3, [pc, #380]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	4a5e      	ldr	r2, [pc, #376]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	f043 0304 	orr.w	r3, r3, #4
 8002e90:	6713      	str	r3, [r2, #112]	; 0x70
 8002e92:	4b5c      	ldr	r3, [pc, #368]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	4a5b      	ldr	r2, [pc, #364]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9e:	e00b      	b.n	8002eb8 <HAL_RCC_OscConfig+0x324>
 8002ea0:	4b58      	ldr	r3, [pc, #352]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	4a57      	ldr	r2, [pc, #348]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002eac:	4b55      	ldr	r3, [pc, #340]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	4a54      	ldr	r2, [pc, #336]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	f023 0304 	bic.w	r3, r3, #4
 8002eb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d015      	beq.n	8002eec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec0:	f7fe fff6 	bl	8001eb0 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec8:	f7fe fff2 	bl	8001eb0 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e0cb      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ede:	4b49      	ldr	r3, [pc, #292]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0ee      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x334>
 8002eea:	e014      	b.n	8002f16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eec:	f7fe ffe0 	bl	8001eb0 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef4:	f7fe ffdc 	bl	8001eb0 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e0b5      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0a:	4b3e      	ldr	r3, [pc, #248]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1ee      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d105      	bne.n	8002f28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f1c:	4b39      	ldr	r3, [pc, #228]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	4a38      	ldr	r2, [pc, #224]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80a1 	beq.w	8003074 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f32:	4b34      	ldr	r3, [pc, #208]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d05c      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d141      	bne.n	8002fca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f46:	4b31      	ldr	r3, [pc, #196]	; (800300c <HAL_RCC_OscConfig+0x478>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe ffb0 	bl	8001eb0 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f54:	f7fe ffac 	bl	8001eb0 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e087      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f66:	4b27      	ldr	r3, [pc, #156]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	019b      	lsls	r3, r3, #6
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	085b      	lsrs	r3, r3, #1
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	041b      	lsls	r3, r3, #16
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	061b      	lsls	r3, r3, #24
 8002f96:	491b      	ldr	r1, [pc, #108]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	; (800300c <HAL_RCC_OscConfig+0x478>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa2:	f7fe ff85 	bl	8001eb0 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002faa:	f7fe ff81 	bl	8001eb0 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e05c      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fbc:	4b11      	ldr	r3, [pc, #68]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x416>
 8002fc8:	e054      	b.n	8003074 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fca:	4b10      	ldr	r3, [pc, #64]	; (800300c <HAL_RCC_OscConfig+0x478>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe ff6e 	bl	8001eb0 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fe ff6a 	bl	8001eb0 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e045      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x444>
 8002ff6:	e03d      	b.n	8003074 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e038      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
 8003004:	40023800 	.word	0x40023800
 8003008:	40007000 	.word	0x40007000
 800300c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003010:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <HAL_RCC_OscConfig+0x4ec>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d028      	beq.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d121      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	429a      	cmp	r2, r3
 8003038:	d11a      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003040:	4013      	ands	r3, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003046:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003048:	4293      	cmp	r3, r2
 800304a:	d111      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	3b01      	subs	r3, #1
 800305a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d107      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800

08003084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0cc      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003098:	4b68      	ldr	r3, [pc, #416]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d90c      	bls.n	80030c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b65      	ldr	r3, [pc, #404]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b63      	ldr	r3, [pc, #396]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0b8      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d020      	beq.n	800310e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d8:	4b59      	ldr	r3, [pc, #356]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4a58      	ldr	r2, [pc, #352]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f0:	4b53      	ldr	r3, [pc, #332]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a52      	ldr	r2, [pc, #328]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030fc:	4b50      	ldr	r3, [pc, #320]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	494d      	ldr	r1, [pc, #308]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d044      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b47      	ldr	r3, [pc, #284]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d119      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e07f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d003      	beq.n	8003142 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313e:	2b03      	cmp	r3, #3
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003142:	4b3f      	ldr	r3, [pc, #252]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e06f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003152:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e067      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003162:	4b37      	ldr	r3, [pc, #220]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f023 0203 	bic.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4934      	ldr	r1, [pc, #208]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	4313      	orrs	r3, r2
 8003172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003174:	f7fe fe9c 	bl	8001eb0 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	e00a      	b.n	8003192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317c:	f7fe fe98 	bl	8001eb0 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e04f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 020c 	and.w	r2, r3, #12
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d1eb      	bne.n	800317c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031a4:	4b25      	ldr	r3, [pc, #148]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d20c      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b22      	ldr	r3, [pc, #136]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b20      	ldr	r3, [pc, #128]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e032      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4916      	ldr	r1, [pc, #88]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	490e      	ldr	r1, [pc, #56]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800320a:	f000 f821 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 800320e:	4602      	mov	r2, r0
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	490a      	ldr	r1, [pc, #40]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 800321c:	5ccb      	ldrb	r3, [r1, r3]
 800321e:	fa22 f303 	lsr.w	r3, r2, r3
 8003222:	4a09      	ldr	r2, [pc, #36]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe fdfc 	bl	8001e28 <HAL_InitTick>

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023c00 	.word	0x40023c00
 8003240:	40023800 	.word	0x40023800
 8003244:	08005be4 	.word	0x08005be4
 8003248:	20000004 	.word	0x20000004
 800324c:	20000008 	.word	0x20000008

08003250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003254:	b094      	sub	sp, #80	; 0x50
 8003256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	647b      	str	r3, [r7, #68]	; 0x44
 800325c:	2300      	movs	r3, #0
 800325e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003260:	2300      	movs	r3, #0
 8003262:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003268:	4b79      	ldr	r3, [pc, #484]	; (8003450 <HAL_RCC_GetSysClockFreq+0x200>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 030c 	and.w	r3, r3, #12
 8003270:	2b08      	cmp	r3, #8
 8003272:	d00d      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x40>
 8003274:	2b08      	cmp	r3, #8
 8003276:	f200 80e1 	bhi.w	800343c <HAL_RCC_GetSysClockFreq+0x1ec>
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x34>
 800327e:	2b04      	cmp	r3, #4
 8003280:	d003      	beq.n	800328a <HAL_RCC_GetSysClockFreq+0x3a>
 8003282:	e0db      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003284:	4b73      	ldr	r3, [pc, #460]	; (8003454 <HAL_RCC_GetSysClockFreq+0x204>)
 8003286:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003288:	e0db      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800328a:	4b73      	ldr	r3, [pc, #460]	; (8003458 <HAL_RCC_GetSysClockFreq+0x208>)
 800328c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800328e:	e0d8      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003290:	4b6f      	ldr	r3, [pc, #444]	; (8003450 <HAL_RCC_GetSysClockFreq+0x200>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003298:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800329a:	4b6d      	ldr	r3, [pc, #436]	; (8003450 <HAL_RCC_GetSysClockFreq+0x200>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d063      	beq.n	800336e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a6:	4b6a      	ldr	r3, [pc, #424]	; (8003450 <HAL_RCC_GetSysClockFreq+0x200>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	099b      	lsrs	r3, r3, #6
 80032ac:	2200      	movs	r2, #0
 80032ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80032b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b8:	633b      	str	r3, [r7, #48]	; 0x30
 80032ba:	2300      	movs	r3, #0
 80032bc:	637b      	str	r3, [r7, #52]	; 0x34
 80032be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032c2:	4622      	mov	r2, r4
 80032c4:	462b      	mov	r3, r5
 80032c6:	f04f 0000 	mov.w	r0, #0
 80032ca:	f04f 0100 	mov.w	r1, #0
 80032ce:	0159      	lsls	r1, r3, #5
 80032d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032d4:	0150      	lsls	r0, r2, #5
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4621      	mov	r1, r4
 80032dc:	1a51      	subs	r1, r2, r1
 80032de:	6139      	str	r1, [r7, #16]
 80032e0:	4629      	mov	r1, r5
 80032e2:	eb63 0301 	sbc.w	r3, r3, r1
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032f4:	4659      	mov	r1, fp
 80032f6:	018b      	lsls	r3, r1, #6
 80032f8:	4651      	mov	r1, sl
 80032fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032fe:	4651      	mov	r1, sl
 8003300:	018a      	lsls	r2, r1, #6
 8003302:	4651      	mov	r1, sl
 8003304:	ebb2 0801 	subs.w	r8, r2, r1
 8003308:	4659      	mov	r1, fp
 800330a:	eb63 0901 	sbc.w	r9, r3, r1
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800331a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800331e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003322:	4690      	mov	r8, r2
 8003324:	4699      	mov	r9, r3
 8003326:	4623      	mov	r3, r4
 8003328:	eb18 0303 	adds.w	r3, r8, r3
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	462b      	mov	r3, r5
 8003330:	eb49 0303 	adc.w	r3, r9, r3
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003342:	4629      	mov	r1, r5
 8003344:	024b      	lsls	r3, r1, #9
 8003346:	4621      	mov	r1, r4
 8003348:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800334c:	4621      	mov	r1, r4
 800334e:	024a      	lsls	r2, r1, #9
 8003350:	4610      	mov	r0, r2
 8003352:	4619      	mov	r1, r3
 8003354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003356:	2200      	movs	r2, #0
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
 800335a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800335c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003360:	f7fc ff8e 	bl	8000280 <__aeabi_uldivmod>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4613      	mov	r3, r2
 800336a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800336c:	e058      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800336e:	4b38      	ldr	r3, [pc, #224]	; (8003450 <HAL_RCC_GetSysClockFreq+0x200>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	099b      	lsrs	r3, r3, #6
 8003374:	2200      	movs	r2, #0
 8003376:	4618      	mov	r0, r3
 8003378:	4611      	mov	r1, r2
 800337a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800337e:	623b      	str	r3, [r7, #32]
 8003380:	2300      	movs	r3, #0
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
 8003384:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003388:	4642      	mov	r2, r8
 800338a:	464b      	mov	r3, r9
 800338c:	f04f 0000 	mov.w	r0, #0
 8003390:	f04f 0100 	mov.w	r1, #0
 8003394:	0159      	lsls	r1, r3, #5
 8003396:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800339a:	0150      	lsls	r0, r2, #5
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4641      	mov	r1, r8
 80033a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80033a6:	4649      	mov	r1, r9
 80033a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033c0:	ebb2 040a 	subs.w	r4, r2, sl
 80033c4:	eb63 050b 	sbc.w	r5, r3, fp
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	00eb      	lsls	r3, r5, #3
 80033d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033d6:	00e2      	lsls	r2, r4, #3
 80033d8:	4614      	mov	r4, r2
 80033da:	461d      	mov	r5, r3
 80033dc:	4643      	mov	r3, r8
 80033de:	18e3      	adds	r3, r4, r3
 80033e0:	603b      	str	r3, [r7, #0]
 80033e2:	464b      	mov	r3, r9
 80033e4:	eb45 0303 	adc.w	r3, r5, r3
 80033e8:	607b      	str	r3, [r7, #4]
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033f6:	4629      	mov	r1, r5
 80033f8:	028b      	lsls	r3, r1, #10
 80033fa:	4621      	mov	r1, r4
 80033fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003400:	4621      	mov	r1, r4
 8003402:	028a      	lsls	r2, r1, #10
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800340a:	2200      	movs	r2, #0
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	61fa      	str	r2, [r7, #28]
 8003410:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003414:	f7fc ff34 	bl	8000280 <__aeabi_uldivmod>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4613      	mov	r3, r2
 800341e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCC_GetSysClockFreq+0x200>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	3301      	adds	r3, #1
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003430:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800343a:	e002      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_RCC_GetSysClockFreq+0x204>)
 800343e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003444:	4618      	mov	r0, r3
 8003446:	3750      	adds	r7, #80	; 0x50
 8003448:	46bd      	mov	sp, r7
 800344a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800
 8003454:	00f42400 	.word	0x00f42400
 8003458:	007a1200 	.word	0x007a1200

0800345c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003460:	4b03      	ldr	r3, [pc, #12]	; (8003470 <HAL_RCC_GetHCLKFreq+0x14>)
 8003462:	681b      	ldr	r3, [r3, #0]
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20000004 	.word	0x20000004

08003474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003478:	f7ff fff0 	bl	800345c <HAL_RCC_GetHCLKFreq>
 800347c:	4602      	mov	r2, r0
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	0a9b      	lsrs	r3, r3, #10
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	4903      	ldr	r1, [pc, #12]	; (8003498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800348a:	5ccb      	ldrb	r3, [r1, r3]
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40023800 	.word	0x40023800
 8003498:	08005bf4 	.word	0x08005bf4

0800349c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034a0:	f7ff ffdc 	bl	800345c <HAL_RCC_GetHCLKFreq>
 80034a4:	4602      	mov	r2, r0
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	0b5b      	lsrs	r3, r3, #13
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	4903      	ldr	r1, [pc, #12]	; (80034c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034b2:	5ccb      	ldrb	r3, [r1, r3]
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40023800 	.word	0x40023800
 80034c0:	08005bf4 	.word	0x08005bf4

080034c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e07b      	b.n	80035ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d108      	bne.n	80034f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e6:	d009      	beq.n	80034fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	61da      	str	r2, [r3, #28]
 80034ee:	e005      	b.n	80034fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fe f850 	bl	80015bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003532:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	ea42 0103 	orr.w	r1, r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	f003 0104 	and.w	r1, r3, #4
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	f003 0210 	and.w	r2, r3, #16
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69da      	ldr	r2, [r3, #28]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	4613      	mov	r3, r2
 80035e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_SPI_Transmit_DMA+0x20>
 80035f4:	2302      	movs	r3, #2
 80035f6:	e09b      	b.n	8003730 <HAL_SPI_Transmit_DMA+0x158>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d002      	beq.n	8003612 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800360c:	2302      	movs	r3, #2
 800360e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003610:	e089      	b.n	8003726 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <HAL_SPI_Transmit_DMA+0x46>
 8003618:	88fb      	ldrh	r3, [r7, #6]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d102      	bne.n	8003624 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003622:	e080      	b.n	8003726 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2203      	movs	r2, #3
 8003628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	88fa      	ldrh	r2, [r7, #6]
 800363c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	88fa      	ldrh	r2, [r7, #6]
 8003642:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800366a:	d10f      	bne.n	800368c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800367a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800368a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003690:	4a29      	ldr	r2, [pc, #164]	; (8003738 <HAL_SPI_Transmit_DMA+0x160>)
 8003692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003698:	4a28      	ldr	r2, [pc, #160]	; (800373c <HAL_SPI_Transmit_DMA+0x164>)
 800369a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a0:	4a27      	ldr	r2, [pc, #156]	; (8003740 <HAL_SPI_Transmit_DMA+0x168>)
 80036a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a8:	2200      	movs	r2, #0
 80036aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	4619      	mov	r1, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	330c      	adds	r3, #12
 80036bc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80036c4:	f7fe fde4 	bl	8002290 <HAL_DMA_Start_IT>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00c      	beq.n	80036e8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d2:	f043 0210 	orr.w	r2, r3, #16
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80036e6:	e01e      	b.n	8003726 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f2:	2b40      	cmp	r3, #64	; 0x40
 80036f4:	d007      	beq.n	8003706 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003704:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0220 	orr.w	r2, r2, #32
 8003714:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0202 	orr.w	r2, r2, #2
 8003724:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800372e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	080039fd 	.word	0x080039fd
 800373c:	08003955 	.word	0x08003955
 8003740:	08003a19 	.word	0x08003a19

08003744 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10e      	bne.n	8003784 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800376c:	2b00      	cmp	r3, #0
 800376e:	d009      	beq.n	8003784 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d004      	beq.n	8003784 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	4798      	blx	r3
    return;
 8003782:	e0ce      	b.n	8003922 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <HAL_SPI_IRQHandler+0x5e>
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003794:	2b00      	cmp	r3, #0
 8003796:	d004      	beq.n	80037a2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	4798      	blx	r3
    return;
 80037a0:	e0bf      	b.n	8003922 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <HAL_SPI_IRQHandler+0x7e>
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d105      	bne.n	80037c2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80b0 	beq.w	8003922 <HAL_SPI_IRQHandler+0x1de>
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80aa 	beq.w	8003922 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d023      	beq.n	8003820 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d011      	beq.n	8003808 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	f043 0204 	orr.w	r2, r3, #4
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	e00b      	b.n	8003820 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003808:	2300      	movs	r3, #0
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]
        return;
 800381e:	e080      	b.n	8003922 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d014      	beq.n	8003854 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382e:	f043 0201 	orr.w	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00c      	beq.n	8003878 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003862:	f043 0208 	orr.w	r2, r3, #8
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800386a:	2300      	movs	r3, #0
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387c:	2b00      	cmp	r3, #0
 800387e:	d04f      	beq.n	8003920 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800388e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d104      	bne.n	80038ac <HAL_SPI_IRQHandler+0x168>
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d034      	beq.n	8003916 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0203 	bic.w	r2, r2, #3
 80038ba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d011      	beq.n	80038e8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c8:	4a17      	ldr	r2, [pc, #92]	; (8003928 <HAL_SPI_IRQHandler+0x1e4>)
 80038ca:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe fd35 	bl	8002340 <HAL_DMA_Abort_IT>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d016      	beq.n	800391e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f4:	4a0c      	ldr	r2, [pc, #48]	; (8003928 <HAL_SPI_IRQHandler+0x1e4>)
 80038f6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fe fd1f 	bl	8002340 <HAL_DMA_Abort_IT>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003914:	e003      	b.n	800391e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f812 	bl	8003940 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800391c:	e000      	b.n	8003920 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800391e:	bf00      	nop
    return;
 8003920:	bf00      	nop
  }
}
 8003922:	3720      	adds	r7, #32
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	08003a59 	.word	0x08003a59

0800392c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003962:	f7fe faa5 	bl	8001eb0 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003976:	d03b      	beq.n	80039f0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0220 	bic.w	r2, r2, #32
 8003986:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0202 	bic.w	r2, r2, #2
 8003996:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	2164      	movs	r1, #100	; 0x64
 800399c:	6978      	ldr	r0, [r7, #20]
 800399e:	f000 f8f7 	bl	8003b90 <SPI_EndRxTxTransaction>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	f043 0220 	orr.w	r2, r3, #32
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2200      	movs	r2, #0
 80039d6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80039e8:	6978      	ldr	r0, [r7, #20]
 80039ea:	f7ff ffa9 	bl	8003940 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80039ee:	e002      	b.n	80039f6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80039f0:	6978      	ldr	r0, [r7, #20]
 80039f2:	f7fe f997 	bl	8001d24 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f7ff ff8e 	bl	800392c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a10:	bf00      	nop
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0203 	bic.w	r2, r2, #3
 8003a34:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3a:	f043 0210 	orr.w	r2, r3, #16
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f7ff ff78 	bl	8003940 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a64:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f7ff ff64 	bl	8003940 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a90:	f7fe fa0e 	bl	8001eb0 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003aa0:	f7fe fa06 	bl	8001eb0 <HAL_GetTick>
 8003aa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003aa6:	4b39      	ldr	r3, [pc, #228]	; (8003b8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	015b      	lsls	r3, r3, #5
 8003aac:	0d1b      	lsrs	r3, r3, #20
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	fb02 f303 	mul.w	r3, r2, r3
 8003ab4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ab6:	e054      	b.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abe:	d050      	beq.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ac0:	f7fe f9f6 	bl	8001eb0 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	69fa      	ldr	r2, [r7, #28]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d902      	bls.n	8003ad6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d13d      	bne.n	8003b52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ae4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aee:	d111      	bne.n	8003b14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af8:	d004      	beq.n	8003b04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b02:	d107      	bne.n	8003b14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b1c:	d10f      	bne.n	8003b3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e017      	b.n	8003b82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	bf0c      	ite	eq
 8003b72:	2301      	moveq	r3, #1
 8003b74:	2300      	movne	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d19b      	bne.n	8003ab8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3720      	adds	r7, #32
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000004 	.word	0x20000004

08003b90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <SPI_EndRxTxTransaction+0x7c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a1b      	ldr	r2, [pc, #108]	; (8003c10 <SPI_EndRxTxTransaction+0x80>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	0d5b      	lsrs	r3, r3, #21
 8003ba8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bac:	fb02 f303 	mul.w	r3, r2, r3
 8003bb0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bba:	d112      	bne.n	8003be2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2180      	movs	r1, #128	; 0x80
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f7ff ff5a 	bl	8003a80 <SPI_WaitFlagStateUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d016      	beq.n	8003c00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd6:	f043 0220 	orr.w	r2, r3, #32
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e00f      	b.n	8003c02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	2b80      	cmp	r3, #128	; 0x80
 8003bfa:	d0f2      	beq.n	8003be2 <SPI_EndRxTxTransaction+0x52>
 8003bfc:	e000      	b.n	8003c00 <SPI_EndRxTxTransaction+0x70>
        break;
 8003bfe:	bf00      	nop
  }

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000004 	.word	0x20000004
 8003c10:	165e9f81 	.word	0x165e9f81

08003c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e041      	b.n	8003caa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd fd62 	bl	8001704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f000 fa10 	bl	8004078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e041      	b.n	8003d48 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d106      	bne.n	8003cde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f839 	bl	8003d50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3304      	adds	r3, #4
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	f000 f9c1 	bl	8004078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e0ae      	b.n	8003ee0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b0c      	cmp	r3, #12
 8003d8e:	f200 809f 	bhi.w	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d92:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d98:	08003dcd 	.word	0x08003dcd
 8003d9c:	08003ed1 	.word	0x08003ed1
 8003da0:	08003ed1 	.word	0x08003ed1
 8003da4:	08003ed1 	.word	0x08003ed1
 8003da8:	08003e0d 	.word	0x08003e0d
 8003dac:	08003ed1 	.word	0x08003ed1
 8003db0:	08003ed1 	.word	0x08003ed1
 8003db4:	08003ed1 	.word	0x08003ed1
 8003db8:	08003e4f 	.word	0x08003e4f
 8003dbc:	08003ed1 	.word	0x08003ed1
 8003dc0:	08003ed1 	.word	0x08003ed1
 8003dc4:	08003ed1 	.word	0x08003ed1
 8003dc8:	08003e8f 	.word	0x08003e8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 f9d0 	bl	8004178 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0208 	orr.w	r2, r2, #8
 8003de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0204 	bic.w	r2, r2, #4
 8003df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6999      	ldr	r1, [r3, #24]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	691a      	ldr	r2, [r3, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	619a      	str	r2, [r3, #24]
      break;
 8003e0a:	e064      	b.n	8003ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fa16 	bl	8004244 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6999      	ldr	r1, [r3, #24]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	021a      	lsls	r2, r3, #8
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	619a      	str	r2, [r3, #24]
      break;
 8003e4c:	e043      	b.n	8003ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68b9      	ldr	r1, [r7, #8]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fa61 	bl	800431c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0208 	orr.w	r2, r2, #8
 8003e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0204 	bic.w	r2, r2, #4
 8003e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69d9      	ldr	r1, [r3, #28]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	61da      	str	r2, [r3, #28]
      break;
 8003e8c:	e023      	b.n	8003ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 faab 	bl	80043f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69da      	ldr	r2, [r3, #28]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69da      	ldr	r2, [r3, #28]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69d9      	ldr	r1, [r3, #28]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	021a      	lsls	r2, r3, #8
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	61da      	str	r2, [r3, #28]
      break;
 8003ece:	e002      	b.n	8003ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_TIM_ConfigClockSource+0x1c>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e0b4      	b.n	800406e <HAL_TIM_ConfigClockSource+0x186>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f3c:	d03e      	beq.n	8003fbc <HAL_TIM_ConfigClockSource+0xd4>
 8003f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f42:	f200 8087 	bhi.w	8004054 <HAL_TIM_ConfigClockSource+0x16c>
 8003f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4a:	f000 8086 	beq.w	800405a <HAL_TIM_ConfigClockSource+0x172>
 8003f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f52:	d87f      	bhi.n	8004054 <HAL_TIM_ConfigClockSource+0x16c>
 8003f54:	2b70      	cmp	r3, #112	; 0x70
 8003f56:	d01a      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0xa6>
 8003f58:	2b70      	cmp	r3, #112	; 0x70
 8003f5a:	d87b      	bhi.n	8004054 <HAL_TIM_ConfigClockSource+0x16c>
 8003f5c:	2b60      	cmp	r3, #96	; 0x60
 8003f5e:	d050      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x11a>
 8003f60:	2b60      	cmp	r3, #96	; 0x60
 8003f62:	d877      	bhi.n	8004054 <HAL_TIM_ConfigClockSource+0x16c>
 8003f64:	2b50      	cmp	r3, #80	; 0x50
 8003f66:	d03c      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0xfa>
 8003f68:	2b50      	cmp	r3, #80	; 0x50
 8003f6a:	d873      	bhi.n	8004054 <HAL_TIM_ConfigClockSource+0x16c>
 8003f6c:	2b40      	cmp	r3, #64	; 0x40
 8003f6e:	d058      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x13a>
 8003f70:	2b40      	cmp	r3, #64	; 0x40
 8003f72:	d86f      	bhi.n	8004054 <HAL_TIM_ConfigClockSource+0x16c>
 8003f74:	2b30      	cmp	r3, #48	; 0x30
 8003f76:	d064      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0x15a>
 8003f78:	2b30      	cmp	r3, #48	; 0x30
 8003f7a:	d86b      	bhi.n	8004054 <HAL_TIM_ConfigClockSource+0x16c>
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d060      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0x15a>
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	d867      	bhi.n	8004054 <HAL_TIM_ConfigClockSource+0x16c>
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d05c      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0x15a>
 8003f88:	2b10      	cmp	r3, #16
 8003f8a:	d05a      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0x15a>
 8003f8c:	e062      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6899      	ldr	r1, [r3, #8]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f000 faf1 	bl	8004584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	609a      	str	r2, [r3, #8]
      break;
 8003fba:	e04f      	b.n	800405c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	6899      	ldr	r1, [r3, #8]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f000 fada 	bl	8004584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fde:	609a      	str	r2, [r3, #8]
      break;
 8003fe0:	e03c      	b.n	800405c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	6859      	ldr	r1, [r3, #4]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f000 fa4e 	bl	8004490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2150      	movs	r1, #80	; 0x50
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 faa7 	bl	800454e <TIM_ITRx_SetConfig>
      break;
 8004000:	e02c      	b.n	800405c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	6859      	ldr	r1, [r3, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	461a      	mov	r2, r3
 8004010:	f000 fa6d 	bl	80044ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2160      	movs	r1, #96	; 0x60
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fa97 	bl	800454e <TIM_ITRx_SetConfig>
      break;
 8004020:	e01c      	b.n	800405c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	6859      	ldr	r1, [r3, #4]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	461a      	mov	r2, r3
 8004030:	f000 fa2e 	bl	8004490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2140      	movs	r1, #64	; 0x40
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fa87 	bl	800454e <TIM_ITRx_SetConfig>
      break;
 8004040:	e00c      	b.n	800405c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4619      	mov	r1, r3
 800404c:	4610      	mov	r0, r2
 800404e:	f000 fa7e 	bl	800454e <TIM_ITRx_SetConfig>
      break;
 8004052:	e003      	b.n	800405c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
      break;
 8004058:	e000      	b.n	800405c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800405a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800406c:	7bfb      	ldrb	r3, [r7, #15]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a34      	ldr	r2, [pc, #208]	; (800415c <TIM_Base_SetConfig+0xe4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00f      	beq.n	80040b0 <TIM_Base_SetConfig+0x38>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004096:	d00b      	beq.n	80040b0 <TIM_Base_SetConfig+0x38>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a31      	ldr	r2, [pc, #196]	; (8004160 <TIM_Base_SetConfig+0xe8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d007      	beq.n	80040b0 <TIM_Base_SetConfig+0x38>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a30      	ldr	r2, [pc, #192]	; (8004164 <TIM_Base_SetConfig+0xec>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_Base_SetConfig+0x38>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a2f      	ldr	r2, [pc, #188]	; (8004168 <TIM_Base_SetConfig+0xf0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d108      	bne.n	80040c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a25      	ldr	r2, [pc, #148]	; (800415c <TIM_Base_SetConfig+0xe4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d01b      	beq.n	8004102 <TIM_Base_SetConfig+0x8a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d0:	d017      	beq.n	8004102 <TIM_Base_SetConfig+0x8a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a22      	ldr	r2, [pc, #136]	; (8004160 <TIM_Base_SetConfig+0xe8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d013      	beq.n	8004102 <TIM_Base_SetConfig+0x8a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a21      	ldr	r2, [pc, #132]	; (8004164 <TIM_Base_SetConfig+0xec>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00f      	beq.n	8004102 <TIM_Base_SetConfig+0x8a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a20      	ldr	r2, [pc, #128]	; (8004168 <TIM_Base_SetConfig+0xf0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00b      	beq.n	8004102 <TIM_Base_SetConfig+0x8a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a1f      	ldr	r2, [pc, #124]	; (800416c <TIM_Base_SetConfig+0xf4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d007      	beq.n	8004102 <TIM_Base_SetConfig+0x8a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a1e      	ldr	r2, [pc, #120]	; (8004170 <TIM_Base_SetConfig+0xf8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d003      	beq.n	8004102 <TIM_Base_SetConfig+0x8a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a1d      	ldr	r2, [pc, #116]	; (8004174 <TIM_Base_SetConfig+0xfc>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d108      	bne.n	8004114 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a08      	ldr	r2, [pc, #32]	; (800415c <TIM_Base_SetConfig+0xe4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d103      	bne.n	8004148 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	615a      	str	r2, [r3, #20]
}
 800414e:	bf00      	nop
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40010000 	.word	0x40010000
 8004160:	40000400 	.word	0x40000400
 8004164:	40000800 	.word	0x40000800
 8004168:	40000c00 	.word	0x40000c00
 800416c:	40014000 	.word	0x40014000
 8004170:	40014400 	.word	0x40014400
 8004174:	40014800 	.word	0x40014800

08004178 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	f023 0201 	bic.w	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0303 	bic.w	r3, r3, #3
 80041ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f023 0302 	bic.w	r3, r3, #2
 80041c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a1c      	ldr	r2, [pc, #112]	; (8004240 <TIM_OC1_SetConfig+0xc8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d10c      	bne.n	80041ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 0308 	bic.w	r3, r3, #8
 80041da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f023 0304 	bic.w	r3, r3, #4
 80041ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a13      	ldr	r2, [pc, #76]	; (8004240 <TIM_OC1_SetConfig+0xc8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d111      	bne.n	800421a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	621a      	str	r2, [r3, #32]
}
 8004234:	bf00      	nop
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	40010000 	.word	0x40010000

08004244 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f023 0210 	bic.w	r2, r3, #16
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	021b      	lsls	r3, r3, #8
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f023 0320 	bic.w	r3, r3, #32
 800428e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a1e      	ldr	r2, [pc, #120]	; (8004318 <TIM_OC2_SetConfig+0xd4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d10d      	bne.n	80042c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a15      	ldr	r2, [pc, #84]	; (8004318 <TIM_OC2_SetConfig+0xd4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d113      	bne.n	80042f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40010000 	.word	0x40010000

0800431c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0303 	bic.w	r3, r3, #3
 8004352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	021b      	lsls	r3, r3, #8
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a1d      	ldr	r2, [pc, #116]	; (80043ec <TIM_OC3_SetConfig+0xd0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d10d      	bne.n	8004396 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004380:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a14      	ldr	r2, [pc, #80]	; (80043ec <TIM_OC3_SetConfig+0xd0>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d113      	bne.n	80043c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	621a      	str	r2, [r3, #32]
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	40010000 	.word	0x40010000

080043f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800441e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800443a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	031b      	lsls	r3, r3, #12
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a10      	ldr	r2, [pc, #64]	; (800448c <TIM_OC4_SetConfig+0x9c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d109      	bne.n	8004464 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004456:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	019b      	lsls	r3, r3, #6
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	621a      	str	r2, [r3, #32]
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40010000 	.word	0x40010000

08004490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	f023 0201 	bic.w	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f023 030a 	bic.w	r3, r3, #10
 80044cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	621a      	str	r2, [r3, #32]
}
 80044e2:	bf00      	nop
 80044e4:	371c      	adds	r7, #28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b087      	sub	sp, #28
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	60b9      	str	r1, [r7, #8]
 80044f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f023 0210 	bic.w	r2, r3, #16
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	031b      	lsls	r3, r3, #12
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800452a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	621a      	str	r2, [r3, #32]
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800454e:	b480      	push	{r7}
 8004550:	b085      	sub	sp, #20
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	f043 0307 	orr.w	r3, r3, #7
 8004570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	609a      	str	r2, [r3, #8]
}
 8004578:	bf00      	nop
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800459e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	021a      	lsls	r2, r3, #8
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	609a      	str	r2, [r3, #8]
}
 80045b8:	bf00      	nop
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045d8:	2302      	movs	r3, #2
 80045da:	e050      	b.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a1c      	ldr	r2, [pc, #112]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d018      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004628:	d013      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a18      	ldr	r2, [pc, #96]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00e      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a16      	ldr	r2, [pc, #88]	; (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d009      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a15      	ldr	r2, [pc, #84]	; (8004698 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d004      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a13      	ldr	r2, [pc, #76]	; (800469c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d10c      	bne.n	800466c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004658:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	4313      	orrs	r3, r2
 8004662:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40010000 	.word	0x40010000
 8004690:	40000400 	.word	0x40000400
 8004694:	40000800 	.word	0x40000800
 8004698:	40000c00 	.word	0x40000c00
 800469c:	40014000 	.word	0x40014000

080046a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e03f      	b.n	8004732 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d106      	bne.n	80046cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7fd f8ec 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2224      	movs	r2, #36	; 0x24
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f829 	bl	800473c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800473c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004740:	b0c0      	sub	sp, #256	; 0x100
 8004742:	af00      	add	r7, sp, #0
 8004744:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004758:	68d9      	ldr	r1, [r3, #12]
 800475a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	ea40 0301 	orr.w	r3, r0, r1
 8004764:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	431a      	orrs	r2, r3
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	431a      	orrs	r2, r3
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004794:	f021 010c 	bic.w	r1, r1, #12
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047a2:	430b      	orrs	r3, r1
 80047a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b6:	6999      	ldr	r1, [r3, #24]
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	ea40 0301 	orr.w	r3, r0, r1
 80047c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	4b8f      	ldr	r3, [pc, #572]	; (8004a08 <UART_SetConfig+0x2cc>)
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d005      	beq.n	80047dc <UART_SetConfig+0xa0>
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4b8d      	ldr	r3, [pc, #564]	; (8004a0c <UART_SetConfig+0x2d0>)
 80047d8:	429a      	cmp	r2, r3
 80047da:	d104      	bne.n	80047e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047dc:	f7fe fe5e 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 80047e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047e4:	e003      	b.n	80047ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047e6:	f7fe fe45 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 80047ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f8:	f040 810c 	bne.w	8004a14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004800:	2200      	movs	r2, #0
 8004802:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004806:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800480a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800480e:	4622      	mov	r2, r4
 8004810:	462b      	mov	r3, r5
 8004812:	1891      	adds	r1, r2, r2
 8004814:	65b9      	str	r1, [r7, #88]	; 0x58
 8004816:	415b      	adcs	r3, r3
 8004818:	65fb      	str	r3, [r7, #92]	; 0x5c
 800481a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800481e:	4621      	mov	r1, r4
 8004820:	eb12 0801 	adds.w	r8, r2, r1
 8004824:	4629      	mov	r1, r5
 8004826:	eb43 0901 	adc.w	r9, r3, r1
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800483a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800483e:	4690      	mov	r8, r2
 8004840:	4699      	mov	r9, r3
 8004842:	4623      	mov	r3, r4
 8004844:	eb18 0303 	adds.w	r3, r8, r3
 8004848:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800484c:	462b      	mov	r3, r5
 800484e:	eb49 0303 	adc.w	r3, r9, r3
 8004852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004862:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004866:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800486a:	460b      	mov	r3, r1
 800486c:	18db      	adds	r3, r3, r3
 800486e:	653b      	str	r3, [r7, #80]	; 0x50
 8004870:	4613      	mov	r3, r2
 8004872:	eb42 0303 	adc.w	r3, r2, r3
 8004876:	657b      	str	r3, [r7, #84]	; 0x54
 8004878:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800487c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004880:	f7fb fcfe 	bl	8000280 <__aeabi_uldivmod>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4b61      	ldr	r3, [pc, #388]	; (8004a10 <UART_SetConfig+0x2d4>)
 800488a:	fba3 2302 	umull	r2, r3, r3, r2
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	011c      	lsls	r4, r3, #4
 8004892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004896:	2200      	movs	r2, #0
 8004898:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800489c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048a4:	4642      	mov	r2, r8
 80048a6:	464b      	mov	r3, r9
 80048a8:	1891      	adds	r1, r2, r2
 80048aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80048ac:	415b      	adcs	r3, r3
 80048ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048b4:	4641      	mov	r1, r8
 80048b6:	eb12 0a01 	adds.w	sl, r2, r1
 80048ba:	4649      	mov	r1, r9
 80048bc:	eb43 0b01 	adc.w	fp, r3, r1
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048d4:	4692      	mov	sl, r2
 80048d6:	469b      	mov	fp, r3
 80048d8:	4643      	mov	r3, r8
 80048da:	eb1a 0303 	adds.w	r3, sl, r3
 80048de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048e2:	464b      	mov	r3, r9
 80048e4:	eb4b 0303 	adc.w	r3, fp, r3
 80048e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004900:	460b      	mov	r3, r1
 8004902:	18db      	adds	r3, r3, r3
 8004904:	643b      	str	r3, [r7, #64]	; 0x40
 8004906:	4613      	mov	r3, r2
 8004908:	eb42 0303 	adc.w	r3, r2, r3
 800490c:	647b      	str	r3, [r7, #68]	; 0x44
 800490e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004912:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004916:	f7fb fcb3 	bl	8000280 <__aeabi_uldivmod>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4611      	mov	r1, r2
 8004920:	4b3b      	ldr	r3, [pc, #236]	; (8004a10 <UART_SetConfig+0x2d4>)
 8004922:	fba3 2301 	umull	r2, r3, r3, r1
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	2264      	movs	r2, #100	; 0x64
 800492a:	fb02 f303 	mul.w	r3, r2, r3
 800492e:	1acb      	subs	r3, r1, r3
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004936:	4b36      	ldr	r3, [pc, #216]	; (8004a10 <UART_SetConfig+0x2d4>)
 8004938:	fba3 2302 	umull	r2, r3, r3, r2
 800493c:	095b      	lsrs	r3, r3, #5
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004944:	441c      	add	r4, r3
 8004946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800494a:	2200      	movs	r2, #0
 800494c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004950:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004954:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004958:	4642      	mov	r2, r8
 800495a:	464b      	mov	r3, r9
 800495c:	1891      	adds	r1, r2, r2
 800495e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004960:	415b      	adcs	r3, r3
 8004962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004964:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004968:	4641      	mov	r1, r8
 800496a:	1851      	adds	r1, r2, r1
 800496c:	6339      	str	r1, [r7, #48]	; 0x30
 800496e:	4649      	mov	r1, r9
 8004970:	414b      	adcs	r3, r1
 8004972:	637b      	str	r3, [r7, #52]	; 0x34
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004980:	4659      	mov	r1, fp
 8004982:	00cb      	lsls	r3, r1, #3
 8004984:	4651      	mov	r1, sl
 8004986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800498a:	4651      	mov	r1, sl
 800498c:	00ca      	lsls	r2, r1, #3
 800498e:	4610      	mov	r0, r2
 8004990:	4619      	mov	r1, r3
 8004992:	4603      	mov	r3, r0
 8004994:	4642      	mov	r2, r8
 8004996:	189b      	adds	r3, r3, r2
 8004998:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800499c:	464b      	mov	r3, r9
 800499e:	460a      	mov	r2, r1
 80049a0:	eb42 0303 	adc.w	r3, r2, r3
 80049a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049bc:	460b      	mov	r3, r1
 80049be:	18db      	adds	r3, r3, r3
 80049c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80049c2:	4613      	mov	r3, r2
 80049c4:	eb42 0303 	adc.w	r3, r2, r3
 80049c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049d2:	f7fb fc55 	bl	8000280 <__aeabi_uldivmod>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4b0d      	ldr	r3, [pc, #52]	; (8004a10 <UART_SetConfig+0x2d4>)
 80049dc:	fba3 1302 	umull	r1, r3, r3, r2
 80049e0:	095b      	lsrs	r3, r3, #5
 80049e2:	2164      	movs	r1, #100	; 0x64
 80049e4:	fb01 f303 	mul.w	r3, r1, r3
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	3332      	adds	r3, #50	; 0x32
 80049ee:	4a08      	ldr	r2, [pc, #32]	; (8004a10 <UART_SetConfig+0x2d4>)
 80049f0:	fba2 2303 	umull	r2, r3, r2, r3
 80049f4:	095b      	lsrs	r3, r3, #5
 80049f6:	f003 0207 	and.w	r2, r3, #7
 80049fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4422      	add	r2, r4
 8004a02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a04:	e106      	b.n	8004c14 <UART_SetConfig+0x4d8>
 8004a06:	bf00      	nop
 8004a08:	40011000 	.word	0x40011000
 8004a0c:	40011400 	.word	0x40011400
 8004a10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a26:	4642      	mov	r2, r8
 8004a28:	464b      	mov	r3, r9
 8004a2a:	1891      	adds	r1, r2, r2
 8004a2c:	6239      	str	r1, [r7, #32]
 8004a2e:	415b      	adcs	r3, r3
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
 8004a32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a36:	4641      	mov	r1, r8
 8004a38:	1854      	adds	r4, r2, r1
 8004a3a:	4649      	mov	r1, r9
 8004a3c:	eb43 0501 	adc.w	r5, r3, r1
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	00eb      	lsls	r3, r5, #3
 8004a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a4e:	00e2      	lsls	r2, r4, #3
 8004a50:	4614      	mov	r4, r2
 8004a52:	461d      	mov	r5, r3
 8004a54:	4643      	mov	r3, r8
 8004a56:	18e3      	adds	r3, r4, r3
 8004a58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a5c:	464b      	mov	r3, r9
 8004a5e:	eb45 0303 	adc.w	r3, r5, r3
 8004a62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	f04f 0300 	mov.w	r3, #0
 8004a7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a82:	4629      	mov	r1, r5
 8004a84:	008b      	lsls	r3, r1, #2
 8004a86:	4621      	mov	r1, r4
 8004a88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a8c:	4621      	mov	r1, r4
 8004a8e:	008a      	lsls	r2, r1, #2
 8004a90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a94:	f7fb fbf4 	bl	8000280 <__aeabi_uldivmod>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4b60      	ldr	r3, [pc, #384]	; (8004c20 <UART_SetConfig+0x4e4>)
 8004a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	011c      	lsls	r4, r3, #4
 8004aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ab0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ab4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ab8:	4642      	mov	r2, r8
 8004aba:	464b      	mov	r3, r9
 8004abc:	1891      	adds	r1, r2, r2
 8004abe:	61b9      	str	r1, [r7, #24]
 8004ac0:	415b      	adcs	r3, r3
 8004ac2:	61fb      	str	r3, [r7, #28]
 8004ac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ac8:	4641      	mov	r1, r8
 8004aca:	1851      	adds	r1, r2, r1
 8004acc:	6139      	str	r1, [r7, #16]
 8004ace:	4649      	mov	r1, r9
 8004ad0:	414b      	adcs	r3, r1
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ae0:	4659      	mov	r1, fp
 8004ae2:	00cb      	lsls	r3, r1, #3
 8004ae4:	4651      	mov	r1, sl
 8004ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aea:	4651      	mov	r1, sl
 8004aec:	00ca      	lsls	r2, r1, #3
 8004aee:	4610      	mov	r0, r2
 8004af0:	4619      	mov	r1, r3
 8004af2:	4603      	mov	r3, r0
 8004af4:	4642      	mov	r2, r8
 8004af6:	189b      	adds	r3, r3, r2
 8004af8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004afc:	464b      	mov	r3, r9
 8004afe:	460a      	mov	r2, r1
 8004b00:	eb42 0303 	adc.w	r3, r2, r3
 8004b04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b20:	4649      	mov	r1, r9
 8004b22:	008b      	lsls	r3, r1, #2
 8004b24:	4641      	mov	r1, r8
 8004b26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b2a:	4641      	mov	r1, r8
 8004b2c:	008a      	lsls	r2, r1, #2
 8004b2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b32:	f7fb fba5 	bl	8000280 <__aeabi_uldivmod>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	4b38      	ldr	r3, [pc, #224]	; (8004c20 <UART_SetConfig+0x4e4>)
 8004b3e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	2264      	movs	r2, #100	; 0x64
 8004b46:	fb02 f303 	mul.w	r3, r2, r3
 8004b4a:	1acb      	subs	r3, r1, r3
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	3332      	adds	r3, #50	; 0x32
 8004b50:	4a33      	ldr	r2, [pc, #204]	; (8004c20 <UART_SetConfig+0x4e4>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b5c:	441c      	add	r4, r3
 8004b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b62:	2200      	movs	r2, #0
 8004b64:	673b      	str	r3, [r7, #112]	; 0x70
 8004b66:	677a      	str	r2, [r7, #116]	; 0x74
 8004b68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b6c:	4642      	mov	r2, r8
 8004b6e:	464b      	mov	r3, r9
 8004b70:	1891      	adds	r1, r2, r2
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	415b      	adcs	r3, r3
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b7c:	4641      	mov	r1, r8
 8004b7e:	1851      	adds	r1, r2, r1
 8004b80:	6039      	str	r1, [r7, #0]
 8004b82:	4649      	mov	r1, r9
 8004b84:	414b      	adcs	r3, r1
 8004b86:	607b      	str	r3, [r7, #4]
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b94:	4659      	mov	r1, fp
 8004b96:	00cb      	lsls	r3, r1, #3
 8004b98:	4651      	mov	r1, sl
 8004b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b9e:	4651      	mov	r1, sl
 8004ba0:	00ca      	lsls	r2, r1, #3
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	4642      	mov	r2, r8
 8004baa:	189b      	adds	r3, r3, r2
 8004bac:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bae:	464b      	mov	r3, r9
 8004bb0:	460a      	mov	r2, r1
 8004bb2:	eb42 0303 	adc.w	r3, r2, r3
 8004bb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	663b      	str	r3, [r7, #96]	; 0x60
 8004bc2:	667a      	str	r2, [r7, #100]	; 0x64
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bd0:	4649      	mov	r1, r9
 8004bd2:	008b      	lsls	r3, r1, #2
 8004bd4:	4641      	mov	r1, r8
 8004bd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bda:	4641      	mov	r1, r8
 8004bdc:	008a      	lsls	r2, r1, #2
 8004bde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004be2:	f7fb fb4d 	bl	8000280 <__aeabi_uldivmod>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4b0d      	ldr	r3, [pc, #52]	; (8004c20 <UART_SetConfig+0x4e4>)
 8004bec:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	2164      	movs	r1, #100	; 0x64
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	3332      	adds	r3, #50	; 0x32
 8004bfe:	4a08      	ldr	r2, [pc, #32]	; (8004c20 <UART_SetConfig+0x4e4>)
 8004c00:	fba2 2303 	umull	r2, r3, r2, r3
 8004c04:	095b      	lsrs	r3, r3, #5
 8004c06:	f003 020f 	and.w	r2, r3, #15
 8004c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4422      	add	r2, r4
 8004c12:	609a      	str	r2, [r3, #8]
}
 8004c14:	bf00      	nop
 8004c16:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c20:	51eb851f 	.word	0x51eb851f

08004c24 <exit>:
 8004c24:	b508      	push	{r3, lr}
 8004c26:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <exit+0x1c>)
 8004c28:	4604      	mov	r4, r0
 8004c2a:	b113      	cbz	r3, 8004c32 <exit+0xe>
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	f3af 8000 	nop.w
 8004c32:	4b04      	ldr	r3, [pc, #16]	; (8004c44 <exit+0x20>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	b103      	cbz	r3, 8004c3a <exit+0x16>
 8004c38:	4798      	blx	r3
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	f7fc fed2 	bl	80019e4 <_exit>
 8004c40:	00000000 	.word	0x00000000
 8004c44:	2000ddb0 	.word	0x2000ddb0

08004c48 <sbrk_aligned>:
 8004c48:	b570      	push	{r4, r5, r6, lr}
 8004c4a:	4e0e      	ldr	r6, [pc, #56]	; (8004c84 <sbrk_aligned+0x3c>)
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	6831      	ldr	r1, [r6, #0]
 8004c50:	4605      	mov	r5, r0
 8004c52:	b911      	cbnz	r1, 8004c5a <sbrk_aligned+0x12>
 8004c54:	f000 fae8 	bl	8005228 <_sbrk_r>
 8004c58:	6030      	str	r0, [r6, #0]
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	f000 fae3 	bl	8005228 <_sbrk_r>
 8004c62:	1c43      	adds	r3, r0, #1
 8004c64:	d00a      	beq.n	8004c7c <sbrk_aligned+0x34>
 8004c66:	1cc4      	adds	r4, r0, #3
 8004c68:	f024 0403 	bic.w	r4, r4, #3
 8004c6c:	42a0      	cmp	r0, r4
 8004c6e:	d007      	beq.n	8004c80 <sbrk_aligned+0x38>
 8004c70:	1a21      	subs	r1, r4, r0
 8004c72:	4628      	mov	r0, r5
 8004c74:	f000 fad8 	bl	8005228 <_sbrk_r>
 8004c78:	3001      	adds	r0, #1
 8004c7a:	d101      	bne.n	8004c80 <sbrk_aligned+0x38>
 8004c7c:	f04f 34ff 	mov.w	r4, #4294967295
 8004c80:	4620      	mov	r0, r4
 8004c82:	bd70      	pop	{r4, r5, r6, pc}
 8004c84:	2000dc74 	.word	0x2000dc74

08004c88 <_malloc_r>:
 8004c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c8c:	1ccd      	adds	r5, r1, #3
 8004c8e:	f025 0503 	bic.w	r5, r5, #3
 8004c92:	3508      	adds	r5, #8
 8004c94:	2d0c      	cmp	r5, #12
 8004c96:	bf38      	it	cc
 8004c98:	250c      	movcc	r5, #12
 8004c9a:	2d00      	cmp	r5, #0
 8004c9c:	4607      	mov	r7, r0
 8004c9e:	db01      	blt.n	8004ca4 <_malloc_r+0x1c>
 8004ca0:	42a9      	cmp	r1, r5
 8004ca2:	d905      	bls.n	8004cb0 <_malloc_r+0x28>
 8004ca4:	230c      	movs	r3, #12
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	2600      	movs	r6, #0
 8004caa:	4630      	mov	r0, r6
 8004cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cb0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d84 <_malloc_r+0xfc>
 8004cb4:	f000 f868 	bl	8004d88 <__malloc_lock>
 8004cb8:	f8d8 3000 	ldr.w	r3, [r8]
 8004cbc:	461c      	mov	r4, r3
 8004cbe:	bb5c      	cbnz	r4, 8004d18 <_malloc_r+0x90>
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	f7ff ffc0 	bl	8004c48 <sbrk_aligned>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	4604      	mov	r4, r0
 8004ccc:	d155      	bne.n	8004d7a <_malloc_r+0xf2>
 8004cce:	f8d8 4000 	ldr.w	r4, [r8]
 8004cd2:	4626      	mov	r6, r4
 8004cd4:	2e00      	cmp	r6, #0
 8004cd6:	d145      	bne.n	8004d64 <_malloc_r+0xdc>
 8004cd8:	2c00      	cmp	r4, #0
 8004cda:	d048      	beq.n	8004d6e <_malloc_r+0xe6>
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	4631      	mov	r1, r6
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	eb04 0903 	add.w	r9, r4, r3
 8004ce6:	f000 fa9f 	bl	8005228 <_sbrk_r>
 8004cea:	4581      	cmp	r9, r0
 8004cec:	d13f      	bne.n	8004d6e <_malloc_r+0xe6>
 8004cee:	6821      	ldr	r1, [r4, #0]
 8004cf0:	1a6d      	subs	r5, r5, r1
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	f7ff ffa7 	bl	8004c48 <sbrk_aligned>
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	d037      	beq.n	8004d6e <_malloc_r+0xe6>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	442b      	add	r3, r5
 8004d02:	6023      	str	r3, [r4, #0]
 8004d04:	f8d8 3000 	ldr.w	r3, [r8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d038      	beq.n	8004d7e <_malloc_r+0xf6>
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	42a2      	cmp	r2, r4
 8004d10:	d12b      	bne.n	8004d6a <_malloc_r+0xe2>
 8004d12:	2200      	movs	r2, #0
 8004d14:	605a      	str	r2, [r3, #4]
 8004d16:	e00f      	b.n	8004d38 <_malloc_r+0xb0>
 8004d18:	6822      	ldr	r2, [r4, #0]
 8004d1a:	1b52      	subs	r2, r2, r5
 8004d1c:	d41f      	bmi.n	8004d5e <_malloc_r+0xd6>
 8004d1e:	2a0b      	cmp	r2, #11
 8004d20:	d917      	bls.n	8004d52 <_malloc_r+0xca>
 8004d22:	1961      	adds	r1, r4, r5
 8004d24:	42a3      	cmp	r3, r4
 8004d26:	6025      	str	r5, [r4, #0]
 8004d28:	bf18      	it	ne
 8004d2a:	6059      	strne	r1, [r3, #4]
 8004d2c:	6863      	ldr	r3, [r4, #4]
 8004d2e:	bf08      	it	eq
 8004d30:	f8c8 1000 	streq.w	r1, [r8]
 8004d34:	5162      	str	r2, [r4, r5]
 8004d36:	604b      	str	r3, [r1, #4]
 8004d38:	4638      	mov	r0, r7
 8004d3a:	f104 060b 	add.w	r6, r4, #11
 8004d3e:	f000 f829 	bl	8004d94 <__malloc_unlock>
 8004d42:	f026 0607 	bic.w	r6, r6, #7
 8004d46:	1d23      	adds	r3, r4, #4
 8004d48:	1af2      	subs	r2, r6, r3
 8004d4a:	d0ae      	beq.n	8004caa <_malloc_r+0x22>
 8004d4c:	1b9b      	subs	r3, r3, r6
 8004d4e:	50a3      	str	r3, [r4, r2]
 8004d50:	e7ab      	b.n	8004caa <_malloc_r+0x22>
 8004d52:	42a3      	cmp	r3, r4
 8004d54:	6862      	ldr	r2, [r4, #4]
 8004d56:	d1dd      	bne.n	8004d14 <_malloc_r+0x8c>
 8004d58:	f8c8 2000 	str.w	r2, [r8]
 8004d5c:	e7ec      	b.n	8004d38 <_malloc_r+0xb0>
 8004d5e:	4623      	mov	r3, r4
 8004d60:	6864      	ldr	r4, [r4, #4]
 8004d62:	e7ac      	b.n	8004cbe <_malloc_r+0x36>
 8004d64:	4634      	mov	r4, r6
 8004d66:	6876      	ldr	r6, [r6, #4]
 8004d68:	e7b4      	b.n	8004cd4 <_malloc_r+0x4c>
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	e7cc      	b.n	8004d08 <_malloc_r+0x80>
 8004d6e:	230c      	movs	r3, #12
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	4638      	mov	r0, r7
 8004d74:	f000 f80e 	bl	8004d94 <__malloc_unlock>
 8004d78:	e797      	b.n	8004caa <_malloc_r+0x22>
 8004d7a:	6025      	str	r5, [r4, #0]
 8004d7c:	e7dc      	b.n	8004d38 <_malloc_r+0xb0>
 8004d7e:	605b      	str	r3, [r3, #4]
 8004d80:	deff      	udf	#255	; 0xff
 8004d82:	bf00      	nop
 8004d84:	2000dc70 	.word	0x2000dc70

08004d88 <__malloc_lock>:
 8004d88:	4801      	ldr	r0, [pc, #4]	; (8004d90 <__malloc_lock+0x8>)
 8004d8a:	f000 ba9a 	b.w	80052c2 <__retarget_lock_acquire_recursive>
 8004d8e:	bf00      	nop
 8004d90:	2000ddb8 	.word	0x2000ddb8

08004d94 <__malloc_unlock>:
 8004d94:	4801      	ldr	r0, [pc, #4]	; (8004d9c <__malloc_unlock+0x8>)
 8004d96:	f000 ba95 	b.w	80052c4 <__retarget_lock_release_recursive>
 8004d9a:	bf00      	nop
 8004d9c:	2000ddb8 	.word	0x2000ddb8

08004da0 <std>:
 8004da0:	2300      	movs	r3, #0
 8004da2:	b510      	push	{r4, lr}
 8004da4:	4604      	mov	r4, r0
 8004da6:	e9c0 3300 	strd	r3, r3, [r0]
 8004daa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dae:	6083      	str	r3, [r0, #8]
 8004db0:	8181      	strh	r1, [r0, #12]
 8004db2:	6643      	str	r3, [r0, #100]	; 0x64
 8004db4:	81c2      	strh	r2, [r0, #14]
 8004db6:	6183      	str	r3, [r0, #24]
 8004db8:	4619      	mov	r1, r3
 8004dba:	2208      	movs	r2, #8
 8004dbc:	305c      	adds	r0, #92	; 0x5c
 8004dbe:	f000 f9f7 	bl	80051b0 <memset>
 8004dc2:	4b0d      	ldr	r3, [pc, #52]	; (8004df8 <std+0x58>)
 8004dc4:	6263      	str	r3, [r4, #36]	; 0x24
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	; (8004dfc <std+0x5c>)
 8004dc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004dca:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <std+0x60>)
 8004dcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004dce:	4b0d      	ldr	r3, [pc, #52]	; (8004e04 <std+0x64>)
 8004dd0:	6323      	str	r3, [r4, #48]	; 0x30
 8004dd2:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <std+0x68>)
 8004dd4:	6224      	str	r4, [r4, #32]
 8004dd6:	429c      	cmp	r4, r3
 8004dd8:	d006      	beq.n	8004de8 <std+0x48>
 8004dda:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004dde:	4294      	cmp	r4, r2
 8004de0:	d002      	beq.n	8004de8 <std+0x48>
 8004de2:	33d0      	adds	r3, #208	; 0xd0
 8004de4:	429c      	cmp	r4, r3
 8004de6:	d105      	bne.n	8004df4 <std+0x54>
 8004de8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004df0:	f000 ba66 	b.w	80052c0 <__retarget_lock_init_recursive>
 8004df4:	bd10      	pop	{r4, pc}
 8004df6:	bf00      	nop
 8004df8:	08005001 	.word	0x08005001
 8004dfc:	08005023 	.word	0x08005023
 8004e00:	0800505b 	.word	0x0800505b
 8004e04:	0800507f 	.word	0x0800507f
 8004e08:	2000dc78 	.word	0x2000dc78

08004e0c <stdio_exit_handler>:
 8004e0c:	4a02      	ldr	r2, [pc, #8]	; (8004e18 <stdio_exit_handler+0xc>)
 8004e0e:	4903      	ldr	r1, [pc, #12]	; (8004e1c <stdio_exit_handler+0x10>)
 8004e10:	4803      	ldr	r0, [pc, #12]	; (8004e20 <stdio_exit_handler+0x14>)
 8004e12:	f000 b869 	b.w	8004ee8 <_fwalk_sglue>
 8004e16:	bf00      	nop
 8004e18:	20000010 	.word	0x20000010
 8004e1c:	08005a15 	.word	0x08005a15
 8004e20:	2000001c 	.word	0x2000001c

08004e24 <cleanup_stdio>:
 8004e24:	6841      	ldr	r1, [r0, #4]
 8004e26:	4b0c      	ldr	r3, [pc, #48]	; (8004e58 <cleanup_stdio+0x34>)
 8004e28:	4299      	cmp	r1, r3
 8004e2a:	b510      	push	{r4, lr}
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	d001      	beq.n	8004e34 <cleanup_stdio+0x10>
 8004e30:	f000 fdf0 	bl	8005a14 <_fflush_r>
 8004e34:	68a1      	ldr	r1, [r4, #8]
 8004e36:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <cleanup_stdio+0x38>)
 8004e38:	4299      	cmp	r1, r3
 8004e3a:	d002      	beq.n	8004e42 <cleanup_stdio+0x1e>
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	f000 fde9 	bl	8005a14 <_fflush_r>
 8004e42:	68e1      	ldr	r1, [r4, #12]
 8004e44:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <cleanup_stdio+0x3c>)
 8004e46:	4299      	cmp	r1, r3
 8004e48:	d004      	beq.n	8004e54 <cleanup_stdio+0x30>
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e50:	f000 bde0 	b.w	8005a14 <_fflush_r>
 8004e54:	bd10      	pop	{r4, pc}
 8004e56:	bf00      	nop
 8004e58:	2000dc78 	.word	0x2000dc78
 8004e5c:	2000dce0 	.word	0x2000dce0
 8004e60:	2000dd48 	.word	0x2000dd48

08004e64 <global_stdio_init.part.0>:
 8004e64:	b510      	push	{r4, lr}
 8004e66:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <global_stdio_init.part.0+0x30>)
 8004e68:	4c0b      	ldr	r4, [pc, #44]	; (8004e98 <global_stdio_init.part.0+0x34>)
 8004e6a:	4a0c      	ldr	r2, [pc, #48]	; (8004e9c <global_stdio_init.part.0+0x38>)
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	4620      	mov	r0, r4
 8004e70:	2200      	movs	r2, #0
 8004e72:	2104      	movs	r1, #4
 8004e74:	f7ff ff94 	bl	8004da0 <std>
 8004e78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	2109      	movs	r1, #9
 8004e80:	f7ff ff8e 	bl	8004da0 <std>
 8004e84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004e88:	2202      	movs	r2, #2
 8004e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e8e:	2112      	movs	r1, #18
 8004e90:	f7ff bf86 	b.w	8004da0 <std>
 8004e94:	2000ddb0 	.word	0x2000ddb0
 8004e98:	2000dc78 	.word	0x2000dc78
 8004e9c:	08004e0d 	.word	0x08004e0d

08004ea0 <__sfp_lock_acquire>:
 8004ea0:	4801      	ldr	r0, [pc, #4]	; (8004ea8 <__sfp_lock_acquire+0x8>)
 8004ea2:	f000 ba0e 	b.w	80052c2 <__retarget_lock_acquire_recursive>
 8004ea6:	bf00      	nop
 8004ea8:	2000ddb9 	.word	0x2000ddb9

08004eac <__sfp_lock_release>:
 8004eac:	4801      	ldr	r0, [pc, #4]	; (8004eb4 <__sfp_lock_release+0x8>)
 8004eae:	f000 ba09 	b.w	80052c4 <__retarget_lock_release_recursive>
 8004eb2:	bf00      	nop
 8004eb4:	2000ddb9 	.word	0x2000ddb9

08004eb8 <__sinit>:
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	4604      	mov	r4, r0
 8004ebc:	f7ff fff0 	bl	8004ea0 <__sfp_lock_acquire>
 8004ec0:	6a23      	ldr	r3, [r4, #32]
 8004ec2:	b11b      	cbz	r3, 8004ecc <__sinit+0x14>
 8004ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ec8:	f7ff bff0 	b.w	8004eac <__sfp_lock_release>
 8004ecc:	4b04      	ldr	r3, [pc, #16]	; (8004ee0 <__sinit+0x28>)
 8004ece:	6223      	str	r3, [r4, #32]
 8004ed0:	4b04      	ldr	r3, [pc, #16]	; (8004ee4 <__sinit+0x2c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1f5      	bne.n	8004ec4 <__sinit+0xc>
 8004ed8:	f7ff ffc4 	bl	8004e64 <global_stdio_init.part.0>
 8004edc:	e7f2      	b.n	8004ec4 <__sinit+0xc>
 8004ede:	bf00      	nop
 8004ee0:	08004e25 	.word	0x08004e25
 8004ee4:	2000ddb0 	.word	0x2000ddb0

08004ee8 <_fwalk_sglue>:
 8004ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eec:	4607      	mov	r7, r0
 8004eee:	4688      	mov	r8, r1
 8004ef0:	4614      	mov	r4, r2
 8004ef2:	2600      	movs	r6, #0
 8004ef4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ef8:	f1b9 0901 	subs.w	r9, r9, #1
 8004efc:	d505      	bpl.n	8004f0a <_fwalk_sglue+0x22>
 8004efe:	6824      	ldr	r4, [r4, #0]
 8004f00:	2c00      	cmp	r4, #0
 8004f02:	d1f7      	bne.n	8004ef4 <_fwalk_sglue+0xc>
 8004f04:	4630      	mov	r0, r6
 8004f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f0a:	89ab      	ldrh	r3, [r5, #12]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d907      	bls.n	8004f20 <_fwalk_sglue+0x38>
 8004f10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f14:	3301      	adds	r3, #1
 8004f16:	d003      	beq.n	8004f20 <_fwalk_sglue+0x38>
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	47c0      	blx	r8
 8004f1e:	4306      	orrs	r6, r0
 8004f20:	3568      	adds	r5, #104	; 0x68
 8004f22:	e7e9      	b.n	8004ef8 <_fwalk_sglue+0x10>

08004f24 <iprintf>:
 8004f24:	b40f      	push	{r0, r1, r2, r3}
 8004f26:	b507      	push	{r0, r1, r2, lr}
 8004f28:	4906      	ldr	r1, [pc, #24]	; (8004f44 <iprintf+0x20>)
 8004f2a:	ab04      	add	r3, sp, #16
 8004f2c:	6808      	ldr	r0, [r1, #0]
 8004f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f32:	6881      	ldr	r1, [r0, #8]
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	f000 fa3d 	bl	80053b4 <_vfiprintf_r>
 8004f3a:	b003      	add	sp, #12
 8004f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f40:	b004      	add	sp, #16
 8004f42:	4770      	bx	lr
 8004f44:	20000068 	.word	0x20000068

08004f48 <_puts_r>:
 8004f48:	6a03      	ldr	r3, [r0, #32]
 8004f4a:	b570      	push	{r4, r5, r6, lr}
 8004f4c:	6884      	ldr	r4, [r0, #8]
 8004f4e:	4605      	mov	r5, r0
 8004f50:	460e      	mov	r6, r1
 8004f52:	b90b      	cbnz	r3, 8004f58 <_puts_r+0x10>
 8004f54:	f7ff ffb0 	bl	8004eb8 <__sinit>
 8004f58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f5a:	07db      	lsls	r3, r3, #31
 8004f5c:	d405      	bmi.n	8004f6a <_puts_r+0x22>
 8004f5e:	89a3      	ldrh	r3, [r4, #12]
 8004f60:	0598      	lsls	r0, r3, #22
 8004f62:	d402      	bmi.n	8004f6a <_puts_r+0x22>
 8004f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f66:	f000 f9ac 	bl	80052c2 <__retarget_lock_acquire_recursive>
 8004f6a:	89a3      	ldrh	r3, [r4, #12]
 8004f6c:	0719      	lsls	r1, r3, #28
 8004f6e:	d513      	bpl.n	8004f98 <_puts_r+0x50>
 8004f70:	6923      	ldr	r3, [r4, #16]
 8004f72:	b18b      	cbz	r3, 8004f98 <_puts_r+0x50>
 8004f74:	3e01      	subs	r6, #1
 8004f76:	68a3      	ldr	r3, [r4, #8]
 8004f78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	60a3      	str	r3, [r4, #8]
 8004f80:	b9e9      	cbnz	r1, 8004fbe <_puts_r+0x76>
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	da2e      	bge.n	8004fe4 <_puts_r+0x9c>
 8004f86:	4622      	mov	r2, r4
 8004f88:	210a      	movs	r1, #10
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f000 f87b 	bl	8005086 <__swbuf_r>
 8004f90:	3001      	adds	r0, #1
 8004f92:	d007      	beq.n	8004fa4 <_puts_r+0x5c>
 8004f94:	250a      	movs	r5, #10
 8004f96:	e007      	b.n	8004fa8 <_puts_r+0x60>
 8004f98:	4621      	mov	r1, r4
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	f000 f8b0 	bl	8005100 <__swsetup_r>
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d0e7      	beq.n	8004f74 <_puts_r+0x2c>
 8004fa4:	f04f 35ff 	mov.w	r5, #4294967295
 8004fa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004faa:	07da      	lsls	r2, r3, #31
 8004fac:	d405      	bmi.n	8004fba <_puts_r+0x72>
 8004fae:	89a3      	ldrh	r3, [r4, #12]
 8004fb0:	059b      	lsls	r3, r3, #22
 8004fb2:	d402      	bmi.n	8004fba <_puts_r+0x72>
 8004fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fb6:	f000 f985 	bl	80052c4 <__retarget_lock_release_recursive>
 8004fba:	4628      	mov	r0, r5
 8004fbc:	bd70      	pop	{r4, r5, r6, pc}
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	da04      	bge.n	8004fcc <_puts_r+0x84>
 8004fc2:	69a2      	ldr	r2, [r4, #24]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	dc06      	bgt.n	8004fd6 <_puts_r+0x8e>
 8004fc8:	290a      	cmp	r1, #10
 8004fca:	d004      	beq.n	8004fd6 <_puts_r+0x8e>
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	6022      	str	r2, [r4, #0]
 8004fd2:	7019      	strb	r1, [r3, #0]
 8004fd4:	e7cf      	b.n	8004f76 <_puts_r+0x2e>
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	4628      	mov	r0, r5
 8004fda:	f000 f854 	bl	8005086 <__swbuf_r>
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d1c9      	bne.n	8004f76 <_puts_r+0x2e>
 8004fe2:	e7df      	b.n	8004fa4 <_puts_r+0x5c>
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	250a      	movs	r5, #10
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	6022      	str	r2, [r4, #0]
 8004fec:	701d      	strb	r5, [r3, #0]
 8004fee:	e7db      	b.n	8004fa8 <_puts_r+0x60>

08004ff0 <puts>:
 8004ff0:	4b02      	ldr	r3, [pc, #8]	; (8004ffc <puts+0xc>)
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	f7ff bfa7 	b.w	8004f48 <_puts_r>
 8004ffa:	bf00      	nop
 8004ffc:	20000068 	.word	0x20000068

08005000 <__sread>:
 8005000:	b510      	push	{r4, lr}
 8005002:	460c      	mov	r4, r1
 8005004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005008:	f000 f8fc 	bl	8005204 <_read_r>
 800500c:	2800      	cmp	r0, #0
 800500e:	bfab      	itete	ge
 8005010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005012:	89a3      	ldrhlt	r3, [r4, #12]
 8005014:	181b      	addge	r3, r3, r0
 8005016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800501a:	bfac      	ite	ge
 800501c:	6563      	strge	r3, [r4, #84]	; 0x54
 800501e:	81a3      	strhlt	r3, [r4, #12]
 8005020:	bd10      	pop	{r4, pc}

08005022 <__swrite>:
 8005022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005026:	461f      	mov	r7, r3
 8005028:	898b      	ldrh	r3, [r1, #12]
 800502a:	05db      	lsls	r3, r3, #23
 800502c:	4605      	mov	r5, r0
 800502e:	460c      	mov	r4, r1
 8005030:	4616      	mov	r6, r2
 8005032:	d505      	bpl.n	8005040 <__swrite+0x1e>
 8005034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005038:	2302      	movs	r3, #2
 800503a:	2200      	movs	r2, #0
 800503c:	f000 f8d0 	bl	80051e0 <_lseek_r>
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800504a:	81a3      	strh	r3, [r4, #12]
 800504c:	4632      	mov	r2, r6
 800504e:	463b      	mov	r3, r7
 8005050:	4628      	mov	r0, r5
 8005052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005056:	f000 b8f7 	b.w	8005248 <_write_r>

0800505a <__sseek>:
 800505a:	b510      	push	{r4, lr}
 800505c:	460c      	mov	r4, r1
 800505e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005062:	f000 f8bd 	bl	80051e0 <_lseek_r>
 8005066:	1c43      	adds	r3, r0, #1
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	bf15      	itete	ne
 800506c:	6560      	strne	r0, [r4, #84]	; 0x54
 800506e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005076:	81a3      	strheq	r3, [r4, #12]
 8005078:	bf18      	it	ne
 800507a:	81a3      	strhne	r3, [r4, #12]
 800507c:	bd10      	pop	{r4, pc}

0800507e <__sclose>:
 800507e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005082:	f000 b89d 	b.w	80051c0 <_close_r>

08005086 <__swbuf_r>:
 8005086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005088:	460e      	mov	r6, r1
 800508a:	4614      	mov	r4, r2
 800508c:	4605      	mov	r5, r0
 800508e:	b118      	cbz	r0, 8005098 <__swbuf_r+0x12>
 8005090:	6a03      	ldr	r3, [r0, #32]
 8005092:	b90b      	cbnz	r3, 8005098 <__swbuf_r+0x12>
 8005094:	f7ff ff10 	bl	8004eb8 <__sinit>
 8005098:	69a3      	ldr	r3, [r4, #24]
 800509a:	60a3      	str	r3, [r4, #8]
 800509c:	89a3      	ldrh	r3, [r4, #12]
 800509e:	071a      	lsls	r2, r3, #28
 80050a0:	d525      	bpl.n	80050ee <__swbuf_r+0x68>
 80050a2:	6923      	ldr	r3, [r4, #16]
 80050a4:	b31b      	cbz	r3, 80050ee <__swbuf_r+0x68>
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	6922      	ldr	r2, [r4, #16]
 80050aa:	1a98      	subs	r0, r3, r2
 80050ac:	6963      	ldr	r3, [r4, #20]
 80050ae:	b2f6      	uxtb	r6, r6
 80050b0:	4283      	cmp	r3, r0
 80050b2:	4637      	mov	r7, r6
 80050b4:	dc04      	bgt.n	80050c0 <__swbuf_r+0x3a>
 80050b6:	4621      	mov	r1, r4
 80050b8:	4628      	mov	r0, r5
 80050ba:	f000 fcab 	bl	8005a14 <_fflush_r>
 80050be:	b9e0      	cbnz	r0, 80050fa <__swbuf_r+0x74>
 80050c0:	68a3      	ldr	r3, [r4, #8]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	60a3      	str	r3, [r4, #8]
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	6022      	str	r2, [r4, #0]
 80050cc:	701e      	strb	r6, [r3, #0]
 80050ce:	6962      	ldr	r2, [r4, #20]
 80050d0:	1c43      	adds	r3, r0, #1
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d004      	beq.n	80050e0 <__swbuf_r+0x5a>
 80050d6:	89a3      	ldrh	r3, [r4, #12]
 80050d8:	07db      	lsls	r3, r3, #31
 80050da:	d506      	bpl.n	80050ea <__swbuf_r+0x64>
 80050dc:	2e0a      	cmp	r6, #10
 80050de:	d104      	bne.n	80050ea <__swbuf_r+0x64>
 80050e0:	4621      	mov	r1, r4
 80050e2:	4628      	mov	r0, r5
 80050e4:	f000 fc96 	bl	8005a14 <_fflush_r>
 80050e8:	b938      	cbnz	r0, 80050fa <__swbuf_r+0x74>
 80050ea:	4638      	mov	r0, r7
 80050ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050ee:	4621      	mov	r1, r4
 80050f0:	4628      	mov	r0, r5
 80050f2:	f000 f805 	bl	8005100 <__swsetup_r>
 80050f6:	2800      	cmp	r0, #0
 80050f8:	d0d5      	beq.n	80050a6 <__swbuf_r+0x20>
 80050fa:	f04f 37ff 	mov.w	r7, #4294967295
 80050fe:	e7f4      	b.n	80050ea <__swbuf_r+0x64>

08005100 <__swsetup_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	4b2a      	ldr	r3, [pc, #168]	; (80051ac <__swsetup_r+0xac>)
 8005104:	4605      	mov	r5, r0
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	460c      	mov	r4, r1
 800510a:	b118      	cbz	r0, 8005114 <__swsetup_r+0x14>
 800510c:	6a03      	ldr	r3, [r0, #32]
 800510e:	b90b      	cbnz	r3, 8005114 <__swsetup_r+0x14>
 8005110:	f7ff fed2 	bl	8004eb8 <__sinit>
 8005114:	89a3      	ldrh	r3, [r4, #12]
 8005116:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800511a:	0718      	lsls	r0, r3, #28
 800511c:	d422      	bmi.n	8005164 <__swsetup_r+0x64>
 800511e:	06d9      	lsls	r1, r3, #27
 8005120:	d407      	bmi.n	8005132 <__swsetup_r+0x32>
 8005122:	2309      	movs	r3, #9
 8005124:	602b      	str	r3, [r5, #0]
 8005126:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800512a:	81a3      	strh	r3, [r4, #12]
 800512c:	f04f 30ff 	mov.w	r0, #4294967295
 8005130:	e034      	b.n	800519c <__swsetup_r+0x9c>
 8005132:	0758      	lsls	r0, r3, #29
 8005134:	d512      	bpl.n	800515c <__swsetup_r+0x5c>
 8005136:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005138:	b141      	cbz	r1, 800514c <__swsetup_r+0x4c>
 800513a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800513e:	4299      	cmp	r1, r3
 8005140:	d002      	beq.n	8005148 <__swsetup_r+0x48>
 8005142:	4628      	mov	r0, r5
 8005144:	f000 f8c0 	bl	80052c8 <_free_r>
 8005148:	2300      	movs	r3, #0
 800514a:	6363      	str	r3, [r4, #52]	; 0x34
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005152:	81a3      	strh	r3, [r4, #12]
 8005154:	2300      	movs	r3, #0
 8005156:	6063      	str	r3, [r4, #4]
 8005158:	6923      	ldr	r3, [r4, #16]
 800515a:	6023      	str	r3, [r4, #0]
 800515c:	89a3      	ldrh	r3, [r4, #12]
 800515e:	f043 0308 	orr.w	r3, r3, #8
 8005162:	81a3      	strh	r3, [r4, #12]
 8005164:	6923      	ldr	r3, [r4, #16]
 8005166:	b94b      	cbnz	r3, 800517c <__swsetup_r+0x7c>
 8005168:	89a3      	ldrh	r3, [r4, #12]
 800516a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800516e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005172:	d003      	beq.n	800517c <__swsetup_r+0x7c>
 8005174:	4621      	mov	r1, r4
 8005176:	4628      	mov	r0, r5
 8005178:	f000 fc9a 	bl	8005ab0 <__smakebuf_r>
 800517c:	89a0      	ldrh	r0, [r4, #12]
 800517e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005182:	f010 0301 	ands.w	r3, r0, #1
 8005186:	d00a      	beq.n	800519e <__swsetup_r+0x9e>
 8005188:	2300      	movs	r3, #0
 800518a:	60a3      	str	r3, [r4, #8]
 800518c:	6963      	ldr	r3, [r4, #20]
 800518e:	425b      	negs	r3, r3
 8005190:	61a3      	str	r3, [r4, #24]
 8005192:	6923      	ldr	r3, [r4, #16]
 8005194:	b943      	cbnz	r3, 80051a8 <__swsetup_r+0xa8>
 8005196:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800519a:	d1c4      	bne.n	8005126 <__swsetup_r+0x26>
 800519c:	bd38      	pop	{r3, r4, r5, pc}
 800519e:	0781      	lsls	r1, r0, #30
 80051a0:	bf58      	it	pl
 80051a2:	6963      	ldrpl	r3, [r4, #20]
 80051a4:	60a3      	str	r3, [r4, #8]
 80051a6:	e7f4      	b.n	8005192 <__swsetup_r+0x92>
 80051a8:	2000      	movs	r0, #0
 80051aa:	e7f7      	b.n	800519c <__swsetup_r+0x9c>
 80051ac:	20000068 	.word	0x20000068

080051b0 <memset>:
 80051b0:	4402      	add	r2, r0
 80051b2:	4603      	mov	r3, r0
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d100      	bne.n	80051ba <memset+0xa>
 80051b8:	4770      	bx	lr
 80051ba:	f803 1b01 	strb.w	r1, [r3], #1
 80051be:	e7f9      	b.n	80051b4 <memset+0x4>

080051c0 <_close_r>:
 80051c0:	b538      	push	{r3, r4, r5, lr}
 80051c2:	4d06      	ldr	r5, [pc, #24]	; (80051dc <_close_r+0x1c>)
 80051c4:	2300      	movs	r3, #0
 80051c6:	4604      	mov	r4, r0
 80051c8:	4608      	mov	r0, r1
 80051ca:	602b      	str	r3, [r5, #0]
 80051cc:	f7fc fc31 	bl	8001a32 <_close>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	d102      	bne.n	80051da <_close_r+0x1a>
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	b103      	cbz	r3, 80051da <_close_r+0x1a>
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	bd38      	pop	{r3, r4, r5, pc}
 80051dc:	2000ddb4 	.word	0x2000ddb4

080051e0 <_lseek_r>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	4d07      	ldr	r5, [pc, #28]	; (8005200 <_lseek_r+0x20>)
 80051e4:	4604      	mov	r4, r0
 80051e6:	4608      	mov	r0, r1
 80051e8:	4611      	mov	r1, r2
 80051ea:	2200      	movs	r2, #0
 80051ec:	602a      	str	r2, [r5, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	f7fc fc46 	bl	8001a80 <_lseek>
 80051f4:	1c43      	adds	r3, r0, #1
 80051f6:	d102      	bne.n	80051fe <_lseek_r+0x1e>
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	b103      	cbz	r3, 80051fe <_lseek_r+0x1e>
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	bd38      	pop	{r3, r4, r5, pc}
 8005200:	2000ddb4 	.word	0x2000ddb4

08005204 <_read_r>:
 8005204:	b538      	push	{r3, r4, r5, lr}
 8005206:	4d07      	ldr	r5, [pc, #28]	; (8005224 <_read_r+0x20>)
 8005208:	4604      	mov	r4, r0
 800520a:	4608      	mov	r0, r1
 800520c:	4611      	mov	r1, r2
 800520e:	2200      	movs	r2, #0
 8005210:	602a      	str	r2, [r5, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	f7fc fbf0 	bl	80019f8 <_read>
 8005218:	1c43      	adds	r3, r0, #1
 800521a:	d102      	bne.n	8005222 <_read_r+0x1e>
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	b103      	cbz	r3, 8005222 <_read_r+0x1e>
 8005220:	6023      	str	r3, [r4, #0]
 8005222:	bd38      	pop	{r3, r4, r5, pc}
 8005224:	2000ddb4 	.word	0x2000ddb4

08005228 <_sbrk_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4d06      	ldr	r5, [pc, #24]	; (8005244 <_sbrk_r+0x1c>)
 800522c:	2300      	movs	r3, #0
 800522e:	4604      	mov	r4, r0
 8005230:	4608      	mov	r0, r1
 8005232:	602b      	str	r3, [r5, #0]
 8005234:	f7fc fc32 	bl	8001a9c <_sbrk>
 8005238:	1c43      	adds	r3, r0, #1
 800523a:	d102      	bne.n	8005242 <_sbrk_r+0x1a>
 800523c:	682b      	ldr	r3, [r5, #0]
 800523e:	b103      	cbz	r3, 8005242 <_sbrk_r+0x1a>
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	bd38      	pop	{r3, r4, r5, pc}
 8005244:	2000ddb4 	.word	0x2000ddb4

08005248 <_write_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4d07      	ldr	r5, [pc, #28]	; (8005268 <_write_r+0x20>)
 800524c:	4604      	mov	r4, r0
 800524e:	4608      	mov	r0, r1
 8005250:	4611      	mov	r1, r2
 8005252:	2200      	movs	r2, #0
 8005254:	602a      	str	r2, [r5, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	f7fb f9b7 	bl	80005ca <_write>
 800525c:	1c43      	adds	r3, r0, #1
 800525e:	d102      	bne.n	8005266 <_write_r+0x1e>
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	b103      	cbz	r3, 8005266 <_write_r+0x1e>
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	bd38      	pop	{r3, r4, r5, pc}
 8005268:	2000ddb4 	.word	0x2000ddb4

0800526c <__errno>:
 800526c:	4b01      	ldr	r3, [pc, #4]	; (8005274 <__errno+0x8>)
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20000068 	.word	0x20000068

08005278 <__libc_init_array>:
 8005278:	b570      	push	{r4, r5, r6, lr}
 800527a:	4d0d      	ldr	r5, [pc, #52]	; (80052b0 <__libc_init_array+0x38>)
 800527c:	4c0d      	ldr	r4, [pc, #52]	; (80052b4 <__libc_init_array+0x3c>)
 800527e:	1b64      	subs	r4, r4, r5
 8005280:	10a4      	asrs	r4, r4, #2
 8005282:	2600      	movs	r6, #0
 8005284:	42a6      	cmp	r6, r4
 8005286:	d109      	bne.n	800529c <__libc_init_array+0x24>
 8005288:	4d0b      	ldr	r5, [pc, #44]	; (80052b8 <__libc_init_array+0x40>)
 800528a:	4c0c      	ldr	r4, [pc, #48]	; (80052bc <__libc_init_array+0x44>)
 800528c:	f000 fc6e 	bl	8005b6c <_init>
 8005290:	1b64      	subs	r4, r4, r5
 8005292:	10a4      	asrs	r4, r4, #2
 8005294:	2600      	movs	r6, #0
 8005296:	42a6      	cmp	r6, r4
 8005298:	d105      	bne.n	80052a6 <__libc_init_array+0x2e>
 800529a:	bd70      	pop	{r4, r5, r6, pc}
 800529c:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a0:	4798      	blx	r3
 80052a2:	3601      	adds	r6, #1
 80052a4:	e7ee      	b.n	8005284 <__libc_init_array+0xc>
 80052a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052aa:	4798      	blx	r3
 80052ac:	3601      	adds	r6, #1
 80052ae:	e7f2      	b.n	8005296 <__libc_init_array+0x1e>
 80052b0:	080063c0 	.word	0x080063c0
 80052b4:	080063c0 	.word	0x080063c0
 80052b8:	080063c0 	.word	0x080063c0
 80052bc:	080063c4 	.word	0x080063c4

080052c0 <__retarget_lock_init_recursive>:
 80052c0:	4770      	bx	lr

080052c2 <__retarget_lock_acquire_recursive>:
 80052c2:	4770      	bx	lr

080052c4 <__retarget_lock_release_recursive>:
 80052c4:	4770      	bx	lr
	...

080052c8 <_free_r>:
 80052c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052ca:	2900      	cmp	r1, #0
 80052cc:	d044      	beq.n	8005358 <_free_r+0x90>
 80052ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052d2:	9001      	str	r0, [sp, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f1a1 0404 	sub.w	r4, r1, #4
 80052da:	bfb8      	it	lt
 80052dc:	18e4      	addlt	r4, r4, r3
 80052de:	f7ff fd53 	bl	8004d88 <__malloc_lock>
 80052e2:	4a1e      	ldr	r2, [pc, #120]	; (800535c <_free_r+0x94>)
 80052e4:	9801      	ldr	r0, [sp, #4]
 80052e6:	6813      	ldr	r3, [r2, #0]
 80052e8:	b933      	cbnz	r3, 80052f8 <_free_r+0x30>
 80052ea:	6063      	str	r3, [r4, #4]
 80052ec:	6014      	str	r4, [r2, #0]
 80052ee:	b003      	add	sp, #12
 80052f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052f4:	f7ff bd4e 	b.w	8004d94 <__malloc_unlock>
 80052f8:	42a3      	cmp	r3, r4
 80052fa:	d908      	bls.n	800530e <_free_r+0x46>
 80052fc:	6825      	ldr	r5, [r4, #0]
 80052fe:	1961      	adds	r1, r4, r5
 8005300:	428b      	cmp	r3, r1
 8005302:	bf01      	itttt	eq
 8005304:	6819      	ldreq	r1, [r3, #0]
 8005306:	685b      	ldreq	r3, [r3, #4]
 8005308:	1949      	addeq	r1, r1, r5
 800530a:	6021      	streq	r1, [r4, #0]
 800530c:	e7ed      	b.n	80052ea <_free_r+0x22>
 800530e:	461a      	mov	r2, r3
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	b10b      	cbz	r3, 8005318 <_free_r+0x50>
 8005314:	42a3      	cmp	r3, r4
 8005316:	d9fa      	bls.n	800530e <_free_r+0x46>
 8005318:	6811      	ldr	r1, [r2, #0]
 800531a:	1855      	adds	r5, r2, r1
 800531c:	42a5      	cmp	r5, r4
 800531e:	d10b      	bne.n	8005338 <_free_r+0x70>
 8005320:	6824      	ldr	r4, [r4, #0]
 8005322:	4421      	add	r1, r4
 8005324:	1854      	adds	r4, r2, r1
 8005326:	42a3      	cmp	r3, r4
 8005328:	6011      	str	r1, [r2, #0]
 800532a:	d1e0      	bne.n	80052ee <_free_r+0x26>
 800532c:	681c      	ldr	r4, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	6053      	str	r3, [r2, #4]
 8005332:	440c      	add	r4, r1
 8005334:	6014      	str	r4, [r2, #0]
 8005336:	e7da      	b.n	80052ee <_free_r+0x26>
 8005338:	d902      	bls.n	8005340 <_free_r+0x78>
 800533a:	230c      	movs	r3, #12
 800533c:	6003      	str	r3, [r0, #0]
 800533e:	e7d6      	b.n	80052ee <_free_r+0x26>
 8005340:	6825      	ldr	r5, [r4, #0]
 8005342:	1961      	adds	r1, r4, r5
 8005344:	428b      	cmp	r3, r1
 8005346:	bf04      	itt	eq
 8005348:	6819      	ldreq	r1, [r3, #0]
 800534a:	685b      	ldreq	r3, [r3, #4]
 800534c:	6063      	str	r3, [r4, #4]
 800534e:	bf04      	itt	eq
 8005350:	1949      	addeq	r1, r1, r5
 8005352:	6021      	streq	r1, [r4, #0]
 8005354:	6054      	str	r4, [r2, #4]
 8005356:	e7ca      	b.n	80052ee <_free_r+0x26>
 8005358:	b003      	add	sp, #12
 800535a:	bd30      	pop	{r4, r5, pc}
 800535c:	2000dc70 	.word	0x2000dc70

08005360 <__sfputc_r>:
 8005360:	6893      	ldr	r3, [r2, #8]
 8005362:	3b01      	subs	r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	b410      	push	{r4}
 8005368:	6093      	str	r3, [r2, #8]
 800536a:	da08      	bge.n	800537e <__sfputc_r+0x1e>
 800536c:	6994      	ldr	r4, [r2, #24]
 800536e:	42a3      	cmp	r3, r4
 8005370:	db01      	blt.n	8005376 <__sfputc_r+0x16>
 8005372:	290a      	cmp	r1, #10
 8005374:	d103      	bne.n	800537e <__sfputc_r+0x1e>
 8005376:	f85d 4b04 	ldr.w	r4, [sp], #4
 800537a:	f7ff be84 	b.w	8005086 <__swbuf_r>
 800537e:	6813      	ldr	r3, [r2, #0]
 8005380:	1c58      	adds	r0, r3, #1
 8005382:	6010      	str	r0, [r2, #0]
 8005384:	7019      	strb	r1, [r3, #0]
 8005386:	4608      	mov	r0, r1
 8005388:	f85d 4b04 	ldr.w	r4, [sp], #4
 800538c:	4770      	bx	lr

0800538e <__sfputs_r>:
 800538e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005390:	4606      	mov	r6, r0
 8005392:	460f      	mov	r7, r1
 8005394:	4614      	mov	r4, r2
 8005396:	18d5      	adds	r5, r2, r3
 8005398:	42ac      	cmp	r4, r5
 800539a:	d101      	bne.n	80053a0 <__sfputs_r+0x12>
 800539c:	2000      	movs	r0, #0
 800539e:	e007      	b.n	80053b0 <__sfputs_r+0x22>
 80053a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a4:	463a      	mov	r2, r7
 80053a6:	4630      	mov	r0, r6
 80053a8:	f7ff ffda 	bl	8005360 <__sfputc_r>
 80053ac:	1c43      	adds	r3, r0, #1
 80053ae:	d1f3      	bne.n	8005398 <__sfputs_r+0xa>
 80053b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053b4 <_vfiprintf_r>:
 80053b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b8:	460d      	mov	r5, r1
 80053ba:	b09d      	sub	sp, #116	; 0x74
 80053bc:	4614      	mov	r4, r2
 80053be:	4698      	mov	r8, r3
 80053c0:	4606      	mov	r6, r0
 80053c2:	b118      	cbz	r0, 80053cc <_vfiprintf_r+0x18>
 80053c4:	6a03      	ldr	r3, [r0, #32]
 80053c6:	b90b      	cbnz	r3, 80053cc <_vfiprintf_r+0x18>
 80053c8:	f7ff fd76 	bl	8004eb8 <__sinit>
 80053cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053ce:	07d9      	lsls	r1, r3, #31
 80053d0:	d405      	bmi.n	80053de <_vfiprintf_r+0x2a>
 80053d2:	89ab      	ldrh	r3, [r5, #12]
 80053d4:	059a      	lsls	r2, r3, #22
 80053d6:	d402      	bmi.n	80053de <_vfiprintf_r+0x2a>
 80053d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053da:	f7ff ff72 	bl	80052c2 <__retarget_lock_acquire_recursive>
 80053de:	89ab      	ldrh	r3, [r5, #12]
 80053e0:	071b      	lsls	r3, r3, #28
 80053e2:	d501      	bpl.n	80053e8 <_vfiprintf_r+0x34>
 80053e4:	692b      	ldr	r3, [r5, #16]
 80053e6:	b99b      	cbnz	r3, 8005410 <_vfiprintf_r+0x5c>
 80053e8:	4629      	mov	r1, r5
 80053ea:	4630      	mov	r0, r6
 80053ec:	f7ff fe88 	bl	8005100 <__swsetup_r>
 80053f0:	b170      	cbz	r0, 8005410 <_vfiprintf_r+0x5c>
 80053f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053f4:	07dc      	lsls	r4, r3, #31
 80053f6:	d504      	bpl.n	8005402 <_vfiprintf_r+0x4e>
 80053f8:	f04f 30ff 	mov.w	r0, #4294967295
 80053fc:	b01d      	add	sp, #116	; 0x74
 80053fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005402:	89ab      	ldrh	r3, [r5, #12]
 8005404:	0598      	lsls	r0, r3, #22
 8005406:	d4f7      	bmi.n	80053f8 <_vfiprintf_r+0x44>
 8005408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800540a:	f7ff ff5b 	bl	80052c4 <__retarget_lock_release_recursive>
 800540e:	e7f3      	b.n	80053f8 <_vfiprintf_r+0x44>
 8005410:	2300      	movs	r3, #0
 8005412:	9309      	str	r3, [sp, #36]	; 0x24
 8005414:	2320      	movs	r3, #32
 8005416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800541a:	f8cd 800c 	str.w	r8, [sp, #12]
 800541e:	2330      	movs	r3, #48	; 0x30
 8005420:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80055d4 <_vfiprintf_r+0x220>
 8005424:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005428:	f04f 0901 	mov.w	r9, #1
 800542c:	4623      	mov	r3, r4
 800542e:	469a      	mov	sl, r3
 8005430:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005434:	b10a      	cbz	r2, 800543a <_vfiprintf_r+0x86>
 8005436:	2a25      	cmp	r2, #37	; 0x25
 8005438:	d1f9      	bne.n	800542e <_vfiprintf_r+0x7a>
 800543a:	ebba 0b04 	subs.w	fp, sl, r4
 800543e:	d00b      	beq.n	8005458 <_vfiprintf_r+0xa4>
 8005440:	465b      	mov	r3, fp
 8005442:	4622      	mov	r2, r4
 8005444:	4629      	mov	r1, r5
 8005446:	4630      	mov	r0, r6
 8005448:	f7ff ffa1 	bl	800538e <__sfputs_r>
 800544c:	3001      	adds	r0, #1
 800544e:	f000 80a9 	beq.w	80055a4 <_vfiprintf_r+0x1f0>
 8005452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005454:	445a      	add	r2, fp
 8005456:	9209      	str	r2, [sp, #36]	; 0x24
 8005458:	f89a 3000 	ldrb.w	r3, [sl]
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 80a1 	beq.w	80055a4 <_vfiprintf_r+0x1f0>
 8005462:	2300      	movs	r3, #0
 8005464:	f04f 32ff 	mov.w	r2, #4294967295
 8005468:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800546c:	f10a 0a01 	add.w	sl, sl, #1
 8005470:	9304      	str	r3, [sp, #16]
 8005472:	9307      	str	r3, [sp, #28]
 8005474:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005478:	931a      	str	r3, [sp, #104]	; 0x68
 800547a:	4654      	mov	r4, sl
 800547c:	2205      	movs	r2, #5
 800547e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005482:	4854      	ldr	r0, [pc, #336]	; (80055d4 <_vfiprintf_r+0x220>)
 8005484:	f7fa feac 	bl	80001e0 <memchr>
 8005488:	9a04      	ldr	r2, [sp, #16]
 800548a:	b9d8      	cbnz	r0, 80054c4 <_vfiprintf_r+0x110>
 800548c:	06d1      	lsls	r1, r2, #27
 800548e:	bf44      	itt	mi
 8005490:	2320      	movmi	r3, #32
 8005492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005496:	0713      	lsls	r3, r2, #28
 8005498:	bf44      	itt	mi
 800549a:	232b      	movmi	r3, #43	; 0x2b
 800549c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054a0:	f89a 3000 	ldrb.w	r3, [sl]
 80054a4:	2b2a      	cmp	r3, #42	; 0x2a
 80054a6:	d015      	beq.n	80054d4 <_vfiprintf_r+0x120>
 80054a8:	9a07      	ldr	r2, [sp, #28]
 80054aa:	4654      	mov	r4, sl
 80054ac:	2000      	movs	r0, #0
 80054ae:	f04f 0c0a 	mov.w	ip, #10
 80054b2:	4621      	mov	r1, r4
 80054b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054b8:	3b30      	subs	r3, #48	; 0x30
 80054ba:	2b09      	cmp	r3, #9
 80054bc:	d94d      	bls.n	800555a <_vfiprintf_r+0x1a6>
 80054be:	b1b0      	cbz	r0, 80054ee <_vfiprintf_r+0x13a>
 80054c0:	9207      	str	r2, [sp, #28]
 80054c2:	e014      	b.n	80054ee <_vfiprintf_r+0x13a>
 80054c4:	eba0 0308 	sub.w	r3, r0, r8
 80054c8:	fa09 f303 	lsl.w	r3, r9, r3
 80054cc:	4313      	orrs	r3, r2
 80054ce:	9304      	str	r3, [sp, #16]
 80054d0:	46a2      	mov	sl, r4
 80054d2:	e7d2      	b.n	800547a <_vfiprintf_r+0xc6>
 80054d4:	9b03      	ldr	r3, [sp, #12]
 80054d6:	1d19      	adds	r1, r3, #4
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	9103      	str	r1, [sp, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	bfbb      	ittet	lt
 80054e0:	425b      	neglt	r3, r3
 80054e2:	f042 0202 	orrlt.w	r2, r2, #2
 80054e6:	9307      	strge	r3, [sp, #28]
 80054e8:	9307      	strlt	r3, [sp, #28]
 80054ea:	bfb8      	it	lt
 80054ec:	9204      	strlt	r2, [sp, #16]
 80054ee:	7823      	ldrb	r3, [r4, #0]
 80054f0:	2b2e      	cmp	r3, #46	; 0x2e
 80054f2:	d10c      	bne.n	800550e <_vfiprintf_r+0x15a>
 80054f4:	7863      	ldrb	r3, [r4, #1]
 80054f6:	2b2a      	cmp	r3, #42	; 0x2a
 80054f8:	d134      	bne.n	8005564 <_vfiprintf_r+0x1b0>
 80054fa:	9b03      	ldr	r3, [sp, #12]
 80054fc:	1d1a      	adds	r2, r3, #4
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	9203      	str	r2, [sp, #12]
 8005502:	2b00      	cmp	r3, #0
 8005504:	bfb8      	it	lt
 8005506:	f04f 33ff 	movlt.w	r3, #4294967295
 800550a:	3402      	adds	r4, #2
 800550c:	9305      	str	r3, [sp, #20]
 800550e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80055e4 <_vfiprintf_r+0x230>
 8005512:	7821      	ldrb	r1, [r4, #0]
 8005514:	2203      	movs	r2, #3
 8005516:	4650      	mov	r0, sl
 8005518:	f7fa fe62 	bl	80001e0 <memchr>
 800551c:	b138      	cbz	r0, 800552e <_vfiprintf_r+0x17a>
 800551e:	9b04      	ldr	r3, [sp, #16]
 8005520:	eba0 000a 	sub.w	r0, r0, sl
 8005524:	2240      	movs	r2, #64	; 0x40
 8005526:	4082      	lsls	r2, r0
 8005528:	4313      	orrs	r3, r2
 800552a:	3401      	adds	r4, #1
 800552c:	9304      	str	r3, [sp, #16]
 800552e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005532:	4829      	ldr	r0, [pc, #164]	; (80055d8 <_vfiprintf_r+0x224>)
 8005534:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005538:	2206      	movs	r2, #6
 800553a:	f7fa fe51 	bl	80001e0 <memchr>
 800553e:	2800      	cmp	r0, #0
 8005540:	d03f      	beq.n	80055c2 <_vfiprintf_r+0x20e>
 8005542:	4b26      	ldr	r3, [pc, #152]	; (80055dc <_vfiprintf_r+0x228>)
 8005544:	bb1b      	cbnz	r3, 800558e <_vfiprintf_r+0x1da>
 8005546:	9b03      	ldr	r3, [sp, #12]
 8005548:	3307      	adds	r3, #7
 800554a:	f023 0307 	bic.w	r3, r3, #7
 800554e:	3308      	adds	r3, #8
 8005550:	9303      	str	r3, [sp, #12]
 8005552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005554:	443b      	add	r3, r7
 8005556:	9309      	str	r3, [sp, #36]	; 0x24
 8005558:	e768      	b.n	800542c <_vfiprintf_r+0x78>
 800555a:	fb0c 3202 	mla	r2, ip, r2, r3
 800555e:	460c      	mov	r4, r1
 8005560:	2001      	movs	r0, #1
 8005562:	e7a6      	b.n	80054b2 <_vfiprintf_r+0xfe>
 8005564:	2300      	movs	r3, #0
 8005566:	3401      	adds	r4, #1
 8005568:	9305      	str	r3, [sp, #20]
 800556a:	4619      	mov	r1, r3
 800556c:	f04f 0c0a 	mov.w	ip, #10
 8005570:	4620      	mov	r0, r4
 8005572:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005576:	3a30      	subs	r2, #48	; 0x30
 8005578:	2a09      	cmp	r2, #9
 800557a:	d903      	bls.n	8005584 <_vfiprintf_r+0x1d0>
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0c6      	beq.n	800550e <_vfiprintf_r+0x15a>
 8005580:	9105      	str	r1, [sp, #20]
 8005582:	e7c4      	b.n	800550e <_vfiprintf_r+0x15a>
 8005584:	fb0c 2101 	mla	r1, ip, r1, r2
 8005588:	4604      	mov	r4, r0
 800558a:	2301      	movs	r3, #1
 800558c:	e7f0      	b.n	8005570 <_vfiprintf_r+0x1bc>
 800558e:	ab03      	add	r3, sp, #12
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	462a      	mov	r2, r5
 8005594:	4b12      	ldr	r3, [pc, #72]	; (80055e0 <_vfiprintf_r+0x22c>)
 8005596:	a904      	add	r1, sp, #16
 8005598:	4630      	mov	r0, r6
 800559a:	f3af 8000 	nop.w
 800559e:	4607      	mov	r7, r0
 80055a0:	1c78      	adds	r0, r7, #1
 80055a2:	d1d6      	bne.n	8005552 <_vfiprintf_r+0x19e>
 80055a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055a6:	07d9      	lsls	r1, r3, #31
 80055a8:	d405      	bmi.n	80055b6 <_vfiprintf_r+0x202>
 80055aa:	89ab      	ldrh	r3, [r5, #12]
 80055ac:	059a      	lsls	r2, r3, #22
 80055ae:	d402      	bmi.n	80055b6 <_vfiprintf_r+0x202>
 80055b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055b2:	f7ff fe87 	bl	80052c4 <__retarget_lock_release_recursive>
 80055b6:	89ab      	ldrh	r3, [r5, #12]
 80055b8:	065b      	lsls	r3, r3, #25
 80055ba:	f53f af1d 	bmi.w	80053f8 <_vfiprintf_r+0x44>
 80055be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055c0:	e71c      	b.n	80053fc <_vfiprintf_r+0x48>
 80055c2:	ab03      	add	r3, sp, #12
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	462a      	mov	r2, r5
 80055c8:	4b05      	ldr	r3, [pc, #20]	; (80055e0 <_vfiprintf_r+0x22c>)
 80055ca:	a904      	add	r1, sp, #16
 80055cc:	4630      	mov	r0, r6
 80055ce:	f000 f879 	bl	80056c4 <_printf_i>
 80055d2:	e7e4      	b.n	800559e <_vfiprintf_r+0x1ea>
 80055d4:	08006384 	.word	0x08006384
 80055d8:	0800638e 	.word	0x0800638e
 80055dc:	00000000 	.word	0x00000000
 80055e0:	0800538f 	.word	0x0800538f
 80055e4:	0800638a 	.word	0x0800638a

080055e8 <_printf_common>:
 80055e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ec:	4616      	mov	r6, r2
 80055ee:	4699      	mov	r9, r3
 80055f0:	688a      	ldr	r2, [r1, #8]
 80055f2:	690b      	ldr	r3, [r1, #16]
 80055f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055f8:	4293      	cmp	r3, r2
 80055fa:	bfb8      	it	lt
 80055fc:	4613      	movlt	r3, r2
 80055fe:	6033      	str	r3, [r6, #0]
 8005600:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005604:	4607      	mov	r7, r0
 8005606:	460c      	mov	r4, r1
 8005608:	b10a      	cbz	r2, 800560e <_printf_common+0x26>
 800560a:	3301      	adds	r3, #1
 800560c:	6033      	str	r3, [r6, #0]
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	0699      	lsls	r1, r3, #26
 8005612:	bf42      	ittt	mi
 8005614:	6833      	ldrmi	r3, [r6, #0]
 8005616:	3302      	addmi	r3, #2
 8005618:	6033      	strmi	r3, [r6, #0]
 800561a:	6825      	ldr	r5, [r4, #0]
 800561c:	f015 0506 	ands.w	r5, r5, #6
 8005620:	d106      	bne.n	8005630 <_printf_common+0x48>
 8005622:	f104 0a19 	add.w	sl, r4, #25
 8005626:	68e3      	ldr	r3, [r4, #12]
 8005628:	6832      	ldr	r2, [r6, #0]
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	42ab      	cmp	r3, r5
 800562e:	dc26      	bgt.n	800567e <_printf_common+0x96>
 8005630:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005634:	1e13      	subs	r3, r2, #0
 8005636:	6822      	ldr	r2, [r4, #0]
 8005638:	bf18      	it	ne
 800563a:	2301      	movne	r3, #1
 800563c:	0692      	lsls	r2, r2, #26
 800563e:	d42b      	bmi.n	8005698 <_printf_common+0xb0>
 8005640:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005644:	4649      	mov	r1, r9
 8005646:	4638      	mov	r0, r7
 8005648:	47c0      	blx	r8
 800564a:	3001      	adds	r0, #1
 800564c:	d01e      	beq.n	800568c <_printf_common+0xa4>
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	6922      	ldr	r2, [r4, #16]
 8005652:	f003 0306 	and.w	r3, r3, #6
 8005656:	2b04      	cmp	r3, #4
 8005658:	bf02      	ittt	eq
 800565a:	68e5      	ldreq	r5, [r4, #12]
 800565c:	6833      	ldreq	r3, [r6, #0]
 800565e:	1aed      	subeq	r5, r5, r3
 8005660:	68a3      	ldr	r3, [r4, #8]
 8005662:	bf0c      	ite	eq
 8005664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005668:	2500      	movne	r5, #0
 800566a:	4293      	cmp	r3, r2
 800566c:	bfc4      	itt	gt
 800566e:	1a9b      	subgt	r3, r3, r2
 8005670:	18ed      	addgt	r5, r5, r3
 8005672:	2600      	movs	r6, #0
 8005674:	341a      	adds	r4, #26
 8005676:	42b5      	cmp	r5, r6
 8005678:	d11a      	bne.n	80056b0 <_printf_common+0xc8>
 800567a:	2000      	movs	r0, #0
 800567c:	e008      	b.n	8005690 <_printf_common+0xa8>
 800567e:	2301      	movs	r3, #1
 8005680:	4652      	mov	r2, sl
 8005682:	4649      	mov	r1, r9
 8005684:	4638      	mov	r0, r7
 8005686:	47c0      	blx	r8
 8005688:	3001      	adds	r0, #1
 800568a:	d103      	bne.n	8005694 <_printf_common+0xac>
 800568c:	f04f 30ff 	mov.w	r0, #4294967295
 8005690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005694:	3501      	adds	r5, #1
 8005696:	e7c6      	b.n	8005626 <_printf_common+0x3e>
 8005698:	18e1      	adds	r1, r4, r3
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	2030      	movs	r0, #48	; 0x30
 800569e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056a2:	4422      	add	r2, r4
 80056a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056ac:	3302      	adds	r3, #2
 80056ae:	e7c7      	b.n	8005640 <_printf_common+0x58>
 80056b0:	2301      	movs	r3, #1
 80056b2:	4622      	mov	r2, r4
 80056b4:	4649      	mov	r1, r9
 80056b6:	4638      	mov	r0, r7
 80056b8:	47c0      	blx	r8
 80056ba:	3001      	adds	r0, #1
 80056bc:	d0e6      	beq.n	800568c <_printf_common+0xa4>
 80056be:	3601      	adds	r6, #1
 80056c0:	e7d9      	b.n	8005676 <_printf_common+0x8e>
	...

080056c4 <_printf_i>:
 80056c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056c8:	7e0f      	ldrb	r7, [r1, #24]
 80056ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056cc:	2f78      	cmp	r7, #120	; 0x78
 80056ce:	4691      	mov	r9, r2
 80056d0:	4680      	mov	r8, r0
 80056d2:	460c      	mov	r4, r1
 80056d4:	469a      	mov	sl, r3
 80056d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056da:	d807      	bhi.n	80056ec <_printf_i+0x28>
 80056dc:	2f62      	cmp	r7, #98	; 0x62
 80056de:	d80a      	bhi.n	80056f6 <_printf_i+0x32>
 80056e0:	2f00      	cmp	r7, #0
 80056e2:	f000 80d4 	beq.w	800588e <_printf_i+0x1ca>
 80056e6:	2f58      	cmp	r7, #88	; 0x58
 80056e8:	f000 80c0 	beq.w	800586c <_printf_i+0x1a8>
 80056ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056f4:	e03a      	b.n	800576c <_printf_i+0xa8>
 80056f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056fa:	2b15      	cmp	r3, #21
 80056fc:	d8f6      	bhi.n	80056ec <_printf_i+0x28>
 80056fe:	a101      	add	r1, pc, #4	; (adr r1, 8005704 <_printf_i+0x40>)
 8005700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005704:	0800575d 	.word	0x0800575d
 8005708:	08005771 	.word	0x08005771
 800570c:	080056ed 	.word	0x080056ed
 8005710:	080056ed 	.word	0x080056ed
 8005714:	080056ed 	.word	0x080056ed
 8005718:	080056ed 	.word	0x080056ed
 800571c:	08005771 	.word	0x08005771
 8005720:	080056ed 	.word	0x080056ed
 8005724:	080056ed 	.word	0x080056ed
 8005728:	080056ed 	.word	0x080056ed
 800572c:	080056ed 	.word	0x080056ed
 8005730:	08005875 	.word	0x08005875
 8005734:	0800579d 	.word	0x0800579d
 8005738:	0800582f 	.word	0x0800582f
 800573c:	080056ed 	.word	0x080056ed
 8005740:	080056ed 	.word	0x080056ed
 8005744:	08005897 	.word	0x08005897
 8005748:	080056ed 	.word	0x080056ed
 800574c:	0800579d 	.word	0x0800579d
 8005750:	080056ed 	.word	0x080056ed
 8005754:	080056ed 	.word	0x080056ed
 8005758:	08005837 	.word	0x08005837
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	1d1a      	adds	r2, r3, #4
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	602a      	str	r2, [r5, #0]
 8005764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800576c:	2301      	movs	r3, #1
 800576e:	e09f      	b.n	80058b0 <_printf_i+0x1ec>
 8005770:	6820      	ldr	r0, [r4, #0]
 8005772:	682b      	ldr	r3, [r5, #0]
 8005774:	0607      	lsls	r7, r0, #24
 8005776:	f103 0104 	add.w	r1, r3, #4
 800577a:	6029      	str	r1, [r5, #0]
 800577c:	d501      	bpl.n	8005782 <_printf_i+0xbe>
 800577e:	681e      	ldr	r6, [r3, #0]
 8005780:	e003      	b.n	800578a <_printf_i+0xc6>
 8005782:	0646      	lsls	r6, r0, #25
 8005784:	d5fb      	bpl.n	800577e <_printf_i+0xba>
 8005786:	f9b3 6000 	ldrsh.w	r6, [r3]
 800578a:	2e00      	cmp	r6, #0
 800578c:	da03      	bge.n	8005796 <_printf_i+0xd2>
 800578e:	232d      	movs	r3, #45	; 0x2d
 8005790:	4276      	negs	r6, r6
 8005792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005796:	485a      	ldr	r0, [pc, #360]	; (8005900 <_printf_i+0x23c>)
 8005798:	230a      	movs	r3, #10
 800579a:	e012      	b.n	80057c2 <_printf_i+0xfe>
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	6820      	ldr	r0, [r4, #0]
 80057a0:	1d19      	adds	r1, r3, #4
 80057a2:	6029      	str	r1, [r5, #0]
 80057a4:	0605      	lsls	r5, r0, #24
 80057a6:	d501      	bpl.n	80057ac <_printf_i+0xe8>
 80057a8:	681e      	ldr	r6, [r3, #0]
 80057aa:	e002      	b.n	80057b2 <_printf_i+0xee>
 80057ac:	0641      	lsls	r1, r0, #25
 80057ae:	d5fb      	bpl.n	80057a8 <_printf_i+0xe4>
 80057b0:	881e      	ldrh	r6, [r3, #0]
 80057b2:	4853      	ldr	r0, [pc, #332]	; (8005900 <_printf_i+0x23c>)
 80057b4:	2f6f      	cmp	r7, #111	; 0x6f
 80057b6:	bf0c      	ite	eq
 80057b8:	2308      	moveq	r3, #8
 80057ba:	230a      	movne	r3, #10
 80057bc:	2100      	movs	r1, #0
 80057be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057c2:	6865      	ldr	r5, [r4, #4]
 80057c4:	60a5      	str	r5, [r4, #8]
 80057c6:	2d00      	cmp	r5, #0
 80057c8:	bfa2      	ittt	ge
 80057ca:	6821      	ldrge	r1, [r4, #0]
 80057cc:	f021 0104 	bicge.w	r1, r1, #4
 80057d0:	6021      	strge	r1, [r4, #0]
 80057d2:	b90e      	cbnz	r6, 80057d8 <_printf_i+0x114>
 80057d4:	2d00      	cmp	r5, #0
 80057d6:	d04b      	beq.n	8005870 <_printf_i+0x1ac>
 80057d8:	4615      	mov	r5, r2
 80057da:	fbb6 f1f3 	udiv	r1, r6, r3
 80057de:	fb03 6711 	mls	r7, r3, r1, r6
 80057e2:	5dc7      	ldrb	r7, [r0, r7]
 80057e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057e8:	4637      	mov	r7, r6
 80057ea:	42bb      	cmp	r3, r7
 80057ec:	460e      	mov	r6, r1
 80057ee:	d9f4      	bls.n	80057da <_printf_i+0x116>
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d10b      	bne.n	800580c <_printf_i+0x148>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	07de      	lsls	r6, r3, #31
 80057f8:	d508      	bpl.n	800580c <_printf_i+0x148>
 80057fa:	6923      	ldr	r3, [r4, #16]
 80057fc:	6861      	ldr	r1, [r4, #4]
 80057fe:	4299      	cmp	r1, r3
 8005800:	bfde      	ittt	le
 8005802:	2330      	movle	r3, #48	; 0x30
 8005804:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005808:	f105 35ff 	addle.w	r5, r5, #4294967295
 800580c:	1b52      	subs	r2, r2, r5
 800580e:	6122      	str	r2, [r4, #16]
 8005810:	f8cd a000 	str.w	sl, [sp]
 8005814:	464b      	mov	r3, r9
 8005816:	aa03      	add	r2, sp, #12
 8005818:	4621      	mov	r1, r4
 800581a:	4640      	mov	r0, r8
 800581c:	f7ff fee4 	bl	80055e8 <_printf_common>
 8005820:	3001      	adds	r0, #1
 8005822:	d14a      	bne.n	80058ba <_printf_i+0x1f6>
 8005824:	f04f 30ff 	mov.w	r0, #4294967295
 8005828:	b004      	add	sp, #16
 800582a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	f043 0320 	orr.w	r3, r3, #32
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	4833      	ldr	r0, [pc, #204]	; (8005904 <_printf_i+0x240>)
 8005838:	2778      	movs	r7, #120	; 0x78
 800583a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	6829      	ldr	r1, [r5, #0]
 8005842:	061f      	lsls	r7, r3, #24
 8005844:	f851 6b04 	ldr.w	r6, [r1], #4
 8005848:	d402      	bmi.n	8005850 <_printf_i+0x18c>
 800584a:	065f      	lsls	r7, r3, #25
 800584c:	bf48      	it	mi
 800584e:	b2b6      	uxthmi	r6, r6
 8005850:	07df      	lsls	r7, r3, #31
 8005852:	bf48      	it	mi
 8005854:	f043 0320 	orrmi.w	r3, r3, #32
 8005858:	6029      	str	r1, [r5, #0]
 800585a:	bf48      	it	mi
 800585c:	6023      	strmi	r3, [r4, #0]
 800585e:	b91e      	cbnz	r6, 8005868 <_printf_i+0x1a4>
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	f023 0320 	bic.w	r3, r3, #32
 8005866:	6023      	str	r3, [r4, #0]
 8005868:	2310      	movs	r3, #16
 800586a:	e7a7      	b.n	80057bc <_printf_i+0xf8>
 800586c:	4824      	ldr	r0, [pc, #144]	; (8005900 <_printf_i+0x23c>)
 800586e:	e7e4      	b.n	800583a <_printf_i+0x176>
 8005870:	4615      	mov	r5, r2
 8005872:	e7bd      	b.n	80057f0 <_printf_i+0x12c>
 8005874:	682b      	ldr	r3, [r5, #0]
 8005876:	6826      	ldr	r6, [r4, #0]
 8005878:	6961      	ldr	r1, [r4, #20]
 800587a:	1d18      	adds	r0, r3, #4
 800587c:	6028      	str	r0, [r5, #0]
 800587e:	0635      	lsls	r5, r6, #24
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	d501      	bpl.n	8005888 <_printf_i+0x1c4>
 8005884:	6019      	str	r1, [r3, #0]
 8005886:	e002      	b.n	800588e <_printf_i+0x1ca>
 8005888:	0670      	lsls	r0, r6, #25
 800588a:	d5fb      	bpl.n	8005884 <_printf_i+0x1c0>
 800588c:	8019      	strh	r1, [r3, #0]
 800588e:	2300      	movs	r3, #0
 8005890:	6123      	str	r3, [r4, #16]
 8005892:	4615      	mov	r5, r2
 8005894:	e7bc      	b.n	8005810 <_printf_i+0x14c>
 8005896:	682b      	ldr	r3, [r5, #0]
 8005898:	1d1a      	adds	r2, r3, #4
 800589a:	602a      	str	r2, [r5, #0]
 800589c:	681d      	ldr	r5, [r3, #0]
 800589e:	6862      	ldr	r2, [r4, #4]
 80058a0:	2100      	movs	r1, #0
 80058a2:	4628      	mov	r0, r5
 80058a4:	f7fa fc9c 	bl	80001e0 <memchr>
 80058a8:	b108      	cbz	r0, 80058ae <_printf_i+0x1ea>
 80058aa:	1b40      	subs	r0, r0, r5
 80058ac:	6060      	str	r0, [r4, #4]
 80058ae:	6863      	ldr	r3, [r4, #4]
 80058b0:	6123      	str	r3, [r4, #16]
 80058b2:	2300      	movs	r3, #0
 80058b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058b8:	e7aa      	b.n	8005810 <_printf_i+0x14c>
 80058ba:	6923      	ldr	r3, [r4, #16]
 80058bc:	462a      	mov	r2, r5
 80058be:	4649      	mov	r1, r9
 80058c0:	4640      	mov	r0, r8
 80058c2:	47d0      	blx	sl
 80058c4:	3001      	adds	r0, #1
 80058c6:	d0ad      	beq.n	8005824 <_printf_i+0x160>
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	079b      	lsls	r3, r3, #30
 80058cc:	d413      	bmi.n	80058f6 <_printf_i+0x232>
 80058ce:	68e0      	ldr	r0, [r4, #12]
 80058d0:	9b03      	ldr	r3, [sp, #12]
 80058d2:	4298      	cmp	r0, r3
 80058d4:	bfb8      	it	lt
 80058d6:	4618      	movlt	r0, r3
 80058d8:	e7a6      	b.n	8005828 <_printf_i+0x164>
 80058da:	2301      	movs	r3, #1
 80058dc:	4632      	mov	r2, r6
 80058de:	4649      	mov	r1, r9
 80058e0:	4640      	mov	r0, r8
 80058e2:	47d0      	blx	sl
 80058e4:	3001      	adds	r0, #1
 80058e6:	d09d      	beq.n	8005824 <_printf_i+0x160>
 80058e8:	3501      	adds	r5, #1
 80058ea:	68e3      	ldr	r3, [r4, #12]
 80058ec:	9903      	ldr	r1, [sp, #12]
 80058ee:	1a5b      	subs	r3, r3, r1
 80058f0:	42ab      	cmp	r3, r5
 80058f2:	dcf2      	bgt.n	80058da <_printf_i+0x216>
 80058f4:	e7eb      	b.n	80058ce <_printf_i+0x20a>
 80058f6:	2500      	movs	r5, #0
 80058f8:	f104 0619 	add.w	r6, r4, #25
 80058fc:	e7f5      	b.n	80058ea <_printf_i+0x226>
 80058fe:	bf00      	nop
 8005900:	08006395 	.word	0x08006395
 8005904:	080063a6 	.word	0x080063a6

08005908 <__sflush_r>:
 8005908:	898a      	ldrh	r2, [r1, #12]
 800590a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800590e:	4605      	mov	r5, r0
 8005910:	0710      	lsls	r0, r2, #28
 8005912:	460c      	mov	r4, r1
 8005914:	d458      	bmi.n	80059c8 <__sflush_r+0xc0>
 8005916:	684b      	ldr	r3, [r1, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	dc05      	bgt.n	8005928 <__sflush_r+0x20>
 800591c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800591e:	2b00      	cmp	r3, #0
 8005920:	dc02      	bgt.n	8005928 <__sflush_r+0x20>
 8005922:	2000      	movs	r0, #0
 8005924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800592a:	2e00      	cmp	r6, #0
 800592c:	d0f9      	beq.n	8005922 <__sflush_r+0x1a>
 800592e:	2300      	movs	r3, #0
 8005930:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005934:	682f      	ldr	r7, [r5, #0]
 8005936:	6a21      	ldr	r1, [r4, #32]
 8005938:	602b      	str	r3, [r5, #0]
 800593a:	d032      	beq.n	80059a2 <__sflush_r+0x9a>
 800593c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	075a      	lsls	r2, r3, #29
 8005942:	d505      	bpl.n	8005950 <__sflush_r+0x48>
 8005944:	6863      	ldr	r3, [r4, #4]
 8005946:	1ac0      	subs	r0, r0, r3
 8005948:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800594a:	b10b      	cbz	r3, 8005950 <__sflush_r+0x48>
 800594c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800594e:	1ac0      	subs	r0, r0, r3
 8005950:	2300      	movs	r3, #0
 8005952:	4602      	mov	r2, r0
 8005954:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005956:	6a21      	ldr	r1, [r4, #32]
 8005958:	4628      	mov	r0, r5
 800595a:	47b0      	blx	r6
 800595c:	1c43      	adds	r3, r0, #1
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	d106      	bne.n	8005970 <__sflush_r+0x68>
 8005962:	6829      	ldr	r1, [r5, #0]
 8005964:	291d      	cmp	r1, #29
 8005966:	d82b      	bhi.n	80059c0 <__sflush_r+0xb8>
 8005968:	4a29      	ldr	r2, [pc, #164]	; (8005a10 <__sflush_r+0x108>)
 800596a:	410a      	asrs	r2, r1
 800596c:	07d6      	lsls	r6, r2, #31
 800596e:	d427      	bmi.n	80059c0 <__sflush_r+0xb8>
 8005970:	2200      	movs	r2, #0
 8005972:	6062      	str	r2, [r4, #4]
 8005974:	04d9      	lsls	r1, r3, #19
 8005976:	6922      	ldr	r2, [r4, #16]
 8005978:	6022      	str	r2, [r4, #0]
 800597a:	d504      	bpl.n	8005986 <__sflush_r+0x7e>
 800597c:	1c42      	adds	r2, r0, #1
 800597e:	d101      	bne.n	8005984 <__sflush_r+0x7c>
 8005980:	682b      	ldr	r3, [r5, #0]
 8005982:	b903      	cbnz	r3, 8005986 <__sflush_r+0x7e>
 8005984:	6560      	str	r0, [r4, #84]	; 0x54
 8005986:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005988:	602f      	str	r7, [r5, #0]
 800598a:	2900      	cmp	r1, #0
 800598c:	d0c9      	beq.n	8005922 <__sflush_r+0x1a>
 800598e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005992:	4299      	cmp	r1, r3
 8005994:	d002      	beq.n	800599c <__sflush_r+0x94>
 8005996:	4628      	mov	r0, r5
 8005998:	f7ff fc96 	bl	80052c8 <_free_r>
 800599c:	2000      	movs	r0, #0
 800599e:	6360      	str	r0, [r4, #52]	; 0x34
 80059a0:	e7c0      	b.n	8005924 <__sflush_r+0x1c>
 80059a2:	2301      	movs	r3, #1
 80059a4:	4628      	mov	r0, r5
 80059a6:	47b0      	blx	r6
 80059a8:	1c41      	adds	r1, r0, #1
 80059aa:	d1c8      	bne.n	800593e <__sflush_r+0x36>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0c5      	beq.n	800593e <__sflush_r+0x36>
 80059b2:	2b1d      	cmp	r3, #29
 80059b4:	d001      	beq.n	80059ba <__sflush_r+0xb2>
 80059b6:	2b16      	cmp	r3, #22
 80059b8:	d101      	bne.n	80059be <__sflush_r+0xb6>
 80059ba:	602f      	str	r7, [r5, #0]
 80059bc:	e7b1      	b.n	8005922 <__sflush_r+0x1a>
 80059be:	89a3      	ldrh	r3, [r4, #12]
 80059c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059c4:	81a3      	strh	r3, [r4, #12]
 80059c6:	e7ad      	b.n	8005924 <__sflush_r+0x1c>
 80059c8:	690f      	ldr	r7, [r1, #16]
 80059ca:	2f00      	cmp	r7, #0
 80059cc:	d0a9      	beq.n	8005922 <__sflush_r+0x1a>
 80059ce:	0793      	lsls	r3, r2, #30
 80059d0:	680e      	ldr	r6, [r1, #0]
 80059d2:	bf08      	it	eq
 80059d4:	694b      	ldreq	r3, [r1, #20]
 80059d6:	600f      	str	r7, [r1, #0]
 80059d8:	bf18      	it	ne
 80059da:	2300      	movne	r3, #0
 80059dc:	eba6 0807 	sub.w	r8, r6, r7
 80059e0:	608b      	str	r3, [r1, #8]
 80059e2:	f1b8 0f00 	cmp.w	r8, #0
 80059e6:	dd9c      	ble.n	8005922 <__sflush_r+0x1a>
 80059e8:	6a21      	ldr	r1, [r4, #32]
 80059ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059ec:	4643      	mov	r3, r8
 80059ee:	463a      	mov	r2, r7
 80059f0:	4628      	mov	r0, r5
 80059f2:	47b0      	blx	r6
 80059f4:	2800      	cmp	r0, #0
 80059f6:	dc06      	bgt.n	8005a06 <__sflush_r+0xfe>
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059fe:	81a3      	strh	r3, [r4, #12]
 8005a00:	f04f 30ff 	mov.w	r0, #4294967295
 8005a04:	e78e      	b.n	8005924 <__sflush_r+0x1c>
 8005a06:	4407      	add	r7, r0
 8005a08:	eba8 0800 	sub.w	r8, r8, r0
 8005a0c:	e7e9      	b.n	80059e2 <__sflush_r+0xda>
 8005a0e:	bf00      	nop
 8005a10:	dfbffffe 	.word	0xdfbffffe

08005a14 <_fflush_r>:
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	690b      	ldr	r3, [r1, #16]
 8005a18:	4605      	mov	r5, r0
 8005a1a:	460c      	mov	r4, r1
 8005a1c:	b913      	cbnz	r3, 8005a24 <_fflush_r+0x10>
 8005a1e:	2500      	movs	r5, #0
 8005a20:	4628      	mov	r0, r5
 8005a22:	bd38      	pop	{r3, r4, r5, pc}
 8005a24:	b118      	cbz	r0, 8005a2e <_fflush_r+0x1a>
 8005a26:	6a03      	ldr	r3, [r0, #32]
 8005a28:	b90b      	cbnz	r3, 8005a2e <_fflush_r+0x1a>
 8005a2a:	f7ff fa45 	bl	8004eb8 <__sinit>
 8005a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0f3      	beq.n	8005a1e <_fflush_r+0xa>
 8005a36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a38:	07d0      	lsls	r0, r2, #31
 8005a3a:	d404      	bmi.n	8005a46 <_fflush_r+0x32>
 8005a3c:	0599      	lsls	r1, r3, #22
 8005a3e:	d402      	bmi.n	8005a46 <_fflush_r+0x32>
 8005a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a42:	f7ff fc3e 	bl	80052c2 <__retarget_lock_acquire_recursive>
 8005a46:	4628      	mov	r0, r5
 8005a48:	4621      	mov	r1, r4
 8005a4a:	f7ff ff5d 	bl	8005908 <__sflush_r>
 8005a4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a50:	07da      	lsls	r2, r3, #31
 8005a52:	4605      	mov	r5, r0
 8005a54:	d4e4      	bmi.n	8005a20 <_fflush_r+0xc>
 8005a56:	89a3      	ldrh	r3, [r4, #12]
 8005a58:	059b      	lsls	r3, r3, #22
 8005a5a:	d4e1      	bmi.n	8005a20 <_fflush_r+0xc>
 8005a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a5e:	f7ff fc31 	bl	80052c4 <__retarget_lock_release_recursive>
 8005a62:	e7dd      	b.n	8005a20 <_fflush_r+0xc>

08005a64 <__swhatbuf_r>:
 8005a64:	b570      	push	{r4, r5, r6, lr}
 8005a66:	460c      	mov	r4, r1
 8005a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a6c:	2900      	cmp	r1, #0
 8005a6e:	b096      	sub	sp, #88	; 0x58
 8005a70:	4615      	mov	r5, r2
 8005a72:	461e      	mov	r6, r3
 8005a74:	da0d      	bge.n	8005a92 <__swhatbuf_r+0x2e>
 8005a76:	89a3      	ldrh	r3, [r4, #12]
 8005a78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a7c:	f04f 0100 	mov.w	r1, #0
 8005a80:	bf0c      	ite	eq
 8005a82:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005a86:	2340      	movne	r3, #64	; 0x40
 8005a88:	2000      	movs	r0, #0
 8005a8a:	6031      	str	r1, [r6, #0]
 8005a8c:	602b      	str	r3, [r5, #0]
 8005a8e:	b016      	add	sp, #88	; 0x58
 8005a90:	bd70      	pop	{r4, r5, r6, pc}
 8005a92:	466a      	mov	r2, sp
 8005a94:	f000 f848 	bl	8005b28 <_fstat_r>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	dbec      	blt.n	8005a76 <__swhatbuf_r+0x12>
 8005a9c:	9901      	ldr	r1, [sp, #4]
 8005a9e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005aa2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005aa6:	4259      	negs	r1, r3
 8005aa8:	4159      	adcs	r1, r3
 8005aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aae:	e7eb      	b.n	8005a88 <__swhatbuf_r+0x24>

08005ab0 <__smakebuf_r>:
 8005ab0:	898b      	ldrh	r3, [r1, #12]
 8005ab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ab4:	079d      	lsls	r5, r3, #30
 8005ab6:	4606      	mov	r6, r0
 8005ab8:	460c      	mov	r4, r1
 8005aba:	d507      	bpl.n	8005acc <__smakebuf_r+0x1c>
 8005abc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	6123      	str	r3, [r4, #16]
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	6163      	str	r3, [r4, #20]
 8005ac8:	b002      	add	sp, #8
 8005aca:	bd70      	pop	{r4, r5, r6, pc}
 8005acc:	ab01      	add	r3, sp, #4
 8005ace:	466a      	mov	r2, sp
 8005ad0:	f7ff ffc8 	bl	8005a64 <__swhatbuf_r>
 8005ad4:	9900      	ldr	r1, [sp, #0]
 8005ad6:	4605      	mov	r5, r0
 8005ad8:	4630      	mov	r0, r6
 8005ada:	f7ff f8d5 	bl	8004c88 <_malloc_r>
 8005ade:	b948      	cbnz	r0, 8005af4 <__smakebuf_r+0x44>
 8005ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ae4:	059a      	lsls	r2, r3, #22
 8005ae6:	d4ef      	bmi.n	8005ac8 <__smakebuf_r+0x18>
 8005ae8:	f023 0303 	bic.w	r3, r3, #3
 8005aec:	f043 0302 	orr.w	r3, r3, #2
 8005af0:	81a3      	strh	r3, [r4, #12]
 8005af2:	e7e3      	b.n	8005abc <__smakebuf_r+0xc>
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	6020      	str	r0, [r4, #0]
 8005af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005afc:	81a3      	strh	r3, [r4, #12]
 8005afe:	9b00      	ldr	r3, [sp, #0]
 8005b00:	6163      	str	r3, [r4, #20]
 8005b02:	9b01      	ldr	r3, [sp, #4]
 8005b04:	6120      	str	r0, [r4, #16]
 8005b06:	b15b      	cbz	r3, 8005b20 <__smakebuf_r+0x70>
 8005b08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b0c:	4630      	mov	r0, r6
 8005b0e:	f000 f81d 	bl	8005b4c <_isatty_r>
 8005b12:	b128      	cbz	r0, 8005b20 <__smakebuf_r+0x70>
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	f023 0303 	bic.w	r3, r3, #3
 8005b1a:	f043 0301 	orr.w	r3, r3, #1
 8005b1e:	81a3      	strh	r3, [r4, #12]
 8005b20:	89a3      	ldrh	r3, [r4, #12]
 8005b22:	431d      	orrs	r5, r3
 8005b24:	81a5      	strh	r5, [r4, #12]
 8005b26:	e7cf      	b.n	8005ac8 <__smakebuf_r+0x18>

08005b28 <_fstat_r>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	4d07      	ldr	r5, [pc, #28]	; (8005b48 <_fstat_r+0x20>)
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	4604      	mov	r4, r0
 8005b30:	4608      	mov	r0, r1
 8005b32:	4611      	mov	r1, r2
 8005b34:	602b      	str	r3, [r5, #0]
 8005b36:	f7fb ff88 	bl	8001a4a <_fstat>
 8005b3a:	1c43      	adds	r3, r0, #1
 8005b3c:	d102      	bne.n	8005b44 <_fstat_r+0x1c>
 8005b3e:	682b      	ldr	r3, [r5, #0]
 8005b40:	b103      	cbz	r3, 8005b44 <_fstat_r+0x1c>
 8005b42:	6023      	str	r3, [r4, #0]
 8005b44:	bd38      	pop	{r3, r4, r5, pc}
 8005b46:	bf00      	nop
 8005b48:	2000ddb4 	.word	0x2000ddb4

08005b4c <_isatty_r>:
 8005b4c:	b538      	push	{r3, r4, r5, lr}
 8005b4e:	4d06      	ldr	r5, [pc, #24]	; (8005b68 <_isatty_r+0x1c>)
 8005b50:	2300      	movs	r3, #0
 8005b52:	4604      	mov	r4, r0
 8005b54:	4608      	mov	r0, r1
 8005b56:	602b      	str	r3, [r5, #0]
 8005b58:	f7fb ff87 	bl	8001a6a <_isatty>
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	d102      	bne.n	8005b66 <_isatty_r+0x1a>
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	b103      	cbz	r3, 8005b66 <_isatty_r+0x1a>
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	bd38      	pop	{r3, r4, r5, pc}
 8005b68:	2000ddb4 	.word	0x2000ddb4

08005b6c <_init>:
 8005b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6e:	bf00      	nop
 8005b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b72:	bc08      	pop	{r3}
 8005b74:	469e      	mov	lr, r3
 8005b76:	4770      	bx	lr

08005b78 <_fini>:
 8005b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7a:	bf00      	nop
 8005b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7e:	bc08      	pop	{r3}
 8005b80:	469e      	mov	lr, r3
 8005b82:	4770      	bx	lr
