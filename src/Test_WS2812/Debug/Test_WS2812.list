
Test_WS2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ccc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  08004e60  08004e60  00014e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005638  08005638  00020ff8  2**0
                  CONTENTS
  4 .ARM          00000008  08005638  08005638  00015638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005640  08005640  00020ff8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005640  08005640  00015640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005644  08005644  00015644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ff8  20000000  08005648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ddc  20000ff8  08006640  00020ff8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006dd4  08006640  00026dd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020ff8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00021028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001057b  00000000  00000000  0002106b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000280d  00000000  00000000  000315e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd0  00000000  00000000  00033df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c3b  00000000  00000000  00034dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018023  00000000  00000000  00035a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001272b  00000000  00000000  0004da26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000911b6  00000000  00000000  00060151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000454c  00000000  00000000  000f1308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f5854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000ff8 	.word	0x20000ff8
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004e48 	.word	0x08004e48

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000ffc 	.word	0x20000ffc
 80001d0:	08004e48 	.word	0x08004e48

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <initLookupTable>:
#include "lookup_table.h"

LookupTable lookupTable;

void initLookupTable(LookupTable* lookupTable, uint16_t rows, uint16_t cols) {
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	460b      	mov	r3, r1
 80004da:	807b      	strh	r3, [r7, #2]
 80004dc:	4613      	mov	r3, r2
 80004de:	803b      	strh	r3, [r7, #0]
    uint16_t r, c; /* index variables */

    /* check input */
    if (rows <= 0) exit(1); /* number of rows must be greater than 0 */
 80004e0:	887b      	ldrh	r3, [r7, #2]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d102      	bne.n	80004ec <initLookupTable+0x1c>
 80004e6:	2001      	movs	r0, #1
 80004e8:	f004 fb50 	bl	8004b8c <exit>
    if (cols <= 0) exit(1); /* number of cols must be greater than 0 */
 80004ec:	883b      	ldrh	r3, [r7, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d102      	bne.n	80004f8 <initLookupTable+0x28>
 80004f2:	2001      	movs	r0, #1
 80004f4:	f004 fb4a 	bl	8004b8c <exit>

    /* allocate memory */
    lookupTable->index = (uint16_t**) malloc(rows * sizeof(uint16_t*));
 80004f8:	887b      	ldrh	r3, [r7, #2]
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	4618      	mov	r0, r3
 80004fe:	f004 fb57 	bl	8004bb0 <malloc>
 8000502:	4603      	mov	r3, r0
 8000504:	461a      	mov	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	605a      	str	r2, [r3, #4]
    for (r = 0; r < rows; r++) {
 800050a:	2300      	movs	r3, #0
 800050c:	81fb      	strh	r3, [r7, #14]
 800050e:	e00e      	b.n	800052e <initLookupTable+0x5e>
        lookupTable->index[r] = (uint16_t*) malloc(cols * sizeof(uint16_t));
 8000510:	883b      	ldrh	r3, [r7, #0]
 8000512:	0059      	lsls	r1, r3, #1
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	685a      	ldr	r2, [r3, #4]
 8000518:	89fb      	ldrh	r3, [r7, #14]
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	18d4      	adds	r4, r2, r3
 800051e:	4608      	mov	r0, r1
 8000520:	f004 fb46 	bl	8004bb0 <malloc>
 8000524:	4603      	mov	r3, r0
 8000526:	6023      	str	r3, [r4, #0]
    for (r = 0; r < rows; r++) {
 8000528:	89fb      	ldrh	r3, [r7, #14]
 800052a:	3301      	adds	r3, #1
 800052c:	81fb      	strh	r3, [r7, #14]
 800052e:	89fa      	ldrh	r2, [r7, #14]
 8000530:	887b      	ldrh	r3, [r7, #2]
 8000532:	429a      	cmp	r2, r3
 8000534:	d3ec      	bcc.n	8000510 <initLookupTable+0x40>
    }

    /* set attrs */
    lookupTable->rows = rows;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	887a      	ldrh	r2, [r7, #2]
 800053a:	801a      	strh	r2, [r3, #0]
    lookupTable->cols = cols;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	883a      	ldrh	r2, [r7, #0]
 8000540:	805a      	strh	r2, [r3, #2]

    for (r = 0; r < rows; r++) {
 8000542:	2300      	movs	r3, #0
 8000544:	81fb      	strh	r3, [r7, #14]
 8000546:	e017      	b.n	8000578 <initLookupTable+0xa8>
        for (c = 0; c < cols; c++) {
 8000548:	2300      	movs	r3, #0
 800054a:	81bb      	strh	r3, [r7, #12]
 800054c:	e00d      	b.n	800056a <initLookupTable+0x9a>
            lookupTable->index[r][c] = 0;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	685a      	ldr	r2, [r3, #4]
 8000552:	89fb      	ldrh	r3, [r7, #14]
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	89bb      	ldrh	r3, [r7, #12]
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	4413      	add	r3, r2
 8000560:	2200      	movs	r2, #0
 8000562:	801a      	strh	r2, [r3, #0]
        for (c = 0; c < cols; c++) {
 8000564:	89bb      	ldrh	r3, [r7, #12]
 8000566:	3301      	adds	r3, #1
 8000568:	81bb      	strh	r3, [r7, #12]
 800056a:	89ba      	ldrh	r2, [r7, #12]
 800056c:	883b      	ldrh	r3, [r7, #0]
 800056e:	429a      	cmp	r2, r3
 8000570:	d3ed      	bcc.n	800054e <initLookupTable+0x7e>
    for (r = 0; r < rows; r++) {
 8000572:	89fb      	ldrh	r3, [r7, #14]
 8000574:	3301      	adds	r3, #1
 8000576:	81fb      	strh	r3, [r7, #14]
 8000578:	89fa      	ldrh	r2, [r7, #14]
 800057a:	887b      	ldrh	r3, [r7, #2]
 800057c:	429a      	cmp	r2, r3
 800057e:	d3e3      	bcc.n	8000548 <initLookupTable+0x78>
        }
    }
}
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bd90      	pop	{r4, r7, pc}
	...

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b5b0      	push	{r4, r5, r7, lr}
 800058e:	b096      	sub	sp, #88	; 0x58
 8000590:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  ColorRGB_t color[NUM_COLORS] = {
 8000592:	4b8e      	ldr	r3, [pc, #568]	; (80007cc <main+0x240>)
 8000594:	f107 0408 	add.w	r4, r7, #8
 8000598:	461d      	mov	r5, r3
 800059a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a6:	682b      	ldr	r3, [r5, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	8022      	strh	r2, [r4, #0]
 80005ac:	3402      	adds	r4, #2
 80005ae:	0c1b      	lsrs	r3, r3, #16
 80005b0:	7023      	strb	r3, [r4, #0]
    {0,   0,   0  }  // C_BLACK
  };
  //ColorRGB_t* pixel[WS2812_NUM_LEDS_Y][WS2812_NUM_LEDS_X] = {0}; // fill with &color[C_COLOR]
                                                                
  /* maze vars */
  uint8_t startX = 1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint8_t startY = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint8_t exitX = MAZE_WIDTH - 2;
 80005be:	2325      	movs	r3, #37	; 0x25
 80005c0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  uint8_t exitY = MAZE_HEIGHT - 1;
 80005c4:	2316      	movs	r3, #22
 80005c6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  uint16_t i = 0, x = 0, y = 0; // index variables
 80005ca:	2300      	movs	r3, #0
 80005cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80005d0:	2300      	movs	r3, #0
 80005d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80005d6:	2300      	movs	r3, #0
 80005d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f001 fb98 	bl	8001d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f902 	bl	80007e8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SystemInit();
 80005e4:	f001 fa26 	bl	8001a34 <SystemInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fab4 	bl	8000b54 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 fa8a 	bl	8000b04 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005f0:	f000 fa5e 	bl	8000ab0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005f4:	f000 f99a 	bl	800092c <MX_TIM2_Init>
  MX_TIM3_Init();
 80005f8:	f000 fa0c 	bl	8000a14 <MX_TIM3_Init>
  MX_SPI2_Init();
 80005fc:	f000 f960 	bl	80008c0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ws2812_init();
 8000600:	f001 fa2a 	bl	8001a58 <ws2812_init>
  initMaze(&maze, MAZE_HEIGHT, MAZE_WIDTH, startX, startY, exitX, exitY);
 8000604:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000608:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800060c:	9302      	str	r3, [sp, #8]
 800060e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	4613      	mov	r3, r2
 800061c:	2227      	movs	r2, #39	; 0x27
 800061e:	2117      	movs	r1, #23
 8000620:	486b      	ldr	r0, [pc, #428]	; (80007d0 <main+0x244>)
 8000622:	f000 fb0a 	bl	8000c3a <initMaze>
  initPath(&path, MAZE_WIDTH * MAZE_HEIGHT);
 8000626:	f240 3181 	movw	r1, #897	; 0x381
 800062a:	486a      	ldr	r0, [pc, #424]	; (80007d4 <main+0x248>)
 800062c:	f000 fc01 	bl	8000e32 <initPath>
  initPRNG(&rng, numbers, SIZE_NUMBERS);
 8000630:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000634:	4968      	ldr	r1, [pc, #416]	; (80007d8 <main+0x24c>)
 8000636:	4869      	ldr	r0, [pc, #420]	; (80007dc <main+0x250>)
 8000638:	f000 ff4e 	bl	80014d8 <initPRNG>
  initLookupTable(&lookupTable, WS2812_NUM_LEDS_Y, WS2812_NUM_LEDS_X);
 800063c:	2228      	movs	r2, #40	; 0x28
 800063e:	2118      	movs	r1, #24
 8000640:	4867      	ldr	r0, [pc, #412]	; (80007e0 <main+0x254>)
 8000642:	f7ff ff45 	bl	80004d0 <initLookupTable>
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  //printf("Hello World \n");
	/* reset panel to black */
	ws2812_pixel_all(&color[C_BLACK]);
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	3330      	adds	r3, #48	; 0x30
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fa95 	bl	8001b7c <ws2812_pixel_all>

	/* set start and end point */
    startX++;
 8000652:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000656:	3301      	adds	r3, #1
 8000658:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (startX == WS2812_NUM_LEDS_X - 1) startX = 1;
 800065c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000660:	2b27      	cmp	r3, #39	; 0x27
 8000662:	d102      	bne.n	800066a <main+0xde>
 8000664:	2301      	movs	r3, #1
 8000666:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    exitX--;
 800066a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800066e:	3b01      	subs	r3, #1
 8000670:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    if (exitX == 0) exitX = WS2812_NUM_LEDS_X - 2;
 8000674:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000678:	2b00      	cmp	r3, #0
 800067a:	d102      	bne.n	8000682 <main+0xf6>
 800067c:	2326      	movs	r3, #38	; 0x26
 800067e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	/* set new start and exit */
    maze.start.x = startX; maze.start.y = startY;
 8000682:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000686:	4a52      	ldr	r2, [pc, #328]	; (80007d0 <main+0x244>)
 8000688:	6053      	str	r3, [r2, #4]
 800068a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800068e:	4a50      	ldr	r2, [pc, #320]	; (80007d0 <main+0x244>)
 8000690:	6093      	str	r3, [r2, #8]
    maze.exit.x = exitX; maze.exit.y = exitY;
 8000692:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000696:	4a4e      	ldr	r2, [pc, #312]	; (80007d0 <main+0x244>)
 8000698:	6153      	str	r3, [r2, #20]
 800069a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800069e:	4a4c      	ldr	r2, [pc, #304]	; (80007d0 <main+0x244>)
 80006a0:	6193      	str	r3, [r2, #24]

	/* generate and solve maze */
	generateMaze(&maze);
 80006a2:	484b      	ldr	r0, [pc, #300]	; (80007d0 <main+0x244>)
 80006a4:	f000 fcee 	bl	8001084 <generateMaze>
	solveMaze(&maze, &path);
 80006a8:	494a      	ldr	r1, [pc, #296]	; (80007d4 <main+0x248>)
 80006aa:	4849      	ldr	r0, [pc, #292]	; (80007d0 <main+0x244>)
 80006ac:	f000 fd26 	bl	80010fc <solveMaze>

	/* write maze */
    ws2812_pixel_all(&(ColorRGB_t){15, 15, 15});
 80006b0:	4a4c      	ldr	r2, [pc, #304]	; (80007e4 <main+0x258>)
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	6812      	ldr	r2, [r2, #0]
 80006b6:	4611      	mov	r1, r2
 80006b8:	8019      	strh	r1, [r3, #0]
 80006ba:	3302      	adds	r3, #2
 80006bc:	0c12      	lsrs	r2, r2, #16
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fa5a 	bl	8001b7c <ws2812_pixel_all>
	for (x = 0; x < MAZE_WIDTH; x++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80006ce:	e02a      	b.n	8000726 <main+0x19a>
	{
	  for (y = 0; y < MAZE_HEIGHT; y++)
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80006d6:	e01d      	b.n	8000714 <main+0x188>
	  {
	    if (maze.grid[y][x] != WALL) ws2812_pixel(x, y, &color[C_BLACK]);
 80006d8:	4b3d      	ldr	r3, [pc, #244]	; (80007d0 <main+0x244>)
 80006da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	4413      	add	r3, r2
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80006ea:	4413      	add	r3, r2
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d00b      	beq.n	800070a <main+0x17e>
 80006f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80006f6:	b2d8      	uxtb	r0, r3
 80006f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80006fc:	b2d9      	uxtb	r1, r3
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	3330      	adds	r3, #48	; 0x30
 8000704:	461a      	mov	r2, r3
 8000706:	f001 f9c9 	bl	8001a9c <ws2812_pixel>
	  for (y = 0; y < MAZE_HEIGHT; y++)
 800070a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800070e:	3301      	adds	r3, #1
 8000710:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8000714:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000718:	2b16      	cmp	r3, #22
 800071a:	d9dd      	bls.n	80006d8 <main+0x14c>
	for (x = 0; x < MAZE_WIDTH; x++)
 800071c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000720:	3301      	adds	r3, #1
 8000722:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000726:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800072a:	2b26      	cmp	r3, #38	; 0x26
 800072c:	d9d0      	bls.n	80006d0 <main+0x144>
	  }
	}

	/* solve maze */
	for (i = path.size - 1; i >= 1; i--)
 800072e:	4b29      	ldr	r3, [pc, #164]	; (80007d4 <main+0x248>)
 8000730:	889b      	ldrh	r3, [r3, #4]
 8000732:	3b01      	subs	r3, #1
 8000734:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000738:	e033      	b.n	80007a2 <main+0x216>
	{
      if (path.p[i].x != 0 && path.p[i].y != 0)
 800073a:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <main+0x248>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000742:	011b      	lsls	r3, r3, #4
 8000744:	4413      	add	r3, r2
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d025      	beq.n	8000798 <main+0x20c>
 800074c:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <main+0x248>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000754:	011b      	lsls	r3, r3, #4
 8000756:	4413      	add	r3, r2
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d01c      	beq.n	8000798 <main+0x20c>
      {
        ws2812_pixel(path.p[i].x, path.p[i].y, &(ColorRGB_t){0, 15, 0}); // TODO: start point is not in path
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <main+0x248>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000766:	011b      	lsls	r3, r3, #4
 8000768:	4413      	add	r3, r2
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	b2d8      	uxtb	r0, r3
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <main+0x248>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000776:	011b      	lsls	r3, r3, #4
 8000778:	4413      	add	r3, r2
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2200      	movs	r2, #0
 8000780:	703a      	strb	r2, [r7, #0]
 8000782:	220f      	movs	r2, #15
 8000784:	707a      	strb	r2, [r7, #1]
 8000786:	2200      	movs	r2, #0
 8000788:	70ba      	strb	r2, [r7, #2]
 800078a:	463a      	mov	r2, r7
 800078c:	4619      	mov	r1, r3
 800078e:	f001 f985 	bl	8001a9c <ws2812_pixel>
        HAL_Delay(ANIMATION_DELAY_MS);
 8000792:	201e      	movs	r0, #30
 8000794:	f001 fb2e 	bl	8001df4 <HAL_Delay>
	for (i = path.size - 1; i >= 1; i--)
 8000798:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800079c:	3b01      	subs	r3, #1
 800079e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80007a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1c7      	bne.n	800073a <main+0x1ae>
      }
	}

    /* reset */
    resetMaze(&maze, startX, startY, exitX, exitY);
 80007aa:	f897 0046 	ldrb.w	r0, [r7, #70]	; 0x46
 80007ae:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80007b2:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80007b6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	4603      	mov	r3, r0
 80007be:	4804      	ldr	r0, [pc, #16]	; (80007d0 <main+0x244>)
 80007c0:	f000 fa88 	bl	8000cd4 <resetMaze>
    resetPath(&path);
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <main+0x248>)
 80007c6:	f000 fb53 	bl	8000e70 <resetPath>
  {
 80007ca:	e73c      	b.n	8000646 <main+0xba>
 80007cc:	08004e60 	.word	0x08004e60
 80007d0:	20001208 	.word	0x20001208
 80007d4:	20001230 	.word	0x20001230
 80007d8:	20000000 	.word	0x20000000
 80007dc:	20001238 	.word	0x20001238
 80007e0:	20001014 	.word	0x20001014
 80007e4:	08004e94 	.word	0x08004e94

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	; 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0320 	add.w	r3, r7, #32
 80007f2:	2230      	movs	r2, #48	; 0x30
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 fa96 	bl	8004d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <SystemClock_Config+0xd0>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	4a28      	ldr	r2, [pc, #160]	; (80008b8 <SystemClock_Config+0xd0>)
 8000816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081a:	6413      	str	r3, [r2, #64]	; 0x40
 800081c:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <SystemClock_Config+0xd0>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	4b23      	ldr	r3, [pc, #140]	; (80008bc <SystemClock_Config+0xd4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000834:	4a21      	ldr	r2, [pc, #132]	; (80008bc <SystemClock_Config+0xd4>)
 8000836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <SystemClock_Config+0xd4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000848:	2302      	movs	r3, #2
 800084a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084c:	2301      	movs	r3, #1
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000850:	2310      	movs	r3, #16
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000854:	2302      	movs	r3, #2
 8000856:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000858:	2300      	movs	r3, #0
 800085a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800085c:	2310      	movs	r3, #16
 800085e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000860:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000864:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000866:	2304      	movs	r3, #4
 8000868:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800086a:	2307      	movs	r3, #7
 800086c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	f107 0320 	add.w	r3, r7, #32
 8000872:	4618      	mov	r0, r3
 8000874:	f002 f924 	bl	8002ac0 <HAL_RCC_OscConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800087e:	f000 f9d7 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000882:	230f      	movs	r3, #15
 8000884:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000886:	2302      	movs	r3, #2
 8000888:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800088e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000892:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2102      	movs	r1, #2
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 fb86 	bl	8002fb0 <HAL_RCC_ClockConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008aa:	f000 f9c1 	bl	8000c30 <Error_Handler>
  }
}
 80008ae:	bf00      	nop
 80008b0:	3750      	adds	r7, #80	; 0x50
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40007000 	.word	0x40007000

080008c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_SPI2_Init+0x64>)
 80008c6:	4a18      	ldr	r2, [pc, #96]	; (8000928 <MX_SPI2_Init+0x68>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_SPI2_Init+0x64>)
 80008cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_SPI2_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_SPI2_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_SPI2_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_SPI2_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_SPI2_Init+0x64>)
 80008ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_SPI2_Init+0x64>)
 80008f4:	2218      	movs	r2, #24
 80008f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_SPI2_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_SPI2_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <MX_SPI2_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_SPI2_Init+0x64>)
 800090c:	220a      	movs	r2, #10
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_SPI2_Init+0x64>)
 8000912:	f002 fd6d 	bl	80033f0 <HAL_SPI_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800091c:	f000 f988 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2000101c 	.word	0x2000101c
 8000928:	40003800 	.word	0x40003800

0800092c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	; 0x38
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000932:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]
 800095a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800095c:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <MX_TIM2_Init+0xe4>)
 800095e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000962:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000964:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <MX_TIM2_Init+0xe4>)
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <MX_TIM2_Init+0xe4>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000970:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <MX_TIM2_Init+0xe4>)
 8000972:	2264      	movs	r2, #100	; 0x64
 8000974:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <MX_TIM2_Init+0xe4>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <MX_TIM2_Init+0xe4>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000982:	4823      	ldr	r0, [pc, #140]	; (8000a10 <MX_TIM2_Init+0xe4>)
 8000984:	f003 f8dc 	bl	8003b40 <HAL_TIM_Base_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800098e:	f000 f94f 	bl	8000c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099c:	4619      	mov	r1, r3
 800099e:	481c      	ldr	r0, [pc, #112]	; (8000a10 <MX_TIM2_Init+0xe4>)
 80009a0:	f003 fa38 	bl	8003e14 <HAL_TIM_ConfigClockSource>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80009aa:	f000 f941 	bl	8000c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009ae:	4818      	ldr	r0, [pc, #96]	; (8000a10 <MX_TIM2_Init+0xe4>)
 80009b0:	f003 f915 	bl	8003bde <HAL_TIM_PWM_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80009ba:	f000 f939 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	4619      	mov	r1, r3
 80009cc:	4810      	ldr	r0, [pc, #64]	; (8000a10 <MX_TIM2_Init+0xe4>)
 80009ce:	f003 fd8f 	bl	80044f0 <HAL_TIMEx_MasterConfigSynchronization>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80009d8:	f000 f92a 	bl	8000c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009dc:	2360      	movs	r3, #96	; 0x60
 80009de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2208      	movs	r2, #8
 80009f0:	4619      	mov	r1, r3
 80009f2:	4807      	ldr	r0, [pc, #28]	; (8000a10 <MX_TIM2_Init+0xe4>)
 80009f4:	f003 f94c 	bl	8003c90 <HAL_TIM_PWM_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80009fe:	f000 f917 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a02:	4803      	ldr	r0, [pc, #12]	; (8000a10 <MX_TIM2_Init+0xe4>)
 8000a04:	f000 fefe 	bl	8001804 <HAL_TIM_MspPostInit>

}
 8000a08:	bf00      	nop
 8000a0a:	3738      	adds	r7, #56	; 0x38
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200010d4 	.word	0x200010d4

08000a14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a30:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_TIM3_Init+0x94>)
 8000a32:	4a1e      	ldr	r2, [pc, #120]	; (8000aac <MX_TIM3_Init+0x98>)
 8000a34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_TIM3_Init+0x94>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_TIM3_Init+0x94>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_TIM3_Init+0x94>)
 8000a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_TIM3_Init+0x94>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_TIM3_Init+0x94>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a56:	4814      	ldr	r0, [pc, #80]	; (8000aa8 <MX_TIM3_Init+0x94>)
 8000a58:	f003 f872 	bl	8003b40 <HAL_TIM_Base_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000a62:	f000 f8e5 	bl	8000c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	4619      	mov	r1, r3
 8000a72:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <MX_TIM3_Init+0x94>)
 8000a74:	f003 f9ce 	bl	8003e14 <HAL_TIM_ConfigClockSource>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000a7e:	f000 f8d7 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <MX_TIM3_Init+0x94>)
 8000a90:	f003 fd2e 	bl	80044f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000a9a:	f000 f8c9 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000111c 	.word	0x2000111c
 8000aac:	40000400 	.word	0x40000400

08000ab0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <MX_USART2_UART_Init+0x50>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ae8:	f003 fd70 	bl	80045cc <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000af2:	f000 f89d 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200011c4 	.word	0x200011c4
 8000b00:	40004400 	.word	0x40004400

08000b04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_DMA_Init+0x4c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <MX_DMA_Init+0x4c>)
 8000b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <MX_DMA_Init+0x4c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	200c      	movs	r0, #12
 8000b2c:	f001 fa61 	bl	8001ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b30:	200c      	movs	r0, #12
 8000b32:	f001 fa7a 	bl	800202a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f001 fa59 	bl	8001ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b40:	200f      	movs	r0, #15
 8000b42:	f001 fa72 	bl	800202a <HAL_NVIC_EnableIRQ>

}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a2c      	ldr	r2, [pc, #176]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a25      	ldr	r2, [pc, #148]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a1e      	ldr	r2, [pc, #120]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <MX_GPIO_Init+0xd0>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2120      	movs	r1, #32
 8000bde:	4812      	ldr	r0, [pc, #72]	; (8000c28 <MX_GPIO_Init+0xd4>)
 8000be0:	f001 ff54 	bl	8002a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480c      	ldr	r0, [pc, #48]	; (8000c2c <MX_GPIO_Init+0xd8>)
 8000bfc:	f001 fdc2 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c00:	2320      	movs	r3, #32
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4804      	ldr	r0, [pc, #16]	; (8000c28 <MX_GPIO_Init+0xd4>)
 8000c18:	f001 fdb4 	bl	8002784 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c1c:	bf00      	nop
 8000c1e:	3728      	adds	r7, #40	; 0x28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40020800 	.word	0x40020800

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x8>

08000c3a <initMaze>:
#include "prng.h"

Maze maze;
Path path;

void initMaze(Maze* maze, uint8_t rows, uint8_t cols, uint8_t startX, uint8_t startY, uint8_t exitX, uint8_t exitY) {
 8000c3a:	b590      	push	{r4, r7, lr}
 8000c3c:	b087      	sub	sp, #28
 8000c3e:	af02      	add	r7, sp, #8
 8000c40:	6078      	str	r0, [r7, #4]
 8000c42:	4608      	mov	r0, r1
 8000c44:	4611      	mov	r1, r2
 8000c46:	461a      	mov	r2, r3
 8000c48:	4603      	mov	r3, r0
 8000c4a:	70fb      	strb	r3, [r7, #3]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70bb      	strb	r3, [r7, #2]
 8000c50:	4613      	mov	r3, r2
 8000c52:	707b      	strb	r3, [r7, #1]
    uint8_t r; /* index variable */

    /* check input */
    if (rows <= 0) exit(1); /* number of rows must be greater than 0 */
 8000c54:	78fb      	ldrb	r3, [r7, #3]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d102      	bne.n	8000c60 <initMaze+0x26>
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f003 ff96 	bl	8004b8c <exit>
    if (cols <= 0) exit(1); /* number of cols must be greater than 0 */
 8000c60:	78bb      	ldrb	r3, [r7, #2]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d102      	bne.n	8000c6c <initMaze+0x32>
 8000c66:	2001      	movs	r0, #1
 8000c68:	f003 ff90 	bl	8004b8c <exit>

    /* allocate memory */
    maze->grid = (uint8_t**) malloc(rows * sizeof(uint8_t*));
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f003 ff9d 	bl	8004bb0 <malloc>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
    for (r = 0; r < rows; r++) {
 8000c7e:	2300      	movs	r3, #0
 8000c80:	73fb      	strb	r3, [r7, #15]
 8000c82:	e00d      	b.n	8000ca0 <initMaze+0x66>
        maze->grid[r] = (uint8_t*) malloc(cols * sizeof(uint8_t));
 8000c84:	78b9      	ldrb	r1, [r7, #2]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	18d4      	adds	r4, r2, r3
 8000c90:	4608      	mov	r0, r1
 8000c92:	f003 ff8d 	bl	8004bb0 <malloc>
 8000c96:	4603      	mov	r3, r0
 8000c98:	6023      	str	r3, [r4, #0]
    for (r = 0; r < rows; r++) {
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	7bfa      	ldrb	r2, [r7, #15]
 8000ca2:	78fb      	ldrb	r3, [r7, #3]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d3ed      	bcc.n	8000c84 <initMaze+0x4a>
    }

    /* set attrs */
    maze->rows = rows;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	78fa      	ldrb	r2, [r7, #3]
 8000cac:	701a      	strb	r2, [r3, #0]
    maze->cols = cols;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	78ba      	ldrb	r2, [r7, #2]
 8000cb2:	705a      	strb	r2, [r3, #1]
    resetMaze(maze, startX, startY, exitX, exitY);
 8000cb4:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8000cb8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000cbc:	7879      	ldrb	r1, [r7, #1]
 8000cbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f000 f804 	bl	8000cd4 <resetMaze>
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd90      	pop	{r4, r7, pc}

08000cd4 <resetMaze>:

void resetMaze(Maze* maze, uint8_t startX, uint8_t startY, uint8_t exitX, uint8_t exitY) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	4608      	mov	r0, r1
 8000cde:	4611      	mov	r1, r2
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	70fb      	strb	r3, [r7, #3]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	70bb      	strb	r3, [r7, #2]
 8000cea:	4613      	mov	r3, r2
 8000cec:	707b      	strb	r3, [r7, #1]
    uint8_t r, c; /* index variables */

    /* check input */
    if (exitX >= maze->cols || exitY >= maze->rows) exit(1);                                            /* exit point has to be inside the maze */
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	785b      	ldrb	r3, [r3, #1]
 8000cf2:	787a      	ldrb	r2, [r7, #1]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d204      	bcs.n	8000d02 <resetMaze+0x2e>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	7e3a      	ldrb	r2, [r7, #24]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d302      	bcc.n	8000d08 <resetMaze+0x34>
 8000d02:	2001      	movs	r0, #1
 8000d04:	f003 ff42 	bl	8004b8c <exit>
    if (!((startX == 0 || startX == maze->cols-1) || (startY == 0 || startY == maze->rows-1))) exit(1); /* start point has to be on edge of maze */
 8000d08:	78fb      	ldrb	r3, [r7, #3]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d011      	beq.n	8000d32 <resetMaze+0x5e>
 8000d0e:	78fa      	ldrb	r2, [r7, #3]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	785b      	ldrb	r3, [r3, #1]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d00b      	beq.n	8000d32 <resetMaze+0x5e>
 8000d1a:	78bb      	ldrb	r3, [r7, #2]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d008      	beq.n	8000d32 <resetMaze+0x5e>
 8000d20:	78ba      	ldrb	r2, [r7, #2]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d002      	beq.n	8000d32 <resetMaze+0x5e>
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f003 ff2d 	bl	8004b8c <exit>
    if (!((exitX == 0 || exitX == maze->cols-1) || (exitY == 0 || exitY == maze->rows-1))) exit(1);     /* exit point has to be on edge of maze */
 8000d32:	787b      	ldrb	r3, [r7, #1]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d011      	beq.n	8000d5c <resetMaze+0x88>
 8000d38:	787a      	ldrb	r2, [r7, #1]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	785b      	ldrb	r3, [r3, #1]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d00b      	beq.n	8000d5c <resetMaze+0x88>
 8000d44:	7e3b      	ldrb	r3, [r7, #24]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d008      	beq.n	8000d5c <resetMaze+0x88>
 8000d4a:	7e3a      	ldrb	r2, [r7, #24]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d002      	beq.n	8000d5c <resetMaze+0x88>
 8000d56:	2001      	movs	r0, #1
 8000d58:	f003 ff18 	bl	8004b8c <exit>
    if ((startX == 0 || startX == maze->cols-1) && (startY == 0 || startY == maze->rows-1)) exit(1);    /* start point must not be on corner of maze */
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d005      	beq.n	8000d6e <resetMaze+0x9a>
 8000d62:	78fa      	ldrb	r2, [r7, #3]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	785b      	ldrb	r3, [r3, #1]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d10b      	bne.n	8000d86 <resetMaze+0xb2>
 8000d6e:	78bb      	ldrb	r3, [r7, #2]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d005      	beq.n	8000d80 <resetMaze+0xac>
 8000d74:	78ba      	ldrb	r2, [r7, #2]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d102      	bne.n	8000d86 <resetMaze+0xb2>
 8000d80:	2001      	movs	r0, #1
 8000d82:	f003 ff03 	bl	8004b8c <exit>
    if ((exitX == 0 || exitX == maze->cols-1) && (exitY == 0 || exitY == maze->rows-1)) exit(1);        /* exit point must not be on corner of maze */
 8000d86:	787b      	ldrb	r3, [r7, #1]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d005      	beq.n	8000d98 <resetMaze+0xc4>
 8000d8c:	787a      	ldrb	r2, [r7, #1]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	785b      	ldrb	r3, [r3, #1]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d10b      	bne.n	8000db0 <resetMaze+0xdc>
 8000d98:	7e3b      	ldrb	r3, [r7, #24]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d005      	beq.n	8000daa <resetMaze+0xd6>
 8000d9e:	7e3a      	ldrb	r2, [r7, #24]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	3b01      	subs	r3, #1
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d102      	bne.n	8000db0 <resetMaze+0xdc>
 8000daa:	2001      	movs	r0, #1
 8000dac:	f003 feee 	bl	8004b8c <exit>

    /* set attrs */
    maze->start.x = startX;
 8000db0:	78fa      	ldrb	r2, [r7, #3]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	605a      	str	r2, [r3, #4]
    maze->start.y = startY;
 8000db6:	78ba      	ldrb	r2, [r7, #2]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	609a      	str	r2, [r3, #8]
    maze->start.prevX = -1;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dc2:	60da      	str	r2, [r3, #12]
    maze->start.prevY = -1;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dca:	611a      	str	r2, [r3, #16]
    maze->exit.x = exitX;
 8000dcc:	787a      	ldrb	r2, [r7, #1]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	615a      	str	r2, [r3, #20]
    maze->exit.y = exitY;
 8000dd2:	7e3a      	ldrb	r2, [r7, #24]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	619a      	str	r2, [r3, #24]
    maze->exit.prevX = -1;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dde:	61da      	str	r2, [r3, #28]
    maze->exit.prevY = -1;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de6:	621a      	str	r2, [r3, #32]

    /* init maze grid as WALLs */
    for (r = 0; r < maze->rows; r++) {
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]
 8000dec:	e017      	b.n	8000e1e <resetMaze+0x14a>
        for (c = 0; c < maze->cols; c++) {
 8000dee:	2300      	movs	r3, #0
 8000df0:	73bb      	strb	r3, [r7, #14]
 8000df2:	e00c      	b.n	8000e0e <resetMaze+0x13a>
            maze->grid[r][c] = WALL;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	7bbb      	ldrb	r3, [r7, #14]
 8000e02:	4413      	add	r3, r2
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
        for (c = 0; c < maze->cols; c++) {
 8000e08:	7bbb      	ldrb	r3, [r7, #14]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	73bb      	strb	r3, [r7, #14]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	785b      	ldrb	r3, [r3, #1]
 8000e12:	7bba      	ldrb	r2, [r7, #14]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d3ed      	bcc.n	8000df4 <resetMaze+0x120>
    for (r = 0; r < maze->rows; r++) {
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	73fb      	strb	r3, [r7, #15]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	7bfa      	ldrb	r2, [r7, #15]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d3e2      	bcc.n	8000dee <resetMaze+0x11a>
        }
    }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <initPath>:

void initPath(Path* path, uint16_t length) {
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	807b      	strh	r3, [r7, #2]
    path->p = (Point *) malloc(length * sizeof(Point));
 8000e3e:	887b      	ldrh	r3, [r7, #2]
 8000e40:	011b      	lsls	r3, r3, #4
 8000e42:	4618      	mov	r0, r3
 8000e44:	f003 feb4 	bl	8004bb0 <malloc>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	601a      	str	r2, [r3, #0]
    
    if (path == NULL) exit(1);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d102      	bne.n	8000e5c <initPath+0x2a>
 8000e56:	2001      	movs	r0, #1
 8000e58:	f003 fe98 	bl	8004b8c <exit>
    
    path->size = length;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	887a      	ldrh	r2, [r7, #2]
 8000e60:	809a      	strh	r2, [r3, #4]
    resetPath(path);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f000 f804 	bl	8000e70 <resetPath>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <resetPath>:

void resetPath(Path* path) {
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
    for (uint16_t i = 0; i < path->size; i++) {
 8000e78:	2300      	movs	r3, #0
 8000e7a:	81fb      	strh	r3, [r7, #14]
 8000e7c:	e020      	b.n	8000ec0 <resetPath+0x50>
        path->p[i].x = 0;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	89fb      	ldrh	r3, [r7, #14]
 8000e84:	011b      	lsls	r3, r3, #4
 8000e86:	4413      	add	r3, r2
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
        path->p[i].y = 0;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	89fb      	ldrh	r3, [r7, #14]
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	4413      	add	r3, r2
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
        path->p[i].prevX = -1;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	89fb      	ldrh	r3, [r7, #14]
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	4413      	add	r3, r2
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ea8:	609a      	str	r2, [r3, #8]
        path->p[i].prevY = -1;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	011b      	lsls	r3, r3, #4
 8000eb2:	4413      	add	r3, r2
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eb8:	60da      	str	r2, [r3, #12]
    for (uint16_t i = 0; i < path->size; i++) {
 8000eba:	89fb      	ldrh	r3, [r7, #14]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	81fb      	strh	r3, [r7, #14]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	889b      	ldrh	r3, [r3, #4]
 8000ec4:	89fa      	ldrh	r2, [r7, #14]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d3d9      	bcc.n	8000e7e <resetPath+0xe>
    }

    path->count = 0;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	80da      	strh	r2, [r3, #6]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <pathPush>:

void pathPush(Path* path, Point* point) {
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
    path->p[path->count] = *point;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	88db      	ldrh	r3, [r3, #6]
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	441a      	add	r2, r3
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	4614      	mov	r4, r2
 8000ef6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    path->count++;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	88db      	ldrh	r3, [r3, #6]
 8000f00:	3301      	adds	r3, #1
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	80da      	strh	r2, [r3, #6]

    if (path->count == path->size) exit(1);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	88da      	ldrh	r2, [r3, #6]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	889b      	ldrh	r3, [r3, #4]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d102      	bne.n	8000f1a <pathPush+0x3e>
 8000f14:	2001      	movs	r0, #1
 8000f16:	f003 fe39 	bl	8004b8c <exit>
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd90      	pop	{r4, r7, pc}
	...

08000f24 <carveMaze>:

void carveMaze(Maze *maze, uint8_t x, uint8_t y) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	70fb      	strb	r3, [r7, #3]
 8000f30:	4613      	mov	r3, r2
 8000f32:	70bb      	strb	r3, [r7, #2]
    int x1, y1; /* coords of next cell */
    int x2, y2; /* coords of cell after next cell */
    int dx, dy; /* direction deltas */
    int dir = 0; /* direction. 0 = right; 1 = down; 2 = left; else = up */
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
    int count = 0; /* counts directions failed */
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61bb      	str	r3, [r7, #24]

    /* get initial direction */
    dir = getRand(&rng) % 4;
 8000f3c:	4850      	ldr	r0, [pc, #320]	; (8001080 <carveMaze+0x15c>)
 8000f3e:	f000 fae0 	bl	8001502 <getRand>
 8000f42:	4603      	mov	r3, r0
 8000f44:	425a      	negs	r2, r3
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	f002 0203 	and.w	r2, r2, #3
 8000f4e:	bf58      	it	pl
 8000f50:	4253      	negpl	r3, r2
 8000f52:	61fb      	str	r3, [r7, #28]

    /* try all 4 directions */
    while (count < 4) {
 8000f54:	e08a      	b.n	800106c <carveMaze+0x148>
        /* reset directions */
        dx = 0; dy = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]

        /* translate dir to direction deltas */
        switch (dir) {
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d00f      	beq.n	8000f84 <carveMaze+0x60>
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	dc10      	bgt.n	8000f8c <carveMaze+0x68>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <carveMaze+0x54>
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d003      	beq.n	8000f7e <carveMaze+0x5a>
 8000f76:	e009      	b.n	8000f8c <carveMaze+0x68>
            case 0:  dx = 1;  break; /* right */
 8000f78:	2301      	movs	r3, #1
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f7c:	e00a      	b.n	8000f94 <carveMaze+0x70>
            case 1:  dy = 1;  break; /* down */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	623b      	str	r3, [r7, #32]
 8000f82:	e007      	b.n	8000f94 <carveMaze+0x70>
            case 2:  dx = -1; break; /* left */
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
 8000f8a:	e003      	b.n	8000f94 <carveMaze+0x70>
            default: dy = -1; break; /* up */
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f90:	623b      	str	r3, [r7, #32]
 8000f92:	bf00      	nop
        }

        /* calculate new positions based on direction */
        x1 = x + dx;
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f98:	4413      	add	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]
        y1 = y + dy;
 8000f9c:	78bb      	ldrb	r3, [r7, #2]
 8000f9e:	6a3a      	ldr	r2, [r7, #32]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        x2 = x1 + dx;
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	4413      	add	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]
        y2 = y1 + dy;
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	6a3b      	ldr	r3, [r7, #32]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
        
        /* check if next two cells are in bounds and are walls */
        if (x2 >= 0 && x2 < maze->cols /* next cell in bounds? */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	db4b      	blt.n	8001052 <carveMaze+0x12e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	785b      	ldrb	r3, [r3, #1]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	da45      	bge.n	8001052 <carveMaze+0x12e>
         && y2 >= 0 && y2 < maze->rows /* next next cell in bounds? */
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db42      	blt.n	8001052 <carveMaze+0x12e>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	da3c      	bge.n	8001052 <carveMaze+0x12e>
         && maze->grid[y1][x1] == WALL /* next cell wall? */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d131      	bne.n	8001052 <carveMaze+0x12e>
         && maze->grid[y2][x2] == WALL) { /* next next cell wall? */   
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d126      	bne.n	8001052 <carveMaze+0x12e>

            /* carve path */
            maze->grid[y1][x1] = PATH;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	4413      	add	r3, r2
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
            maze->grid[y2][x2] = PATH;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4413      	add	r3, r2
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]

            /* move to new position */
            x = x2; y = y2;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	70fb      	strb	r3, [r7, #3]
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	70bb      	strb	r3, [r7, #2]

            /* get new direction and reset counter */
            dir = getRand(&rng) % 4;
 8001034:	4812      	ldr	r0, [pc, #72]	; (8001080 <carveMaze+0x15c>)
 8001036:	f000 fa64 	bl	8001502 <getRand>
 800103a:	4603      	mov	r3, r0
 800103c:	425a      	negs	r2, r3
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	f002 0203 	and.w	r2, r2, #3
 8001046:	bf58      	it	pl
 8001048:	4253      	negpl	r3, r2
 800104a:	61fb      	str	r3, [r7, #28]
            count = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
 8001050:	e00c      	b.n	800106c <carveMaze+0x148>
        } else {
            /* change direction and increment counter if carving not possible */
            dir = (dir + 1) % 4;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3301      	adds	r3, #1
 8001056:	425a      	negs	r2, r3
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	f002 0203 	and.w	r2, r2, #3
 8001060:	bf58      	it	pl
 8001062:	4253      	negpl	r3, r2
 8001064:	61fb      	str	r3, [r7, #28]
            count++;
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	3301      	adds	r3, #1
 800106a:	61bb      	str	r3, [r7, #24]
    while (count < 4) {
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	2b03      	cmp	r3, #3
 8001070:	f77f af71 	ble.w	8000f56 <carveMaze+0x32>
        }
    }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	; 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20001238 	.word	0x20001238

08001084 <generateMaze>:

void generateMaze(Maze* maze) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    uint8_t x, y;
    
    /* carve the maze */
    for(y = 1; y < maze->rows; y += 2) {
 800108c:	2301      	movs	r3, #1
 800108e:	73bb      	strb	r3, [r7, #14]
 8001090:	e013      	b.n	80010ba <generateMaze+0x36>
        for(x = 1; x < maze->cols; x += 2) {
 8001092:	2301      	movs	r3, #1
 8001094:	73fb      	strb	r3, [r7, #15]
 8001096:	e008      	b.n	80010aa <generateMaze+0x26>
            carveMaze(maze, x, y);
 8001098:	7bba      	ldrb	r2, [r7, #14]
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	4619      	mov	r1, r3
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ff40 	bl	8000f24 <carveMaze>
        for(x = 1; x < maze->cols; x += 2) {
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	3302      	adds	r3, #2
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	785b      	ldrb	r3, [r3, #1]
 80010ae:	7bfa      	ldrb	r2, [r7, #15]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d3f1      	bcc.n	8001098 <generateMaze+0x14>
    for(y = 1; y < maze->rows; y += 2) {
 80010b4:	7bbb      	ldrb	r3, [r7, #14]
 80010b6:	3302      	adds	r3, #2
 80010b8:	73bb      	strb	r3, [r7, #14]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	7bba      	ldrb	r2, [r7, #14]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d3e6      	bcc.n	8001092 <generateMaze+0xe>
        }
    }
    
    /* set start and exit. */
    maze->grid[maze->start.y][maze->start.x] = START;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	6852      	ldr	r2, [r2, #4]
 80010d6:	4413      	add	r3, r2
 80010d8:	2202      	movs	r2, #2
 80010da:	701a      	strb	r2, [r3, #0]
    maze->grid[maze->exit.y][maze->exit.x] = EXIT;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	6952      	ldr	r2, [r2, #20]
 80010ee:	4413      	add	r3, r2
 80010f0:	2203      	movs	r2, #3
 80010f2:	701a      	strb	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <solveMaze>:

void solveMaze(Maze* maze, Path* path) {
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b0b3      	sub	sp, #204	; 0xcc
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]

    if (maze == NULL || maze->grid == NULL || path == NULL) exit(1);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d006      	beq.n	800111a <solveMaze+0x1e>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	2b00      	cmp	r3, #0
 8001112:	d002      	beq.n	800111a <solveMaze+0x1e>
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d102      	bne.n	8001120 <solveMaze+0x24>
 800111a:	2001      	movs	r0, #1
 800111c:	f003 fd36 	bl	8004b8c <exit>

    Point current; /* current point in maze */
    Point next; /* next point to move to */
    Point directions[4]; /* possible points to reach from current */
    uint16_t i = 0; /* index var */
 8001120:	2300      	movs	r3, #0
 8001122:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6

    /* keep track of visited cells */
    bool** visited = malloc(maze->rows * sizeof(bool*));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4618      	mov	r0, r3
 800112e:	f003 fd3f 	bl	8004bb0 <malloc>
 8001132:	4603      	mov	r3, r0
 8001134:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    for (i = 0; i < maze->rows; i++) {
 8001138:	2300      	movs	r3, #0
 800113a:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800113e:	e012      	b.n	8001166 <solveMaze+0x6a>
        visited[i] = calloc(maze->cols, sizeof(bool));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	785b      	ldrb	r3, [r3, #1]
 8001144:	4618      	mov	r0, r3
 8001146:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001150:	18d4      	adds	r4, r2, r3
 8001152:	2101      	movs	r1, #1
 8001154:	f003 fcfc 	bl	8004b50 <calloc>
 8001158:	4603      	mov	r3, r0
 800115a:	6023      	str	r3, [r4, #0]
    for (i = 0; i < maze->rows; i++) {
 800115c:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001160:	3301      	adds	r3, #1
 8001162:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b29b      	uxth	r3, r3
 800116c:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8001170:	429a      	cmp	r2, r3
 8001172:	d3e5      	bcc.n	8001140 <solveMaze+0x44>
    }

    /* queue stores next possible points during BFS */
    Point* queue = malloc(maze->rows * maze->cols * sizeof(Point));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	785b      	ldrb	r3, [r3, #1]
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	4618      	mov	r0, r3
 8001186:	f003 fd13 	bl	8004bb0 <malloc>
 800118a:	4603      	mov	r3, r0
 800118c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    uint16_t front = 0; /* start of queue where elements are removed */
 8001190:	2300      	movs	r3, #0
 8001192:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
    uint16_t rear = 0; /* end of queue where new elements are added */
 8001196:	2300      	movs	r3, #0
 8001198:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2

    /* enqueue start point and mark it as visited */
    pathPush(path, &maze->start);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3304      	adds	r3, #4
 80011a0:	4619      	mov	r1, r3
 80011a2:	6838      	ldr	r0, [r7, #0]
 80011a4:	f7ff fe9a 	bl	8000edc <pathPush>
    queue[rear++] = maze->start;
 80011a8:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80011ac:	1c5a      	adds	r2, r3, #1
 80011ae:	f8a7 20c2 	strh.w	r2, [r7, #194]	; 0xc2
 80011b2:	011b      	lsls	r3, r3, #4
 80011b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80011b8:	441a      	add	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4614      	mov	r4, r2
 80011be:	3304      	adds	r3, #4
 80011c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    visited[maze->start.y][maze->start.x] = true;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80011d0:	4413      	add	r3, r2
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	6852      	ldr	r2, [r2, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]

    /* BFS loop */
    while (front < rear) {
 80011de:	e14c      	b.n	800147a <solveMaze+0x37e>
        /* dequeue point */
        current = queue[front++];
 80011e0:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80011e4:	1c5a      	adds	r2, r3, #1
 80011e6:	f8a7 20c4 	strh.w	r2, [r7, #196]	; 0xc4
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80011f0:	4413      	add	r3, r2
 80011f2:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80011f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        /* exit found? */
        if (maze->grid[current.y][current.x] == EXIT) {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001200:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800120e:	4413      	add	r3, r2
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b03      	cmp	r3, #3
 8001214:	d17b      	bne.n	800130e <solveMaze+0x212>
            /* backtrack */
            while (!(current.x == maze->start.x && current.y == maze->start.y)) {
 8001216:	e055      	b.n	80012c4 <solveMaze+0x1c8>
                maze->grid[current.y][current.x] = SOLUTION; /* mark point as solution */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800121c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800122a:	4413      	add	r3, r2
 800122c:	2204      	movs	r2, #4
 800122e:	701a      	strb	r2, [r3, #0]
                pathPush(path, &(Point){current.x, current.y, -1, -1}); /* add point to solution path */
 8001230:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	4619      	mov	r1, r3
 800124e:	6838      	ldr	r0, [r7, #0]
 8001250:	f7ff fe44 	bl	8000edc <pathPush>

                /* find previous point in path */
                for (i = 0; i < rear; i++) {
 8001254:	2300      	movs	r3, #0
 8001256:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800125a:	e02d      	b.n	80012b8 <solveMaze+0x1bc>
                    if (queue[i].x == current.x && queue[i].y == current.y) {
 800125c:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001266:	4413      	add	r3, r2
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800126e:	429a      	cmp	r2, r3
 8001270:	d11d      	bne.n	80012ae <solveMaze+0x1b2>
 8001272:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800127c:	4413      	add	r3, r2
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001284:	429a      	cmp	r2, r3
 8001286:	d112      	bne.n	80012ae <solveMaze+0x1b2>
                        current.x = queue[i].prevX;
 8001288:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001292:	4413      	add	r3, r2
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                        current.y = queue[i].prevY;
 800129a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80012a4:	4413      	add	r3, r2
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                        break;
 80012ac:	e00a      	b.n	80012c4 <solveMaze+0x1c8>
                for (i = 0; i < rear; i++) {
 80012ae:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80012b2:	3301      	adds	r3, #1
 80012b4:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 80012b8:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 80012bc:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d3cb      	bcc.n	800125c <solveMaze+0x160>
            while (!(current.x == maze->start.x && current.y == maze->start.y)) {
 80012c4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d1a3      	bne.n	8001218 <solveMaze+0x11c>
 80012d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d19d      	bne.n	8001218 <solveMaze+0x11c>
                    }
                }
            }

            /* mark start and exit in maze */
            maze->grid[maze->start.y][maze->start.x] = START;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6852      	ldr	r2, [r2, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	2202      	movs	r2, #2
 80012f2:	701a      	strb	r2, [r3, #0]
            maze->grid[maze->exit.y][maze->exit.x] = EXIT;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6952      	ldr	r2, [r2, #20]
 8001306:	4413      	add	r3, r2
 8001308:	2203      	movs	r2, #3
 800130a:	701a      	strb	r2, [r3, #0]

            break; /* exit found and path traced */
 800130c:	e0be      	b.n	800148c <solveMaze+0x390>
        }

        /* add adjacent cells to queue if they are valid */
        directions[0] = (Point){current.x + 1, current.y, current.x, current.y}; /* right */
 800130e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001312:	1c58      	adds	r0, r3, #1
 8001314:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8001318:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800131c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001320:	65b8      	str	r0, [r7, #88]	; 0x58
 8001322:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001324:	663a      	str	r2, [r7, #96]	; 0x60
 8001326:	667b      	str	r3, [r7, #100]	; 0x64
        directions[1] = (Point){current.x - 1, current.y, current.x, current.y}; /* left */
 8001328:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800132c:	1e58      	subs	r0, r3, #1
 800132e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8001332:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800133a:	66b8      	str	r0, [r7, #104]	; 0x68
 800133c:	66f9      	str	r1, [r7, #108]	; 0x6c
 800133e:	673a      	str	r2, [r7, #112]	; 0x70
 8001340:	677b      	str	r3, [r7, #116]	; 0x74
        directions[2] = (Point){current.x, current.y + 1, current.x, current.y}; /* down */
 8001342:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800134a:	1c59      	adds	r1, r3, #1
 800134c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001350:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001354:	67b8      	str	r0, [r7, #120]	; 0x78
 8001356:	67f9      	str	r1, [r7, #124]	; 0x7c
 8001358:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800135c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        directions[3] = (Point){current.x, current.y - 1, current.x, current.y}; /* up */
 8001360:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001368:	1e59      	subs	r1, r3, #1
 800136a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800136e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001372:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8001376:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 800137a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800137e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

        for (i = 0; i < 4; i++) {
 8001382:	2300      	movs	r3, #0
 8001384:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8001388:	e068      	b.n	800145c <solveMaze+0x360>
            next = directions[i];
 800138a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	33c8      	adds	r3, #200	; 0xc8
 8001392:	443b      	add	r3, r7
 8001394:	3b70      	subs	r3, #112	; 0x70
 8001396:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800139a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800139c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (next.x >= 0 && next.x < maze->cols && next.y >= 0 && next.y < maze->rows) { /* in bounds? */
 80013a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db54      	blt.n	8001452 <solveMaze+0x356>
 80013a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	7852      	ldrb	r2, [r2, #1]
 80013b0:	4293      	cmp	r3, r2
 80013b2:	da4e      	bge.n	8001452 <solveMaze+0x356>
 80013b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db4a      	blt.n	8001452 <solveMaze+0x356>
 80013bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	7812      	ldrb	r2, [r2, #0]
 80013c4:	4293      	cmp	r3, r2
 80013c6:	da44      	bge.n	8001452 <solveMaze+0x356>
                if (!visited[next.y][next.x] && (maze->grid[next.y][next.x] == PATH || maze->grid[next.y][next.x] == EXIT)) {
 80013c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013d2:	4413      	add	r3, r2
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80013da:	4413      	add	r3, r2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	f083 0301 	eor.w	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d034      	beq.n	8001452 <solveMaze+0x356>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80013fa:	4413      	add	r3, r2
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00c      	beq.n	800141c <solveMaze+0x320>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001406:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001414:	4413      	add	r3, r2
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b03      	cmp	r3, #3
 800141a:	d11a      	bne.n	8001452 <solveMaze+0x356>
                    queue[rear++] = next;  /* enqueue valid adjacent cell */
 800141c:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8001420:	1c5a      	adds	r2, r3, #1
 8001422:	f8a7 20c2 	strh.w	r2, [r7, #194]	; 0xc2
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800142c:	4413      	add	r3, r2
 800142e:	461c      	mov	r4, r3
 8001430:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001434:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001436:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    visited[next.y][next.x] = true;
 800143a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001444:	4413      	add	r3, r2
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800144c:	4413      	add	r3, r2
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < 4; i++) {
 8001452:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001456:	3301      	adds	r3, #1
 8001458:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800145c:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001460:	2b03      	cmp	r3, #3
 8001462:	d992      	bls.n	800138a <solveMaze+0x28e>
                }
            }
        }
        /* break if writing beyond allocated memory */
        if (rear >= maze->rows * maze->cols) break;
 8001464:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	785b      	ldrb	r3, [r3, #1]
 8001472:	fb01 f303 	mul.w	r3, r1, r3
 8001476:	429a      	cmp	r2, r3
 8001478:	da07      	bge.n	800148a <solveMaze+0x38e>
    while (front < rear) {
 800147a:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 800147e:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8001482:	429a      	cmp	r2, r3
 8001484:	f4ff aeac 	bcc.w	80011e0 <solveMaze+0xe4>
 8001488:	e000      	b.n	800148c <solveMaze+0x390>
        if (rear >= maze->rows * maze->cols) break;
 800148a:	bf00      	nop
    }

    /* clean up */
    for (i = 0; i < maze->rows; i++) {
 800148c:	2300      	movs	r3, #0
 800148e:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8001492:	e00e      	b.n	80014b2 <solveMaze+0x3b6>
        free(visited[i]);
 8001494:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800149e:	4413      	add	r3, r2
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 fb8c 	bl	8004bc0 <free>
    for (i = 0; i < maze->rows; i++) {
 80014a8:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80014ac:	3301      	adds	r3, #1
 80014ae:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 80014bc:	429a      	cmp	r2, r3
 80014be:	d3e9      	bcc.n	8001494 <solveMaze+0x398>
    }
    free(visited);
 80014c0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80014c4:	f003 fb7c 	bl	8004bc0 <free>
    free(queue);
 80014c8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80014cc:	f003 fb78 	bl	8004bc0 <free>
}
 80014d0:	bf00      	nop
 80014d2:	37cc      	adds	r7, #204	; 0xcc
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}

080014d8 <initPRNG>:
#include "prng.h"

PseudoRNG rng;

/* init PRNG with a pre-generated list of random numbers */
void initPRNG(PseudoRNG* rng, int* numbers, int size) {
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
    rng->num = numbers;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	601a      	str	r2, [r3, #0]
    rng->ind = 0;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	605a      	str	r2, [r3, #4]
    rng->size = size;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	609a      	str	r2, [r3, #8]
}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <getRand>:

/* get next random number */
int getRand(PseudoRNG *rng) {
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
    rng->ind = (rng->ind + 1) % rng->size;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	3301      	adds	r3, #1
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6892      	ldr	r2, [r2, #8]
 8001514:	fb93 f1f2 	sdiv	r1, r3, r2
 8001518:	fb01 f202 	mul.w	r2, r1, r2
 800151c:	1a9a      	subs	r2, r3, r2
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	605a      	str	r2, [r3, #4]
    return rng->num[rng->ind];
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <HAL_MspInit+0x4c>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <HAL_MspInit+0x4c>)
 800154c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <HAL_MspInit+0x4c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_MspInit+0x4c>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a08      	ldr	r2, [pc, #32]	; (8001588 <HAL_MspInit+0x4c>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_MspInit+0x4c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800157a:	2007      	movs	r0, #7
 800157c:	f000 fd2e 	bl	8001fdc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800

0800158c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a44      	ldr	r2, [pc, #272]	; (80016bc <HAL_SPI_MspInit+0x130>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	f040 8081 	bne.w	80016b2 <HAL_SPI_MspInit+0x126>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	4b42      	ldr	r3, [pc, #264]	; (80016c0 <HAL_SPI_MspInit+0x134>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	4a41      	ldr	r2, [pc, #260]	; (80016c0 <HAL_SPI_MspInit+0x134>)
 80015ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015be:	6413      	str	r3, [r2, #64]	; 0x40
 80015c0:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <HAL_SPI_MspInit+0x134>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <HAL_SPI_MspInit+0x134>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	4a3a      	ldr	r2, [pc, #232]	; (80016c0 <HAL_SPI_MspInit+0x134>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	6313      	str	r3, [r2, #48]	; 0x30
 80015dc:	4b38      	ldr	r3, [pc, #224]	; (80016c0 <HAL_SPI_MspInit+0x134>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <HAL_SPI_MspInit+0x134>)
 80015ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f0:	4a33      	ldr	r2, [pc, #204]	; (80016c0 <HAL_SPI_MspInit+0x134>)
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	6313      	str	r3, [r2, #48]	; 0x30
 80015f8:	4b31      	ldr	r3, [pc, #196]	; (80016c0 <HAL_SPI_MspInit+0x134>)
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001604:	2308      	movs	r3, #8
 8001606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001614:	2305      	movs	r3, #5
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4829      	ldr	r0, [pc, #164]	; (80016c4 <HAL_SPI_MspInit+0x138>)
 8001620:	f001 f8b0 	bl	8002784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001636:	2305      	movs	r3, #5
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4821      	ldr	r0, [pc, #132]	; (80016c8 <HAL_SPI_MspInit+0x13c>)
 8001642:	f001 f89f 	bl	8002784 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001646:	4b21      	ldr	r3, [pc, #132]	; (80016cc <HAL_SPI_MspInit+0x140>)
 8001648:	4a21      	ldr	r2, [pc, #132]	; (80016d0 <HAL_SPI_MspInit+0x144>)
 800164a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <HAL_SPI_MspInit+0x140>)
 800164e:	2200      	movs	r2, #0
 8001650:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <HAL_SPI_MspInit+0x140>)
 8001654:	2240      	movs	r2, #64	; 0x40
 8001656:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001658:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <HAL_SPI_MspInit+0x140>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800165e:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_SPI_MspInit+0x140>)
 8001660:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001664:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_SPI_MspInit+0x140>)
 8001668:	2200      	movs	r2, #0
 800166a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <HAL_SPI_MspInit+0x140>)
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001672:	4b16      	ldr	r3, [pc, #88]	; (80016cc <HAL_SPI_MspInit+0x140>)
 8001674:	2200      	movs	r2, #0
 8001676:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_SPI_MspInit+0x140>)
 800167a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800167e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_SPI_MspInit+0x140>)
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001686:	4811      	ldr	r0, [pc, #68]	; (80016cc <HAL_SPI_MspInit+0x140>)
 8001688:	f000 fcea 	bl	8002060 <HAL_DMA_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8001692:	f7ff facd 	bl	8000c30 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <HAL_SPI_MspInit+0x140>)
 800169a:	649a      	str	r2, [r3, #72]	; 0x48
 800169c:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <HAL_SPI_MspInit+0x140>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	2024      	movs	r0, #36	; 0x24
 80016a8:	f000 fca3 	bl	8001ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80016ac:	2024      	movs	r0, #36	; 0x24
 80016ae:	f000 fcbc 	bl	800202a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80016b2:	bf00      	nop
 80016b4:	3728      	adds	r7, #40	; 0x28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40003800 	.word	0x40003800
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020800 	.word	0x40020800
 80016c8:	40020400 	.word	0x40020400
 80016cc:	20001074 	.word	0x20001074
 80016d0:	40026070 	.word	0x40026070

080016d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f4:	d164      	bne.n	80017c0 <HAL_TIM_Base_MspInit+0xec>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <HAL_TIM_Base_MspInit+0x11c>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a3c      	ldr	r2, [pc, #240]	; (80017f0 <HAL_TIM_Base_MspInit+0x11c>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b3a      	ldr	r3, [pc, #232]	; (80017f0 <HAL_TIM_Base_MspInit+0x11c>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b36      	ldr	r3, [pc, #216]	; (80017f0 <HAL_TIM_Base_MspInit+0x11c>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a35      	ldr	r2, [pc, #212]	; (80017f0 <HAL_TIM_Base_MspInit+0x11c>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <HAL_TIM_Base_MspInit+0x11c>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800172e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001740:	2301      	movs	r3, #1
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	482a      	ldr	r0, [pc, #168]	; (80017f4 <HAL_TIM_Base_MspInit+0x120>)
 800174c:	f001 f81a 	bl	8002784 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 8001750:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <HAL_TIM_Base_MspInit+0x124>)
 8001752:	4a2a      	ldr	r2, [pc, #168]	; (80017fc <HAL_TIM_Base_MspInit+0x128>)
 8001754:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 8001756:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <HAL_TIM_Base_MspInit+0x124>)
 8001758:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800175c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_TIM_Base_MspInit+0x124>)
 8001760:	2240      	movs	r2, #64	; 0x40
 8001762:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001764:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <HAL_TIM_Base_MspInit+0x124>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 800176a:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <HAL_TIM_Base_MspInit+0x124>)
 800176c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001770:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <HAL_TIM_Base_MspInit+0x124>)
 8001774:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001778:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800177a:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <HAL_TIM_Base_MspInit+0x124>)
 800177c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001780:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_TIM_Base_MspInit+0x124>)
 8001784:	2200      	movs	r2, #0
 8001786:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_TIM_Base_MspInit+0x124>)
 800178a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800178e:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <HAL_TIM_Base_MspInit+0x124>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 8001796:	4818      	ldr	r0, [pc, #96]	; (80017f8 <HAL_TIM_Base_MspInit+0x124>)
 8001798:	f000 fc62 	bl	8002060 <HAL_DMA_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_TIM_Base_MspInit+0xd2>
    {
      Error_Handler();
 80017a2:	f7ff fa45 	bl	8000c30 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a13      	ldr	r2, [pc, #76]	; (80017f8 <HAL_TIM_Base_MspInit+0x124>)
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80017ac:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <HAL_TIM_Base_MspInit+0x124>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <HAL_TIM_Base_MspInit+0x124>)
 80017b6:	621a      	str	r2, [r3, #32]
 80017b8:	4a0f      	ldr	r2, [pc, #60]	; (80017f8 <HAL_TIM_Base_MspInit+0x124>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017be:	e012      	b.n	80017e6 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0e      	ldr	r2, [pc, #56]	; (8001800 <HAL_TIM_Base_MspInit+0x12c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d10d      	bne.n	80017e6 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HAL_TIM_Base_MspInit+0x11c>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <HAL_TIM_Base_MspInit+0x11c>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_TIM_Base_MspInit+0x11c>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
}
 80017e6:	bf00      	nop
 80017e8:	3728      	adds	r7, #40	; 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020000 	.word	0x40020000
 80017f8:	20001164 	.word	0x20001164
 80017fc:	40026028 	.word	0x40026028
 8001800:	40000400 	.word	0x40000400

08001804 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001824:	d11e      	bne.n	8001864 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_TIM_MspPostInit+0x68>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a0f      	ldr	r2, [pc, #60]	; (800186c <HAL_TIM_MspPostInit+0x68>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_TIM_MspPostInit+0x68>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001846:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001854:	2301      	movs	r3, #1
 8001856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4619      	mov	r1, r3
 800185e:	4804      	ldr	r0, [pc, #16]	; (8001870 <HAL_TIM_MspPostInit+0x6c>)
 8001860:	f000 ff90 	bl	8002784 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001864:	bf00      	nop
 8001866:	3720      	adds	r7, #32
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	40020400 	.word	0x40020400

08001874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a19      	ldr	r2, [pc, #100]	; (80018f8 <HAL_UART_MspInit+0x84>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d12b      	bne.n	80018ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <HAL_UART_MspInit+0x88>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a17      	ldr	r2, [pc, #92]	; (80018fc <HAL_UART_MspInit+0x88>)
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_UART_MspInit+0x88>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_UART_MspInit+0x88>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a10      	ldr	r2, [pc, #64]	; (80018fc <HAL_UART_MspInit+0x88>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HAL_UART_MspInit+0x88>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ce:	230c      	movs	r3, #12
 80018d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018de:	2307      	movs	r3, #7
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	4805      	ldr	r0, [pc, #20]	; (8001900 <HAL_UART_MspInit+0x8c>)
 80018ea:	f000 ff4b 	bl	8002784 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018ee:	bf00      	nop
 80018f0:	3728      	adds	r7, #40	; 0x28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40004400 	.word	0x40004400
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020000 	.word	0x40020000

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <NMI_Handler+0x4>

0800190a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <HardFault_Handler+0x4>

08001910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <MemManage_Handler+0x4>

08001916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <BusFault_Handler+0x4>

0800191c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <UsageFault_Handler+0x4>

08001922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001950:	f000 fa30 	bl	8001db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <DMA1_Stream1_IRQHandler+0x10>)
 800195e:	f000 fca7 	bl	80022b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20001164 	.word	0x20001164

0800196c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <DMA1_Stream4_IRQHandler+0x10>)
 8001972:	f000 fc9d 	bl	80022b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20001074 	.word	0x20001074

08001980 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <SPI2_IRQHandler+0x10>)
 8001986:	f001 fe73 	bl	8003670 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2000101c 	.word	0x2000101c

08001994 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800199e:	f003 f9db 	bl	8004d58 <__errno>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2216      	movs	r2, #22
 80019a6:	601a      	str	r2, [r3, #0]
  return -1;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_exit>:

void _exit (int status)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ffe7 	bl	8001994 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019c6:	e7fe      	b.n	80019c6 <_exit+0x12>

080019c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d0:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <_sbrk+0x5c>)
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <_sbrk+0x60>)
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <_sbrk+0x64>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <_sbrk+0x68>)
 80019e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d207      	bcs.n	8001a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f8:	f003 f9ae 	bl	8004d58 <__errno>
 80019fc:	4603      	mov	r3, r0
 80019fe:	220c      	movs	r2, #12
 8001a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a06:	e009      	b.n	8001a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <_sbrk+0x64>)
 8001a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20018000 	.word	0x20018000
 8001a28:	00000400 	.word	0x00000400
 8001a2c:	20001244 	.word	0x20001244
 8001a30:	20006dd8 	.word	0x20006dd8

08001a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <SystemInit+0x20>)
 8001a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3e:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <SystemInit+0x20>)
 8001a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <ws2812_init>:

uint8_t ws2812_buffer[WS2812_BUFFER_SIZE];

// set all pixels to 0 (off)
void ws2812_init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
  memset(ws2812_buffer, 0, WS2812_BUFFER_SIZE); // fill buffer with 0s
 8001a5e:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8001a62:	2100      	movs	r1, #0
 8001a64:	480b      	ldr	r0, [pc, #44]	; (8001a94 <ws2812_init+0x3c>)
 8001a66:	f003 f95f 	bl	8004d28 <memset>
  HAL_SPI_Transmit_DMA(&hspi2, ws2812_buffer, WS2812_BUFFER_SIZE); // write buffer to LEDs
 8001a6a:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8001a6e:	4909      	ldr	r1, [pc, #36]	; (8001a94 <ws2812_init+0x3c>)
 8001a70:	4809      	ldr	r0, [pc, #36]	; (8001a98 <ws2812_init+0x40>)
 8001a72:	f001 fd47 	bl	8003504 <HAL_SPI_Transmit_DMA>
  ws2812_pixel_all(&(ColorRGB_t){0, 0, 0}); // set LEDs to black
 8001a76:	2300      	movs	r3, #0
 8001a78:	713b      	strb	r3, [r7, #4]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	717b      	strb	r3, [r7, #5]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	71bb      	strb	r3, [r7, #6]
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 f879 	bl	8001b7c <ws2812_pixel_all>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20001248 	.word	0x20001248
 8001a98:	2000101c 	.word	0x2000101c

08001a9c <ws2812_pixel>:

// set one pixel to given color
void ws2812_pixel(uint8_t _x, uint8_t _y, ColorRGB_t* color)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	603a      	str	r2, [r7, #0]
 8001aa6:	71fb      	strb	r3, [r7, #7]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	71bb      	strb	r3, [r7, #6]
  uint8_t* ptr = &ws2812_buffer[24 * coord2Index(_x, _y)];
 8001aac:	79ba      	ldrb	r2, [r7, #6]
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f8de 	bl	8001c74 <coord2Index>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b2c      	ldr	r3, [pc, #176]	; (8001b78 <ws2812_pixel+0xdc>)
 8001ac8:	4413      	add	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]
  WS2812_FILL_BUFFER(color->g);
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	72fb      	strb	r3, [r7, #11]
 8001ad0:	e014      	b.n	8001afc <ws2812_pixel+0x60>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	789a      	ldrb	r2, [r3, #2]
 8001ad6:	7afb      	ldrb	r3, [r7, #11]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <ws2812_pixel+0x50>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	60fa      	str	r2, [r7, #12]
 8001ae6:	22fc      	movs	r2, #252	; 0xfc
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	e004      	b.n	8001af6 <ws2812_pixel+0x5a>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	60fa      	str	r2, [r7, #12]
 8001af2:	2280      	movs	r2, #128	; 0x80
 8001af4:	701a      	strb	r2, [r3, #0]
 8001af6:	7afb      	ldrb	r3, [r7, #11]
 8001af8:	085b      	lsrs	r3, r3, #1
 8001afa:	72fb      	strb	r3, [r7, #11]
 8001afc:	7afb      	ldrb	r3, [r7, #11]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1e7      	bne.n	8001ad2 <ws2812_pixel+0x36>
  WS2812_FILL_BUFFER(color->r);
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	72bb      	strb	r3, [r7, #10]
 8001b06:	e014      	b.n	8001b32 <ws2812_pixel+0x96>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	785a      	ldrb	r2, [r3, #1]
 8001b0c:	7abb      	ldrb	r3, [r7, #10]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d005      	beq.n	8001b22 <ws2812_pixel+0x86>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	60fa      	str	r2, [r7, #12]
 8001b1c:	22fc      	movs	r2, #252	; 0xfc
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	e004      	b.n	8001b2c <ws2812_pixel+0x90>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	60fa      	str	r2, [r7, #12]
 8001b28:	2280      	movs	r2, #128	; 0x80
 8001b2a:	701a      	strb	r2, [r3, #0]
 8001b2c:	7abb      	ldrb	r3, [r7, #10]
 8001b2e:	085b      	lsrs	r3, r3, #1
 8001b30:	72bb      	strb	r3, [r7, #10]
 8001b32:	7abb      	ldrb	r3, [r7, #10]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e7      	bne.n	8001b08 <ws2812_pixel+0x6c>
  WS2812_FILL_BUFFER(color->b);
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	727b      	strb	r3, [r7, #9]
 8001b3c:	e014      	b.n	8001b68 <ws2812_pixel+0xcc>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	781a      	ldrb	r2, [r3, #0]
 8001b42:	7a7b      	ldrb	r3, [r7, #9]
 8001b44:	4013      	ands	r3, r2
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <ws2812_pixel+0xbc>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	60fa      	str	r2, [r7, #12]
 8001b52:	22fc      	movs	r2, #252	; 0xfc
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	e004      	b.n	8001b62 <ws2812_pixel+0xc6>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	60fa      	str	r2, [r7, #12]
 8001b5e:	2280      	movs	r2, #128	; 0x80
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	7a7b      	ldrb	r3, [r7, #9]
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	727b      	strb	r3, [r7, #9]
 8001b68:	7a7b      	ldrb	r3, [r7, #9]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1e7      	bne.n	8001b3e <ws2812_pixel+0xa2>
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20001248 	.word	0x20001248

08001b7c <ws2812_pixel_all>:

// set all pixels to given color
void ws2812_pixel_all(ColorRGB_t* color)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint8_t* ptr = ws2812_buffer;
 8001b84:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <ws2812_pixel_all+0xd0>)
 8001b86:	617b      	str	r3, [r7, #20]
  for (uint16_t i = 0; i < WS2812_NUM_LEDS; ++i) 
 8001b88:	2300      	movs	r3, #0
 8001b8a:	827b      	strh	r3, [r7, #18]
 8001b8c:	e053      	b.n	8001c36 <ws2812_pixel_all+0xba>
  {
    WS2812_FILL_BUFFER(color->g);
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	747b      	strb	r3, [r7, #17]
 8001b92:	e014      	b.n	8001bbe <ws2812_pixel_all+0x42>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	789a      	ldrb	r2, [r3, #2]
 8001b98:	7c7b      	ldrb	r3, [r7, #17]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <ws2812_pixel_all+0x32>
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	617a      	str	r2, [r7, #20]
 8001ba8:	22fc      	movs	r2, #252	; 0xfc
 8001baa:	701a      	strb	r2, [r3, #0]
 8001bac:	e004      	b.n	8001bb8 <ws2812_pixel_all+0x3c>
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	617a      	str	r2, [r7, #20]
 8001bb4:	2280      	movs	r2, #128	; 0x80
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	7c7b      	ldrb	r3, [r7, #17]
 8001bba:	085b      	lsrs	r3, r3, #1
 8001bbc:	747b      	strb	r3, [r7, #17]
 8001bbe:	7c7b      	ldrb	r3, [r7, #17]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1e7      	bne.n	8001b94 <ws2812_pixel_all+0x18>
    WS2812_FILL_BUFFER(color->r);
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	743b      	strb	r3, [r7, #16]
 8001bc8:	e014      	b.n	8001bf4 <ws2812_pixel_all+0x78>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	785a      	ldrb	r2, [r3, #1]
 8001bce:	7c3b      	ldrb	r3, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <ws2812_pixel_all+0x68>
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	617a      	str	r2, [r7, #20]
 8001bde:	22fc      	movs	r2, #252	; 0xfc
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	e004      	b.n	8001bee <ws2812_pixel_all+0x72>
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	617a      	str	r2, [r7, #20]
 8001bea:	2280      	movs	r2, #128	; 0x80
 8001bec:	701a      	strb	r2, [r3, #0]
 8001bee:	7c3b      	ldrb	r3, [r7, #16]
 8001bf0:	085b      	lsrs	r3, r3, #1
 8001bf2:	743b      	strb	r3, [r7, #16]
 8001bf4:	7c3b      	ldrb	r3, [r7, #16]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1e7      	bne.n	8001bca <ws2812_pixel_all+0x4e>
    WS2812_FILL_BUFFER(color->b);
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	73fb      	strb	r3, [r7, #15]
 8001bfe:	e014      	b.n	8001c2a <ws2812_pixel_all+0xae>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	781a      	ldrb	r2, [r3, #0]
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	4013      	ands	r3, r2
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d005      	beq.n	8001c1a <ws2812_pixel_all+0x9e>
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	617a      	str	r2, [r7, #20]
 8001c14:	22fc      	movs	r2, #252	; 0xfc
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	e004      	b.n	8001c24 <ws2812_pixel_all+0xa8>
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	617a      	str	r2, [r7, #20]
 8001c20:	2280      	movs	r2, #128	; 0x80
 8001c22:	701a      	strb	r2, [r3, #0]
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	085b      	lsrs	r3, r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1e7      	bne.n	8001c00 <ws2812_pixel_all+0x84>
  for (uint16_t i = 0; i < WS2812_NUM_LEDS; ++i) 
 8001c30:	8a7b      	ldrh	r3, [r7, #18]
 8001c32:	3301      	adds	r3, #1
 8001c34:	827b      	strh	r3, [r7, #18]
 8001c36:	8a7b      	ldrh	r3, [r7, #18]
 8001c38:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8001c3c:	d3a7      	bcc.n	8001b8e <ws2812_pixel_all+0x12>
  }
}
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	20001248 	.word	0x20001248

08001c50 <HAL_SPI_TxCpltCallback>:
    }
  }
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  // Restart transmission when buffer tx is completed
  HAL_SPI_Transmit_DMA(&hspi2, ws2812_buffer, WS2812_BUFFER_SIZE);
 8001c58:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8001c5c:	4903      	ldr	r1, [pc, #12]	; (8001c6c <HAL_SPI_TxCpltCallback+0x1c>)
 8001c5e:	4804      	ldr	r0, [pc, #16]	; (8001c70 <HAL_SPI_TxCpltCallback+0x20>)
 8001c60:	f001 fc50 	bl	8003504 <HAL_SPI_Transmit_DMA>
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20001248 	.word	0x20001248
 8001c70:	2000101c 	.word	0x2000101c

08001c74 <coord2Index>:

uint16_t coord2Index (uint8_t _x, uint8_t _y)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	460a      	mov	r2, r1
 8001c7e:	71fb      	strb	r3, [r7, #7]
 8001c80:	4613      	mov	r3, r2
 8001c82:	71bb      	strb	r3, [r7, #6]
{ 176,177,178,179,180,181,182,183,368,369,370,371,372,373,374,375,560,561,562,563,564,565,566,567,752,753,754,755,756,757,758,759,944,945,946,947,948,949,950,951 },
{ 184,185,186,187,188,189,190,191,376,377,378,379,380,381,382,383,568,569,570,571,572,573,574,575,760,761,762,763,764,765,766,767,952,953,954,955,956,957,958,959 }

};

  if (_x > WS2812_NUM_LEDS_X - 1) _x = WS2812_NUM_LEDS_X - 1;
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	2b27      	cmp	r3, #39	; 0x27
 8001c88:	d901      	bls.n	8001c8e <coord2Index+0x1a>
 8001c8a:	2327      	movs	r3, #39	; 0x27
 8001c8c:	71fb      	strb	r3, [r7, #7]
  if (_y > WS2812_NUM_LEDS_Y - 1) _y = WS2812_NUM_LEDS_Y - 1;
 8001c8e:	79bb      	ldrb	r3, [r7, #6]
 8001c90:	2b17      	cmp	r3, #23
 8001c92:	d901      	bls.n	8001c98 <coord2Index+0x24>
 8001c94:	2317      	movs	r3, #23
 8001c96:	71bb      	strb	r3, [r7, #6]

  return lookup_table[_y][_x];
 8001c98:	79ba      	ldrb	r2, [r7, #6]
 8001c9a:	79f9      	ldrb	r1, [r7, #7]
 8001c9c:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <coord2Index+0x44>)
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	08004eb0 	.word	0x08004eb0

08001cbc <Reset_Handler>:
 8001cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf4 <LoopFillZerobss+0x12>
 8001cc0:	480d      	ldr	r0, [pc, #52]	; (8001cf8 <LoopFillZerobss+0x16>)
 8001cc2:	490e      	ldr	r1, [pc, #56]	; (8001cfc <LoopFillZerobss+0x1a>)
 8001cc4:	4a0e      	ldr	r2, [pc, #56]	; (8001d00 <LoopFillZerobss+0x1e>)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e002      	b.n	8001cd0 <LoopCopyDataInit>

08001cca <CopyDataInit>:
 8001cca:	58d4      	ldr	r4, [r2, r3]
 8001ccc:	50c4      	str	r4, [r0, r3]
 8001cce:	3304      	adds	r3, #4

08001cd0 <LoopCopyDataInit>:
 8001cd0:	18c4      	adds	r4, r0, r3
 8001cd2:	428c      	cmp	r4, r1
 8001cd4:	d3f9      	bcc.n	8001cca <CopyDataInit>
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <LoopFillZerobss+0x22>)
 8001cd8:	4c0b      	ldr	r4, [pc, #44]	; (8001d08 <LoopFillZerobss+0x26>)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e001      	b.n	8001ce2 <LoopFillZerobss>

08001cde <FillZerobss>:
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	3204      	adds	r2, #4

08001ce2 <LoopFillZerobss>:
 8001ce2:	42a2      	cmp	r2, r4
 8001ce4:	d3fb      	bcc.n	8001cde <FillZerobss>
 8001ce6:	f7ff fea5 	bl	8001a34 <SystemInit>
 8001cea:	f003 f83b 	bl	8004d64 <__libc_init_array>
 8001cee:	f7fe fc4d 	bl	800058c <main>
 8001cf2:	4770      	bx	lr
 8001cf4:	20018000 	.word	0x20018000
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000ff8 	.word	0x20000ff8
 8001d00:	08005648 	.word	0x08005648
 8001d04:	20000ff8 	.word	0x20000ff8
 8001d08:	20006dd4 	.word	0x20006dd4

08001d0c <ADC_IRQHandler>:
 8001d0c:	e7fe      	b.n	8001d0c <ADC_IRQHandler>
	...

08001d10 <HAL_Init>:
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_Init+0x40>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0d      	ldr	r2, [pc, #52]	; (8001d50 <HAL_Init+0x40>)
 8001d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_Init+0x40>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <HAL_Init+0x40>)
 8001d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <HAL_Init+0x40>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a07      	ldr	r2, [pc, #28]	; (8001d50 <HAL_Init+0x40>)
 8001d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	2003      	movs	r0, #3
 8001d3a:	f000 f94f 	bl	8001fdc <HAL_NVIC_SetPriorityGrouping>
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f000 f808 	bl	8001d54 <HAL_InitTick>
 8001d44:	f7ff fbfa 	bl	800153c <HAL_MspInit>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023c00 	.word	0x40023c00

08001d54 <HAL_InitTick>:
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_InitTick+0x54>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_InitTick+0x58>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4619      	mov	r1, r3
 8001d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 f967 	bl	8002046 <HAL_SYSTICK_Config>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_InitTick+0x2e>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00e      	b.n	8001da0 <HAL_InitTick+0x4c>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b0f      	cmp	r3, #15
 8001d86:	d80a      	bhi.n	8001d9e <HAL_InitTick+0x4a>
 8001d88:	2200      	movs	r2, #0
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d90:	f000 f92f 	bl	8001ff2 <HAL_NVIC_SetPriority>
 8001d94:	4a06      	ldr	r2, [pc, #24]	; (8001db0 <HAL_InitTick+0x5c>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e000      	b.n	8001da0 <HAL_InitTick+0x4c>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000f9c 	.word	0x20000f9c
 8001dac:	20000fa4 	.word	0x20000fa4
 8001db0:	20000fa0 	.word	0x20000fa0

08001db4 <HAL_IncTick>:
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_IncTick+0x20>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_IncTick+0x24>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4a04      	ldr	r2, [pc, #16]	; (8001dd8 <HAL_IncTick+0x24>)
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000fa4 	.word	0x20000fa4
 8001dd8:	20006c84 	.word	0x20006c84

08001ddc <HAL_GetTick>:
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <HAL_GetTick+0x14>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20006c84 	.word	0x20006c84

08001df4 <HAL_Delay>:
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	f7ff ffee 	bl	8001ddc <HAL_GetTick>
 8001e00:	60b8      	str	r0, [r7, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e0c:	d005      	beq.n	8001e1a <HAL_Delay+0x26>
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <HAL_Delay+0x44>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4413      	add	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	bf00      	nop
 8001e1c:	f7ff ffde 	bl	8001ddc <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d8f7      	bhi.n	8001e1c <HAL_Delay+0x28>
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000fa4 	.word	0x20000fa4

08001e3c <__NVIC_SetPriorityGrouping>:
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	021a      	lsls	r2, r3, #8
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	60d3      	str	r3, [r2, #12]
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_GetPriorityGrouping>:
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <__NVIC_GetPriorityGrouping+0x18>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_EnableIRQ>:
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	db0b      	blt.n	8001eca <__NVIC_EnableIRQ+0x2a>
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	f003 021f 	and.w	r2, r3, #31
 8001eb8:	4907      	ldr	r1, [pc, #28]	; (8001ed8 <__NVIC_EnableIRQ+0x38>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000e100 	.word	0xe000e100

08001edc <__NVIC_SetPriority>:
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	db0a      	blt.n	8001f06 <__NVIC_SetPriority+0x2a>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	490c      	ldr	r1, [pc, #48]	; (8001f28 <__NVIC_SetPriority+0x4c>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	0112      	lsls	r2, r2, #4
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	440b      	add	r3, r1
 8001f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001f04:	e00a      	b.n	8001f1c <__NVIC_SetPriority+0x40>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4908      	ldr	r1, [pc, #32]	; (8001f2c <__NVIC_SetPriority+0x50>)
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	3b04      	subs	r3, #4
 8001f14:	0112      	lsls	r2, r2, #4
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	440b      	add	r3, r1
 8001f1a:	761a      	strb	r2, [r3, #24]
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000e100 	.word	0xe000e100
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <NVIC_EncodePriority>:
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f1c3 0307 	rsb	r3, r3, #7
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	bf28      	it	cs
 8001f4e:	2304      	movcs	r3, #4
 8001f50:	61bb      	str	r3, [r7, #24]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3304      	adds	r3, #4
 8001f56:	2b06      	cmp	r3, #6
 8001f58:	d902      	bls.n	8001f60 <NVIC_EncodePriority+0x30>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3b03      	subs	r3, #3
 8001f5e:	e000      	b.n	8001f62 <NVIC_EncodePriority+0x32>
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	401a      	ands	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	409a      	lsls	r2, r3
 8001f78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	43d9      	mvns	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	400b      	ands	r3, r1
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3724      	adds	r7, #36	; 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <SysTick_Config>:
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa8:	d301      	bcc.n	8001fae <SysTick_Config+0x16>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00f      	b.n	8001fce <SysTick_Config+0x36>
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <SysTick_Config+0x40>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	6053      	str	r3, [r2, #4]
 8001fb6:	210f      	movs	r1, #15
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fbc:	f7ff ff8e 	bl	8001edc <__NVIC_SetPriority>
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <SysTick_Config+0x40>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <SysTick_Config+0x40>)
 8001fc8:	2207      	movs	r2, #7
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	e000e010 	.word	0xe000e010

08001fdc <HAL_NVIC_SetPriorityGrouping>:
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ff29 	bl	8001e3c <__NVIC_SetPriorityGrouping>
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_SetPriority>:
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	73fb      	strb	r3, [r7, #15]
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	f7ff ff3e 	bl	8001e84 <__NVIC_GetPriorityGrouping>
 8002008:	6178      	str	r0, [r7, #20]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	6978      	ldr	r0, [r7, #20]
 8002010:	f7ff ff8e 	bl	8001f30 <NVIC_EncodePriority>
 8002014:	4602      	mov	r2, r0
 8002016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff5d 	bl	8001edc <__NVIC_SetPriority>
 8002022:	bf00      	nop
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_EnableIRQ>:
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	71fb      	strb	r3, [r7, #7]
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff31 	bl	8001ea0 <__NVIC_EnableIRQ>
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_SYSTICK_Config>:
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ffa2 	bl	8001f98 <SysTick_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_DMA_Init>:
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	f7ff feb6 	bl	8001ddc <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_DMA_Init+0x1c>
 8002078:	2301      	movs	r3, #1
 800207a:	e099      	b.n	80021b0 <HAL_DMA_Init+0x150>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e00f      	b.n	80020be <HAL_DMA_Init+0x5e>
 800209e:	f7ff fe9d 	bl	8001ddc <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b05      	cmp	r3, #5
 80020aa:	d908      	bls.n	80020be <HAL_DMA_Init+0x5e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2203      	movs	r2, #3
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80020ba:	2303      	movs	r3, #3
 80020bc:	e078      	b.n	80021b0 <HAL_DMA_Init+0x150>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1e8      	bne.n	800209e <HAL_DMA_Init+0x3e>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	4b38      	ldr	r3, [pc, #224]	; (80021b8 <HAL_DMA_Init+0x158>)
 80020d8:	4013      	ands	r3, r2
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4313      	orrs	r3, r2
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	2b04      	cmp	r3, #4
 8002116:	d107      	bne.n	8002128 <HAL_DMA_Init+0xc8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	4313      	orrs	r3, r2
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	4313      	orrs	r3, r2
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f023 0307 	bic.w	r3, r3, #7
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	4313      	orrs	r3, r2
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	2b04      	cmp	r3, #4
 8002150:	d117      	bne.n	8002182 <HAL_DMA_Init+0x122>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4313      	orrs	r3, r2
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00e      	beq.n	8002182 <HAL_DMA_Init+0x122>
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 fa91 	bl	800268c <DMA_CheckFifoParam>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_DMA_Init+0x122>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2240      	movs	r2, #64	; 0x40
 8002174:	655a      	str	r2, [r3, #84]	; 0x54
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800217e:	2301      	movs	r3, #1
 8002180:	e016      	b.n	80021b0 <HAL_DMA_Init+0x150>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	615a      	str	r2, [r3, #20]
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fa48 	bl	8002620 <DMA_CalcBaseAndBitshift>
 8002190:	4603      	mov	r3, r0
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002198:	223f      	movs	r2, #63	; 0x3f
 800219a:	409a      	lsls	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80021ae:	2300      	movs	r3, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	f010803f 	.word	0xf010803f

080021bc <HAL_DMA_Start_IT>:
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
 80021ca:	2300      	movs	r3, #0
 80021cc:	75fb      	strb	r3, [r7, #23]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_DMA_Start_IT+0x26>
 80021de:	2302      	movs	r3, #2
 80021e0:	e040      	b.n	8002264 <HAL_DMA_Start_IT+0xa8>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d12f      	bne.n	8002256 <HAL_DMA_Start_IT+0x9a>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2202      	movs	r2, #2
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	655a      	str	r2, [r3, #84]	; 0x54
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f9da 	bl	80025c4 <DMA_SetConfig>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002214:	223f      	movs	r2, #63	; 0x3f
 8002216:	409a      	lsls	r2, r3
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0216 	orr.w	r2, r2, #22
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	2b00      	cmp	r3, #0
 8002232:	d007      	beq.n	8002244 <HAL_DMA_Start_IT+0x88>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0208 	orr.w	r2, r2, #8
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	e005      	b.n	8002262 <HAL_DMA_Start_IT+0xa6>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800225e:	2302      	movs	r3, #2
 8002260:	75fb      	strb	r3, [r7, #23]
 8002262:	7dfb      	ldrb	r3, [r7, #23]
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_DMA_Abort_IT>:
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d004      	beq.n	800228a <HAL_DMA_Abort_IT+0x1e>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2280      	movs	r2, #128	; 0x80
 8002284:	655a      	str	r2, [r3, #84]	; 0x54
 8002286:	2301      	movs	r3, #1
 8002288:	e00c      	b.n	80022a4 <HAL_DMA_Abort_IT+0x38>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2205      	movs	r2, #5
 800228e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0201 	bic.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	2300      	movs	r3, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_DMA_IRQHandler>:
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	4b8e      	ldr	r3, [pc, #568]	; (80024f8 <HAL_DMA_IRQHandler+0x248>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a8e      	ldr	r2, [pc, #568]	; (80024fc <HAL_DMA_IRQHandler+0x24c>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	0a9b      	lsrs	r3, r3, #10
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	2208      	movs	r2, #8
 80022dc:	409a      	lsls	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d01a      	beq.n	800231c <HAL_DMA_IRQHandler+0x6c>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d013      	beq.n	800231c <HAL_DMA_IRQHandler+0x6c>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0204 	bic.w	r2, r2, #4
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002308:	2208      	movs	r2, #8
 800230a:	409a      	lsls	r2, r3
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	655a      	str	r2, [r3, #84]	; 0x54
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002320:	2201      	movs	r2, #1
 8002322:	409a      	lsls	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d012      	beq.n	8002352 <HAL_DMA_IRQHandler+0xa2>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00b      	beq.n	8002352 <HAL_DMA_IRQHandler+0xa2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233e:	2201      	movs	r2, #1
 8002340:	409a      	lsls	r2, r3
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234a:	f043 0202 	orr.w	r2, r3, #2
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002356:	2204      	movs	r2, #4
 8002358:	409a      	lsls	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d012      	beq.n	8002388 <HAL_DMA_IRQHandler+0xd8>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00b      	beq.n	8002388 <HAL_DMA_IRQHandler+0xd8>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002374:	2204      	movs	r2, #4
 8002376:	409a      	lsls	r2, r3
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002380:	f043 0204 	orr.w	r2, r3, #4
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	655a      	str	r2, [r3, #84]	; 0x54
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238c:	2210      	movs	r2, #16
 800238e:	409a      	lsls	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d043      	beq.n	8002420 <HAL_DMA_IRQHandler+0x170>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d03c      	beq.n	8002420 <HAL_DMA_IRQHandler+0x170>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023aa:	2210      	movs	r2, #16
 80023ac:	409a      	lsls	r2, r3
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d018      	beq.n	80023f2 <HAL_DMA_IRQHandler+0x142>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d108      	bne.n	80023e0 <HAL_DMA_IRQHandler+0x130>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d024      	beq.n	8002420 <HAL_DMA_IRQHandler+0x170>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	4798      	blx	r3
 80023de:	e01f      	b.n	8002420 <HAL_DMA_IRQHandler+0x170>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01b      	beq.n	8002420 <HAL_DMA_IRQHandler+0x170>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	4798      	blx	r3
 80023f0:	e016      	b.n	8002420 <HAL_DMA_IRQHandler+0x170>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d107      	bne.n	8002410 <HAL_DMA_IRQHandler+0x160>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0208 	bic.w	r2, r2, #8
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_DMA_IRQHandler+0x170>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	4798      	blx	r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	2220      	movs	r2, #32
 8002426:	409a      	lsls	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 808f 	beq.w	8002550 <HAL_DMA_IRQHandler+0x2a0>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8087 	beq.w	8002550 <HAL_DMA_IRQHandler+0x2a0>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002446:	2220      	movs	r2, #32
 8002448:	409a      	lsls	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	609a      	str	r2, [r3, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b05      	cmp	r3, #5
 8002458:	d136      	bne.n	80024c8 <HAL_DMA_IRQHandler+0x218>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0216 	bic.w	r2, r2, #22
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002478:	615a      	str	r2, [r3, #20]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d103      	bne.n	800248a <HAL_DMA_IRQHandler+0x1da>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <HAL_DMA_IRQHandler+0x1ea>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0208 	bic.w	r2, r2, #8
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249e:	223f      	movs	r2, #63	; 0x3f
 80024a0:	409a      	lsls	r2, r3
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d07e      	beq.n	80025bc <HAL_DMA_IRQHandler+0x30c>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	4798      	blx	r3
 80024c6:	e079      	b.n	80025bc <HAL_DMA_IRQHandler+0x30c>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d01d      	beq.n	8002512 <HAL_DMA_IRQHandler+0x262>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10d      	bne.n	8002500 <HAL_DMA_IRQHandler+0x250>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d031      	beq.n	8002550 <HAL_DMA_IRQHandler+0x2a0>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4798      	blx	r3
 80024f4:	e02c      	b.n	8002550 <HAL_DMA_IRQHandler+0x2a0>
 80024f6:	bf00      	nop
 80024f8:	20000f9c 	.word	0x20000f9c
 80024fc:	1b4e81b5 	.word	0x1b4e81b5
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002504:	2b00      	cmp	r3, #0
 8002506:	d023      	beq.n	8002550 <HAL_DMA_IRQHandler+0x2a0>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	4798      	blx	r3
 8002510:	e01e      	b.n	8002550 <HAL_DMA_IRQHandler+0x2a0>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10f      	bne.n	8002540 <HAL_DMA_IRQHandler+0x290>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0210 	bic.w	r2, r2, #16
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_DMA_IRQHandler+0x2a0>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	4798      	blx	r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	2b00      	cmp	r3, #0
 8002556:	d032      	beq.n	80025be <HAL_DMA_IRQHandler+0x30e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d022      	beq.n	80025aa <HAL_DMA_IRQHandler+0x2fa>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2205      	movs	r2, #5
 8002568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	3301      	adds	r3, #1
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	429a      	cmp	r2, r3
 8002586:	d307      	bcc.n	8002598 <HAL_DMA_IRQHandler+0x2e8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f2      	bne.n	800257c <HAL_DMA_IRQHandler+0x2cc>
 8002596:	e000      	b.n	800259a <HAL_DMA_IRQHandler+0x2ea>
 8002598:	bf00      	nop
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_DMA_IRQHandler+0x30e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	4798      	blx	r3
 80025ba:	e000      	b.n	80025be <HAL_DMA_IRQHandler+0x30e>
 80025bc:	bf00      	nop
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <DMA_SetConfig>:
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b40      	cmp	r3, #64	; 0x40
 80025f0:	d108      	bne.n	8002604 <DMA_SetConfig+0x40>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	e007      	b.n	8002614 <DMA_SetConfig+0x50>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	60da      	str	r2, [r3, #12]
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <DMA_CalcBaseAndBitshift>:
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	3b10      	subs	r3, #16
 8002630:	4a14      	ldr	r2, [pc, #80]	; (8002684 <DMA_CalcBaseAndBitshift+0x64>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	4a13      	ldr	r2, [pc, #76]	; (8002688 <DMA_CalcBaseAndBitshift+0x68>)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	65da      	str	r2, [r3, #92]	; 0x5c
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b03      	cmp	r3, #3
 800264c:	d909      	bls.n	8002662 <DMA_CalcBaseAndBitshift+0x42>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002656:	f023 0303 	bic.w	r3, r3, #3
 800265a:	1d1a      	adds	r2, r3, #4
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	659a      	str	r2, [r3, #88]	; 0x58
 8002660:	e007      	b.n	8002672 <DMA_CalcBaseAndBitshift+0x52>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800266a:	f023 0303 	bic.w	r3, r3, #3
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6593      	str	r3, [r2, #88]	; 0x58
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	aaaaaaab 	.word	0xaaaaaaab
 8002688:	08005630 	.word	0x08005630

0800268c <DMA_CheckFifoParam>:
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	2300      	movs	r3, #0
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d11f      	bne.n	80026e6 <DMA_CheckFifoParam+0x5a>
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d856      	bhi.n	800275a <DMA_CheckFifoParam+0xce>
 80026ac:	a201      	add	r2, pc, #4	; (adr r2, 80026b4 <DMA_CheckFifoParam+0x28>)
 80026ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b2:	bf00      	nop
 80026b4:	080026c5 	.word	0x080026c5
 80026b8:	080026d7 	.word	0x080026d7
 80026bc:	080026c5 	.word	0x080026c5
 80026c0:	0800275b 	.word	0x0800275b
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d046      	beq.n	800275e <DMA_CheckFifoParam+0xd2>
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
 80026d4:	e043      	b.n	800275e <DMA_CheckFifoParam+0xd2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026de:	d140      	bne.n	8002762 <DMA_CheckFifoParam+0xd6>
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
 80026e4:	e03d      	b.n	8002762 <DMA_CheckFifoParam+0xd6>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ee:	d121      	bne.n	8002734 <DMA_CheckFifoParam+0xa8>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d837      	bhi.n	8002766 <DMA_CheckFifoParam+0xda>
 80026f6:	a201      	add	r2, pc, #4	; (adr r2, 80026fc <DMA_CheckFifoParam+0x70>)
 80026f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fc:	0800270d 	.word	0x0800270d
 8002700:	08002713 	.word	0x08002713
 8002704:	0800270d 	.word	0x0800270d
 8002708:	08002725 	.word	0x08002725
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
 8002710:	e030      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d025      	beq.n	800276a <DMA_CheckFifoParam+0xde>
 800271e:	2301      	movs	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
 8002722:	e022      	b.n	800276a <DMA_CheckFifoParam+0xde>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800272c:	d11f      	bne.n	800276e <DMA_CheckFifoParam+0xe2>
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	e01c      	b.n	800276e <DMA_CheckFifoParam+0xe2>
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d903      	bls.n	8002742 <DMA_CheckFifoParam+0xb6>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d003      	beq.n	8002748 <DMA_CheckFifoParam+0xbc>
 8002740:	e018      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
 8002746:	e015      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00e      	beq.n	8002772 <DMA_CheckFifoParam+0xe6>
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
 8002758:	e00b      	b.n	8002772 <DMA_CheckFifoParam+0xe6>
 800275a:	bf00      	nop
 800275c:	e00a      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
 800275e:	bf00      	nop
 8002760:	e008      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
 8002762:	bf00      	nop
 8002764:	e006      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
 8002766:	bf00      	nop
 8002768:	e004      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
 800276a:	bf00      	nop
 800276c:	e002      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
 800276e:	bf00      	nop
 8002770:	e000      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
 8002772:	bf00      	nop
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop

08002784 <HAL_GPIO_Init>:
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	; 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	2300      	movs	r3, #0
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	e159      	b.n	8002a54 <HAL_GPIO_Init+0x2d0>
 80027a0:	2201      	movs	r2, #1
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	f040 8148 	bne.w	8002a4e <HAL_GPIO_Init+0x2ca>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d005      	beq.n	80027d6 <HAL_GPIO_Init+0x52>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d130      	bne.n	8002838 <HAL_GPIO_Init+0xb4>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	2203      	movs	r2, #3
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	609a      	str	r2, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	61bb      	str	r3, [r7, #24]
 800280c:	2201      	movs	r2, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 0201 	and.w	r2, r3, #1
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b03      	cmp	r3, #3
 8002842:	d017      	beq.n	8002874 <HAL_GPIO_Init+0xf0>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2203      	movs	r2, #3
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	60da      	str	r2, [r3, #12]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d123      	bne.n	80028c8 <HAL_GPIO_Init+0x144>
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	08da      	lsrs	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3208      	adds	r2, #8
 8002888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	220f      	movs	r2, #15
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	08da      	lsrs	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3208      	adds	r2, #8
 80028c2:	69b9      	ldr	r1, [r7, #24]
 80028c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2203      	movs	r2, #3
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0203 	and.w	r2, r3, #3
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80a2 	beq.w	8002a4e <HAL_GPIO_Init+0x2ca>
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	4b57      	ldr	r3, [pc, #348]	; (8002a6c <HAL_GPIO_Init+0x2e8>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	4a56      	ldr	r2, [pc, #344]	; (8002a6c <HAL_GPIO_Init+0x2e8>)
 8002914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002918:	6453      	str	r3, [r2, #68]	; 0x44
 800291a:	4b54      	ldr	r3, [pc, #336]	; (8002a6c <HAL_GPIO_Init+0x2e8>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4a52      	ldr	r2, [pc, #328]	; (8002a70 <HAL_GPIO_Init+0x2ec>)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	3302      	adds	r3, #2
 800292e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002932:	61bb      	str	r3, [r7, #24]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	220f      	movs	r2, #15
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a49      	ldr	r2, [pc, #292]	; (8002a74 <HAL_GPIO_Init+0x2f0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d019      	beq.n	8002986 <HAL_GPIO_Init+0x202>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a48      	ldr	r2, [pc, #288]	; (8002a78 <HAL_GPIO_Init+0x2f4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d013      	beq.n	8002982 <HAL_GPIO_Init+0x1fe>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a47      	ldr	r2, [pc, #284]	; (8002a7c <HAL_GPIO_Init+0x2f8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00d      	beq.n	800297e <HAL_GPIO_Init+0x1fa>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a46      	ldr	r2, [pc, #280]	; (8002a80 <HAL_GPIO_Init+0x2fc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d007      	beq.n	800297a <HAL_GPIO_Init+0x1f6>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a45      	ldr	r2, [pc, #276]	; (8002a84 <HAL_GPIO_Init+0x300>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_GPIO_Init+0x1f2>
 8002972:	2304      	movs	r3, #4
 8002974:	e008      	b.n	8002988 <HAL_GPIO_Init+0x204>
 8002976:	2307      	movs	r3, #7
 8002978:	e006      	b.n	8002988 <HAL_GPIO_Init+0x204>
 800297a:	2303      	movs	r3, #3
 800297c:	e004      	b.n	8002988 <HAL_GPIO_Init+0x204>
 800297e:	2302      	movs	r3, #2
 8002980:	e002      	b.n	8002988 <HAL_GPIO_Init+0x204>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <HAL_GPIO_Init+0x204>
 8002986:	2300      	movs	r3, #0
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	f002 0203 	and.w	r2, r2, #3
 800298e:	0092      	lsls	r2, r2, #2
 8002990:	4093      	lsls	r3, r2
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
 8002998:	4935      	ldr	r1, [pc, #212]	; (8002a70 <HAL_GPIO_Init+0x2ec>)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	089b      	lsrs	r3, r3, #2
 800299e:	3302      	adds	r3, #2
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80029a6:	4b38      	ldr	r3, [pc, #224]	; (8002a88 <HAL_GPIO_Init+0x304>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x246>
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	4a2f      	ldr	r2, [pc, #188]	; (8002a88 <HAL_GPIO_Init+0x304>)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	6093      	str	r3, [r2, #8]
 80029d0:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_GPIO_Init+0x304>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	61bb      	str	r3, [r7, #24]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_Init+0x270>
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
 80029f4:	4a24      	ldr	r2, [pc, #144]	; (8002a88 <HAL_GPIO_Init+0x304>)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	60d3      	str	r3, [r2, #12]
 80029fa:	4b23      	ldr	r3, [pc, #140]	; (8002a88 <HAL_GPIO_Init+0x304>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	61bb      	str	r3, [r7, #24]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x29a>
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	4a1a      	ldr	r2, [pc, #104]	; (8002a88 <HAL_GPIO_Init+0x304>)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	6053      	str	r3, [r2, #4]
 8002a24:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <HAL_GPIO_Init+0x304>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	61bb      	str	r3, [r7, #24]
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x2c4>
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	4a0f      	ldr	r2, [pc, #60]	; (8002a88 <HAL_GPIO_Init+0x304>)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3301      	adds	r3, #1
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b0f      	cmp	r3, #15
 8002a58:	f67f aea2 	bls.w	80027a0 <HAL_GPIO_Init+0x1c>
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	3724      	adds	r7, #36	; 0x24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40013800 	.word	0x40013800
 8002a74:	40020000 	.word	0x40020000
 8002a78:	40020400 	.word	0x40020400
 8002a7c:	40020800 	.word	0x40020800
 8002a80:	40020c00 	.word	0x40020c00
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40013c00 	.word	0x40013c00

08002a8c <HAL_GPIO_WritePin>:
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	807b      	strh	r3, [r7, #2]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	707b      	strb	r3, [r7, #1]
 8002a9c:	787b      	ldrb	r3, [r7, #1]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_WritePin+0x1e>
 8002aa2:	887a      	ldrh	r2, [r7, #2]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	619a      	str	r2, [r3, #24]
 8002aa8:	e003      	b.n	8002ab2 <HAL_GPIO_WritePin+0x26>
 8002aaa:	887b      	ldrh	r3, [r7, #2]
 8002aac:	041a      	lsls	r2, r3, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	619a      	str	r2, [r3, #24]
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <HAL_RCC_OscConfig>:
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x12>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e267      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d075      	beq.n	8002bca <HAL_RCC_OscConfig+0x10a>
 8002ade:	4b88      	ldr	r3, [pc, #544]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d00c      	beq.n	8002b04 <HAL_RCC_OscConfig+0x44>
 8002aea:	4b85      	ldr	r3, [pc, #532]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d112      	bne.n	8002b1c <HAL_RCC_OscConfig+0x5c>
 8002af6:	4b82      	ldr	r3, [pc, #520]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b02:	d10b      	bne.n	8002b1c <HAL_RCC_OscConfig+0x5c>
 8002b04:	4b7e      	ldr	r3, [pc, #504]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d05b      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x108>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d157      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x108>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e242      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b24:	d106      	bne.n	8002b34 <HAL_RCC_OscConfig+0x74>
 8002b26:	4b76      	ldr	r3, [pc, #472]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a75      	ldr	r2, [pc, #468]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e01d      	b.n	8002b70 <HAL_RCC_OscConfig+0xb0>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x98>
 8002b3e:	4b70      	ldr	r3, [pc, #448]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a6f      	ldr	r2, [pc, #444]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	4b6d      	ldr	r3, [pc, #436]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a6c      	ldr	r2, [pc, #432]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e00b      	b.n	8002b70 <HAL_RCC_OscConfig+0xb0>
 8002b58:	4b69      	ldr	r3, [pc, #420]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a68      	ldr	r2, [pc, #416]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	4b66      	ldr	r3, [pc, #408]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a65      	ldr	r2, [pc, #404]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d013      	beq.n	8002ba0 <HAL_RCC_OscConfig+0xe0>
 8002b78:	f7ff f930 	bl	8001ddc <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0xd2>
 8002b80:	f7ff f92c 	bl	8001ddc <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0xd2>
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e207      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002b92:	4b5b      	ldr	r3, [pc, #364]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0xc0>
 8002b9e:	e014      	b.n	8002bca <HAL_RCC_OscConfig+0x10a>
 8002ba0:	f7ff f91c 	bl	8001ddc <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0xfa>
 8002ba8:	f7ff f918 	bl	8001ddc <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	; 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0xfa>
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e1f3      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002bba:	4b51      	ldr	r3, [pc, #324]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0xe8>
 8002bc6:	e000      	b.n	8002bca <HAL_RCC_OscConfig+0x10a>
 8002bc8:	bf00      	nop
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d063      	beq.n	8002c9e <HAL_RCC_OscConfig+0x1de>
 8002bd6:	4b4a      	ldr	r3, [pc, #296]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <HAL_RCC_OscConfig+0x13a>
 8002be2:	4b47      	ldr	r3, [pc, #284]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d11c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x168>
 8002bee:	4b44      	ldr	r3, [pc, #272]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d116      	bne.n	8002c28 <HAL_RCC_OscConfig+0x168>
 8002bfa:	4b41      	ldr	r3, [pc, #260]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <HAL_RCC_OscConfig+0x152>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_OscConfig+0x152>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e1c7      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002c12:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4937      	ldr	r1, [pc, #220]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]
 8002c26:	e03a      	b.n	8002c9e <HAL_RCC_OscConfig+0x1de>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d020      	beq.n	8002c72 <HAL_RCC_OscConfig+0x1b2>
 8002c30:	4b34      	ldr	r3, [pc, #208]	; (8002d04 <HAL_RCC_OscConfig+0x244>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	f7ff f8d1 	bl	8001ddc <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x190>
 8002c3e:	f7ff f8cd 	bl	8001ddc <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x190>
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e1a8      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002c50:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x17e>
 8002c5c:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4925      	ldr	r1, [pc, #148]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	600b      	str	r3, [r1, #0]
 8002c70:	e015      	b.n	8002c9e <HAL_RCC_OscConfig+0x1de>
 8002c72:	4b24      	ldr	r3, [pc, #144]	; (8002d04 <HAL_RCC_OscConfig+0x244>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	f7ff f8b0 	bl	8001ddc <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x1d2>
 8002c80:	f7ff f8ac 	bl	8001ddc <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x1d2>
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e187      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002c92:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x1c0>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d036      	beq.n	8002d18 <HAL_RCC_OscConfig+0x258>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d016      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x220>
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <HAL_RCC_OscConfig+0x248>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	f7ff f890 	bl	8001ddc <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x212>
 8002cc0:	f7ff f88c 	bl	8001ddc <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x212>
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e167      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x200>
 8002cde:	e01b      	b.n	8002d18 <HAL_RCC_OscConfig+0x258>
 8002ce0:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_RCC_OscConfig+0x248>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	f7ff f879 	bl	8001ddc <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]
 8002cec:	e00e      	b.n	8002d0c <HAL_RCC_OscConfig+0x24c>
 8002cee:	f7ff f875 	bl	8001ddc <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d907      	bls.n	8002d0c <HAL_RCC_OscConfig+0x24c>
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e150      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002d00:	40023800 	.word	0x40023800
 8002d04:	42470000 	.word	0x42470000
 8002d08:	42470e80 	.word	0x42470e80
 8002d0c:	4b88      	ldr	r3, [pc, #544]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1ea      	bne.n	8002cee <HAL_RCC_OscConfig+0x22e>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 8097 	beq.w	8002e54 <HAL_RCC_OscConfig+0x394>
 8002d26:	2300      	movs	r3, #0
 8002d28:	75fb      	strb	r3, [r7, #23]
 8002d2a:	4b81      	ldr	r3, [pc, #516]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10f      	bne.n	8002d56 <HAL_RCC_OscConfig+0x296>
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	4b7d      	ldr	r3, [pc, #500]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	4a7c      	ldr	r2, [pc, #496]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40
 8002d46:	4b7a      	ldr	r3, [pc, #488]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2301      	movs	r3, #1
 8002d54:	75fb      	strb	r3, [r7, #23]
 8002d56:	4b77      	ldr	r3, [pc, #476]	; (8002f34 <HAL_RCC_OscConfig+0x474>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d118      	bne.n	8002d94 <HAL_RCC_OscConfig+0x2d4>
 8002d62:	4b74      	ldr	r3, [pc, #464]	; (8002f34 <HAL_RCC_OscConfig+0x474>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a73      	ldr	r2, [pc, #460]	; (8002f34 <HAL_RCC_OscConfig+0x474>)
 8002d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	f7ff f835 	bl	8001ddc <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x2c8>
 8002d76:	f7ff f831 	bl	8001ddc <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x2c8>
 8002d84:	2303      	movs	r3, #3
 8002d86:	e10c      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002d88:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <HAL_RCC_OscConfig+0x474>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x2b6>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d106      	bne.n	8002daa <HAL_RCC_OscConfig+0x2ea>
 8002d9c:	4b64      	ldr	r3, [pc, #400]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	4a63      	ldr	r2, [pc, #396]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6713      	str	r3, [r2, #112]	; 0x70
 8002da8:	e01c      	b.n	8002de4 <HAL_RCC_OscConfig+0x324>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b05      	cmp	r3, #5
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x30c>
 8002db2:	4b5f      	ldr	r3, [pc, #380]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	4a5e      	ldr	r2, [pc, #376]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002db8:	f043 0304 	orr.w	r3, r3, #4
 8002dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dbe:	4b5c      	ldr	r3, [pc, #368]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	4a5b      	ldr	r2, [pc, #364]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dca:	e00b      	b.n	8002de4 <HAL_RCC_OscConfig+0x324>
 8002dcc:	4b58      	ldr	r3, [pc, #352]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd0:	4a57      	ldr	r2, [pc, #348]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002dd2:	f023 0301 	bic.w	r3, r3, #1
 8002dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd8:	4b55      	ldr	r3, [pc, #340]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	4a54      	ldr	r2, [pc, #336]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002dde:	f023 0304 	bic.w	r3, r3, #4
 8002de2:	6713      	str	r3, [r2, #112]	; 0x70
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d015      	beq.n	8002e18 <HAL_RCC_OscConfig+0x358>
 8002dec:	f7fe fff6 	bl	8001ddc <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_OscConfig+0x34a>
 8002df4:	f7fe fff2 	bl	8001ddc <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x34a>
 8002e06:	2303      	movs	r3, #3
 8002e08:	e0cb      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002e0a:	4b49      	ldr	r3, [pc, #292]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0ee      	beq.n	8002df4 <HAL_RCC_OscConfig+0x334>
 8002e16:	e014      	b.n	8002e42 <HAL_RCC_OscConfig+0x382>
 8002e18:	f7fe ffe0 	bl	8001ddc <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_OscConfig+0x376>
 8002e20:	f7fe ffdc 	bl	8001ddc <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x376>
 8002e32:	2303      	movs	r3, #3
 8002e34:	e0b5      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002e36:	4b3e      	ldr	r3, [pc, #248]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1ee      	bne.n	8002e20 <HAL_RCC_OscConfig+0x360>
 8002e42:	7dfb      	ldrb	r3, [r7, #23]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d105      	bne.n	8002e54 <HAL_RCC_OscConfig+0x394>
 8002e48:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	4a38      	ldr	r2, [pc, #224]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e52:	6413      	str	r3, [r2, #64]	; 0x40
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80a1 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x4e0>
 8002e5e:	4b34      	ldr	r3, [pc, #208]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d05c      	beq.n	8002f24 <HAL_RCC_OscConfig+0x464>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d141      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x436>
 8002e72:	4b31      	ldr	r3, [pc, #196]	; (8002f38 <HAL_RCC_OscConfig+0x478>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	f7fe ffb0 	bl	8001ddc <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x3d2>
 8002e80:	f7fe ffac 	bl	8001ddc <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x3d2>
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e087      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002e92:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x3c0>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	019b      	lsls	r3, r3, #6
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	085b      	lsrs	r3, r3, #1
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	041b      	lsls	r3, r3, #16
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	061b      	lsls	r3, r3, #24
 8002ec2:	491b      	ldr	r1, [pc, #108]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	; (8002f38 <HAL_RCC_OscConfig+0x478>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	f7fe ff85 	bl	8001ddc <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x428>
 8002ed6:	f7fe ff81 	bl	8001ddc <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x428>
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e05c      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002ee8:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x416>
 8002ef4:	e054      	b.n	8002fa0 <HAL_RCC_OscConfig+0x4e0>
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <HAL_RCC_OscConfig+0x478>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	f7fe ff6e 	bl	8001ddc <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x456>
 8002f04:	f7fe ff6a 	bl	8001ddc <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x456>
 8002f12:	2303      	movs	r3, #3
 8002f14:	e045      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x444>
 8002f22:	e03d      	b.n	8002fa0 <HAL_RCC_OscConfig+0x4e0>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_OscConfig+0x47c>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e038      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40007000 	.word	0x40007000
 8002f38:	42470060 	.word	0x42470060
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_RCC_OscConfig+0x4ec>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d028      	beq.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d121      	bne.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d11a      	bne.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f72:	0192      	lsls	r2, r2, #6
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d111      	bne.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	085b      	lsrs	r3, r3, #1
 8002f84:	3b01      	subs	r3, #1
 8002f86:	041b      	lsls	r3, r3, #16
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	061b      	lsls	r3, r3, #24
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x4e0>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800

08002fb0 <HAL_RCC_ClockConfig>:
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x14>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0cc      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
 8002fc4:	4b68      	ldr	r3, [pc, #416]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d90c      	bls.n	8002fec <HAL_RCC_ClockConfig+0x3c>
 8002fd2:	4b65      	ldr	r3, [pc, #404]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	701a      	strb	r2, [r3, #0]
 8002fda:	4b63      	ldr	r3, [pc, #396]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_ClockConfig+0x3c>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0b8      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d020      	beq.n	800303a <HAL_RCC_ClockConfig+0x8a>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_RCC_ClockConfig+0x60>
 8003004:	4b59      	ldr	r3, [pc, #356]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	4a58      	ldr	r2, [pc, #352]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800300e:	6093      	str	r3, [r2, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_ClockConfig+0x78>
 800301c:	4b53      	ldr	r3, [pc, #332]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4a52      	ldr	r2, [pc, #328]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003026:	6093      	str	r3, [r2, #8]
 8003028:	4b50      	ldr	r3, [pc, #320]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	494d      	ldr	r1, [pc, #308]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d044      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x120>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d107      	bne.n	800305e <HAL_RCC_ClockConfig+0xae>
 800304e:	4b47      	ldr	r3, [pc, #284]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d119      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
 800305a:	2301      	movs	r3, #1
 800305c:	e07f      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d003      	beq.n	800306e <HAL_RCC_ClockConfig+0xbe>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d107      	bne.n	800307e <HAL_RCC_ClockConfig+0xce>
 800306e:	4b3f      	ldr	r3, [pc, #252]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
 800307a:	2301      	movs	r3, #1
 800307c:	e06f      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
 800307e:	4b3b      	ldr	r3, [pc, #236]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
 800308a:	2301      	movs	r3, #1
 800308c:	e067      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
 800308e:	4b37      	ldr	r3, [pc, #220]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f023 0203 	bic.w	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4934      	ldr	r1, [pc, #208]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	4313      	orrs	r3, r2
 800309e:	608b      	str	r3, [r1, #8]
 80030a0:	f7fe fe9c 	bl	8001ddc <HAL_GetTick>
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	e00a      	b.n	80030be <HAL_RCC_ClockConfig+0x10e>
 80030a8:	f7fe fe98 	bl	8001ddc <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_ClockConfig+0x10e>
 80030ba:	2303      	movs	r3, #3
 80030bc:	e04f      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
 80030be:	4b2b      	ldr	r3, [pc, #172]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 020c 	and.w	r2, r3, #12
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d1eb      	bne.n	80030a8 <HAL_RCC_ClockConfig+0xf8>
 80030d0:	4b25      	ldr	r3, [pc, #148]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d20c      	bcs.n	80030f8 <HAL_RCC_ClockConfig+0x148>
 80030de:	4b22      	ldr	r3, [pc, #136]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	701a      	strb	r2, [r3, #0]
 80030e6:	4b20      	ldr	r3, [pc, #128]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x148>
 80030f4:	2301      	movs	r3, #1
 80030f6:	e032      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCC_ClockConfig+0x166>
 8003104:	4b19      	ldr	r3, [pc, #100]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	4916      	ldr	r1, [pc, #88]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_RCC_ClockConfig+0x186>
 8003122:	4b12      	ldr	r3, [pc, #72]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	490e      	ldr	r1, [pc, #56]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
 8003136:	f000 f821 	bl	800317c <HAL_RCC_GetSysClockFreq>
 800313a:	4602      	mov	r2, r0
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	490a      	ldr	r1, [pc, #40]	; (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	5ccb      	ldrb	r3, [r1, r3]
 800314a:	fa22 f303 	lsr.w	r3, r2, r3
 800314e:	4a09      	ldr	r2, [pc, #36]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe fdfc 	bl	8001d54 <HAL_InitTick>
 800315c:	2300      	movs	r3, #0
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023c00 	.word	0x40023c00
 800316c:	40023800 	.word	0x40023800
 8003170:	08004e98 	.word	0x08004e98
 8003174:	20000f9c 	.word	0x20000f9c
 8003178:	20000fa0 	.word	0x20000fa0

0800317c <HAL_RCC_GetSysClockFreq>:
 800317c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003180:	b094      	sub	sp, #80	; 0x50
 8003182:	af00      	add	r7, sp, #0
 8003184:	2300      	movs	r3, #0
 8003186:	647b      	str	r3, [r7, #68]	; 0x44
 8003188:	2300      	movs	r3, #0
 800318a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800318c:	2300      	movs	r3, #0
 800318e:	643b      	str	r3, [r7, #64]	; 0x40
 8003190:	2300      	movs	r3, #0
 8003192:	64bb      	str	r3, [r7, #72]	; 0x48
 8003194:	4b79      	ldr	r3, [pc, #484]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 030c 	and.w	r3, r3, #12
 800319c:	2b08      	cmp	r3, #8
 800319e:	d00d      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x40>
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	f200 80e1 	bhi.w	8003368 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x34>
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d003      	beq.n	80031b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ae:	e0db      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031b0:	4b73      	ldr	r3, [pc, #460]	; (8003380 <HAL_RCC_GetSysClockFreq+0x204>)
 80031b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80031b4:	e0db      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1f2>
 80031b6:	4b73      	ldr	r3, [pc, #460]	; (8003384 <HAL_RCC_GetSysClockFreq+0x208>)
 80031b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80031ba:	e0d8      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1f2>
 80031bc:	4b6f      	ldr	r3, [pc, #444]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031c4:	647b      	str	r3, [r7, #68]	; 0x44
 80031c6:	4b6d      	ldr	r3, [pc, #436]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d063      	beq.n	800329a <HAL_RCC_GetSysClockFreq+0x11e>
 80031d2:	4b6a      	ldr	r3, [pc, #424]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	099b      	lsrs	r3, r3, #6
 80031d8:	2200      	movs	r2, #0
 80031da:	63bb      	str	r3, [r7, #56]	; 0x38
 80031dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e4:	633b      	str	r3, [r7, #48]	; 0x30
 80031e6:	2300      	movs	r3, #0
 80031e8:	637b      	str	r3, [r7, #52]	; 0x34
 80031ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031ee:	4622      	mov	r2, r4
 80031f0:	462b      	mov	r3, r5
 80031f2:	f04f 0000 	mov.w	r0, #0
 80031f6:	f04f 0100 	mov.w	r1, #0
 80031fa:	0159      	lsls	r1, r3, #5
 80031fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003200:	0150      	lsls	r0, r2, #5
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4621      	mov	r1, r4
 8003208:	1a51      	subs	r1, r2, r1
 800320a:	6139      	str	r1, [r7, #16]
 800320c:	4629      	mov	r1, r5
 800320e:	eb63 0301 	sbc.w	r3, r3, r1
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003220:	4659      	mov	r1, fp
 8003222:	018b      	lsls	r3, r1, #6
 8003224:	4651      	mov	r1, sl
 8003226:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800322a:	4651      	mov	r1, sl
 800322c:	018a      	lsls	r2, r1, #6
 800322e:	4651      	mov	r1, sl
 8003230:	ebb2 0801 	subs.w	r8, r2, r1
 8003234:	4659      	mov	r1, fp
 8003236:	eb63 0901 	sbc.w	r9, r3, r1
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800324a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800324e:	4690      	mov	r8, r2
 8003250:	4699      	mov	r9, r3
 8003252:	4623      	mov	r3, r4
 8003254:	eb18 0303 	adds.w	r3, r8, r3
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	462b      	mov	r3, r5
 800325c:	eb49 0303 	adc.w	r3, r9, r3
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800326e:	4629      	mov	r1, r5
 8003270:	024b      	lsls	r3, r1, #9
 8003272:	4621      	mov	r1, r4
 8003274:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003278:	4621      	mov	r1, r4
 800327a:	024a      	lsls	r2, r1, #9
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003282:	2200      	movs	r2, #0
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
 8003286:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003288:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800328c:	f7fc ffa2 	bl	80001d4 <__aeabi_uldivmod>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4613      	mov	r3, r2
 8003296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003298:	e058      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x1d0>
 800329a:	4b38      	ldr	r3, [pc, #224]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	099b      	lsrs	r3, r3, #6
 80032a0:	2200      	movs	r2, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	4611      	mov	r1, r2
 80032a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032aa:	623b      	str	r3, [r7, #32]
 80032ac:	2300      	movs	r3, #0
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
 80032b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032b4:	4642      	mov	r2, r8
 80032b6:	464b      	mov	r3, r9
 80032b8:	f04f 0000 	mov.w	r0, #0
 80032bc:	f04f 0100 	mov.w	r1, #0
 80032c0:	0159      	lsls	r1, r3, #5
 80032c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032c6:	0150      	lsls	r0, r2, #5
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4641      	mov	r1, r8
 80032ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80032d2:	4649      	mov	r1, r9
 80032d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032ec:	ebb2 040a 	subs.w	r4, r2, sl
 80032f0:	eb63 050b 	sbc.w	r5, r3, fp
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	00eb      	lsls	r3, r5, #3
 80032fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003302:	00e2      	lsls	r2, r4, #3
 8003304:	4614      	mov	r4, r2
 8003306:	461d      	mov	r5, r3
 8003308:	4643      	mov	r3, r8
 800330a:	18e3      	adds	r3, r4, r3
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	464b      	mov	r3, r9
 8003310:	eb45 0303 	adc.w	r3, r5, r3
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003322:	4629      	mov	r1, r5
 8003324:	028b      	lsls	r3, r1, #10
 8003326:	4621      	mov	r1, r4
 8003328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800332c:	4621      	mov	r1, r4
 800332e:	028a      	lsls	r2, r1, #10
 8003330:	4610      	mov	r0, r2
 8003332:	4619      	mov	r1, r3
 8003334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003336:	2200      	movs	r2, #0
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	61fa      	str	r2, [r7, #28]
 800333c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003340:	f7fc ff48 	bl	80001d4 <__aeabi_uldivmod>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4613      	mov	r3, r2
 800334a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	3301      	adds	r3, #1
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	643b      	str	r3, [r7, #64]	; 0x40
 800335c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800335e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	64bb      	str	r3, [r7, #72]	; 0x48
 8003366:	e002      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1f2>
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_RCC_GetSysClockFreq+0x204>)
 800336a:	64bb      	str	r3, [r7, #72]	; 0x48
 800336c:	bf00      	nop
 800336e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003370:	4618      	mov	r0, r3
 8003372:	3750      	adds	r7, #80	; 0x50
 8003374:	46bd      	mov	sp, r7
 8003376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	00f42400 	.word	0x00f42400
 8003384:	007a1200 	.word	0x007a1200

08003388 <HAL_RCC_GetHCLKFreq>:
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <HAL_RCC_GetHCLKFreq+0x14>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000f9c 	.word	0x20000f9c

080033a0 <HAL_RCC_GetPCLK1Freq>:
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	f7ff fff0 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	0a9b      	lsrs	r3, r3, #10
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4903      	ldr	r1, [pc, #12]	; (80033c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40023800 	.word	0x40023800
 80033c4:	08004ea8 	.word	0x08004ea8

080033c8 <HAL_RCC_GetPCLK2Freq>:
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	f7ff ffdc 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	0b5b      	lsrs	r3, r3, #13
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	4903      	ldr	r1, [pc, #12]	; (80033ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40023800 	.word	0x40023800
 80033ec:	08004ea8 	.word	0x08004ea8

080033f0 <HAL_SPI_Init>:
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_SPI_Init+0x12>
 80033fe:	2301      	movs	r3, #1
 8003400:	e07b      	b.n	80034fa <HAL_SPI_Init+0x10a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	2b00      	cmp	r3, #0
 8003408:	d108      	bne.n	800341c <HAL_SPI_Init+0x2c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003412:	d009      	beq.n	8003428 <HAL_SPI_Init+0x38>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	61da      	str	r2, [r3, #28]
 800341a:	e005      	b.n	8003428 <HAL_SPI_Init+0x38>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	611a      	str	r2, [r3, #16]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	615a      	str	r2, [r3, #20]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	629a      	str	r2, [r3, #40]	; 0x28
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_SPI_Init+0x58>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fe f8a2 	bl	800158c <HAL_SPI_MspInit>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ac:	ea42 0103 	orr.w	r1, r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	0c1b      	lsrs	r3, r3, #16
 80034c6:	f003 0104 	and.w	r1, r3, #4
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	f003 0210 	and.w	r2, r3, #16
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69da      	ldr	r2, [r3, #28]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e8:	61da      	str	r2, [r3, #28]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	655a      	str	r2, [r3, #84]	; 0x54
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80034f8:	2300      	movs	r3, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <HAL_SPI_Transmit_DMA>:
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	4613      	mov	r3, r2
 8003510:	80fb      	strh	r3, [r7, #6]
 8003512:	2300      	movs	r3, #0
 8003514:	75fb      	strb	r3, [r7, #23]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_SPI_Transmit_DMA+0x20>
 8003520:	2302      	movs	r3, #2
 8003522:	e09b      	b.n	800365c <HAL_SPI_Transmit_DMA+0x158>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	d002      	beq.n	800353e <HAL_SPI_Transmit_DMA+0x3a>
 8003538:	2302      	movs	r3, #2
 800353a:	75fb      	strb	r3, [r7, #23]
 800353c:	e089      	b.n	8003652 <HAL_SPI_Transmit_DMA+0x14e>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <HAL_SPI_Transmit_DMA+0x46>
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <HAL_SPI_Transmit_DMA+0x4c>
 800354a:	2301      	movs	r3, #1
 800354c:	75fb      	strb	r3, [r7, #23]
 800354e:	e080      	b.n	8003652 <HAL_SPI_Transmit_DMA+0x14e>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2203      	movs	r2, #3
 8003554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	655a      	str	r2, [r3, #84]	; 0x54
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	88fa      	ldrh	r2, [r7, #6]
 8003568:	869a      	strh	r2, [r3, #52]	; 0x34
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	88fa      	ldrh	r2, [r7, #6]
 800356e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	639a      	str	r2, [r3, #56]	; 0x38
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	645a      	str	r2, [r3, #68]	; 0x44
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	641a      	str	r2, [r3, #64]	; 0x40
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003596:	d10f      	bne.n	80035b8 <HAL_SPI_Transmit_DMA+0xb4>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035bc:	4a29      	ldr	r2, [pc, #164]	; (8003664 <HAL_SPI_Transmit_DMA+0x160>)
 80035be:	641a      	str	r2, [r3, #64]	; 0x40
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c4:	4a28      	ldr	r2, [pc, #160]	; (8003668 <HAL_SPI_Transmit_DMA+0x164>)
 80035c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035cc:	4a27      	ldr	r2, [pc, #156]	; (800366c <HAL_SPI_Transmit_DMA+0x168>)
 80035ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d4:	2200      	movs	r2, #0
 80035d6:	651a      	str	r2, [r3, #80]	; 0x50
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	4619      	mov	r1, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	330c      	adds	r3, #12
 80035e8:	461a      	mov	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	f7fe fde4 	bl	80021bc <HAL_DMA_Start_IT>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00c      	beq.n	8003614 <HAL_SPI_Transmit_DMA+0x110>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fe:	f043 0210 	orr.w	r2, r3, #16
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	655a      	str	r2, [r3, #84]	; 0x54
 8003606:	2301      	movs	r3, #1
 8003608:	75fb      	strb	r3, [r7, #23]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003612:	e01e      	b.n	8003652 <HAL_SPI_Transmit_DMA+0x14e>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b40      	cmp	r3, #64	; 0x40
 8003620:	d007      	beq.n	8003632 <HAL_SPI_Transmit_DMA+0x12e>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0220 	orr.w	r2, r2, #32
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0202 	orr.w	r2, r2, #2
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800365a:	7dfb      	ldrb	r3, [r7, #23]
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	08003929 	.word	0x08003929
 8003668:	08003881 	.word	0x08003881
 800366c:	08003945 	.word	0x08003945

08003670 <HAL_SPI_IRQHandler>:
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	61fb      	str	r3, [r7, #28]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	61bb      	str	r3, [r7, #24]
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10e      	bne.n	80036b0 <HAL_SPI_IRQHandler+0x40>
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d009      	beq.n	80036b0 <HAL_SPI_IRQHandler+0x40>
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d004      	beq.n	80036b0 <HAL_SPI_IRQHandler+0x40>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	4798      	blx	r3
 80036ae:	e0ce      	b.n	800384e <HAL_SPI_IRQHandler+0x1de>
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d009      	beq.n	80036ce <HAL_SPI_IRQHandler+0x5e>
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d004      	beq.n	80036ce <HAL_SPI_IRQHandler+0x5e>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4798      	blx	r3
 80036cc:	e0bf      	b.n	800384e <HAL_SPI_IRQHandler+0x1de>
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10a      	bne.n	80036ee <HAL_SPI_IRQHandler+0x7e>
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d105      	bne.n	80036ee <HAL_SPI_IRQHandler+0x7e>
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 80b0 	beq.w	800384e <HAL_SPI_IRQHandler+0x1de>
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 80aa 	beq.w	800384e <HAL_SPI_IRQHandler+0x1de>
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003700:	2b00      	cmp	r3, #0
 8003702:	d023      	beq.n	800374c <HAL_SPI_IRQHandler+0xdc>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b03      	cmp	r3, #3
 800370e:	d011      	beq.n	8003734 <HAL_SPI_IRQHandler+0xc4>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003714:	f043 0204 	orr.w	r2, r3, #4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	655a      	str	r2, [r3, #84]	; 0x54
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	e00b      	b.n	800374c <HAL_SPI_IRQHandler+0xdc>
 8003734:	2300      	movs	r3, #0
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	e080      	b.n	800384e <HAL_SPI_IRQHandler+0x1de>
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	d014      	beq.n	8003780 <HAL_SPI_IRQHandler+0x110>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375a:	f043 0201 	orr.w	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	655a      	str	r2, [r3, #84]	; 0x54
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00c      	beq.n	80037a4 <HAL_SPI_IRQHandler+0x134>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378e:	f043 0208 	orr.w	r2, r3, #8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	655a      	str	r2, [r3, #84]	; 0x54
 8003796:	2300      	movs	r3, #0
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d04f      	beq.n	800384c <HAL_SPI_IRQHandler+0x1dc>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d104      	bne.n	80037d8 <HAL_SPI_IRQHandler+0x168>
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d034      	beq.n	8003842 <HAL_SPI_IRQHandler+0x1d2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0203 	bic.w	r2, r2, #3
 80037e6:	605a      	str	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d011      	beq.n	8003814 <HAL_SPI_IRQHandler+0x1a4>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f4:	4a17      	ldr	r2, [pc, #92]	; (8003854 <HAL_SPI_IRQHandler+0x1e4>)
 80037f6:	651a      	str	r2, [r3, #80]	; 0x50
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fe fd35 	bl	800226c <HAL_DMA_Abort_IT>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_SPI_IRQHandler+0x1a4>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	655a      	str	r2, [r3, #84]	; 0x54
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003818:	2b00      	cmp	r3, #0
 800381a:	d016      	beq.n	800384a <HAL_SPI_IRQHandler+0x1da>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003820:	4a0c      	ldr	r2, [pc, #48]	; (8003854 <HAL_SPI_IRQHandler+0x1e4>)
 8003822:	651a      	str	r2, [r3, #80]	; 0x50
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003828:	4618      	mov	r0, r3
 800382a:	f7fe fd1f 	bl	800226c <HAL_DMA_Abort_IT>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <HAL_SPI_IRQHandler+0x1da>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003838:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	655a      	str	r2, [r3, #84]	; 0x54
 8003840:	e003      	b.n	800384a <HAL_SPI_IRQHandler+0x1da>
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f812 	bl	800386c <HAL_SPI_ErrorCallback>
 8003848:	e000      	b.n	800384c <HAL_SPI_IRQHandler+0x1dc>
 800384a:	bf00      	nop
 800384c:	bf00      	nop
 800384e:	3720      	adds	r7, #32
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	08003985 	.word	0x08003985

08003858 <HAL_SPI_TxHalfCpltCallback>:
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_SPI_ErrorCallback>:
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <SPI_DMATransmitCplt>:
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	f7fe faa5 	bl	8001ddc <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a2:	d03b      	beq.n	800391c <SPI_DMATransmitCplt+0x9c>
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0220 	bic.w	r2, r2, #32
 80038b2:	605a      	str	r2, [r3, #4]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0202 	bic.w	r2, r2, #2
 80038c2:	605a      	str	r2, [r3, #4]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	2164      	movs	r1, #100	; 0x64
 80038c8:	6978      	ldr	r0, [r7, #20]
 80038ca:	f000 f8f7 	bl	8003abc <SPI_EndRxTxTransaction>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <SPI_DMATransmitCplt+0x60>
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d8:	f043 0220 	orr.w	r2, r3, #32
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	655a      	str	r2, [r3, #84]	; 0x54
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <SPI_DMATransmitCplt+0x7e>
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2200      	movs	r2, #0
 8003902:	86da      	strh	r2, [r3, #54]	; 0x36
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <SPI_DMATransmitCplt+0x9c>
 8003914:	6978      	ldr	r0, [r7, #20]
 8003916:	f7ff ffa9 	bl	800386c <HAL_SPI_ErrorCallback>
 800391a:	e002      	b.n	8003922 <SPI_DMATransmitCplt+0xa2>
 800391c:	6978      	ldr	r0, [r7, #20]
 800391e:	f7fe f997 	bl	8001c50 <HAL_SPI_TxCpltCallback>
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <SPI_DMAHalfTransmitCplt>:
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f7ff ff8e 	bl	8003858 <HAL_SPI_TxHalfCpltCallback>
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <SPI_DMAError>:
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0203 	bic.w	r2, r2, #3
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	f043 0210 	orr.w	r2, r3, #16
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	655a      	str	r2, [r3, #84]	; 0x54
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f7ff ff78 	bl	800386c <HAL_SPI_ErrorCallback>
 800397c:	bf00      	nop
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <SPI_DMAAbortOnError>:
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	86da      	strh	r2, [r3, #54]	; 0x36
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f7ff ff64 	bl	800386c <HAL_SPI_ErrorCallback>
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <SPI_WaitFlagStateUntilTimeout>:
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	71fb      	strb	r3, [r7, #7]
 80039bc:	f7fe fa0e 	bl	8001ddc <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	4413      	add	r3, r2
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	f7fe fa06 	bl	8001ddc <HAL_GetTick>
 80039d0:	61b8      	str	r0, [r7, #24]
 80039d2:	4b39      	ldr	r3, [pc, #228]	; (8003ab8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	015b      	lsls	r3, r3, #5
 80039d8:	0d1b      	lsrs	r3, r3, #20
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	fb02 f303 	mul.w	r3, r2, r3
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e054      	b.n	8003a8e <SPI_WaitFlagStateUntilTimeout+0xe2>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ea:	d050      	beq.n	8003a8e <SPI_WaitFlagStateUntilTimeout+0xe2>
 80039ec:	f7fe f9f6 	bl	8001ddc <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d902      	bls.n	8003a02 <SPI_WaitFlagStateUntilTimeout+0x56>
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d13d      	bne.n	8003a7e <SPI_WaitFlagStateUntilTimeout+0xd2>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a1a:	d111      	bne.n	8003a40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a24:	d004      	beq.n	8003a30 <SPI_WaitFlagStateUntilTimeout+0x84>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a2e:	d107      	bne.n	8003a40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a48:	d10f      	bne.n	8003a6a <SPI_WaitFlagStateUntilTimeout+0xbe>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e017      	b.n	8003aae <SPI_WaitFlagStateUntilTimeout+0x102>
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8003a84:	2300      	movs	r3, #0
 8003a86:	61fb      	str	r3, [r7, #28]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4013      	ands	r3, r2
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	bf0c      	ite	eq
 8003a9e:	2301      	moveq	r3, #1
 8003aa0:	2300      	movne	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d19b      	bne.n	80039e4 <SPI_WaitFlagStateUntilTimeout+0x38>
 8003aac:	2300      	movs	r3, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000f9c 	.word	0x20000f9c

08003abc <SPI_EndRxTxTransaction>:
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <SPI_EndRxTxTransaction+0x7c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1b      	ldr	r2, [pc, #108]	; (8003b3c <SPI_EndRxTxTransaction+0x80>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	0d5b      	lsrs	r3, r3, #21
 8003ad4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ad8:	fb02 f303 	mul.w	r3, r2, r3
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ae6:	d112      	bne.n	8003b0e <SPI_EndRxTxTransaction+0x52>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2200      	movs	r2, #0
 8003af0:	2180      	movs	r1, #128	; 0x80
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f7ff ff5a 	bl	80039ac <SPI_WaitFlagStateUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d016      	beq.n	8003b2c <SPI_EndRxTxTransaction+0x70>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b02:	f043 0220 	orr.w	r2, r3, #32
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	655a      	str	r2, [r3, #84]	; 0x54
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e00f      	b.n	8003b2e <SPI_EndRxTxTransaction+0x72>
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <SPI_EndRxTxTransaction+0x6e>
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b24:	2b80      	cmp	r3, #128	; 0x80
 8003b26:	d0f2      	beq.n	8003b0e <SPI_EndRxTxTransaction+0x52>
 8003b28:	e000      	b.n	8003b2c <SPI_EndRxTxTransaction+0x70>
 8003b2a:	bf00      	nop
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000f9c 	.word	0x20000f9c
 8003b3c:	165e9f81 	.word	0x165e9f81

08003b40 <HAL_TIM_Base_Init>:
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_TIM_Base_Init+0x12>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e041      	b.n	8003bd6 <HAL_TIM_Base_Init+0x96>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_TIM_Base_Init+0x2c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd fdb4 	bl	80016d4 <HAL_TIM_Base_MspInit>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4610      	mov	r0, r2
 8003b80:	f000 fa10 	bl	8003fa4 <TIM_Base_SetConfig>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_TIM_PWM_Init>:
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_TIM_PWM_Init+0x12>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e041      	b.n	8003c74 <HAL_TIM_PWM_Init+0x96>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d106      	bne.n	8003c0a <HAL_TIM_PWM_Init+0x2c>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f839 	bl	8003c7c <HAL_TIM_PWM_MspInit>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	f000 f9c1 	bl	8003fa4 <TIM_Base_SetConfig>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c72:	2300      	movs	r3, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_TIM_PWM_MspInit>:
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_TIM_PWM_ConfigChannel>:
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	75fb      	strb	r3, [r7, #23]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e0ae      	b.n	8003e0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b0c      	cmp	r3, #12
 8003cba:	f200 809f 	bhi.w	8003dfc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cbe:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc4:	08003cf9 	.word	0x08003cf9
 8003cc8:	08003dfd 	.word	0x08003dfd
 8003ccc:	08003dfd 	.word	0x08003dfd
 8003cd0:	08003dfd 	.word	0x08003dfd
 8003cd4:	08003d39 	.word	0x08003d39
 8003cd8:	08003dfd 	.word	0x08003dfd
 8003cdc:	08003dfd 	.word	0x08003dfd
 8003ce0:	08003dfd 	.word	0x08003dfd
 8003ce4:	08003d7b 	.word	0x08003d7b
 8003ce8:	08003dfd 	.word	0x08003dfd
 8003cec:	08003dfd 	.word	0x08003dfd
 8003cf0:	08003dfd 	.word	0x08003dfd
 8003cf4:	08003dbb 	.word	0x08003dbb
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 f9d0 	bl	80040a4 <TIM_OC1_SetConfig>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0208 	orr.w	r2, r2, #8
 8003d12:	619a      	str	r2, [r3, #24]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0204 	bic.w	r2, r2, #4
 8003d22:	619a      	str	r2, [r3, #24]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6999      	ldr	r1, [r3, #24]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	691a      	ldr	r2, [r3, #16]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	619a      	str	r2, [r3, #24]
 8003d36:	e064      	b.n	8003e02 <HAL_TIM_PWM_ConfigChannel+0x172>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fa16 	bl	8004170 <TIM_OC2_SetConfig>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d52:	619a      	str	r2, [r3, #24]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699a      	ldr	r2, [r3, #24]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d62:	619a      	str	r2, [r3, #24]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6999      	ldr	r1, [r3, #24]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	021a      	lsls	r2, r3, #8
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	619a      	str	r2, [r3, #24]
 8003d78:	e043      	b.n	8003e02 <HAL_TIM_PWM_ConfigChannel+0x172>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fa61 	bl	8004248 <TIM_OC3_SetConfig>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0208 	orr.w	r2, r2, #8
 8003d94:	61da      	str	r2, [r3, #28]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69da      	ldr	r2, [r3, #28]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0204 	bic.w	r2, r2, #4
 8003da4:	61da      	str	r2, [r3, #28]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69d9      	ldr	r1, [r3, #28]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	61da      	str	r2, [r3, #28]
 8003db8:	e023      	b.n	8003e02 <HAL_TIM_PWM_ConfigChannel+0x172>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 faab 	bl	800431c <TIM_OC4_SetConfig>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69da      	ldr	r2, [r3, #28]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd4:	61da      	str	r2, [r3, #28]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de4:	61da      	str	r2, [r3, #28]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69d9      	ldr	r1, [r3, #28]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	021a      	lsls	r2, r3, #8
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	61da      	str	r2, [r3, #28]
 8003dfa:	e002      	b.n	8003e02 <HAL_TIM_PWM_ConfigChannel+0x172>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	75fb      	strb	r3, [r7, #23]
 8003e00:	bf00      	nop
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e0a:	7dfb      	ldrb	r3, [r7, #23]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_TIM_ConfigClockSource>:
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	73fb      	strb	r3, [r7, #15]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_TIM_ConfigClockSource+0x1c>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e0b4      	b.n	8003f9a <HAL_TIM_ConfigClockSource+0x186>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	609a      	str	r2, [r3, #8]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e68:	d03e      	beq.n	8003ee8 <HAL_TIM_ConfigClockSource+0xd4>
 8003e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e6e:	f200 8087 	bhi.w	8003f80 <HAL_TIM_ConfigClockSource+0x16c>
 8003e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e76:	f000 8086 	beq.w	8003f86 <HAL_TIM_ConfigClockSource+0x172>
 8003e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7e:	d87f      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x16c>
 8003e80:	2b70      	cmp	r3, #112	; 0x70
 8003e82:	d01a      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0xa6>
 8003e84:	2b70      	cmp	r3, #112	; 0x70
 8003e86:	d87b      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x16c>
 8003e88:	2b60      	cmp	r3, #96	; 0x60
 8003e8a:	d050      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0x11a>
 8003e8c:	2b60      	cmp	r3, #96	; 0x60
 8003e8e:	d877      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x16c>
 8003e90:	2b50      	cmp	r3, #80	; 0x50
 8003e92:	d03c      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0xfa>
 8003e94:	2b50      	cmp	r3, #80	; 0x50
 8003e96:	d873      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x16c>
 8003e98:	2b40      	cmp	r3, #64	; 0x40
 8003e9a:	d058      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0x13a>
 8003e9c:	2b40      	cmp	r3, #64	; 0x40
 8003e9e:	d86f      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea0:	2b30      	cmp	r3, #48	; 0x30
 8003ea2:	d064      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0x15a>
 8003ea4:	2b30      	cmp	r3, #48	; 0x30
 8003ea6:	d86b      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	d060      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0x15a>
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d867      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d05c      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0x15a>
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	d05a      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0x15a>
 8003eb8:	e062      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x16c>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	6899      	ldr	r1, [r3, #8]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f000 faf1 	bl	80044b0 <TIM_ETR_SetConfig>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	609a      	str	r2, [r3, #8]
 8003ee6:	e04f      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x174>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	6899      	ldr	r1, [r3, #8]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f000 fada 	bl	80044b0 <TIM_ETR_SetConfig>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f0a:	609a      	str	r2, [r3, #8]
 8003f0c:	e03c      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x174>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6859      	ldr	r1, [r3, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f000 fa4e 	bl	80043bc <TIM_TI1_ConfigInputStage>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2150      	movs	r1, #80	; 0x50
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 faa7 	bl	800447a <TIM_ITRx_SetConfig>
 8003f2c:	e02c      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x174>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6859      	ldr	r1, [r3, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f000 fa6d 	bl	800441a <TIM_TI2_ConfigInputStage>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2160      	movs	r1, #96	; 0x60
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fa97 	bl	800447a <TIM_ITRx_SetConfig>
 8003f4c:	e01c      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x174>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6818      	ldr	r0, [r3, #0]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6859      	ldr	r1, [r3, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f000 fa2e 	bl	80043bc <TIM_TI1_ConfigInputStage>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2140      	movs	r1, #64	; 0x40
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fa87 	bl	800447a <TIM_ITRx_SetConfig>
 8003f6c:	e00c      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x174>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4619      	mov	r1, r3
 8003f78:	4610      	mov	r0, r2
 8003f7a:	f000 fa7e 	bl	800447a <TIM_ITRx_SetConfig>
 8003f7e:	e003      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x174>
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
 8003f84:	e000      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x174>
 8003f86:	bf00      	nop
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <TIM_Base_SetConfig>:
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a34      	ldr	r2, [pc, #208]	; (8004088 <TIM_Base_SetConfig+0xe4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00f      	beq.n	8003fdc <TIM_Base_SetConfig+0x38>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc2:	d00b      	beq.n	8003fdc <TIM_Base_SetConfig+0x38>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a31      	ldr	r2, [pc, #196]	; (800408c <TIM_Base_SetConfig+0xe8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d007      	beq.n	8003fdc <TIM_Base_SetConfig+0x38>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a30      	ldr	r2, [pc, #192]	; (8004090 <TIM_Base_SetConfig+0xec>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d003      	beq.n	8003fdc <TIM_Base_SetConfig+0x38>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a2f      	ldr	r2, [pc, #188]	; (8004094 <TIM_Base_SetConfig+0xf0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d108      	bne.n	8003fee <TIM_Base_SetConfig+0x4a>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a25      	ldr	r2, [pc, #148]	; (8004088 <TIM_Base_SetConfig+0xe4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01b      	beq.n	800402e <TIM_Base_SetConfig+0x8a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffc:	d017      	beq.n	800402e <TIM_Base_SetConfig+0x8a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a22      	ldr	r2, [pc, #136]	; (800408c <TIM_Base_SetConfig+0xe8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <TIM_Base_SetConfig+0x8a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a21      	ldr	r2, [pc, #132]	; (8004090 <TIM_Base_SetConfig+0xec>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00f      	beq.n	800402e <TIM_Base_SetConfig+0x8a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a20      	ldr	r2, [pc, #128]	; (8004094 <TIM_Base_SetConfig+0xf0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00b      	beq.n	800402e <TIM_Base_SetConfig+0x8a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <TIM_Base_SetConfig+0xf4>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d007      	beq.n	800402e <TIM_Base_SetConfig+0x8a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a1e      	ldr	r2, [pc, #120]	; (800409c <TIM_Base_SetConfig+0xf8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <TIM_Base_SetConfig+0x8a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a1d      	ldr	r2, [pc, #116]	; (80040a0 <TIM_Base_SetConfig+0xfc>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d108      	bne.n	8004040 <TIM_Base_SetConfig+0x9c>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	62da      	str	r2, [r3, #44]	; 0x2c
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	629a      	str	r2, [r3, #40]	; 0x28
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a08      	ldr	r2, [pc, #32]	; (8004088 <TIM_Base_SetConfig+0xe4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d103      	bne.n	8004074 <TIM_Base_SetConfig+0xd0>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	615a      	str	r2, [r3, #20]
 800407a:	bf00      	nop
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40010000 	.word	0x40010000
 800408c:	40000400 	.word	0x40000400
 8004090:	40000800 	.word	0x40000800
 8004094:	40000c00 	.word	0x40000c00
 8004098:	40014000 	.word	0x40014000
 800409c:	40014400 	.word	0x40014400
 80040a0:	40014800 	.word	0x40014800

080040a4 <TIM_OC1_SetConfig>:
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f023 0201 	bic.w	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	621a      	str	r2, [r3, #32]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0303 	bic.w	r3, r3, #3
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f023 0302 	bic.w	r3, r3, #2
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a1c      	ldr	r2, [pc, #112]	; (800416c <TIM_OC1_SetConfig+0xc8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d10c      	bne.n	800411a <TIM_OC1_SetConfig+0x76>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f023 0308 	bic.w	r3, r3, #8
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f023 0304 	bic.w	r3, r3, #4
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a13      	ldr	r2, [pc, #76]	; (800416c <TIM_OC1_SetConfig+0xc8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d111      	bne.n	8004146 <TIM_OC1_SetConfig+0xa2>
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	605a      	str	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	619a      	str	r2, [r3, #24]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	635a      	str	r2, [r3, #52]	; 0x34
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	621a      	str	r2, [r3, #32]
 8004160:	bf00      	nop
 8004162:	371c      	adds	r7, #28
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	40010000 	.word	0x40010000

08004170 <TIM_OC2_SetConfig>:
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0210 	bic.w	r2, r3, #16
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	621a      	str	r2, [r3, #32]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	021b      	lsls	r3, r3, #8
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0320 	bic.w	r3, r3, #32
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a1e      	ldr	r2, [pc, #120]	; (8004244 <TIM_OC2_SetConfig+0xd4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d10d      	bne.n	80041ec <TIM_OC2_SetConfig+0x7c>
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a15      	ldr	r2, [pc, #84]	; (8004244 <TIM_OC2_SetConfig+0xd4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d113      	bne.n	800421c <TIM_OC2_SetConfig+0xac>
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	619a      	str	r2, [r3, #24]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	639a      	str	r2, [r3, #56]	; 0x38
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	621a      	str	r2, [r3, #32]
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40010000 	.word	0x40010000

08004248 <TIM_OC3_SetConfig>:
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	621a      	str	r2, [r3, #32]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	613b      	str	r3, [r7, #16]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0303 	bic.w	r3, r3, #3
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a1d      	ldr	r2, [pc, #116]	; (8004318 <TIM_OC3_SetConfig+0xd0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d10d      	bne.n	80042c2 <TIM_OC3_SetConfig+0x7a>
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	021b      	lsls	r3, r3, #8
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a14      	ldr	r2, [pc, #80]	; (8004318 <TIM_OC3_SetConfig+0xd0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d113      	bne.n	80042f2 <TIM_OC3_SetConfig+0xaa>
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	605a      	str	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	61da      	str	r2, [r3, #28]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	63da      	str	r2, [r3, #60]	; 0x3c
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	621a      	str	r2, [r3, #32]
 800430c:	bf00      	nop
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	40010000 	.word	0x40010000

0800431c <TIM_OC4_SetConfig>:
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	621a      	str	r2, [r3, #32]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	031b      	lsls	r3, r3, #12
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a10      	ldr	r2, [pc, #64]	; (80043b8 <TIM_OC4_SetConfig+0x9c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d109      	bne.n	8004390 <TIM_OC4_SetConfig+0x74>
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	019b      	lsls	r3, r3, #6
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	605a      	str	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	61da      	str	r2, [r3, #28]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	641a      	str	r2, [r3, #64]	; 0x40
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	621a      	str	r2, [r3, #32]
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40010000 	.word	0x40010000

080043bc <TIM_TI1_ConfigInputStage>:
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f023 0201 	bic.w	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	621a      	str	r2, [r3, #32]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f023 030a 	bic.w	r3, r3, #10
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	619a      	str	r2, [r3, #24]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	621a      	str	r2, [r3, #32]
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <TIM_TI2_ConfigInputStage>:
 800441a:	b480      	push	{r7}
 800441c:	b087      	sub	sp, #28
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f023 0210 	bic.w	r2, r3, #16
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	621a      	str	r2, [r3, #32]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	031b      	lsls	r3, r3, #12
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	619a      	str	r2, [r3, #24]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	621a      	str	r2, [r3, #32]
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <TIM_ITRx_SetConfig>:
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	6039      	str	r1, [r7, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	f043 0307 	orr.w	r3, r3, #7
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <TIM_ETR_SetConfig>:
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	021a      	lsls	r2, r3, #8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	609a      	str	r2, [r3, #8]
 80044e4:	bf00      	nop
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIMEx_MasterConfigSynchronization>:
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004504:	2302      	movs	r3, #2
 8004506:	e050      	b.n	80045aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	60bb      	str	r3, [r7, #8]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1c      	ldr	r2, [pc, #112]	; (80045b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d018      	beq.n	800457e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004554:	d013      	beq.n	800457e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a18      	ldr	r2, [pc, #96]	; (80045bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00e      	beq.n	800457e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a16      	ldr	r2, [pc, #88]	; (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d009      	beq.n	800457e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a15      	ldr	r2, [pc, #84]	; (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d004      	beq.n	800457e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a13      	ldr	r2, [pc, #76]	; (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d10c      	bne.n	8004598 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	4313      	orrs	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	609a      	str	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045a8:	2300      	movs	r3, #0
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40010000 	.word	0x40010000
 80045bc:	40000400 	.word	0x40000400
 80045c0:	40000800 	.word	0x40000800
 80045c4:	40000c00 	.word	0x40000c00
 80045c8:	40014000 	.word	0x40014000

080045cc <HAL_UART_Init>:
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_UART_Init+0x12>
 80045da:	2301      	movs	r3, #1
 80045dc:	e03f      	b.n	800465e <HAL_UART_Init+0x92>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <HAL_UART_Init+0x2c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7fd f93e 	bl	8001874 <HAL_UART_MspInit>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2224      	movs	r2, #36	; 0x24
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800460e:	60da      	str	r2, [r3, #12]
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f829 	bl	8004668 <UART_SetConfig>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004624:	611a      	str	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695a      	ldr	r2, [r3, #20]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004634:	615a      	str	r2, [r3, #20]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004644:	60da      	str	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	641a      	str	r2, [r3, #64]	; 0x40
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800465c:	2300      	movs	r3, #0
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <UART_SetConfig>:
 8004668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800466c:	b0c0      	sub	sp, #256	; 0x100
 800466e:	af00      	add	r7, sp, #0
 8004670:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004684:	68d9      	ldr	r1, [r3, #12]
 8004686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	ea40 0301 	orr.w	r3, r0, r1
 8004690:	6113      	str	r3, [r2, #16]
 8004692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	431a      	orrs	r2, r3
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046c0:	f021 010c 	bic.w	r1, r1, #12
 80046c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046ce:	430b      	orrs	r3, r1
 80046d0:	60d3      	str	r3, [r2, #12]
 80046d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e2:	6999      	ldr	r1, [r3, #24]
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	ea40 0301 	orr.w	r3, r0, r1
 80046ee:	6153      	str	r3, [r2, #20]
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4b8f      	ldr	r3, [pc, #572]	; (8004934 <UART_SetConfig+0x2cc>)
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d005      	beq.n	8004708 <UART_SetConfig+0xa0>
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	4b8d      	ldr	r3, [pc, #564]	; (8004938 <UART_SetConfig+0x2d0>)
 8004704:	429a      	cmp	r2, r3
 8004706:	d104      	bne.n	8004712 <UART_SetConfig+0xaa>
 8004708:	f7fe fe5e 	bl	80033c8 <HAL_RCC_GetPCLK2Freq>
 800470c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004710:	e003      	b.n	800471a <UART_SetConfig+0xb2>
 8004712:	f7fe fe45 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 8004716:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800471a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004724:	f040 810c 	bne.w	8004940 <UART_SetConfig+0x2d8>
 8004728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800472c:	2200      	movs	r2, #0
 800472e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004732:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004736:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800473a:	4622      	mov	r2, r4
 800473c:	462b      	mov	r3, r5
 800473e:	1891      	adds	r1, r2, r2
 8004740:	65b9      	str	r1, [r7, #88]	; 0x58
 8004742:	415b      	adcs	r3, r3
 8004744:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004746:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800474a:	4621      	mov	r1, r4
 800474c:	eb12 0801 	adds.w	r8, r2, r1
 8004750:	4629      	mov	r1, r5
 8004752:	eb43 0901 	adc.w	r9, r3, r1
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	f04f 0300 	mov.w	r3, #0
 800475e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004762:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004766:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800476a:	4690      	mov	r8, r2
 800476c:	4699      	mov	r9, r3
 800476e:	4623      	mov	r3, r4
 8004770:	eb18 0303 	adds.w	r3, r8, r3
 8004774:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004778:	462b      	mov	r3, r5
 800477a:	eb49 0303 	adc.w	r3, r9, r3
 800477e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800478e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004792:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004796:	460b      	mov	r3, r1
 8004798:	18db      	adds	r3, r3, r3
 800479a:	653b      	str	r3, [r7, #80]	; 0x50
 800479c:	4613      	mov	r3, r2
 800479e:	eb42 0303 	adc.w	r3, r2, r3
 80047a2:	657b      	str	r3, [r7, #84]	; 0x54
 80047a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047ac:	f7fb fd12 	bl	80001d4 <__aeabi_uldivmod>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4b61      	ldr	r3, [pc, #388]	; (800493c <UART_SetConfig+0x2d4>)
 80047b6:	fba3 2302 	umull	r2, r3, r3, r2
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	011c      	lsls	r4, r3, #4
 80047be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047d0:	4642      	mov	r2, r8
 80047d2:	464b      	mov	r3, r9
 80047d4:	1891      	adds	r1, r2, r2
 80047d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80047d8:	415b      	adcs	r3, r3
 80047da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047e0:	4641      	mov	r1, r8
 80047e2:	eb12 0a01 	adds.w	sl, r2, r1
 80047e6:	4649      	mov	r1, r9
 80047e8:	eb43 0b01 	adc.w	fp, r3, r1
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004800:	4692      	mov	sl, r2
 8004802:	469b      	mov	fp, r3
 8004804:	4643      	mov	r3, r8
 8004806:	eb1a 0303 	adds.w	r3, sl, r3
 800480a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800480e:	464b      	mov	r3, r9
 8004810:	eb4b 0303 	adc.w	r3, fp, r3
 8004814:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004824:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004828:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800482c:	460b      	mov	r3, r1
 800482e:	18db      	adds	r3, r3, r3
 8004830:	643b      	str	r3, [r7, #64]	; 0x40
 8004832:	4613      	mov	r3, r2
 8004834:	eb42 0303 	adc.w	r3, r2, r3
 8004838:	647b      	str	r3, [r7, #68]	; 0x44
 800483a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800483e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004842:	f7fb fcc7 	bl	80001d4 <__aeabi_uldivmod>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4611      	mov	r1, r2
 800484c:	4b3b      	ldr	r3, [pc, #236]	; (800493c <UART_SetConfig+0x2d4>)
 800484e:	fba3 2301 	umull	r2, r3, r3, r1
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	2264      	movs	r2, #100	; 0x64
 8004856:	fb02 f303 	mul.w	r3, r2, r3
 800485a:	1acb      	subs	r3, r1, r3
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004862:	4b36      	ldr	r3, [pc, #216]	; (800493c <UART_SetConfig+0x2d4>)
 8004864:	fba3 2302 	umull	r2, r3, r3, r2
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004870:	441c      	add	r4, r3
 8004872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004876:	2200      	movs	r2, #0
 8004878:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800487c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004880:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004884:	4642      	mov	r2, r8
 8004886:	464b      	mov	r3, r9
 8004888:	1891      	adds	r1, r2, r2
 800488a:	63b9      	str	r1, [r7, #56]	; 0x38
 800488c:	415b      	adcs	r3, r3
 800488e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004890:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004894:	4641      	mov	r1, r8
 8004896:	1851      	adds	r1, r2, r1
 8004898:	6339      	str	r1, [r7, #48]	; 0x30
 800489a:	4649      	mov	r1, r9
 800489c:	414b      	adcs	r3, r1
 800489e:	637b      	str	r3, [r7, #52]	; 0x34
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048ac:	4659      	mov	r1, fp
 80048ae:	00cb      	lsls	r3, r1, #3
 80048b0:	4651      	mov	r1, sl
 80048b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048b6:	4651      	mov	r1, sl
 80048b8:	00ca      	lsls	r2, r1, #3
 80048ba:	4610      	mov	r0, r2
 80048bc:	4619      	mov	r1, r3
 80048be:	4603      	mov	r3, r0
 80048c0:	4642      	mov	r2, r8
 80048c2:	189b      	adds	r3, r3, r2
 80048c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048c8:	464b      	mov	r3, r9
 80048ca:	460a      	mov	r2, r1
 80048cc:	eb42 0303 	adc.w	r3, r2, r3
 80048d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048e8:	460b      	mov	r3, r1
 80048ea:	18db      	adds	r3, r3, r3
 80048ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ee:	4613      	mov	r3, r2
 80048f0:	eb42 0303 	adc.w	r3, r2, r3
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80048fe:	f7fb fc69 	bl	80001d4 <__aeabi_uldivmod>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4b0d      	ldr	r3, [pc, #52]	; (800493c <UART_SetConfig+0x2d4>)
 8004908:	fba3 1302 	umull	r1, r3, r3, r2
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	2164      	movs	r1, #100	; 0x64
 8004910:	fb01 f303 	mul.w	r3, r1, r3
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	3332      	adds	r3, #50	; 0x32
 800491a:	4a08      	ldr	r2, [pc, #32]	; (800493c <UART_SetConfig+0x2d4>)
 800491c:	fba2 2303 	umull	r2, r3, r2, r3
 8004920:	095b      	lsrs	r3, r3, #5
 8004922:	f003 0207 	and.w	r2, r3, #7
 8004926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4422      	add	r2, r4
 800492e:	609a      	str	r2, [r3, #8]
 8004930:	e106      	b.n	8004b40 <UART_SetConfig+0x4d8>
 8004932:	bf00      	nop
 8004934:	40011000 	.word	0x40011000
 8004938:	40011400 	.word	0x40011400
 800493c:	51eb851f 	.word	0x51eb851f
 8004940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004944:	2200      	movs	r2, #0
 8004946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800494a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800494e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004952:	4642      	mov	r2, r8
 8004954:	464b      	mov	r3, r9
 8004956:	1891      	adds	r1, r2, r2
 8004958:	6239      	str	r1, [r7, #32]
 800495a:	415b      	adcs	r3, r3
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
 800495e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004962:	4641      	mov	r1, r8
 8004964:	1854      	adds	r4, r2, r1
 8004966:	4649      	mov	r1, r9
 8004968:	eb43 0501 	adc.w	r5, r3, r1
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	00eb      	lsls	r3, r5, #3
 8004976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800497a:	00e2      	lsls	r2, r4, #3
 800497c:	4614      	mov	r4, r2
 800497e:	461d      	mov	r5, r3
 8004980:	4643      	mov	r3, r8
 8004982:	18e3      	adds	r3, r4, r3
 8004984:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004988:	464b      	mov	r3, r9
 800498a:	eb45 0303 	adc.w	r3, r5, r3
 800498e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800499e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049ae:	4629      	mov	r1, r5
 80049b0:	008b      	lsls	r3, r1, #2
 80049b2:	4621      	mov	r1, r4
 80049b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049b8:	4621      	mov	r1, r4
 80049ba:	008a      	lsls	r2, r1, #2
 80049bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049c0:	f7fb fc08 	bl	80001d4 <__aeabi_uldivmod>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4b60      	ldr	r3, [pc, #384]	; (8004b4c <UART_SetConfig+0x4e4>)
 80049ca:	fba3 2302 	umull	r2, r3, r3, r2
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	011c      	lsls	r4, r3, #4
 80049d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d6:	2200      	movs	r2, #0
 80049d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049e4:	4642      	mov	r2, r8
 80049e6:	464b      	mov	r3, r9
 80049e8:	1891      	adds	r1, r2, r2
 80049ea:	61b9      	str	r1, [r7, #24]
 80049ec:	415b      	adcs	r3, r3
 80049ee:	61fb      	str	r3, [r7, #28]
 80049f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049f4:	4641      	mov	r1, r8
 80049f6:	1851      	adds	r1, r2, r1
 80049f8:	6139      	str	r1, [r7, #16]
 80049fa:	4649      	mov	r1, r9
 80049fc:	414b      	adcs	r3, r1
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a0c:	4659      	mov	r1, fp
 8004a0e:	00cb      	lsls	r3, r1, #3
 8004a10:	4651      	mov	r1, sl
 8004a12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a16:	4651      	mov	r1, sl
 8004a18:	00ca      	lsls	r2, r1, #3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4603      	mov	r3, r0
 8004a20:	4642      	mov	r2, r8
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a28:	464b      	mov	r3, r9
 8004a2a:	460a      	mov	r2, r1
 8004a2c:	eb42 0303 	adc.w	r3, r2, r3
 8004a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a4c:	4649      	mov	r1, r9
 8004a4e:	008b      	lsls	r3, r1, #2
 8004a50:	4641      	mov	r1, r8
 8004a52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a56:	4641      	mov	r1, r8
 8004a58:	008a      	lsls	r2, r1, #2
 8004a5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a5e:	f7fb fbb9 	bl	80001d4 <__aeabi_uldivmod>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	4611      	mov	r1, r2
 8004a68:	4b38      	ldr	r3, [pc, #224]	; (8004b4c <UART_SetConfig+0x4e4>)
 8004a6a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a6e:	095b      	lsrs	r3, r3, #5
 8004a70:	2264      	movs	r2, #100	; 0x64
 8004a72:	fb02 f303 	mul.w	r3, r2, r3
 8004a76:	1acb      	subs	r3, r1, r3
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	3332      	adds	r3, #50	; 0x32
 8004a7c:	4a33      	ldr	r2, [pc, #204]	; (8004b4c <UART_SetConfig+0x4e4>)
 8004a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a82:	095b      	lsrs	r3, r3, #5
 8004a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a88:	441c      	add	r4, r3
 8004a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a8e:	2200      	movs	r2, #0
 8004a90:	673b      	str	r3, [r7, #112]	; 0x70
 8004a92:	677a      	str	r2, [r7, #116]	; 0x74
 8004a94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a98:	4642      	mov	r2, r8
 8004a9a:	464b      	mov	r3, r9
 8004a9c:	1891      	adds	r1, r2, r2
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	415b      	adcs	r3, r3
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aa8:	4641      	mov	r1, r8
 8004aaa:	1851      	adds	r1, r2, r1
 8004aac:	6039      	str	r1, [r7, #0]
 8004aae:	4649      	mov	r1, r9
 8004ab0:	414b      	adcs	r3, r1
 8004ab2:	607b      	str	r3, [r7, #4]
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ac0:	4659      	mov	r1, fp
 8004ac2:	00cb      	lsls	r3, r1, #3
 8004ac4:	4651      	mov	r1, sl
 8004ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aca:	4651      	mov	r1, sl
 8004acc:	00ca      	lsls	r2, r1, #3
 8004ace:	4610      	mov	r0, r2
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	189b      	adds	r3, r3, r2
 8004ad8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ada:	464b      	mov	r3, r9
 8004adc:	460a      	mov	r2, r1
 8004ade:	eb42 0303 	adc.w	r3, r2, r3
 8004ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	663b      	str	r3, [r7, #96]	; 0x60
 8004aee:	667a      	str	r2, [r7, #100]	; 0x64
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004afc:	4649      	mov	r1, r9
 8004afe:	008b      	lsls	r3, r1, #2
 8004b00:	4641      	mov	r1, r8
 8004b02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b06:	4641      	mov	r1, r8
 8004b08:	008a      	lsls	r2, r1, #2
 8004b0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b0e:	f7fb fb61 	bl	80001d4 <__aeabi_uldivmod>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4b0d      	ldr	r3, [pc, #52]	; (8004b4c <UART_SetConfig+0x4e4>)
 8004b18:	fba3 1302 	umull	r1, r3, r3, r2
 8004b1c:	095b      	lsrs	r3, r3, #5
 8004b1e:	2164      	movs	r1, #100	; 0x64
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	3332      	adds	r3, #50	; 0x32
 8004b2a:	4a08      	ldr	r2, [pc, #32]	; (8004b4c <UART_SetConfig+0x4e4>)
 8004b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b30:	095b      	lsrs	r3, r3, #5
 8004b32:	f003 020f 	and.w	r2, r3, #15
 8004b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4422      	add	r2, r4
 8004b3e:	609a      	str	r2, [r3, #8]
 8004b40:	bf00      	nop
 8004b42:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b46:	46bd      	mov	sp, r7
 8004b48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b4c:	51eb851f 	.word	0x51eb851f

08004b50 <calloc>:
 8004b50:	4b02      	ldr	r3, [pc, #8]	; (8004b5c <calloc+0xc>)
 8004b52:	460a      	mov	r2, r1
 8004b54:	4601      	mov	r1, r0
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	f000 b802 	b.w	8004b60 <_calloc_r>
 8004b5c:	20000ff4 	.word	0x20000ff4

08004b60 <_calloc_r>:
 8004b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b62:	fba1 2402 	umull	r2, r4, r1, r2
 8004b66:	b94c      	cbnz	r4, 8004b7c <_calloc_r+0x1c>
 8004b68:	4611      	mov	r1, r2
 8004b6a:	9201      	str	r2, [sp, #4]
 8004b6c:	f000 f850 	bl	8004c10 <_malloc_r>
 8004b70:	9a01      	ldr	r2, [sp, #4]
 8004b72:	4605      	mov	r5, r0
 8004b74:	b930      	cbnz	r0, 8004b84 <_calloc_r+0x24>
 8004b76:	4628      	mov	r0, r5
 8004b78:	b003      	add	sp, #12
 8004b7a:	bd30      	pop	{r4, r5, pc}
 8004b7c:	220c      	movs	r2, #12
 8004b7e:	6002      	str	r2, [r0, #0]
 8004b80:	2500      	movs	r5, #0
 8004b82:	e7f8      	b.n	8004b76 <_calloc_r+0x16>
 8004b84:	4621      	mov	r1, r4
 8004b86:	f000 f8cf 	bl	8004d28 <memset>
 8004b8a:	e7f4      	b.n	8004b76 <_calloc_r+0x16>

08004b8c <exit>:
 8004b8c:	b508      	push	{r3, lr}
 8004b8e:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <exit+0x1c>)
 8004b90:	4604      	mov	r4, r0
 8004b92:	b113      	cbz	r3, 8004b9a <exit+0xe>
 8004b94:	2100      	movs	r1, #0
 8004b96:	f3af 8000 	nop.w
 8004b9a:	4b04      	ldr	r3, [pc, #16]	; (8004bac <exit+0x20>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	b103      	cbz	r3, 8004ba2 <exit+0x16>
 8004ba0:	4798      	blx	r3
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f7fc ff06 	bl	80019b4 <_exit>
 8004ba8:	00000000 	.word	0x00000000
 8004bac:	20006dc8 	.word	0x20006dc8

08004bb0 <malloc>:
 8004bb0:	4b02      	ldr	r3, [pc, #8]	; (8004bbc <malloc+0xc>)
 8004bb2:	4601      	mov	r1, r0
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	f000 b82b 	b.w	8004c10 <_malloc_r>
 8004bba:	bf00      	nop
 8004bbc:	20000ff4 	.word	0x20000ff4

08004bc0 <free>:
 8004bc0:	4b02      	ldr	r3, [pc, #8]	; (8004bcc <free+0xc>)
 8004bc2:	4601      	mov	r1, r0
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	f000 b8f3 	b.w	8004db0 <_free_r>
 8004bca:	bf00      	nop
 8004bcc:	20000ff4 	.word	0x20000ff4

08004bd0 <sbrk_aligned>:
 8004bd0:	b570      	push	{r4, r5, r6, lr}
 8004bd2:	4e0e      	ldr	r6, [pc, #56]	; (8004c0c <sbrk_aligned+0x3c>)
 8004bd4:	460c      	mov	r4, r1
 8004bd6:	6831      	ldr	r1, [r6, #0]
 8004bd8:	4605      	mov	r5, r0
 8004bda:	b911      	cbnz	r1, 8004be2 <sbrk_aligned+0x12>
 8004bdc:	f000 f8ac 	bl	8004d38 <_sbrk_r>
 8004be0:	6030      	str	r0, [r6, #0]
 8004be2:	4621      	mov	r1, r4
 8004be4:	4628      	mov	r0, r5
 8004be6:	f000 f8a7 	bl	8004d38 <_sbrk_r>
 8004bea:	1c43      	adds	r3, r0, #1
 8004bec:	d00a      	beq.n	8004c04 <sbrk_aligned+0x34>
 8004bee:	1cc4      	adds	r4, r0, #3
 8004bf0:	f024 0403 	bic.w	r4, r4, #3
 8004bf4:	42a0      	cmp	r0, r4
 8004bf6:	d007      	beq.n	8004c08 <sbrk_aligned+0x38>
 8004bf8:	1a21      	subs	r1, r4, r0
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	f000 f89c 	bl	8004d38 <_sbrk_r>
 8004c00:	3001      	adds	r0, #1
 8004c02:	d101      	bne.n	8004c08 <sbrk_aligned+0x38>
 8004c04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004c08:	4620      	mov	r0, r4
 8004c0a:	bd70      	pop	{r4, r5, r6, pc}
 8004c0c:	20006c8c 	.word	0x20006c8c

08004c10 <_malloc_r>:
 8004c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c14:	1ccd      	adds	r5, r1, #3
 8004c16:	f025 0503 	bic.w	r5, r5, #3
 8004c1a:	3508      	adds	r5, #8
 8004c1c:	2d0c      	cmp	r5, #12
 8004c1e:	bf38      	it	cc
 8004c20:	250c      	movcc	r5, #12
 8004c22:	2d00      	cmp	r5, #0
 8004c24:	4607      	mov	r7, r0
 8004c26:	db01      	blt.n	8004c2c <_malloc_r+0x1c>
 8004c28:	42a9      	cmp	r1, r5
 8004c2a:	d905      	bls.n	8004c38 <_malloc_r+0x28>
 8004c2c:	230c      	movs	r3, #12
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	2600      	movs	r6, #0
 8004c32:	4630      	mov	r0, r6
 8004c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d0c <_malloc_r+0xfc>
 8004c3c:	f000 f868 	bl	8004d10 <__malloc_lock>
 8004c40:	f8d8 3000 	ldr.w	r3, [r8]
 8004c44:	461c      	mov	r4, r3
 8004c46:	bb5c      	cbnz	r4, 8004ca0 <_malloc_r+0x90>
 8004c48:	4629      	mov	r1, r5
 8004c4a:	4638      	mov	r0, r7
 8004c4c:	f7ff ffc0 	bl	8004bd0 <sbrk_aligned>
 8004c50:	1c43      	adds	r3, r0, #1
 8004c52:	4604      	mov	r4, r0
 8004c54:	d155      	bne.n	8004d02 <_malloc_r+0xf2>
 8004c56:	f8d8 4000 	ldr.w	r4, [r8]
 8004c5a:	4626      	mov	r6, r4
 8004c5c:	2e00      	cmp	r6, #0
 8004c5e:	d145      	bne.n	8004cec <_malloc_r+0xdc>
 8004c60:	2c00      	cmp	r4, #0
 8004c62:	d048      	beq.n	8004cf6 <_malloc_r+0xe6>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	4631      	mov	r1, r6
 8004c68:	4638      	mov	r0, r7
 8004c6a:	eb04 0903 	add.w	r9, r4, r3
 8004c6e:	f000 f863 	bl	8004d38 <_sbrk_r>
 8004c72:	4581      	cmp	r9, r0
 8004c74:	d13f      	bne.n	8004cf6 <_malloc_r+0xe6>
 8004c76:	6821      	ldr	r1, [r4, #0]
 8004c78:	1a6d      	subs	r5, r5, r1
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	4638      	mov	r0, r7
 8004c7e:	f7ff ffa7 	bl	8004bd0 <sbrk_aligned>
 8004c82:	3001      	adds	r0, #1
 8004c84:	d037      	beq.n	8004cf6 <_malloc_r+0xe6>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	442b      	add	r3, r5
 8004c8a:	6023      	str	r3, [r4, #0]
 8004c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d038      	beq.n	8004d06 <_malloc_r+0xf6>
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	42a2      	cmp	r2, r4
 8004c98:	d12b      	bne.n	8004cf2 <_malloc_r+0xe2>
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	605a      	str	r2, [r3, #4]
 8004c9e:	e00f      	b.n	8004cc0 <_malloc_r+0xb0>
 8004ca0:	6822      	ldr	r2, [r4, #0]
 8004ca2:	1b52      	subs	r2, r2, r5
 8004ca4:	d41f      	bmi.n	8004ce6 <_malloc_r+0xd6>
 8004ca6:	2a0b      	cmp	r2, #11
 8004ca8:	d917      	bls.n	8004cda <_malloc_r+0xca>
 8004caa:	1961      	adds	r1, r4, r5
 8004cac:	42a3      	cmp	r3, r4
 8004cae:	6025      	str	r5, [r4, #0]
 8004cb0:	bf18      	it	ne
 8004cb2:	6059      	strne	r1, [r3, #4]
 8004cb4:	6863      	ldr	r3, [r4, #4]
 8004cb6:	bf08      	it	eq
 8004cb8:	f8c8 1000 	streq.w	r1, [r8]
 8004cbc:	5162      	str	r2, [r4, r5]
 8004cbe:	604b      	str	r3, [r1, #4]
 8004cc0:	4638      	mov	r0, r7
 8004cc2:	f104 060b 	add.w	r6, r4, #11
 8004cc6:	f000 f829 	bl	8004d1c <__malloc_unlock>
 8004cca:	f026 0607 	bic.w	r6, r6, #7
 8004cce:	1d23      	adds	r3, r4, #4
 8004cd0:	1af2      	subs	r2, r6, r3
 8004cd2:	d0ae      	beq.n	8004c32 <_malloc_r+0x22>
 8004cd4:	1b9b      	subs	r3, r3, r6
 8004cd6:	50a3      	str	r3, [r4, r2]
 8004cd8:	e7ab      	b.n	8004c32 <_malloc_r+0x22>
 8004cda:	42a3      	cmp	r3, r4
 8004cdc:	6862      	ldr	r2, [r4, #4]
 8004cde:	d1dd      	bne.n	8004c9c <_malloc_r+0x8c>
 8004ce0:	f8c8 2000 	str.w	r2, [r8]
 8004ce4:	e7ec      	b.n	8004cc0 <_malloc_r+0xb0>
 8004ce6:	4623      	mov	r3, r4
 8004ce8:	6864      	ldr	r4, [r4, #4]
 8004cea:	e7ac      	b.n	8004c46 <_malloc_r+0x36>
 8004cec:	4634      	mov	r4, r6
 8004cee:	6876      	ldr	r6, [r6, #4]
 8004cf0:	e7b4      	b.n	8004c5c <_malloc_r+0x4c>
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	e7cc      	b.n	8004c90 <_malloc_r+0x80>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	603b      	str	r3, [r7, #0]
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	f000 f80e 	bl	8004d1c <__malloc_unlock>
 8004d00:	e797      	b.n	8004c32 <_malloc_r+0x22>
 8004d02:	6025      	str	r5, [r4, #0]
 8004d04:	e7dc      	b.n	8004cc0 <_malloc_r+0xb0>
 8004d06:	605b      	str	r3, [r3, #4]
 8004d08:	deff      	udf	#255	; 0xff
 8004d0a:	bf00      	nop
 8004d0c:	20006c88 	.word	0x20006c88

08004d10 <__malloc_lock>:
 8004d10:	4801      	ldr	r0, [pc, #4]	; (8004d18 <__malloc_lock+0x8>)
 8004d12:	f000 b84b 	b.w	8004dac <__retarget_lock_acquire_recursive>
 8004d16:	bf00      	nop
 8004d18:	20006dd0 	.word	0x20006dd0

08004d1c <__malloc_unlock>:
 8004d1c:	4801      	ldr	r0, [pc, #4]	; (8004d24 <__malloc_unlock+0x8>)
 8004d1e:	f000 b846 	b.w	8004dae <__retarget_lock_release_recursive>
 8004d22:	bf00      	nop
 8004d24:	20006dd0 	.word	0x20006dd0

08004d28 <memset>:
 8004d28:	4402      	add	r2, r0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d100      	bne.n	8004d32 <memset+0xa>
 8004d30:	4770      	bx	lr
 8004d32:	f803 1b01 	strb.w	r1, [r3], #1
 8004d36:	e7f9      	b.n	8004d2c <memset+0x4>

08004d38 <_sbrk_r>:
 8004d38:	b538      	push	{r3, r4, r5, lr}
 8004d3a:	4d06      	ldr	r5, [pc, #24]	; (8004d54 <_sbrk_r+0x1c>)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	4604      	mov	r4, r0
 8004d40:	4608      	mov	r0, r1
 8004d42:	602b      	str	r3, [r5, #0]
 8004d44:	f7fc fe40 	bl	80019c8 <_sbrk>
 8004d48:	1c43      	adds	r3, r0, #1
 8004d4a:	d102      	bne.n	8004d52 <_sbrk_r+0x1a>
 8004d4c:	682b      	ldr	r3, [r5, #0]
 8004d4e:	b103      	cbz	r3, 8004d52 <_sbrk_r+0x1a>
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	bd38      	pop	{r3, r4, r5, pc}
 8004d54:	20006dcc 	.word	0x20006dcc

08004d58 <__errno>:
 8004d58:	4b01      	ldr	r3, [pc, #4]	; (8004d60 <__errno+0x8>)
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000ff4 	.word	0x20000ff4

08004d64 <__libc_init_array>:
 8004d64:	b570      	push	{r4, r5, r6, lr}
 8004d66:	4d0d      	ldr	r5, [pc, #52]	; (8004d9c <__libc_init_array+0x38>)
 8004d68:	4c0d      	ldr	r4, [pc, #52]	; (8004da0 <__libc_init_array+0x3c>)
 8004d6a:	1b64      	subs	r4, r4, r5
 8004d6c:	10a4      	asrs	r4, r4, #2
 8004d6e:	2600      	movs	r6, #0
 8004d70:	42a6      	cmp	r6, r4
 8004d72:	d109      	bne.n	8004d88 <__libc_init_array+0x24>
 8004d74:	4d0b      	ldr	r5, [pc, #44]	; (8004da4 <__libc_init_array+0x40>)
 8004d76:	4c0c      	ldr	r4, [pc, #48]	; (8004da8 <__libc_init_array+0x44>)
 8004d78:	f000 f866 	bl	8004e48 <_init>
 8004d7c:	1b64      	subs	r4, r4, r5
 8004d7e:	10a4      	asrs	r4, r4, #2
 8004d80:	2600      	movs	r6, #0
 8004d82:	42a6      	cmp	r6, r4
 8004d84:	d105      	bne.n	8004d92 <__libc_init_array+0x2e>
 8004d86:	bd70      	pop	{r4, r5, r6, pc}
 8004d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d8c:	4798      	blx	r3
 8004d8e:	3601      	adds	r6, #1
 8004d90:	e7ee      	b.n	8004d70 <__libc_init_array+0xc>
 8004d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d96:	4798      	blx	r3
 8004d98:	3601      	adds	r6, #1
 8004d9a:	e7f2      	b.n	8004d82 <__libc_init_array+0x1e>
 8004d9c:	08005640 	.word	0x08005640
 8004da0:	08005640 	.word	0x08005640
 8004da4:	08005640 	.word	0x08005640
 8004da8:	08005644 	.word	0x08005644

08004dac <__retarget_lock_acquire_recursive>:
 8004dac:	4770      	bx	lr

08004dae <__retarget_lock_release_recursive>:
 8004dae:	4770      	bx	lr

08004db0 <_free_r>:
 8004db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004db2:	2900      	cmp	r1, #0
 8004db4:	d044      	beq.n	8004e40 <_free_r+0x90>
 8004db6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dba:	9001      	str	r0, [sp, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f1a1 0404 	sub.w	r4, r1, #4
 8004dc2:	bfb8      	it	lt
 8004dc4:	18e4      	addlt	r4, r4, r3
 8004dc6:	f7ff ffa3 	bl	8004d10 <__malloc_lock>
 8004dca:	4a1e      	ldr	r2, [pc, #120]	; (8004e44 <_free_r+0x94>)
 8004dcc:	9801      	ldr	r0, [sp, #4]
 8004dce:	6813      	ldr	r3, [r2, #0]
 8004dd0:	b933      	cbnz	r3, 8004de0 <_free_r+0x30>
 8004dd2:	6063      	str	r3, [r4, #4]
 8004dd4:	6014      	str	r4, [r2, #0]
 8004dd6:	b003      	add	sp, #12
 8004dd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ddc:	f7ff bf9e 	b.w	8004d1c <__malloc_unlock>
 8004de0:	42a3      	cmp	r3, r4
 8004de2:	d908      	bls.n	8004df6 <_free_r+0x46>
 8004de4:	6825      	ldr	r5, [r4, #0]
 8004de6:	1961      	adds	r1, r4, r5
 8004de8:	428b      	cmp	r3, r1
 8004dea:	bf01      	itttt	eq
 8004dec:	6819      	ldreq	r1, [r3, #0]
 8004dee:	685b      	ldreq	r3, [r3, #4]
 8004df0:	1949      	addeq	r1, r1, r5
 8004df2:	6021      	streq	r1, [r4, #0]
 8004df4:	e7ed      	b.n	8004dd2 <_free_r+0x22>
 8004df6:	461a      	mov	r2, r3
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	b10b      	cbz	r3, 8004e00 <_free_r+0x50>
 8004dfc:	42a3      	cmp	r3, r4
 8004dfe:	d9fa      	bls.n	8004df6 <_free_r+0x46>
 8004e00:	6811      	ldr	r1, [r2, #0]
 8004e02:	1855      	adds	r5, r2, r1
 8004e04:	42a5      	cmp	r5, r4
 8004e06:	d10b      	bne.n	8004e20 <_free_r+0x70>
 8004e08:	6824      	ldr	r4, [r4, #0]
 8004e0a:	4421      	add	r1, r4
 8004e0c:	1854      	adds	r4, r2, r1
 8004e0e:	42a3      	cmp	r3, r4
 8004e10:	6011      	str	r1, [r2, #0]
 8004e12:	d1e0      	bne.n	8004dd6 <_free_r+0x26>
 8004e14:	681c      	ldr	r4, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	6053      	str	r3, [r2, #4]
 8004e1a:	440c      	add	r4, r1
 8004e1c:	6014      	str	r4, [r2, #0]
 8004e1e:	e7da      	b.n	8004dd6 <_free_r+0x26>
 8004e20:	d902      	bls.n	8004e28 <_free_r+0x78>
 8004e22:	230c      	movs	r3, #12
 8004e24:	6003      	str	r3, [r0, #0]
 8004e26:	e7d6      	b.n	8004dd6 <_free_r+0x26>
 8004e28:	6825      	ldr	r5, [r4, #0]
 8004e2a:	1961      	adds	r1, r4, r5
 8004e2c:	428b      	cmp	r3, r1
 8004e2e:	bf04      	itt	eq
 8004e30:	6819      	ldreq	r1, [r3, #0]
 8004e32:	685b      	ldreq	r3, [r3, #4]
 8004e34:	6063      	str	r3, [r4, #4]
 8004e36:	bf04      	itt	eq
 8004e38:	1949      	addeq	r1, r1, r5
 8004e3a:	6021      	streq	r1, [r4, #0]
 8004e3c:	6054      	str	r4, [r2, #4]
 8004e3e:	e7ca      	b.n	8004dd6 <_free_r+0x26>
 8004e40:	b003      	add	sp, #12
 8004e42:	bd30      	pop	{r4, r5, pc}
 8004e44:	20006c88 	.word	0x20006c88

08004e48 <_init>:
 8004e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4a:	bf00      	nop
 8004e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4e:	bc08      	pop	{r3}
 8004e50:	469e      	mov	lr, r3
 8004e52:	4770      	bx	lr

08004e54 <_fini>:
 8004e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e56:	bf00      	nop
 8004e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5a:	bc08      	pop	{r3}
 8004e5c:	469e      	mov	lr, r3
 8004e5e:	4770      	bx	lr
