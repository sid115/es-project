
Test_WS2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b8  08005e78  08005e78  00015e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006730  08006730  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006730  08006730  00016730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006738  08006738  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006738  08006738  00016738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800673c  0800673c  0001673c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005dc4  20000068  080067a8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005e2c  080067a8  00025e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010164  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025a2  00000000  00000000  0003023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f78  00000000  00000000  000327e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c25  00000000  00000000  00033760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018074  00000000  00000000  00034385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001174a  00000000  00000000  0004c3f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009186f  00000000  00000000  0005db43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b54  00000000  00000000  000ef3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000f3f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e60 	.word	0x08005e60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005e60 	.word	0x08005e60

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b096      	sub	sp, #88	; 0x58
 8000580:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  ColorRGB_t color[NUM_COLORS] = {
 8000582:	4b6b      	ldr	r3, [pc, #428]	; (8000730 <main+0x1b4>)
 8000584:	f107 0408 	add.w	r4, r7, #8
 8000588:	461d      	mov	r5, r3
 800058a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000596:	682b      	ldr	r3, [r5, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	8022      	strh	r2, [r4, #0]
 800059c:	3402      	adds	r4, #2
 800059e:	0c1b      	lsrs	r3, r3, #16
 80005a0:	7023      	strb	r3, [r4, #0]
    {0,   0,   0  }  // C_BLACK
  };
  //ColorRGB_t* pixel[WS2812_NUM_LEDS_Y][WS2812_NUM_LEDS_X] = {0}; // fill with &color[C_COLOR]
                                                                
  /* maze vars */
  uint8_t startX = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  uint8_t startY = 12;
 80005a8:	230c      	movs	r3, #12
 80005aa:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  uint8_t exitX = 39;
 80005ae:	2327      	movs	r3, #39	; 0x27
 80005b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint8_t exitY = 15;
 80005b4:	230f      	movs	r3, #15
 80005b6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  uint16_t i = 0, x = 0, y = 0; // index variables
 80005ba:	2300      	movs	r3, #0
 80005bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80005c0:	2300      	movs	r3, #0
 80005c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80005c6:	2300      	movs	r3, #0
 80005c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f001 fca8 	bl	8001f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f8b6 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 fa6a 	bl	8000aac <MX_GPIO_Init>
  MX_DMA_Init();
 80005d8:	f000 fa40 	bl	8000a5c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005dc:	f000 fa14 	bl	8000a08 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005e0:	f000 f950 	bl	8000884 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005e4:	f000 f9c2 	bl	800096c <MX_TIM3_Init>
  MX_SPI2_Init();
 80005e8:	f000 f916 	bl	8000818 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ws2812_init();
 80005ec:	f001 fb3c 	bl	8001c68 <ws2812_init>
  initMaze(&maze, WS2812_NUM_LEDS_Y, WS2812_NUM_LEDS_X, startX, startY, exitX, exitY);
 80005f0:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80005f4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	4613      	mov	r3, r2
 8000608:	2228      	movs	r2, #40	; 0x28
 800060a:	2118      	movs	r1, #24
 800060c:	4849      	ldr	r0, [pc, #292]	; (8000734 <main+0x1b8>)
 800060e:	f000 fac0 	bl	8000b92 <initMaze>
  initPath(&path, WS2812_NUM_LEDS_Y * WS2812_NUM_LEDS_X);
 8000612:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000616:	4848      	ldr	r0, [pc, #288]	; (8000738 <main+0x1bc>)
 8000618:	f000 fbb9 	bl	8000d8e <initPath>
  
  generateMaze(&maze);
 800061c:	4845      	ldr	r0, [pc, #276]	; (8000734 <main+0x1b8>)
 800061e:	f000 fd1f 	bl	8001060 <generateMaze>
  solveMaze(&maze, &path);
 8000622:	4945      	ldr	r1, [pc, #276]	; (8000738 <main+0x1bc>)
 8000624:	4843      	ldr	r0, [pc, #268]	; (8000734 <main+0x1b8>)
 8000626:	f000 fd60 	bl	80010ea <solveMaze>

  /* write maze to matrix */
  for (x = 0; x < WS2812_NUM_LEDS_X; x++)
 800062a:	2300      	movs	r3, #0
 800062c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000630:	e030      	b.n	8000694 <main+0x118>
  {
    for (y = 0; y < WS2812_NUM_LEDS_Y; y++)
 8000632:	2300      	movs	r3, #0
 8000634:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000638:	e023      	b.n	8000682 <main+0x106>
    {
      if (maze.grid[y][x] == WALL)
 800063a:	4b3e      	ldr	r3, [pc, #248]	; (8000734 <main+0x1b8>)
 800063c:	69da      	ldr	r2, [r3, #28]
 800063e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	4413      	add	r3, r2
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800064c:	4413      	add	r3, r2
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d111      	bne.n	8000678 <main+0xfc>
      {
        ws2812_pixel(x, y, &(ColorRGB_t){15, 15, 15}); // C_WHITE is too bright
 8000654:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000658:	b2d8      	uxtb	r0, r3
 800065a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800065e:	b2d9      	uxtb	r1, r3
 8000660:	4a36      	ldr	r2, [pc, #216]	; (800073c <main+0x1c0>)
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	6812      	ldr	r2, [r2, #0]
 8000666:	4614      	mov	r4, r2
 8000668:	801c      	strh	r4, [r3, #0]
 800066a:	3302      	adds	r3, #2
 800066c:	0c12      	lsrs	r2, r2, #16
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	461a      	mov	r2, r3
 8000674:	f001 fb1a 	bl	8001cac <ws2812_pixel>
    for (y = 0; y < WS2812_NUM_LEDS_Y; y++)
 8000678:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800067c:	3301      	adds	r3, #1
 800067e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000682:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000686:	2b17      	cmp	r3, #23
 8000688:	d9d7      	bls.n	800063a <main+0xbe>
  for (x = 0; x < WS2812_NUM_LEDS_X; x++)
 800068a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800068e:	3301      	adds	r3, #1
 8000690:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000694:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000698:	2b27      	cmp	r3, #39	; 0x27
 800069a:	d9ca      	bls.n	8000632 <main+0xb6>
  } 
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  while (1)
  {
    /* USER CODE END WHILE */
    ws2812_pixel(path.p[i].x, path.p[i].y, &color[C_YELLOW]); // TODO: start point is not in path
 80006a2:	4b25      	ldr	r3, [pc, #148]	; (8000738 <main+0x1bc>)
 80006a4:	6819      	ldr	r1, [r3, #0]
 80006a6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80006aa:	4613      	mov	r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	4413      	add	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	440b      	add	r3, r1
 80006b4:	7818      	ldrb	r0, [r3, #0]
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <main+0x1bc>)
 80006b8:	6819      	ldr	r1, [r3, #0]
 80006ba:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80006be:	4613      	mov	r3, r2
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	4413      	add	r3, r2
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	440b      	add	r3, r1
 80006c8:	7859      	ldrb	r1, [r3, #1]
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	3312      	adds	r3, #18
 80006d0:	461a      	mov	r2, r3
 80006d2:	f001 faeb 	bl	8001cac <ws2812_pixel>
    HAL_Delay(50);
 80006d6:	2032      	movs	r0, #50	; 0x32
 80006d8:	f001 fc94 	bl	8002004 <HAL_Delay>
    ws2812_pixel(path.p[i].x, path.p[i].y, &color[C_BLACK]);
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <main+0x1bc>)
 80006de:	6819      	ldr	r1, [r3, #0]
 80006e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80006e4:	4613      	mov	r3, r2
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	4413      	add	r3, r2
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	440b      	add	r3, r1
 80006ee:	7818      	ldrb	r0, [r3, #0]
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <main+0x1bc>)
 80006f2:	6819      	ldr	r1, [r3, #0]
 80006f4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80006f8:	4613      	mov	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4413      	add	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	440b      	add	r3, r1
 8000702:	7859      	ldrb	r1, [r3, #1]
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	3330      	adds	r3, #48	; 0x30
 800070a:	461a      	mov	r2, r3
 800070c:	f001 face 	bl	8001cac <ws2812_pixel>

    i++;
 8000710:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000714:	3301      	adds	r3, #1
 8000716:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    if (i == path.size) i = 0;
 800071a:	4b07      	ldr	r3, [pc, #28]	; (8000738 <main+0x1bc>)
 800071c:	889b      	ldrh	r3, [r3, #4]
 800071e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000722:	429a      	cmp	r2, r3
 8000724:	d1bd      	bne.n	80006a2 <main+0x126>
 8000726:	2300      	movs	r3, #0
 8000728:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    ws2812_pixel(path.p[i].x, path.p[i].y, &color[C_YELLOW]); // TODO: start point is not in path
 800072c:	e7b9      	b.n	80006a2 <main+0x126>
 800072e:	bf00      	nop
 8000730:	08005e78 	.word	0x08005e78
 8000734:	20000270 	.word	0x20000270
 8000738:	20000290 	.word	0x20000290
 800073c:	08005eac 	.word	0x08005eac

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	; 0x50
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	2230      	movs	r2, #48	; 0x30
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f004 fd63 	bl	800521a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <SystemClock_Config+0xd0>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	4a28      	ldr	r2, [pc, #160]	; (8000810 <SystemClock_Config+0xd0>)
 800076e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000772:	6413      	str	r3, [r2, #64]	; 0x40
 8000774:	4b26      	ldr	r3, [pc, #152]	; (8000810 <SystemClock_Config+0xd0>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	4b23      	ldr	r3, [pc, #140]	; (8000814 <SystemClock_Config+0xd4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800078c:	4a21      	ldr	r2, [pc, #132]	; (8000814 <SystemClock_Config+0xd4>)
 800078e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <SystemClock_Config+0xd4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a0:	2302      	movs	r3, #2
 80007a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a8:	2310      	movs	r3, #16
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b0:	2300      	movs	r3, #0
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007b4:	2310      	movs	r3, #16
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007be:	2304      	movs	r3, #4
 80007c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007c2:	2307      	movs	r3, #7
 80007c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	4618      	mov	r0, r3
 80007cc:	f002 fa80 	bl	8002cd0 <HAL_RCC_OscConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007d6:	f000 f9d7 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2302      	movs	r3, #2
 80007e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2102      	movs	r1, #2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fce2 	bl	80031c0 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000802:	f000 f9c1 	bl	8000b88 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	; 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_SPI2_Init+0x64>)
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <MX_SPI2_Init+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_SPI2_Init+0x64>)
 8000824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000828:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_SPI2_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_SPI2_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_SPI2_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_SPI2_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_SPI2_Init+0x64>)
 8000844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000848:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_SPI2_Init+0x64>)
 800084c:	2218      	movs	r2, #24
 800084e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_SPI2_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_SPI2_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_SPI2_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_SPI2_Init+0x64>)
 8000864:	220a      	movs	r2, #10
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_SPI2_Init+0x64>)
 800086a:	f002 fec9 	bl	8003600 <HAL_SPI_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000874:	f000 f988 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000084 	.word	0x20000084
 8000880:	40003800 	.word	0x40003800

08000884 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08e      	sub	sp, #56	; 0x38
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000898:	f107 0320 	add.w	r3, r7, #32
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
 80008b0:	615a      	str	r2, [r3, #20]
 80008b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008b4:	4b2c      	ldr	r3, [pc, #176]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008bc:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c2:	4b29      	ldr	r3, [pc, #164]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80008c8:	4b27      	ldr	r3, [pc, #156]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008ca:	2264      	movs	r2, #100	; 0x64
 80008cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ce:	4b26      	ldr	r3, [pc, #152]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d4:	4b24      	ldr	r3, [pc, #144]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008da:	4823      	ldr	r0, [pc, #140]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008dc:	f003 fa38 	bl	8003d50 <HAL_TIM_Base_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80008e6:	f000 f94f 	bl	8000b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008f4:	4619      	mov	r1, r3
 80008f6:	481c      	ldr	r0, [pc, #112]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008f8:	f003 fb94 	bl	8004024 <HAL_TIM_ConfigClockSource>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000902:	f000 f941 	bl	8000b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000906:	4818      	ldr	r0, [pc, #96]	; (8000968 <MX_TIM2_Init+0xe4>)
 8000908:	f003 fa71 	bl	8003dee <HAL_TIM_PWM_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000912:	f000 f939 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800091e:	f107 0320 	add.w	r3, r7, #32
 8000922:	4619      	mov	r1, r3
 8000924:	4810      	ldr	r0, [pc, #64]	; (8000968 <MX_TIM2_Init+0xe4>)
 8000926:	f003 feeb 	bl	8004700 <HAL_TIMEx_MasterConfigSynchronization>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000930:	f000 f92a 	bl	8000b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000934:	2360      	movs	r3, #96	; 0x60
 8000936:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2208      	movs	r2, #8
 8000948:	4619      	mov	r1, r3
 800094a:	4807      	ldr	r0, [pc, #28]	; (8000968 <MX_TIM2_Init+0xe4>)
 800094c:	f003 faa8 	bl	8003ea0 <HAL_TIM_PWM_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000956:	f000 f917 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800095a:	4803      	ldr	r0, [pc, #12]	; (8000968 <MX_TIM2_Init+0xe4>)
 800095c:	f000 ffe4 	bl	8001928 <HAL_TIM_MspPostInit>

}
 8000960:	bf00      	nop
 8000962:	3738      	adds	r7, #56	; 0x38
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000013c 	.word	0x2000013c

0800096c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000980:	463b      	mov	r3, r7
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000988:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <MX_TIM3_Init+0x94>)
 800098a:	4a1e      	ldr	r2, [pc, #120]	; (8000a04 <MX_TIM3_Init+0x98>)
 800098c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800098e:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <MX_TIM3_Init+0x94>)
 8000990:	2200      	movs	r2, #0
 8000992:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <MX_TIM3_Init+0x94>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <MX_TIM3_Init+0x94>)
 800099c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <MX_TIM3_Init+0x94>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <MX_TIM3_Init+0x94>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009ae:	4814      	ldr	r0, [pc, #80]	; (8000a00 <MX_TIM3_Init+0x94>)
 80009b0:	f003 f9ce 	bl	8003d50 <HAL_TIM_Base_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80009ba:	f000 f8e5 	bl	8000b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	4619      	mov	r1, r3
 80009ca:	480d      	ldr	r0, [pc, #52]	; (8000a00 <MX_TIM3_Init+0x94>)
 80009cc:	f003 fb2a 	bl	8004024 <HAL_TIM_ConfigClockSource>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80009d6:	f000 f8d7 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009e2:	463b      	mov	r3, r7
 80009e4:	4619      	mov	r1, r3
 80009e6:	4806      	ldr	r0, [pc, #24]	; (8000a00 <MX_TIM3_Init+0x94>)
 80009e8:	f003 fe8a 	bl	8004700 <HAL_TIMEx_MasterConfigSynchronization>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80009f2:	f000 f8c9 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000184 	.word	0x20000184
 8000a04:	40000400 	.word	0x40000400

08000a08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <MX_USART2_UART_Init+0x50>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a40:	f003 fecc 	bl	80047dc <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a4a:	f000 f89d 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2000022c 	.word	0x2000022c
 8000a58:	40004400 	.word	0x40004400

08000a5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_DMA_Init+0x4c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <MX_DMA_Init+0x4c>)
 8000a6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <MX_DMA_Init+0x4c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	200c      	movs	r0, #12
 8000a84:	f001 fbbd 	bl	8002202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a88:	200c      	movs	r0, #12
 8000a8a:	f001 fbd6 	bl	800223a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	200f      	movs	r0, #15
 8000a94:	f001 fbb5 	bl	8002202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a98:	200f      	movs	r0, #15
 8000a9a:	f001 fbce 	bl	800223a <HAL_NVIC_EnableIRQ>

}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a2c      	ldr	r2, [pc, #176]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a25      	ldr	r2, [pc, #148]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a1e      	ldr	r2, [pc, #120]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2120      	movs	r1, #32
 8000b36:	4812      	ldr	r0, [pc, #72]	; (8000b80 <MX_GPIO_Init+0xd4>)
 8000b38:	f002 f8b0 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b42:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	480c      	ldr	r0, [pc, #48]	; (8000b84 <MX_GPIO_Init+0xd8>)
 8000b54:	f001 ff1e 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b58:	2320      	movs	r3, #32
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_GPIO_Init+0xd4>)
 8000b70:	f001 ff10 	bl	8002994 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000
 8000b84:	40020800 	.word	0x40020800

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <Error_Handler+0x8>

08000b92 <initMaze>:
#include "maze.h"

Maze maze;
Path path;

void initMaze(Maze* maze, uint8_t rows, uint8_t cols, uint8_t startX, uint8_t startY, uint8_t exitX, uint8_t exitY) {
 8000b92:	b590      	push	{r4, r7, lr}
 8000b94:	b085      	sub	sp, #20
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	4608      	mov	r0, r1
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	70fb      	strb	r3, [r7, #3]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	70bb      	strb	r3, [r7, #2]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	707b      	strb	r3, [r7, #1]
    uint8_t r, c; /* index variables */

    /* check input */
    if (rows == 0) exit(1);                                                                 /* number of rows must be greater than 0 */
 8000bac:	78fb      	ldrb	r3, [r7, #3]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d102      	bne.n	8000bb8 <initMaze+0x26>
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f004 f8f2 	bl	8004d9c <exit>
    if (cols == 0) exit(1);                                                                 /* number of cols must be greater than 0 */
 8000bb8:	78bb      	ldrb	r3, [r7, #2]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d102      	bne.n	8000bc4 <initMaze+0x32>
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f004 f8ec 	bl	8004d9c <exit>
    if (startX == exitX && startY == exitY) exit(1);                                        /* start and exit must be different */
 8000bc4:	787a      	ldrb	r2, [r7, #1]
 8000bc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d108      	bne.n	8000be0 <initMaze+0x4e>
 8000bce:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000bd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d102      	bne.n	8000be0 <initMaze+0x4e>
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f004 f8de 	bl	8004d9c <exit>
    if (startX >= cols || startY >= rows) exit(1);                                          /* start point has to be inside the maze */
 8000be0:	787a      	ldrb	r2, [r7, #1]
 8000be2:	78bb      	ldrb	r3, [r7, #2]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d204      	bcs.n	8000bf2 <initMaze+0x60>
 8000be8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000bec:	78fb      	ldrb	r3, [r7, #3]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d302      	bcc.n	8000bf8 <initMaze+0x66>
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f004 f8d2 	bl	8004d9c <exit>
    if (exitX >= cols || exitY >= rows) exit(1);                                            /* exit point has to be inside the maze */
 8000bf8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000bfc:	78bb      	ldrb	r3, [r7, #2]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d204      	bcs.n	8000c0c <initMaze+0x7a>
 8000c02:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000c06:	78fb      	ldrb	r3, [r7, #3]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d302      	bcc.n	8000c12 <initMaze+0x80>
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f004 f8c5 	bl	8004d9c <exit>
    if (!((startX == 0 || startX == cols-1) || (startY == 0 || startY == rows-1))) exit(1); /* start point has to be on edge of maze */
 8000c12:	787b      	ldrb	r3, [r7, #1]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d011      	beq.n	8000c3c <initMaze+0xaa>
 8000c18:	787a      	ldrb	r2, [r7, #1]
 8000c1a:	78bb      	ldrb	r3, [r7, #2]
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d00c      	beq.n	8000c3c <initMaze+0xaa>
 8000c22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d008      	beq.n	8000c3c <initMaze+0xaa>
 8000c2a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c2e:	78fb      	ldrb	r3, [r7, #3]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d002      	beq.n	8000c3c <initMaze+0xaa>
 8000c36:	2001      	movs	r0, #1
 8000c38:	f004 f8b0 	bl	8004d9c <exit>
    if (!((exitX == 0 || exitX == cols-1) || (exitY == 0 || exitY == rows-1))) exit(1);     /* exit point has to be on edge of maze */
 8000c3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d012      	beq.n	8000c6a <initMaze+0xd8>
 8000c44:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000c48:	78bb      	ldrb	r3, [r7, #2]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d00c      	beq.n	8000c6a <initMaze+0xd8>
 8000c50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d008      	beq.n	8000c6a <initMaze+0xd8>
 8000c58:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000c5c:	78fb      	ldrb	r3, [r7, #3]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d002      	beq.n	8000c6a <initMaze+0xd8>
 8000c64:	2001      	movs	r0, #1
 8000c66:	f004 f899 	bl	8004d9c <exit>
    if ((startX == 0 || startX == cols-1) && (startY == 0 || startY == rows-1)) exit(1);    /* start point must not be on corner of maze */
 8000c6a:	787b      	ldrb	r3, [r7, #1]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d004      	beq.n	8000c7a <initMaze+0xe8>
 8000c70:	787a      	ldrb	r2, [r7, #1]
 8000c72:	78bb      	ldrb	r3, [r7, #2]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d10c      	bne.n	8000c94 <initMaze+0x102>
 8000c7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d005      	beq.n	8000c8e <initMaze+0xfc>
 8000c82:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d102      	bne.n	8000c94 <initMaze+0x102>
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f004 f884 	bl	8004d9c <exit>
    if ((exitX == 0 || exitX == cols-1) && (exitY == 0 || exitY == rows-1)) exit(1);        /* exit point must not be on corner of maze */
 8000c94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d005      	beq.n	8000ca8 <initMaze+0x116>
 8000c9c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000ca0:	78bb      	ldrb	r3, [r7, #2]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d10c      	bne.n	8000cc2 <initMaze+0x130>
 8000ca8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d005      	beq.n	8000cbc <initMaze+0x12a>
 8000cb0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000cb4:	78fb      	ldrb	r3, [r7, #3]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d102      	bne.n	8000cc2 <initMaze+0x130>
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f004 f86d 	bl	8004d9c <exit>

    maze->rows = rows;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	78fa      	ldrb	r2, [r7, #3]
 8000cc6:	701a      	strb	r2, [r3, #0]
    maze->cols = cols;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	78ba      	ldrb	r2, [r7, #2]
 8000ccc:	705a      	strb	r2, [r3, #1]
    maze->start.x = startX;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	787a      	ldrb	r2, [r7, #1]
 8000cd2:	711a      	strb	r2, [r3, #4]
    maze->start.y = startY;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000cda:	715a      	strb	r2, [r3, #5]
    maze->start.prevX = -1;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ce2:	609a      	str	r2, [r3, #8]
    maze->start.prevY = -1;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cea:	60da      	str	r2, [r3, #12]
    maze->exit.x = exitX;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000cf2:	741a      	strb	r2, [r3, #16]
    maze->exit.y = exitY;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000cfa:	745a      	strb	r2, [r3, #17]
    maze->exit.prevX = -1;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d02:	615a      	str	r2, [r3, #20]
    maze->exit.prevY = -1;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d0a:	619a      	str	r2, [r3, #24]

    /* allocate memory */
    maze->grid = (uint8_t**) malloc(rows * sizeof(uint8_t*));
 8000d0c:	78fb      	ldrb	r3, [r7, #3]
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f004 f855 	bl	8004dc0 <malloc>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461a      	mov	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	61da      	str	r2, [r3, #28]
    for (r = 0; r < rows; r++) {
 8000d1e:	2300      	movs	r3, #0
 8000d20:	73fb      	strb	r3, [r7, #15]
 8000d22:	e00d      	b.n	8000d40 <initMaze+0x1ae>
        maze->grid[r] = (uint8_t*) malloc(cols * sizeof(uint8_t));
 8000d24:	78b9      	ldrb	r1, [r7, #2]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69da      	ldr	r2, [r3, #28]
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	18d4      	adds	r4, r2, r3
 8000d30:	4608      	mov	r0, r1
 8000d32:	f004 f845 	bl	8004dc0 <malloc>
 8000d36:	4603      	mov	r3, r0
 8000d38:	6023      	str	r3, [r4, #0]
    for (r = 0; r < rows; r++) {
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
 8000d40:	7bfa      	ldrb	r2, [r7, #15]
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d3ed      	bcc.n	8000d24 <initMaze+0x192>
    }

    /* initialize maze grid as WALLs */
    for (r = 0; r < rows; r++) {
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]
 8000d4c:	e016      	b.n	8000d7c <initMaze+0x1ea>
        for (c = 0; c < cols; c++) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73bb      	strb	r3, [r7, #14]
 8000d52:	e00c      	b.n	8000d6e <initMaze+0x1dc>
            maze->grid[r][c] = WALL;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69da      	ldr	r2, [r3, #28]
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	7bbb      	ldrb	r3, [r7, #14]
 8000d62:	4413      	add	r3, r2
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
        for (c = 0; c < cols; c++) {
 8000d68:	7bbb      	ldrb	r3, [r7, #14]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	73bb      	strb	r3, [r7, #14]
 8000d6e:	7bba      	ldrb	r2, [r7, #14]
 8000d70:	78bb      	ldrb	r3, [r7, #2]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d3ee      	bcc.n	8000d54 <initMaze+0x1c2>
    for (r = 0; r < rows; r++) {
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
 8000d7c:	7bfa      	ldrb	r2, [r7, #15]
 8000d7e:	78fb      	ldrb	r3, [r7, #3]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d3e4      	bcc.n	8000d4e <initMaze+0x1bc>
        }
    }
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd90      	pop	{r4, r7, pc}

08000d8e <initPath>:

void initPath(Path* path, uint16_t length) {
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b084      	sub	sp, #16
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	460b      	mov	r3, r1
 8000d98:	807b      	strh	r3, [r7, #2]
    path->p = (Point *) malloc(length * sizeof(Point));
 8000d9a:	887a      	ldrh	r2, [r7, #2]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f004 f80b 	bl	8004dc0 <malloc>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	601a      	str	r2, [r3, #0]
    
    if (path == NULL) exit(1);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <initPath+0x30>
 8000db8:	2001      	movs	r0, #1
 8000dba:	f003 ffef 	bl	8004d9c <exit>
    
    for (uint16_t i = 0; i < length; i++) {
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	81fb      	strh	r3, [r7, #14]
 8000dc2:	e02c      	b.n	8000e1e <initPath+0x90>
        path->p[i].x = 0;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6819      	ldr	r1, [r3, #0]
 8000dc8:	89fa      	ldrh	r2, [r7, #14]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	4413      	add	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
        path->p[i].y = 0;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6819      	ldr	r1, [r3, #0]
 8000ddc:	89fa      	ldrh	r2, [r7, #14]
 8000dde:	4613      	mov	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	4413      	add	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	440b      	add	r3, r1
 8000de8:	2200      	movs	r2, #0
 8000dea:	705a      	strb	r2, [r3, #1]
        path->p[i].prevX = -1;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6819      	ldr	r1, [r3, #0]
 8000df0:	89fa      	ldrh	r2, [r7, #14]
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e00:	605a      	str	r2, [r3, #4]
        path->p[i].prevY = -1;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6819      	ldr	r1, [r3, #0]
 8000e06:	89fa      	ldrh	r2, [r7, #14]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	440b      	add	r3, r1
 8000e12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e16:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0; i < length; i++) {
 8000e18:	89fb      	ldrh	r3, [r7, #14]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	81fb      	strh	r3, [r7, #14]
 8000e1e:	89fa      	ldrh	r2, [r7, #14]
 8000e20:	887b      	ldrh	r3, [r7, #2]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d3ce      	bcc.n	8000dc4 <initPath+0x36>
    }
    path->size = length;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	887a      	ldrh	r2, [r7, #2]
 8000e2a:	809a      	strh	r2, [r3, #4]
}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <pathPush>:

void pathPush(Path* path, Point* point) {
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
    static uint16_t cnt = 0; /* counter for path array */

    path->p[cnt] = *point;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <pathPush+0x40>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	4619      	mov	r1, r3
 8000e48:	460b      	mov	r3, r1
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	440b      	add	r3, r1
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    cnt++;
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <pathPush+0x40>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <pathPush+0x40>)
 8000e64:	801a      	strh	r2, [r3, #0]
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000298 	.word	0x20000298

08000e78 <carveMaze>:

void carveMaze(Maze *maze, uint8_t x, uint8_t y) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	70fb      	strb	r3, [r7, #3]
 8000e84:	4613      	mov	r3, r2
 8000e86:	70bb      	strb	r3, [r7, #2]
    int x1, y1;
    int x2, y2;
    int dx, dy;
    int dir, count;

    dir = rand() % 4;
 8000e88:	f004 f884 	bl	8004f94 <rand>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	425a      	negs	r2, r3
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	f002 0203 	and.w	r2, r2, #3
 8000e98:	bf58      	it	pl
 8000e9a:	4253      	negpl	r3, r2
 8000e9c:	61fb      	str	r3, [r7, #28]
    count = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]

    while (count < 4) {
 8000ea2:	e089      	b.n	8000fb8 <carveMaze+0x140>
        dx = 0; dy = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
        switch (dir) {
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d00f      	beq.n	8000ed2 <carveMaze+0x5a>
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	dc10      	bgt.n	8000eda <carveMaze+0x62>
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <carveMaze+0x4e>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d003      	beq.n	8000ecc <carveMaze+0x54>
 8000ec4:	e009      	b.n	8000eda <carveMaze+0x62>
            case 0:  dx = 1;  break;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eca:	e00a      	b.n	8000ee2 <carveMaze+0x6a>
            case 1:  dy = 1;  break;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	623b      	str	r3, [r7, #32]
 8000ed0:	e007      	b.n	8000ee2 <carveMaze+0x6a>
            case 2:  dx = -1; break;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed8:	e003      	b.n	8000ee2 <carveMaze+0x6a>
            default: dy = -1; break;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ede:	623b      	str	r3, [r7, #32]
 8000ee0:	bf00      	nop
        }

        x1 = x + dx;
 8000ee2:	78fb      	ldrb	r3, [r7, #3]
 8000ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee6:	4413      	add	r3, r2
 8000ee8:	617b      	str	r3, [r7, #20]
        y1 = y + dy;
 8000eea:	78bb      	ldrb	r3, [r7, #2]
 8000eec:	6a3a      	ldr	r2, [r7, #32]
 8000eee:	4413      	add	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        x2 = x1 + dx;
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef6:	4413      	add	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
        y2 = y1 + dy;
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	6a3b      	ldr	r3, [r7, #32]
 8000efe:	4413      	add	r3, r2
 8000f00:	60bb      	str	r3, [r7, #8]
        
        if (x2 > 0 && x2 < maze->cols && y2 > 0 && y2 < maze->rows /* inbounce? */
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	dd4a      	ble.n	8000f9e <carveMaze+0x126>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	785b      	ldrb	r3, [r3, #1]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4293      	cmp	r3, r2
 8000f12:	da44      	bge.n	8000f9e <carveMaze+0x126>
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	dd41      	ble.n	8000f9e <carveMaze+0x126>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4293      	cmp	r3, r2
 8000f24:	da3b      	bge.n	8000f9e <carveMaze+0x126>
           && maze->grid[y1][x1] == WALL && maze->grid[y2][x2] == WALL) { /* wall? */
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69da      	ldr	r2, [r3, #28]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	4413      	add	r3, r2
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d130      	bne.n	8000f9e <carveMaze+0x126>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69da      	ldr	r2, [r3, #28]
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d125      	bne.n	8000f9e <carveMaze+0x126>
            maze->grid[y1][x1] = PATH;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69da      	ldr	r2, [r3, #28]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	4413      	add	r3, r2
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
            maze->grid[y2][x2] = PATH;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69da      	ldr	r2, [r3, #28]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4413      	add	r3, r2
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
            x = x2; y = y2;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	70fb      	strb	r3, [r7, #3]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	70bb      	strb	r3, [r7, #2]
            dir = rand() % 4;
 8000f82:	f004 f807 	bl	8004f94 <rand>
 8000f86:	4603      	mov	r3, r0
 8000f88:	425a      	negs	r2, r3
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	f002 0203 	and.w	r2, r2, #3
 8000f92:	bf58      	it	pl
 8000f94:	4253      	negpl	r3, r2
 8000f96:	61fb      	str	r3, [r7, #28]
            count = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
 8000f9c:	e00c      	b.n	8000fb8 <carveMaze+0x140>
        } else {
            dir = (dir + 1) % 4;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	425a      	negs	r2, r3
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	f002 0203 	and.w	r2, r2, #3
 8000fac:	bf58      	it	pl
 8000fae:	4253      	negpl	r3, r2
 8000fb0:	61fb      	str	r3, [r7, #28]
            count += 1;
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	61bb      	str	r3, [r7, #24]
    while (count < 4) {
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	f77f af72 	ble.w	8000ea4 <carveMaze+0x2c>
        }
    }
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	; 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <flipPath>:

void flipPath(Path* path) {
 8000fca:	b490      	push	{r4, r7}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
    uint16_t left = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	82fb      	strh	r3, [r7, #22]
    uint16_t right = path->size - 1;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	889b      	ldrh	r3, [r3, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	82bb      	strh	r3, [r7, #20]
    Point temp;

    while (left < right) {
 8000fde:	e035      	b.n	800104c <flipPath+0x82>
        /* swap elements at left and right indices */
        temp = path->p[left];
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6819      	ldr	r1, [r3, #0]
 8000fe4:	8afa      	ldrh	r2, [r7, #22]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	18ca      	adds	r2, r1, r3
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ff6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        path->p[left] = path->p[right];
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6819      	ldr	r1, [r3, #0]
 8000ffe:	8aba      	ldrh	r2, [r7, #20]
 8001000:	4613      	mov	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	18c8      	adds	r0, r1, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6819      	ldr	r1, [r3, #0]
 800100e:	8afa      	ldrh	r2, [r7, #22]
 8001010:	4613      	mov	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	4602      	mov	r2, r0
 800101c:	ca07      	ldmia	r2, {r0, r1, r2}
 800101e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        path->p[right] = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6819      	ldr	r1, [r3, #0]
 8001026:	8aba      	ldrh	r2, [r7, #20]
 8001028:	4613      	mov	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	461c      	mov	r4, r3
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800103c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* move left index to the right and right index to the left */
        left++;
 8001040:	8afb      	ldrh	r3, [r7, #22]
 8001042:	3301      	adds	r3, #1
 8001044:	82fb      	strh	r3, [r7, #22]
        right--;
 8001046:	8abb      	ldrh	r3, [r7, #20]
 8001048:	3b01      	subs	r3, #1
 800104a:	82bb      	strh	r3, [r7, #20]
    while (left < right) {
 800104c:	8afa      	ldrh	r2, [r7, #22]
 800104e:	8abb      	ldrh	r3, [r7, #20]
 8001050:	429a      	cmp	r2, r3
 8001052:	d3c5      	bcc.n	8000fe0 <flipPath+0x16>
    }
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bc90      	pop	{r4, r7}
 800105e:	4770      	bx	lr

08001060 <generateMaze>:

void generateMaze(Maze* maze) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    uint8_t x, y;
    
    /* RNG */
    srand(time(0));
 8001068:	2000      	movs	r0, #0
 800106a:	f004 f8df 	bl	800522c <time>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4613      	mov	r3, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f003 ff5f 	bl	8004f38 <srand>
    
    /* carve the maze */
    for(y = 1; y < maze->rows; y += 2) {
 800107a:	2301      	movs	r3, #1
 800107c:	73bb      	strb	r3, [r7, #14]
 800107e:	e013      	b.n	80010a8 <generateMaze+0x48>
        for(x = 1; x < maze->cols; x += 2) {
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e008      	b.n	8001098 <generateMaze+0x38>
            carveMaze(maze, x, y);
 8001086:	7bba      	ldrb	r2, [r7, #14]
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	4619      	mov	r1, r3
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff fef3 	bl	8000e78 <carveMaze>
        for(x = 1; x < maze->cols; x += 2) {
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	3302      	adds	r3, #2
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	785b      	ldrb	r3, [r3, #1]
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d3f1      	bcc.n	8001086 <generateMaze+0x26>
    for(y = 1; y < maze->rows; y += 2) {
 80010a2:	7bbb      	ldrb	r3, [r7, #14]
 80010a4:	3302      	adds	r3, #2
 80010a6:	73bb      	strb	r3, [r7, #14]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	7bba      	ldrb	r2, [r7, #14]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d3e6      	bcc.n	8001080 <generateMaze+0x20>
        }
    }
    
    /* set start and exit. */
    maze->grid[maze->start.y][maze->start.x] = START;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69da      	ldr	r2, [r3, #28]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	795b      	ldrb	r3, [r3, #5]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	7912      	ldrb	r2, [r2, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	2202      	movs	r2, #2
 80010c8:	701a      	strb	r2, [r3, #0]
    maze->grid[maze->exit.y][maze->exit.x] = EXIT;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69da      	ldr	r2, [r3, #28]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7c5b      	ldrb	r3, [r3, #17]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	7c12      	ldrb	r2, [r2, #16]
 80010dc:	4413      	add	r3, r2
 80010de:	2203      	movs	r2, #3
 80010e0:	701a      	strb	r2, [r3, #0]
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <solveMaze>:

void solveMaze(Maze* maze, Path* path) {
 80010ea:	b590      	push	{r4, r7, lr}
 80010ec:	b09f      	sub	sp, #124	; 0x7c
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
    if (maze == NULL || maze->grid == NULL || path == NULL) exit(1);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d006      	beq.n	8001108 <solveMaze+0x1e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d002      	beq.n	8001108 <solveMaze+0x1e>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <solveMaze+0x24>
 8001108:	2001      	movs	r0, #1
 800110a:	f003 fe47 	bl	8004d9c <exit>

    uint16_t i = 0; /* index var */
 800110e:	2300      	movs	r3, #0
 8001110:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    Point current;
    uint8_t x, y = 0; /* copy of current */
 8001114:	2300      	movs	r3, #0
 8001116:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
    Point next;

    bool** visited = malloc(maze->rows * sizeof(bool*)); /* keep track of visited cells */
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4618      	mov	r0, r3
 8001122:	f003 fe4d 	bl	8004dc0 <malloc>
 8001126:	4603      	mov	r3, r0
 8001128:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (i = 0; i < maze->rows; i++) {
 800112a:	2300      	movs	r3, #0
 800112c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8001130:	e011      	b.n	8001156 <solveMaze+0x6c>
        visited[i] = calloc(maze->cols, sizeof(bool));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	785b      	ldrb	r3, [r3, #1]
 8001136:	4618      	mov	r0, r3
 8001138:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001140:	18d4      	adds	r4, r2, r3
 8001142:	2101      	movs	r1, #1
 8001144:	f003 fe0c 	bl	8004d60 <calloc>
 8001148:	4603      	mov	r3, r0
 800114a:	6023      	str	r3, [r4, #0]
    for (i = 0; i < maze->rows; i++) {
 800114c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001150:	3301      	adds	r3, #1
 8001152:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	b29b      	uxth	r3, r3
 800115c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001160:	429a      	cmp	r2, r3
 8001162:	d3e6      	bcc.n	8001132 <solveMaze+0x48>
    }

    /* initialize queue */
    Point* queue = malloc(maze->rows * maze->cols * sizeof(Point));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	785b      	ldrb	r3, [r3, #1]
 800116e:	fb02 f303 	mul.w	r3, r2, r3
 8001172:	461a      	mov	r2, r3
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4618      	mov	r0, r3
 800117e:	f003 fe1f 	bl	8004dc0 <malloc>
 8001182:	4603      	mov	r3, r0
 8001184:	66bb      	str	r3, [r7, #104]	; 0x68
    uint16_t front = 0; /* start of queue where elements are removed */
 8001186:	2300      	movs	r3, #0
 8001188:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    uint16_t rear = 0; /* end of queue where new elements are added */
 800118c:	2300      	movs	r3, #0
 800118e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    /* enqueue start point */
    Point start = {maze->start.x, maze->start.y, -1, -1};
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	791b      	ldrb	r3, [r3, #4]
 8001196:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	795b      	ldrb	r3, [r3, #5]
 800119e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    pathPush(path, &start);
 80011ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011b2:	4619      	mov	r1, r3
 80011b4:	6838      	ldr	r0, [r7, #0]
 80011b6:	f7ff fe3d 	bl	8000e34 <pathPush>
    queue[rear++] = start;
 80011ba:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	f8a7 2070 	strh.w	r2, [r7, #112]	; 0x70
 80011c4:	461a      	mov	r2, r3
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	461a      	mov	r2, r3
 80011d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011d2:	4413      	add	r3, r2
 80011d4:	461c      	mov	r4, r3
 80011d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    visited[maze->start.y][maze->start.x] = true;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	795b      	ldrb	r3, [r3, #5]
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80011ea:	4413      	add	r3, r2
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	7912      	ldrb	r2, [r2, #4]
 80011f2:	4413      	add	r3, r2
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]

    while (front < rear) {
 80011f8:	e168      	b.n	80014cc <solveMaze+0x3e2>
        /* dequeue point */
        current = queue[front++];
 80011fa:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	f8a7 2072 	strh.w	r2, [r7, #114]	; 0x72
 8001204:	461a      	mov	r2, r3
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	461a      	mov	r2, r3
 8001210:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001212:	441a      	add	r2, r3
 8001214:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001218:	ca07      	ldmia	r2, {r0, r1, r2}
 800121a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        /* exit found */
        if (maze->grid[current.y][current.x] == EXIT) {
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69da      	ldr	r2, [r3, #28]
 8001222:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001230:	4413      	add	r3, r2
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b03      	cmp	r3, #3
 8001236:	f040 8092 	bne.w	800135e <solveMaze+0x274>
            x = current.x;
 800123a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800123e:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
            y = current.y;
 8001242:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001246:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

            /* trace back path, mark it and write it to solution path */
            while (!(x == start.x && y == start.y)) {
 800124a:	e063      	b.n	8001314 <solveMaze+0x22a>
                maze->grid[y][x] = SOLUTION;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69da      	ldr	r2, [r3, #28]
 8001250:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800125e:	4413      	add	r3, r2
 8001260:	2204      	movs	r2, #4
 8001262:	701a      	strb	r2, [r3, #0]
                pathPush(path, &(Point){x, y, -1, -1}); // TODO: prevX, prevY needed?
 8001264:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001268:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800126c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001270:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800127a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800127e:	643b      	str	r3, [r7, #64]	; 0x40
 8001280:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001284:	4619      	mov	r1, r3
 8001286:	6838      	ldr	r0, [r7, #0]
 8001288:	f7ff fdd4 	bl	8000e34 <pathPush>
                for (i = 0; i < rear; i++) {
 800128c:	2300      	movs	r3, #0
 800128e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8001292:	e039      	b.n	8001308 <solveMaze+0x21e>
                    if (queue[i].x == x && queue[i].y == y) {
 8001294:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001298:	4613      	mov	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4413      	add	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	461a      	mov	r2, r3
 80012a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012a4:	4413      	add	r3, r2
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d126      	bne.n	80012fe <solveMaze+0x214>
 80012b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	461a      	mov	r2, r3
 80012be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012c0:	4413      	add	r3, r2
 80012c2:	785b      	ldrb	r3, [r3, #1]
 80012c4:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d118      	bne.n	80012fe <solveMaze+0x214>
                        x = queue[i].prevX;
 80012cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	461a      	mov	r2, r3
 80012da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012dc:	4413      	add	r3, r2
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
                        y = queue[i].prevY;
 80012e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80012e8:	4613      	mov	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	461a      	mov	r2, r3
 80012f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012f4:	4413      	add	r3, r2
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                        break;
 80012fc:	e00a      	b.n	8001314 <solveMaze+0x22a>
                for (i = 0; i < rear; i++) {
 80012fe:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001302:	3301      	adds	r3, #1
 8001304:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8001308:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800130c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001310:	429a      	cmp	r2, r3
 8001312:	d3bf      	bcc.n	8001294 <solveMaze+0x1aa>
            while (!(x == start.x && y == start.y)) {
 8001314:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001318:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800131c:	429a      	cmp	r2, r3
 800131e:	d195      	bne.n	800124c <solveMaze+0x162>
 8001320:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001324:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8001328:	429a      	cmp	r2, r3
 800132a:	d18f      	bne.n	800124c <solveMaze+0x162>
                    }
                }
            }

            maze->grid[maze->start.y][maze->start.x] = START;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69da      	ldr	r2, [r3, #28]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	795b      	ldrb	r3, [r3, #5]
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	7912      	ldrb	r2, [r2, #4]
 800133e:	4413      	add	r3, r2
 8001340:	2202      	movs	r2, #2
 8001342:	701a      	strb	r2, [r3, #0]
            maze->grid[current.y][current.x] = EXIT;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69da      	ldr	r2, [r3, #28]
 8001348:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001356:	4413      	add	r3, r2
 8001358:	2203      	movs	r2, #3
 800135a:	701a      	strb	r2, [r3, #0]

            break; /* exit found and path traced */
 800135c:	e0bf      	b.n	80014de <solveMaze+0x3f4>
        }

        /* visit adjacent cells */
        Point directions[4] = {
            {current.x + 1, current.y, current.x, current.y}, /* right */
 800135e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001362:	3301      	adds	r3, #1
 8001364:	b2db      	uxtb	r3, r3
        Point directions[4] = {
 8001366:	723b      	strb	r3, [r7, #8]
            {current.x + 1, current.y, current.x, current.y}, /* right */
 8001368:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
        Point directions[4] = {
 800136c:	727b      	strb	r3, [r7, #9]
            {current.x + 1, current.y, current.x, current.y}, /* right */
 800136e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
        Point directions[4] = {
 8001372:	60fb      	str	r3, [r7, #12]
            {current.x + 1, current.y, current.x, current.y}, /* right */
 8001374:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
        Point directions[4] = {
 8001378:	613b      	str	r3, [r7, #16]
            {current.x - 1, current.y, current.x, current.y}, /* left */
 800137a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800137e:	3b01      	subs	r3, #1
 8001380:	b2db      	uxtb	r3, r3
        Point directions[4] = {
 8001382:	753b      	strb	r3, [r7, #20]
            {current.x - 1, current.y, current.x, current.y}, /* left */
 8001384:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
        Point directions[4] = {
 8001388:	757b      	strb	r3, [r7, #21]
            {current.x - 1, current.y, current.x, current.y}, /* left */
 800138a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
        Point directions[4] = {
 800138e:	61bb      	str	r3, [r7, #24]
            {current.x - 1, current.y, current.x, current.y}, /* left */
 8001390:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
        Point directions[4] = {
 8001394:	61fb      	str	r3, [r7, #28]
            {current.x, current.y + 1, current.x, current.y}, /* down */
 8001396:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
        Point directions[4] = {
 800139a:	f887 3020 	strb.w	r3, [r7, #32]
            {current.x, current.y + 1, current.x, current.y}, /* down */
 800139e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80013a2:	3301      	adds	r3, #1
 80013a4:	b2db      	uxtb	r3, r3
        Point directions[4] = {
 80013a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            {current.x, current.y + 1, current.x, current.y}, /* down */
 80013aa:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
        Point directions[4] = {
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
            {current.x, current.y + 1, current.x, current.y}, /* down */
 80013b0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
        Point directions[4] = {
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
            {current.x, current.y - 1, current.x, current.y}  /* up */
 80013b6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
        Point directions[4] = {
 80013ba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            {current.x, current.y - 1, current.x, current.y}  /* up */
 80013be:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80013c2:	3b01      	subs	r3, #1
 80013c4:	b2db      	uxtb	r3, r3
        Point directions[4] = {
 80013c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            {current.x, current.y - 1, current.x, current.y}  /* up */
 80013ca:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
        Point directions[4] = {
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
            {current.x, current.y - 1, current.x, current.y}  /* up */
 80013d0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
        Point directions[4] = {
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
        };

        for (i = 0; i < 4; i++) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80013dc:	e067      	b.n	80014ae <solveMaze+0x3c4>
            next = directions[i];
 80013de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	3378      	adds	r3, #120	; 0x78
 80013ec:	443b      	add	r3, r7
 80013ee:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
 80013f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80013f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            if (next.x >= 0 && next.x < maze->cols && next.y >= 0 && next.y < maze->rows) {
 80013fc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	785b      	ldrb	r3, [r3, #1]
 8001404:	429a      	cmp	r2, r3
 8001406:	d24d      	bcs.n	80014a4 <solveMaze+0x3ba>
 8001408:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d247      	bcs.n	80014a4 <solveMaze+0x3ba>
                if (!visited[next.y][next.x] && (maze->grid[next.y][next.x] == PATH || maze->grid[next.y][next.x] == EXIT)) {
 8001414:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800141c:	4413      	add	r3, r2
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	f083 0301 	eor.w	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d038      	beq.n	80014a4 <solveMaze+0x3ba>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69da      	ldr	r2, [r3, #28]
 8001436:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8001444:	4413      	add	r3, r2
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00c      	beq.n	8001466 <solveMaze+0x37c>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69da      	ldr	r2, [r3, #28]
 8001450:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800145e:	4413      	add	r3, r2
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b03      	cmp	r3, #3
 8001464:	d11e      	bne.n	80014a4 <solveMaze+0x3ba>
                    queue[rear++] = next;  /* enqueue valid adjacent cell */
 8001466:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	f8a7 2070 	strh.w	r2, [r7, #112]	; 0x70
 8001470:	461a      	mov	r2, r3
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	461a      	mov	r2, r3
 800147c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800147e:	4413      	add	r3, r2
 8001480:	461c      	mov	r4, r3
 8001482:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001486:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800148a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                    visited[next.y][next.x] = true;
 800148e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001496:	4413      	add	r3, r2
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800149e:	4413      	add	r3, r2
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < 4; i++) {
 80014a4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80014a8:	3301      	adds	r3, #1
 80014aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80014ae:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d993      	bls.n	80013de <solveMaze+0x2f4>
                }
            }
        }
        if (rear >= maze->rows * maze->cols) break; /* prevents writing beyond allocated memory */
 80014b6:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	4619      	mov	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	785b      	ldrb	r3, [r3, #1]
 80014c4:	fb01 f303 	mul.w	r3, r1, r3
 80014c8:	429a      	cmp	r2, r3
 80014ca:	da07      	bge.n	80014dc <solveMaze+0x3f2>
    while (front < rear) {
 80014cc:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 80014d0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80014d4:	429a      	cmp	r2, r3
 80014d6:	f4ff ae90 	bcc.w	80011fa <solveMaze+0x110>
 80014da:	e000      	b.n	80014de <solveMaze+0x3f4>
        if (rear >= maze->rows * maze->cols) break; /* prevents writing beyond allocated memory */
 80014dc:	bf00      	nop
    }

    flipPath(path);
 80014de:	6838      	ldr	r0, [r7, #0]
 80014e0:	f7ff fd73 	bl	8000fca <flipPath>
    trimPath(path);
 80014e4:	6838      	ldr	r0, [r7, #0]
 80014e6:	f000 f823 	bl	8001530 <trimPath>

    /* clean up */
    for (i = 0; i < maze->rows; i++) {
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80014f0:	e00d      	b.n	800150e <solveMaze+0x424>
        free(visited[i]);
 80014f2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80014fa:	4413      	add	r3, r2
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 fc66 	bl	8004dd0 <free>
    for (i = 0; i < maze->rows; i++) {
 8001504:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001508:	3301      	adds	r3, #1
 800150a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b29b      	uxth	r3, r3
 8001514:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001518:	429a      	cmp	r2, r3
 800151a:	d3ea      	bcc.n	80014f2 <solveMaze+0x408>
    }
    free(visited);
 800151c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800151e:	f003 fc57 	bl	8004dd0 <free>
    free(queue);
 8001522:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001524:	f003 fc54 	bl	8004dd0 <free>
}
 8001528:	bf00      	nop
 800152a:	377c      	adds	r7, #124	; 0x7c
 800152c:	46bd      	mov	sp, r7
 800152e:	bd90      	pop	{r4, r7, pc}

08001530 <trimPath>:

void trimPath(Path* path) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
    uint16_t newSize = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	82fb      	strh	r3, [r7, #22]
    uint16_t i = 0; /* index var */
 800153c:	2300      	movs	r3, #0
 800153e:	82bb      	strh	r3, [r7, #20]

    /* count the non-zero elements in the array */
    for (i = 0; i < path->size; i++) {
 8001540:	2300      	movs	r3, #0
 8001542:	82bb      	strh	r3, [r7, #20]
 8001544:	e01b      	b.n	800157e <trimPath+0x4e>
        if (path->p[i].x != 0 && path->p[i].y != 0) {
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6819      	ldr	r1, [r3, #0]
 800154a:	8aba      	ldrh	r2, [r7, #20]
 800154c:	4613      	mov	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00d      	beq.n	8001578 <trimPath+0x48>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6819      	ldr	r1, [r3, #0]
 8001560:	8aba      	ldrh	r2, [r7, #20]
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	785b      	ldrb	r3, [r3, #1]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d002      	beq.n	8001578 <trimPath+0x48>
            newSize++;
 8001572:	8afb      	ldrh	r3, [r7, #22]
 8001574:	3301      	adds	r3, #1
 8001576:	82fb      	strh	r3, [r7, #22]
    for (i = 0; i < path->size; i++) {
 8001578:	8abb      	ldrh	r3, [r7, #20]
 800157a:	3301      	adds	r3, #1
 800157c:	82bb      	strh	r3, [r7, #20]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	889b      	ldrh	r3, [r3, #4]
 8001582:	8aba      	ldrh	r2, [r7, #20]
 8001584:	429a      	cmp	r2, r3
 8001586:	d3de      	bcc.n	8001546 <trimPath+0x16>
        }
    }

    if (newSize == 0) {
 8001588:	8afb      	ldrh	r3, [r7, #22]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d103      	bne.n	8001596 <trimPath+0x66>
        path->size = 0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	809a      	strh	r2, [r3, #4]
        for (i = 0; i < newSize; i++) {
            path->p[i] = newPath.p[i];
        }
        path->size = newSize;
    }
}
 8001594:	e05f      	b.n	8001656 <trimPath+0x126>
        initPath(&newPath, newSize);
 8001596:	8afa      	ldrh	r2, [r7, #22]
 8001598:	f107 0308 	add.w	r3, r7, #8
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fbf5 	bl	8000d8e <initPath>
        uint16_t newIndex = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	827b      	strh	r3, [r7, #18]
        for (i = 0; i < path->size; i++) {
 80015a8:	2300      	movs	r3, #0
 80015aa:	82bb      	strh	r3, [r7, #20]
 80015ac:	e02e      	b.n	800160c <trimPath+0xdc>
            if (path->p[i].x != 0 && path->p[i].y != 0) {
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6819      	ldr	r1, [r3, #0]
 80015b2:	8aba      	ldrh	r2, [r7, #20]
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d020      	beq.n	8001606 <trimPath+0xd6>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6819      	ldr	r1, [r3, #0]
 80015c8:	8aba      	ldrh	r2, [r7, #20]
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	785b      	ldrb	r3, [r3, #1]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d015      	beq.n	8001606 <trimPath+0xd6>
                newPath.p[newIndex] = path->p[i];
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6819      	ldr	r1, [r3, #0]
 80015de:	8aba      	ldrh	r2, [r7, #20]
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	18c8      	adds	r0, r1, r3
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	8a7a      	ldrh	r2, [r7, #18]
 80015ee:	4613      	mov	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	4602      	mov	r2, r0
 80015fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80015fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                newIndex++;
 8001600:	8a7b      	ldrh	r3, [r7, #18]
 8001602:	3301      	adds	r3, #1
 8001604:	827b      	strh	r3, [r7, #18]
        for (i = 0; i < path->size; i++) {
 8001606:	8abb      	ldrh	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	82bb      	strh	r3, [r7, #20]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	889b      	ldrh	r3, [r3, #4]
 8001610:	8aba      	ldrh	r2, [r7, #20]
 8001612:	429a      	cmp	r2, r3
 8001614:	d3cb      	bcc.n	80015ae <trimPath+0x7e>
        for (i = 0; i < newSize; i++) {
 8001616:	2300      	movs	r3, #0
 8001618:	82bb      	strh	r3, [r7, #20]
 800161a:	e015      	b.n	8001648 <trimPath+0x118>
            path->p[i] = newPath.p[i];
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	8aba      	ldrh	r2, [r7, #20]
 8001620:	4613      	mov	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4413      	add	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	18c8      	adds	r0, r1, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6819      	ldr	r1, [r3, #0]
 800162e:	8aba      	ldrh	r2, [r7, #20]
 8001630:	4613      	mov	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	4602      	mov	r2, r0
 800163c:	ca07      	ldmia	r2, {r0, r1, r2}
 800163e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        for (i = 0; i < newSize; i++) {
 8001642:	8abb      	ldrh	r3, [r7, #20]
 8001644:	3301      	adds	r3, #1
 8001646:	82bb      	strh	r3, [r7, #20]
 8001648:	8aba      	ldrh	r2, [r7, #20]
 800164a:	8afb      	ldrh	r3, [r7, #22]
 800164c:	429a      	cmp	r2, r3
 800164e:	d3e5      	bcc.n	800161c <trimPath+0xec>
        path->size = newSize;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	8afa      	ldrh	r2, [r7, #22]
 8001654:	809a      	strh	r2, [r3, #4]
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_MspInit+0x4c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <HAL_MspInit+0x4c>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001674:	6453      	str	r3, [r2, #68]	; 0x44
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_MspInit+0x4c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_MspInit+0x4c>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a08      	ldr	r2, [pc, #32]	; (80016ac <HAL_MspInit+0x4c>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_MspInit+0x4c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800169e:	2007      	movs	r0, #7
 80016a0:	f000 fda4 	bl	80021ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800

080016b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a44      	ldr	r2, [pc, #272]	; (80017e0 <HAL_SPI_MspInit+0x130>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	f040 8081 	bne.w	80017d6 <HAL_SPI_MspInit+0x126>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	4b42      	ldr	r3, [pc, #264]	; (80017e4 <HAL_SPI_MspInit+0x134>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	4a41      	ldr	r2, [pc, #260]	; (80017e4 <HAL_SPI_MspInit+0x134>)
 80016de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e2:	6413      	str	r3, [r2, #64]	; 0x40
 80016e4:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <HAL_SPI_MspInit+0x134>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <HAL_SPI_MspInit+0x134>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	4a3a      	ldr	r2, [pc, #232]	; (80017e4 <HAL_SPI_MspInit+0x134>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001700:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <HAL_SPI_MspInit+0x134>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	4b34      	ldr	r3, [pc, #208]	; (80017e4 <HAL_SPI_MspInit+0x134>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	4a33      	ldr	r2, [pc, #204]	; (80017e4 <HAL_SPI_MspInit+0x134>)
 8001716:	f043 0302 	orr.w	r3, r3, #2
 800171a:	6313      	str	r3, [r2, #48]	; 0x30
 800171c:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <HAL_SPI_MspInit+0x134>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001728:	2308      	movs	r3, #8
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001734:	2303      	movs	r3, #3
 8001736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001738:	2305      	movs	r3, #5
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	4829      	ldr	r0, [pc, #164]	; (80017e8 <HAL_SPI_MspInit+0x138>)
 8001744:	f001 f926 	bl	8002994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800174c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800175a:	2305      	movs	r3, #5
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	4821      	ldr	r0, [pc, #132]	; (80017ec <HAL_SPI_MspInit+0x13c>)
 8001766:	f001 f915 	bl	8002994 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <HAL_SPI_MspInit+0x140>)
 800176c:	4a21      	ldr	r2, [pc, #132]	; (80017f4 <HAL_SPI_MspInit+0x144>)
 800176e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <HAL_SPI_MspInit+0x140>)
 8001772:	2200      	movs	r2, #0
 8001774:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <HAL_SPI_MspInit+0x140>)
 8001778:	2240      	movs	r2, #64	; 0x40
 800177a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <HAL_SPI_MspInit+0x140>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001782:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_SPI_MspInit+0x140>)
 8001784:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001788:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_SPI_MspInit+0x140>)
 800178c:	2200      	movs	r2, #0
 800178e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_SPI_MspInit+0x140>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <HAL_SPI_MspInit+0x140>)
 8001798:	2200      	movs	r2, #0
 800179a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <HAL_SPI_MspInit+0x140>)
 800179e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017a2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_SPI_MspInit+0x140>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80017aa:	4811      	ldr	r0, [pc, #68]	; (80017f0 <HAL_SPI_MspInit+0x140>)
 80017ac:	f000 fd60 	bl	8002270 <HAL_DMA_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 80017b6:	f7ff f9e7 	bl	8000b88 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a0c      	ldr	r2, [pc, #48]	; (80017f0 <HAL_SPI_MspInit+0x140>)
 80017be:	649a      	str	r2, [r3, #72]	; 0x48
 80017c0:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <HAL_SPI_MspInit+0x140>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	2024      	movs	r0, #36	; 0x24
 80017cc:	f000 fd19 	bl	8002202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80017d0:	2024      	movs	r0, #36	; 0x24
 80017d2:	f000 fd32 	bl	800223a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	; 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40003800 	.word	0x40003800
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020800 	.word	0x40020800
 80017ec:	40020400 	.word	0x40020400
 80017f0:	200000dc 	.word	0x200000dc
 80017f4:	40026070 	.word	0x40026070

080017f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001818:	d164      	bne.n	80018e4 <HAL_TIM_Base_MspInit+0xec>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	4b3d      	ldr	r3, [pc, #244]	; (8001914 <HAL_TIM_Base_MspInit+0x11c>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	4a3c      	ldr	r2, [pc, #240]	; (8001914 <HAL_TIM_Base_MspInit+0x11c>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6413      	str	r3, [r2, #64]	; 0x40
 800182a:	4b3a      	ldr	r3, [pc, #232]	; (8001914 <HAL_TIM_Base_MspInit+0x11c>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	4b36      	ldr	r3, [pc, #216]	; (8001914 <HAL_TIM_Base_MspInit+0x11c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a35      	ldr	r2, [pc, #212]	; (8001914 <HAL_TIM_Base_MspInit+0x11c>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b33      	ldr	r3, [pc, #204]	; (8001914 <HAL_TIM_Base_MspInit+0x11c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001864:	2301      	movs	r3, #1
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4619      	mov	r1, r3
 800186e:	482a      	ldr	r0, [pc, #168]	; (8001918 <HAL_TIM_Base_MspInit+0x120>)
 8001870:	f001 f890 	bl	8002994 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 8001874:	4b29      	ldr	r3, [pc, #164]	; (800191c <HAL_TIM_Base_MspInit+0x124>)
 8001876:	4a2a      	ldr	r2, [pc, #168]	; (8001920 <HAL_TIM_Base_MspInit+0x128>)
 8001878:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 800187a:	4b28      	ldr	r3, [pc, #160]	; (800191c <HAL_TIM_Base_MspInit+0x124>)
 800187c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001880:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001882:	4b26      	ldr	r3, [pc, #152]	; (800191c <HAL_TIM_Base_MspInit+0x124>)
 8001884:	2240      	movs	r2, #64	; 0x40
 8001886:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001888:	4b24      	ldr	r3, [pc, #144]	; (800191c <HAL_TIM_Base_MspInit+0x124>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 800188e:	4b23      	ldr	r3, [pc, #140]	; (800191c <HAL_TIM_Base_MspInit+0x124>)
 8001890:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001894:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001896:	4b21      	ldr	r3, [pc, #132]	; (800191c <HAL_TIM_Base_MspInit+0x124>)
 8001898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800189c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800189e:	4b1f      	ldr	r3, [pc, #124]	; (800191c <HAL_TIM_Base_MspInit+0x124>)
 80018a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018a4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <HAL_TIM_Base_MspInit+0x124>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_TIM_Base_MspInit+0x124>)
 80018ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018b2:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_TIM_Base_MspInit+0x124>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 80018ba:	4818      	ldr	r0, [pc, #96]	; (800191c <HAL_TIM_Base_MspInit+0x124>)
 80018bc:	f000 fcd8 	bl	8002270 <HAL_DMA_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_TIM_Base_MspInit+0xd2>
    {
      Error_Handler();
 80018c6:	f7ff f95f 	bl	8000b88 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a13      	ldr	r2, [pc, #76]	; (800191c <HAL_TIM_Base_MspInit+0x124>)
 80018ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80018d0:	4a12      	ldr	r2, [pc, #72]	; (800191c <HAL_TIM_Base_MspInit+0x124>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a10      	ldr	r2, [pc, #64]	; (800191c <HAL_TIM_Base_MspInit+0x124>)
 80018da:	621a      	str	r2, [r3, #32]
 80018dc:	4a0f      	ldr	r2, [pc, #60]	; (800191c <HAL_TIM_Base_MspInit+0x124>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018e2:	e012      	b.n	800190a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <HAL_TIM_Base_MspInit+0x12c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d10d      	bne.n	800190a <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_TIM_Base_MspInit+0x11c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a07      	ldr	r2, [pc, #28]	; (8001914 <HAL_TIM_Base_MspInit+0x11c>)
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_TIM_Base_MspInit+0x11c>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	; 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800
 8001918:	40020000 	.word	0x40020000
 800191c:	200001cc 	.word	0x200001cc
 8001920:	40026028 	.word	0x40026028
 8001924:	40000400 	.word	0x40000400

08001928 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001948:	d11e      	bne.n	8001988 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_TIM_MspPostInit+0x68>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a0f      	ldr	r2, [pc, #60]	; (8001990 <HAL_TIM_MspPostInit+0x68>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <HAL_TIM_MspPostInit+0x68>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800196a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001978:	2301      	movs	r3, #1
 800197a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	4619      	mov	r1, r3
 8001982:	4804      	ldr	r0, [pc, #16]	; (8001994 <HAL_TIM_MspPostInit+0x6c>)
 8001984:	f001 f806 	bl	8002994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001988:	bf00      	nop
 800198a:	3720      	adds	r7, #32
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	40020400 	.word	0x40020400

08001998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a19      	ldr	r2, [pc, #100]	; (8001a1c <HAL_UART_MspInit+0x84>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d12b      	bne.n	8001a12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <HAL_UART_MspInit+0x88>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a17      	ldr	r2, [pc, #92]	; (8001a20 <HAL_UART_MspInit+0x88>)
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_UART_MspInit+0x88>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_UART_MspInit+0x88>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a10      	ldr	r2, [pc, #64]	; (8001a20 <HAL_UART_MspInit+0x88>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_UART_MspInit+0x88>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019f2:	230c      	movs	r3, #12
 80019f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a02:	2307      	movs	r3, #7
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	; (8001a24 <HAL_UART_MspInit+0x8c>)
 8001a0e:	f000 ffc1 	bl	8002994 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3728      	adds	r7, #40	; 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40004400 	.word	0x40004400
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020000 	.word	0x40020000

08001a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <NMI_Handler+0x4>

08001a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <HardFault_Handler+0x4>

08001a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <MemManage_Handler+0x4>

08001a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3e:	e7fe      	b.n	8001a3e <BusFault_Handler+0x4>

08001a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <UsageFault_Handler+0x4>

08001a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a74:	f000 faa6 	bl	8001fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <DMA1_Stream1_IRQHandler+0x10>)
 8001a82:	f000 fd1d 	bl	80024c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200001cc 	.word	0x200001cc

08001a90 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <DMA1_Stream4_IRQHandler+0x10>)
 8001a96:	f000 fd13 	bl	80024c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200000dc 	.word	0x200000dc

08001aa4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <SPI2_IRQHandler+0x10>)
 8001aaa:	f001 fee9 	bl	8003880 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000084 	.word	0x20000084

08001ab8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return 1;
 8001abc:	2301      	movs	r3, #1
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <_kill>:

int _kill(int pid, int sig)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ad2:	f003 fc2d 	bl	8005330 <__errno>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2216      	movs	r2, #22
 8001ada:	601a      	str	r2, [r3, #0]
  return -1;
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_exit>:

void _exit (int status)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ffe7 	bl	8001ac8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001afa:	e7fe      	b.n	8001afa <_exit+0x12>

08001afc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	e00a      	b.n	8001b24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b0e:	f3af 8000 	nop.w
 8001b12:	4601      	mov	r1, r0
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	60ba      	str	r2, [r7, #8]
 8001b1a:	b2ca      	uxtb	r2, r1
 8001b1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3301      	adds	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	dbf0      	blt.n	8001b0e <_read+0x12>
  }

  return len;
 8001b2c:	687b      	ldr	r3, [r7, #4]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	e009      	b.n	8001b5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	60ba      	str	r2, [r7, #8]
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	dbf1      	blt.n	8001b48 <_write+0x12>
  }
  return len;
 8001b64:	687b      	ldr	r3, [r7, #4]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <_close>:

int _close(int file)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b96:	605a      	str	r2, [r3, #4]
  return 0;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <_isatty>:

int _isatty(int file)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be0:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <_sbrk+0x5c>)
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <_sbrk+0x60>)
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <_sbrk+0x64>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <_sbrk+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d207      	bcs.n	8001c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c08:	f003 fb92 	bl	8005330 <__errno>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	220c      	movs	r2, #12
 8001c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c16:	e009      	b.n	8001c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <_sbrk+0x64>)
 8001c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20018000 	.word	0x20018000
 8001c38:	00000400 	.word	0x00000400
 8001c3c:	2000029c 	.word	0x2000029c
 8001c40:	20005e30 	.word	0x20005e30

08001c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <SystemInit+0x20>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <SystemInit+0x20>)
 8001c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <ws2812_init>:

uint8_t ws2812_buffer[WS2812_BUFFER_SIZE];

// set all pixels to 0 (off)
void ws2812_init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
  memset(ws2812_buffer, 0, WS2812_BUFFER_SIZE); // fill buffer with 0s
 8001c6e:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8001c72:	2100      	movs	r1, #0
 8001c74:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <ws2812_init+0x3c>)
 8001c76:	f003 fad0 	bl	800521a <memset>
  HAL_SPI_Transmit_DMA(&hspi2, ws2812_buffer, WS2812_BUFFER_SIZE); // write buffer to LEDs
 8001c7a:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8001c7e:	4909      	ldr	r1, [pc, #36]	; (8001ca4 <ws2812_init+0x3c>)
 8001c80:	4809      	ldr	r0, [pc, #36]	; (8001ca8 <ws2812_init+0x40>)
 8001c82:	f001 fd47 	bl	8003714 <HAL_SPI_Transmit_DMA>
  ColorRGB_t color = {0, 0, 0};
 8001c86:	2300      	movs	r3, #0
 8001c88:	713b      	strb	r3, [r7, #4]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	717b      	strb	r3, [r7, #5]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	71bb      	strb	r3, [r7, #6]
  ws2812_pixel_all(&color); // set LEDs to black
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 f879 	bl	8001d8c <ws2812_pixel_all>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200002a0 	.word	0x200002a0
 8001ca8:	20000084 	.word	0x20000084

08001cac <ws2812_pixel>:

// set one pixel to given color
void ws2812_pixel(uint8_t _x, uint8_t _y, ColorRGB_t* color)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	603a      	str	r2, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	71bb      	strb	r3, [r7, #6]
  uint8_t* ptr = &ws2812_buffer[24 * coord2Index(_x, _y)];
 8001cbc:	79ba      	ldrb	r2, [r7, #6]
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f8de 	bl	8001e84 <coord2Index>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b2c      	ldr	r3, [pc, #176]	; (8001d88 <ws2812_pixel+0xdc>)
 8001cd8:	4413      	add	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
  WS2812_FILL_BUFFER(color->g);
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	72fb      	strb	r3, [r7, #11]
 8001ce0:	e014      	b.n	8001d0c <ws2812_pixel+0x60>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	789a      	ldrb	r2, [r3, #2]
 8001ce6:	7afb      	ldrb	r3, [r7, #11]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <ws2812_pixel+0x50>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	60fa      	str	r2, [r7, #12]
 8001cf6:	22fc      	movs	r2, #252	; 0xfc
 8001cf8:	701a      	strb	r2, [r3, #0]
 8001cfa:	e004      	b.n	8001d06 <ws2812_pixel+0x5a>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	60fa      	str	r2, [r7, #12]
 8001d02:	2280      	movs	r2, #128	; 0x80
 8001d04:	701a      	strb	r2, [r3, #0]
 8001d06:	7afb      	ldrb	r3, [r7, #11]
 8001d08:	085b      	lsrs	r3, r3, #1
 8001d0a:	72fb      	strb	r3, [r7, #11]
 8001d0c:	7afb      	ldrb	r3, [r7, #11]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1e7      	bne.n	8001ce2 <ws2812_pixel+0x36>
  WS2812_FILL_BUFFER(color->r);
 8001d12:	2380      	movs	r3, #128	; 0x80
 8001d14:	72bb      	strb	r3, [r7, #10]
 8001d16:	e014      	b.n	8001d42 <ws2812_pixel+0x96>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	785a      	ldrb	r2, [r3, #1]
 8001d1c:	7abb      	ldrb	r3, [r7, #10]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <ws2812_pixel+0x86>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	60fa      	str	r2, [r7, #12]
 8001d2c:	22fc      	movs	r2, #252	; 0xfc
 8001d2e:	701a      	strb	r2, [r3, #0]
 8001d30:	e004      	b.n	8001d3c <ws2812_pixel+0x90>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1c5a      	adds	r2, r3, #1
 8001d36:	60fa      	str	r2, [r7, #12]
 8001d38:	2280      	movs	r2, #128	; 0x80
 8001d3a:	701a      	strb	r2, [r3, #0]
 8001d3c:	7abb      	ldrb	r3, [r7, #10]
 8001d3e:	085b      	lsrs	r3, r3, #1
 8001d40:	72bb      	strb	r3, [r7, #10]
 8001d42:	7abb      	ldrb	r3, [r7, #10]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e7      	bne.n	8001d18 <ws2812_pixel+0x6c>
  WS2812_FILL_BUFFER(color->b);
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	727b      	strb	r3, [r7, #9]
 8001d4c:	e014      	b.n	8001d78 <ws2812_pixel+0xcc>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	781a      	ldrb	r2, [r3, #0]
 8001d52:	7a7b      	ldrb	r3, [r7, #9]
 8001d54:	4013      	ands	r3, r2
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <ws2812_pixel+0xbc>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	60fa      	str	r2, [r7, #12]
 8001d62:	22fc      	movs	r2, #252	; 0xfc
 8001d64:	701a      	strb	r2, [r3, #0]
 8001d66:	e004      	b.n	8001d72 <ws2812_pixel+0xc6>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	60fa      	str	r2, [r7, #12]
 8001d6e:	2280      	movs	r2, #128	; 0x80
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	7a7b      	ldrb	r3, [r7, #9]
 8001d74:	085b      	lsrs	r3, r3, #1
 8001d76:	727b      	strb	r3, [r7, #9]
 8001d78:	7a7b      	ldrb	r3, [r7, #9]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1e7      	bne.n	8001d4e <ws2812_pixel+0xa2>
}
 8001d7e:	bf00      	nop
 8001d80:	bf00      	nop
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200002a0 	.word	0x200002a0

08001d8c <ws2812_pixel_all>:

// set all pixels to given color
void ws2812_pixel_all(ColorRGB_t* color)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint8_t* ptr = ws2812_buffer;
 8001d94:	4b31      	ldr	r3, [pc, #196]	; (8001e5c <ws2812_pixel_all+0xd0>)
 8001d96:	617b      	str	r3, [r7, #20]
  for (uint16_t i = 0; i < WS2812_NUM_LEDS; ++i) 
 8001d98:	2300      	movs	r3, #0
 8001d9a:	827b      	strh	r3, [r7, #18]
 8001d9c:	e053      	b.n	8001e46 <ws2812_pixel_all+0xba>
  {
    WS2812_FILL_BUFFER(color->g);
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	747b      	strb	r3, [r7, #17]
 8001da2:	e014      	b.n	8001dce <ws2812_pixel_all+0x42>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	789a      	ldrb	r2, [r3, #2]
 8001da8:	7c7b      	ldrb	r3, [r7, #17]
 8001daa:	4013      	ands	r3, r2
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <ws2812_pixel_all+0x32>
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	617a      	str	r2, [r7, #20]
 8001db8:	22fc      	movs	r2, #252	; 0xfc
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	e004      	b.n	8001dc8 <ws2812_pixel_all+0x3c>
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	617a      	str	r2, [r7, #20]
 8001dc4:	2280      	movs	r2, #128	; 0x80
 8001dc6:	701a      	strb	r2, [r3, #0]
 8001dc8:	7c7b      	ldrb	r3, [r7, #17]
 8001dca:	085b      	lsrs	r3, r3, #1
 8001dcc:	747b      	strb	r3, [r7, #17]
 8001dce:	7c7b      	ldrb	r3, [r7, #17]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1e7      	bne.n	8001da4 <ws2812_pixel_all+0x18>
    WS2812_FILL_BUFFER(color->r);
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	743b      	strb	r3, [r7, #16]
 8001dd8:	e014      	b.n	8001e04 <ws2812_pixel_all+0x78>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	785a      	ldrb	r2, [r3, #1]
 8001dde:	7c3b      	ldrb	r3, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <ws2812_pixel_all+0x68>
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	617a      	str	r2, [r7, #20]
 8001dee:	22fc      	movs	r2, #252	; 0xfc
 8001df0:	701a      	strb	r2, [r3, #0]
 8001df2:	e004      	b.n	8001dfe <ws2812_pixel_all+0x72>
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	617a      	str	r2, [r7, #20]
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	701a      	strb	r2, [r3, #0]
 8001dfe:	7c3b      	ldrb	r3, [r7, #16]
 8001e00:	085b      	lsrs	r3, r3, #1
 8001e02:	743b      	strb	r3, [r7, #16]
 8001e04:	7c3b      	ldrb	r3, [r7, #16]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1e7      	bne.n	8001dda <ws2812_pixel_all+0x4e>
    WS2812_FILL_BUFFER(color->b);
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	73fb      	strb	r3, [r7, #15]
 8001e0e:	e014      	b.n	8001e3a <ws2812_pixel_all+0xae>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	781a      	ldrb	r2, [r3, #0]
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	4013      	ands	r3, r2
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <ws2812_pixel_all+0x9e>
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	1c5a      	adds	r2, r3, #1
 8001e22:	617a      	str	r2, [r7, #20]
 8001e24:	22fc      	movs	r2, #252	; 0xfc
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	e004      	b.n	8001e34 <ws2812_pixel_all+0xa8>
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	617a      	str	r2, [r7, #20]
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	701a      	strb	r2, [r3, #0]
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	085b      	lsrs	r3, r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1e7      	bne.n	8001e10 <ws2812_pixel_all+0x84>
  for (uint16_t i = 0; i < WS2812_NUM_LEDS; ++i) 
 8001e40:	8a7b      	ldrh	r3, [r7, #18]
 8001e42:	3301      	adds	r3, #1
 8001e44:	827b      	strh	r3, [r7, #18]
 8001e46:	8a7b      	ldrh	r3, [r7, #18]
 8001e48:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8001e4c:	d3a7      	bcc.n	8001d9e <ws2812_pixel_all+0x12>
  }
}
 8001e4e:	bf00      	nop
 8001e50:	bf00      	nop
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	200002a0 	.word	0x200002a0

08001e60 <HAL_SPI_TxCpltCallback>:
    }
  }
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  // Restart transmission when buffer tx is completed
  HAL_SPI_Transmit_DMA(&hspi2, ws2812_buffer, WS2812_BUFFER_SIZE);
 8001e68:	f645 223c 	movw	r2, #23100	; 0x5a3c
 8001e6c:	4903      	ldr	r1, [pc, #12]	; (8001e7c <HAL_SPI_TxCpltCallback+0x1c>)
 8001e6e:	4804      	ldr	r0, [pc, #16]	; (8001e80 <HAL_SPI_TxCpltCallback+0x20>)
 8001e70:	f001 fc50 	bl	8003714 <HAL_SPI_Transmit_DMA>
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	200002a0 	.word	0x200002a0
 8001e80:	20000084 	.word	0x20000084

08001e84 <coord2Index>:

uint16_t coord2Index (uint8_t _x, uint8_t _y)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	460a      	mov	r2, r1
 8001e8e:	71fb      	strb	r3, [r7, #7]
 8001e90:	4613      	mov	r3, r2
 8001e92:	71bb      	strb	r3, [r7, #6]
{ 176,177,178,179,180,181,182,183,368,369,370,371,372,373,374,375,560,561,562,563,564,565,566,567,752,753,754,755,756,757,758,759,944,945,946,947,948,949,950,951 },
{ 184,185,186,187,188,189,190,191,376,377,378,379,380,381,382,383,568,569,570,571,572,573,574,575,760,761,762,763,764,765,766,767,952,953,954,955,956,957,958,959 }

};

  if (_x > WS2812_NUM_LEDS_X - 1) _x = WS2812_NUM_LEDS_X - 1;
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	2b27      	cmp	r3, #39	; 0x27
 8001e98:	d901      	bls.n	8001e9e <coord2Index+0x1a>
 8001e9a:	2327      	movs	r3, #39	; 0x27
 8001e9c:	71fb      	strb	r3, [r7, #7]
  if (_y > WS2812_NUM_LEDS_Y - 1) _y = WS2812_NUM_LEDS_Y - 1;
 8001e9e:	79bb      	ldrb	r3, [r7, #6]
 8001ea0:	2b17      	cmp	r3, #23
 8001ea2:	d901      	bls.n	8001ea8 <coord2Index+0x24>
 8001ea4:	2317      	movs	r3, #23
 8001ea6:	71bb      	strb	r3, [r7, #6]

  return lookup_table[_y][_x];
 8001ea8:	79ba      	ldrb	r2, [r7, #6]
 8001eaa:	79f9      	ldrb	r1, [r7, #7]
 8001eac:	4806      	ldr	r0, [pc, #24]	; (8001ec8 <coord2Index+0x44>)
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	08005ec8 	.word	0x08005ec8

08001ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed0:	480d      	ldr	r0, [pc, #52]	; (8001f08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ed2:	490e      	ldr	r1, [pc, #56]	; (8001f0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed4:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed8:	e002      	b.n	8001ee0 <LoopCopyDataInit>

08001eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ede:	3304      	adds	r3, #4

08001ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee4:	d3f9      	bcc.n	8001eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee6:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ee8:	4c0b      	ldr	r4, [pc, #44]	; (8001f18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eec:	e001      	b.n	8001ef2 <LoopFillZerobss>

08001eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef0:	3204      	adds	r2, #4

08001ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef4:	d3fb      	bcc.n	8001eee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ef6:	f7ff fea5 	bl	8001c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efa:	f003 fa1f 	bl	800533c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efe:	f7fe fb3d 	bl	800057c <main>
  bx  lr    
 8001f02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f0c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001f10:	08006740 	.word	0x08006740
  ldr r2, =_sbss
 8001f14:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001f18:	20005e2c 	.word	0x20005e2c

08001f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f1c:	e7fe      	b.n	8001f1c <ADC_IRQHandler>
	...

08001f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_Init+0x40>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <HAL_Init+0x40>)
 8001f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <HAL_Init+0x40>)
 8001f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <HAL_Init+0x40>)
 8001f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f48:	2003      	movs	r0, #3
 8001f4a:	f000 f94f 	bl	80021ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f000 f808 	bl	8001f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f54:	f7ff fb84 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023c00 	.word	0x40023c00

08001f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_InitTick+0x54>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_InitTick+0x58>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f967 	bl	8002256 <HAL_SYSTICK_Config>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00e      	b.n	8001fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b0f      	cmp	r3, #15
 8001f96:	d80a      	bhi.n	8001fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fa0:	f000 f92f 	bl	8002202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa4:	4a06      	ldr	r2, [pc, #24]	; (8001fc0 <HAL_InitTick+0x5c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e000      	b.n	8001fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	20000004 	.word	0x20000004

08001fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x20>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_IncTick+0x24>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <HAL_IncTick+0x24>)
 8001fd6:	6013      	str	r3, [r2, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000008 	.word	0x20000008
 8001fe8:	20005cdc 	.word	0x20005cdc

08001fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <HAL_GetTick+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20005cdc 	.word	0x20005cdc

08002004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800200c:	f7ff ffee 	bl	8001fec <HAL_GetTick>
 8002010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800201c:	d005      	beq.n	800202a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_Delay+0x44>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800202a:	bf00      	nop
 800202c:	f7ff ffde 	bl	8001fec <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	429a      	cmp	r2, r3
 800203a:	d8f7      	bhi.n	800202c <HAL_Delay+0x28>
  {
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000008 	.word	0x20000008

0800204c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002068:	4013      	ands	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207e:	4a04      	ldr	r2, [pc, #16]	; (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	60d3      	str	r3, [r2, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <__NVIC_GetPriorityGrouping+0x18>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	f003 0307 	and.w	r3, r3, #7
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	db0b      	blt.n	80020da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	f003 021f 	and.w	r2, r3, #31
 80020c8:	4907      	ldr	r1, [pc, #28]	; (80020e8 <__NVIC_EnableIRQ+0x38>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	2001      	movs	r0, #1
 80020d2:	fa00 f202 	lsl.w	r2, r0, r2
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000e100 	.word	0xe000e100

080020ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	6039      	str	r1, [r7, #0]
 80020f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	db0a      	blt.n	8002116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	b2da      	uxtb	r2, r3
 8002104:	490c      	ldr	r1, [pc, #48]	; (8002138 <__NVIC_SetPriority+0x4c>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	0112      	lsls	r2, r2, #4
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	440b      	add	r3, r1
 8002110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002114:	e00a      	b.n	800212c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	b2da      	uxtb	r2, r3
 800211a:	4908      	ldr	r1, [pc, #32]	; (800213c <__NVIC_SetPriority+0x50>)
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	3b04      	subs	r3, #4
 8002124:	0112      	lsls	r2, r2, #4
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	440b      	add	r3, r1
 800212a:	761a      	strb	r2, [r3, #24]
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000e100 	.word	0xe000e100
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002140:	b480      	push	{r7}
 8002142:	b089      	sub	sp, #36	; 0x24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f1c3 0307 	rsb	r3, r3, #7
 800215a:	2b04      	cmp	r3, #4
 800215c:	bf28      	it	cs
 800215e:	2304      	movcs	r3, #4
 8002160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3304      	adds	r3, #4
 8002166:	2b06      	cmp	r3, #6
 8002168:	d902      	bls.n	8002170 <NVIC_EncodePriority+0x30>
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3b03      	subs	r3, #3
 800216e:	e000      	b.n	8002172 <NVIC_EncodePriority+0x32>
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43da      	mvns	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	401a      	ands	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002188:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa01 f303 	lsl.w	r3, r1, r3
 8002192:	43d9      	mvns	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	4313      	orrs	r3, r2
         );
}
 800219a:	4618      	mov	r0, r3
 800219c:	3724      	adds	r7, #36	; 0x24
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021b8:	d301      	bcc.n	80021be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ba:	2301      	movs	r3, #1
 80021bc:	e00f      	b.n	80021de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021be:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <SysTick_Config+0x40>)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021c6:	210f      	movs	r1, #15
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021cc:	f7ff ff8e 	bl	80020ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <SysTick_Config+0x40>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d6:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <SysTick_Config+0x40>)
 80021d8:	2207      	movs	r2, #7
 80021da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	e000e010 	.word	0xe000e010

080021ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ff29 	bl	800204c <__NVIC_SetPriorityGrouping>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	4603      	mov	r3, r0
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002214:	f7ff ff3e 	bl	8002094 <__NVIC_GetPriorityGrouping>
 8002218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	6978      	ldr	r0, [r7, #20]
 8002220:	f7ff ff8e 	bl	8002140 <NVIC_EncodePriority>
 8002224:	4602      	mov	r2, r0
 8002226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff5d 	bl	80020ec <__NVIC_SetPriority>
}
 8002232:	bf00      	nop
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff31 	bl	80020b0 <__NVIC_EnableIRQ>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ffa2 	bl	80021a8 <SysTick_Config>
 8002264:	4603      	mov	r3, r0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800227c:	f7ff feb6 	bl	8001fec <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e099      	b.n	80023c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ac:	e00f      	b.n	80022ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ae:	f7ff fe9d 	bl	8001fec <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b05      	cmp	r3, #5
 80022ba:	d908      	bls.n	80022ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2220      	movs	r2, #32
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2203      	movs	r2, #3
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e078      	b.n	80023c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e8      	bne.n	80022ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	4b38      	ldr	r3, [pc, #224]	; (80023c8 <HAL_DMA_Init+0x158>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002306:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002312:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4313      	orrs	r3, r2
 800231e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	2b04      	cmp	r3, #4
 8002326:	d107      	bne.n	8002338 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	4313      	orrs	r3, r2
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f023 0307 	bic.w	r3, r3, #7
 800234e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	4313      	orrs	r3, r2
 8002358:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	2b04      	cmp	r3, #4
 8002360:	d117      	bne.n	8002392 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00e      	beq.n	8002392 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fa91 	bl	800289c <DMA_CheckFifoParam>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2240      	movs	r2, #64	; 0x40
 8002384:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800238e:	2301      	movs	r3, #1
 8002390:	e016      	b.n	80023c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fa48 	bl	8002830 <DMA_CalcBaseAndBitshift>
 80023a0:	4603      	mov	r3, r0
 80023a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a8:	223f      	movs	r2, #63	; 0x3f
 80023aa:	409a      	lsls	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	f010803f 	.word	0xf010803f

080023cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_DMA_Start_IT+0x26>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e040      	b.n	8002474 <HAL_DMA_Start_IT+0xa8>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d12f      	bne.n	8002466 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2202      	movs	r2, #2
 800240a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f9da 	bl	80027d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	223f      	movs	r2, #63	; 0x3f
 8002426:	409a      	lsls	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0216 	orr.w	r2, r2, #22
 800243a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0208 	orr.w	r2, r2, #8
 8002452:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e005      	b.n	8002472 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800246e:	2302      	movs	r3, #2
 8002470:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002472:	7dfb      	ldrb	r3, [r7, #23]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d004      	beq.n	800249a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2280      	movs	r2, #128	; 0x80
 8002494:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e00c      	b.n	80024b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2205      	movs	r2, #5
 800249e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0201 	bic.w	r2, r2, #1
 80024b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024cc:	4b8e      	ldr	r3, [pc, #568]	; (8002708 <HAL_DMA_IRQHandler+0x248>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a8e      	ldr	r2, [pc, #568]	; (800270c <HAL_DMA_IRQHandler+0x24c>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	0a9b      	lsrs	r3, r3, #10
 80024d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	2208      	movs	r2, #8
 80024ec:	409a      	lsls	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d01a      	beq.n	800252c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d013      	beq.n	800252c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0204 	bic.w	r2, r2, #4
 8002512:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002518:	2208      	movs	r2, #8
 800251a:	409a      	lsls	r2, r3
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002524:	f043 0201 	orr.w	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002530:	2201      	movs	r2, #1
 8002532:	409a      	lsls	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d012      	beq.n	8002562 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00b      	beq.n	8002562 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	2201      	movs	r2, #1
 8002550:	409a      	lsls	r2, r3
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255a:	f043 0202 	orr.w	r2, r3, #2
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002566:	2204      	movs	r2, #4
 8002568:	409a      	lsls	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d012      	beq.n	8002598 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00b      	beq.n	8002598 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	2204      	movs	r2, #4
 8002586:	409a      	lsls	r2, r3
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	f043 0204 	orr.w	r2, r3, #4
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259c:	2210      	movs	r2, #16
 800259e:	409a      	lsls	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d043      	beq.n	8002630 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d03c      	beq.n	8002630 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ba:	2210      	movs	r2, #16
 80025bc:	409a      	lsls	r2, r3
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d018      	beq.n	8002602 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d108      	bne.n	80025f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d024      	beq.n	8002630 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	4798      	blx	r3
 80025ee:	e01f      	b.n	8002630 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d01b      	beq.n	8002630 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	4798      	blx	r3
 8002600:	e016      	b.n	8002630 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d107      	bne.n	8002620 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0208 	bic.w	r2, r2, #8
 800261e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002634:	2220      	movs	r2, #32
 8002636:	409a      	lsls	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 808f 	beq.w	8002760 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8087 	beq.w	8002760 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002656:	2220      	movs	r2, #32
 8002658:	409a      	lsls	r2, r3
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b05      	cmp	r3, #5
 8002668:	d136      	bne.n	80026d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0216 	bic.w	r2, r2, #22
 8002678:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002688:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	2b00      	cmp	r3, #0
 8002690:	d103      	bne.n	800269a <HAL_DMA_IRQHandler+0x1da>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0208 	bic.w	r2, r2, #8
 80026a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	223f      	movs	r2, #63	; 0x3f
 80026b0:	409a      	lsls	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d07e      	beq.n	80027cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	4798      	blx	r3
        }
        return;
 80026d6:	e079      	b.n	80027cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01d      	beq.n	8002722 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10d      	bne.n	8002710 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d031      	beq.n	8002760 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4798      	blx	r3
 8002704:	e02c      	b.n	8002760 <HAL_DMA_IRQHandler+0x2a0>
 8002706:	bf00      	nop
 8002708:	20000000 	.word	0x20000000
 800270c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	2b00      	cmp	r3, #0
 8002716:	d023      	beq.n	8002760 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	4798      	blx	r3
 8002720:	e01e      	b.n	8002760 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10f      	bne.n	8002750 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0210 	bic.w	r2, r2, #16
 800273e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002764:	2b00      	cmp	r3, #0
 8002766:	d032      	beq.n	80027ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d022      	beq.n	80027ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2205      	movs	r2, #5
 8002778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	3301      	adds	r3, #1
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	429a      	cmp	r2, r3
 8002796:	d307      	bcc.n	80027a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f2      	bne.n	800278c <HAL_DMA_IRQHandler+0x2cc>
 80027a6:	e000      	b.n	80027aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	4798      	blx	r3
 80027ca:	e000      	b.n	80027ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80027cc:	bf00      	nop
    }
  }
}
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2b40      	cmp	r3, #64	; 0x40
 8002800:	d108      	bne.n	8002814 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002812:	e007      	b.n	8002824 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	60da      	str	r2, [r3, #12]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	3b10      	subs	r3, #16
 8002840:	4a14      	ldr	r2, [pc, #80]	; (8002894 <DMA_CalcBaseAndBitshift+0x64>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800284a:	4a13      	ldr	r2, [pc, #76]	; (8002898 <DMA_CalcBaseAndBitshift+0x68>)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b03      	cmp	r3, #3
 800285c:	d909      	bls.n	8002872 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002866:	f023 0303 	bic.w	r3, r3, #3
 800286a:	1d1a      	adds	r2, r3, #4
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	659a      	str	r2, [r3, #88]	; 0x58
 8002870:	e007      	b.n	8002882 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800287a:	f023 0303 	bic.w	r3, r3, #3
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	aaaaaaab 	.word	0xaaaaaaab
 8002898:	08006648 	.word	0x08006648

0800289c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d11f      	bne.n	80028f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d856      	bhi.n	800296a <DMA_CheckFifoParam+0xce>
 80028bc:	a201      	add	r2, pc, #4	; (adr r2, 80028c4 <DMA_CheckFifoParam+0x28>)
 80028be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c2:	bf00      	nop
 80028c4:	080028d5 	.word	0x080028d5
 80028c8:	080028e7 	.word	0x080028e7
 80028cc:	080028d5 	.word	0x080028d5
 80028d0:	0800296b 	.word	0x0800296b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d046      	beq.n	800296e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e4:	e043      	b.n	800296e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028ee:	d140      	bne.n	8002972 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f4:	e03d      	b.n	8002972 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028fe:	d121      	bne.n	8002944 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b03      	cmp	r3, #3
 8002904:	d837      	bhi.n	8002976 <DMA_CheckFifoParam+0xda>
 8002906:	a201      	add	r2, pc, #4	; (adr r2, 800290c <DMA_CheckFifoParam+0x70>)
 8002908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290c:	0800291d 	.word	0x0800291d
 8002910:	08002923 	.word	0x08002923
 8002914:	0800291d 	.word	0x0800291d
 8002918:	08002935 	.word	0x08002935
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
      break;
 8002920:	e030      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d025      	beq.n	800297a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002932:	e022      	b.n	800297a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800293c:	d11f      	bne.n	800297e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002942:	e01c      	b.n	800297e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d903      	bls.n	8002952 <DMA_CheckFifoParam+0xb6>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d003      	beq.n	8002958 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002950:	e018      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
      break;
 8002956:	e015      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00e      	beq.n	8002982 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
      break;
 8002968:	e00b      	b.n	8002982 <DMA_CheckFifoParam+0xe6>
      break;
 800296a:	bf00      	nop
 800296c:	e00a      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      break;
 800296e:	bf00      	nop
 8002970:	e008      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      break;
 8002972:	bf00      	nop
 8002974:	e006      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      break;
 8002976:	bf00      	nop
 8002978:	e004      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      break;
 800297a:	bf00      	nop
 800297c:	e002      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      break;   
 800297e:	bf00      	nop
 8002980:	e000      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      break;
 8002982:	bf00      	nop
    }
  } 
  
  return status; 
 8002984:	7bfb      	ldrb	r3, [r7, #15]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop

08002994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002994:	b480      	push	{r7}
 8002996:	b089      	sub	sp, #36	; 0x24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	e159      	b.n	8002c64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029b0:	2201      	movs	r2, #1
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	f040 8148 	bne.w	8002c5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d005      	beq.n	80029e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d130      	bne.n	8002a48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	2203      	movs	r2, #3
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 0201 	and.w	r2, r3, #1
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d017      	beq.n	8002a84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d123      	bne.n	8002ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	08da      	lsrs	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3208      	adds	r2, #8
 8002a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	08da      	lsrs	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3208      	adds	r2, #8
 8002ad2:	69b9      	ldr	r1, [r7, #24]
 8002ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0203 	and.w	r2, r3, #3
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80a2 	beq.w	8002c5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	4b57      	ldr	r3, [pc, #348]	; (8002c7c <HAL_GPIO_Init+0x2e8>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	4a56      	ldr	r2, [pc, #344]	; (8002c7c <HAL_GPIO_Init+0x2e8>)
 8002b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b28:	6453      	str	r3, [r2, #68]	; 0x44
 8002b2a:	4b54      	ldr	r3, [pc, #336]	; (8002c7c <HAL_GPIO_Init+0x2e8>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b36:	4a52      	ldr	r2, [pc, #328]	; (8002c80 <HAL_GPIO_Init+0x2ec>)
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	089b      	lsrs	r3, r3, #2
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a49      	ldr	r2, [pc, #292]	; (8002c84 <HAL_GPIO_Init+0x2f0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d019      	beq.n	8002b96 <HAL_GPIO_Init+0x202>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a48      	ldr	r2, [pc, #288]	; (8002c88 <HAL_GPIO_Init+0x2f4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d013      	beq.n	8002b92 <HAL_GPIO_Init+0x1fe>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a47      	ldr	r2, [pc, #284]	; (8002c8c <HAL_GPIO_Init+0x2f8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d00d      	beq.n	8002b8e <HAL_GPIO_Init+0x1fa>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a46      	ldr	r2, [pc, #280]	; (8002c90 <HAL_GPIO_Init+0x2fc>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d007      	beq.n	8002b8a <HAL_GPIO_Init+0x1f6>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a45      	ldr	r2, [pc, #276]	; (8002c94 <HAL_GPIO_Init+0x300>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d101      	bne.n	8002b86 <HAL_GPIO_Init+0x1f2>
 8002b82:	2304      	movs	r3, #4
 8002b84:	e008      	b.n	8002b98 <HAL_GPIO_Init+0x204>
 8002b86:	2307      	movs	r3, #7
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x204>
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e004      	b.n	8002b98 <HAL_GPIO_Init+0x204>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e002      	b.n	8002b98 <HAL_GPIO_Init+0x204>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_GPIO_Init+0x204>
 8002b96:	2300      	movs	r3, #0
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	f002 0203 	and.w	r2, r2, #3
 8002b9e:	0092      	lsls	r2, r2, #2
 8002ba0:	4093      	lsls	r3, r2
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ba8:	4935      	ldr	r1, [pc, #212]	; (8002c80 <HAL_GPIO_Init+0x2ec>)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	3302      	adds	r3, #2
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bb6:	4b38      	ldr	r3, [pc, #224]	; (8002c98 <HAL_GPIO_Init+0x304>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bda:	4a2f      	ldr	r2, [pc, #188]	; (8002c98 <HAL_GPIO_Init+0x304>)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002be0:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <HAL_GPIO_Init+0x304>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c04:	4a24      	ldr	r2, [pc, #144]	; (8002c98 <HAL_GPIO_Init+0x304>)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c0a:	4b23      	ldr	r3, [pc, #140]	; (8002c98 <HAL_GPIO_Init+0x304>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c2e:	4a1a      	ldr	r2, [pc, #104]	; (8002c98 <HAL_GPIO_Init+0x304>)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c34:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <HAL_GPIO_Init+0x304>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c58:	4a0f      	ldr	r2, [pc, #60]	; (8002c98 <HAL_GPIO_Init+0x304>)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3301      	adds	r3, #1
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	2b0f      	cmp	r3, #15
 8002c68:	f67f aea2 	bls.w	80029b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	3724      	adds	r7, #36	; 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40013800 	.word	0x40013800
 8002c84:	40020000 	.word	0x40020000
 8002c88:	40020400 	.word	0x40020400
 8002c8c:	40020800 	.word	0x40020800
 8002c90:	40020c00 	.word	0x40020c00
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40013c00 	.word	0x40013c00

08002c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	807b      	strh	r3, [r7, #2]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cac:	787b      	ldrb	r3, [r7, #1]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cb2:	887a      	ldrh	r2, [r7, #2]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cb8:	e003      	b.n	8002cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cba:	887b      	ldrh	r3, [r7, #2]
 8002cbc:	041a      	lsls	r2, r3, #16
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	619a      	str	r2, [r3, #24]
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e267      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d075      	beq.n	8002dda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cee:	4b88      	ldr	r3, [pc, #544]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d00c      	beq.n	8002d14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cfa:	4b85      	ldr	r3, [pc, #532]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d112      	bne.n	8002d2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d06:	4b82      	ldr	r3, [pc, #520]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d12:	d10b      	bne.n	8002d2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d14:	4b7e      	ldr	r3, [pc, #504]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d05b      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x108>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d157      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e242      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d34:	d106      	bne.n	8002d44 <HAL_RCC_OscConfig+0x74>
 8002d36:	4b76      	ldr	r3, [pc, #472]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a75      	ldr	r2, [pc, #468]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	e01d      	b.n	8002d80 <HAL_RCC_OscConfig+0xb0>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x98>
 8002d4e:	4b70      	ldr	r3, [pc, #448]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6f      	ldr	r2, [pc, #444]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	4b6d      	ldr	r3, [pc, #436]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a6c      	ldr	r2, [pc, #432]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e00b      	b.n	8002d80 <HAL_RCC_OscConfig+0xb0>
 8002d68:	4b69      	ldr	r3, [pc, #420]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a68      	ldr	r2, [pc, #416]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	4b66      	ldr	r3, [pc, #408]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a65      	ldr	r2, [pc, #404]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d013      	beq.n	8002db0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7ff f930 	bl	8001fec <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d90:	f7ff f92c 	bl	8001fec <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e207      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	4b5b      	ldr	r3, [pc, #364]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0xc0>
 8002dae:	e014      	b.n	8002dda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7ff f91c 	bl	8001fec <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db8:	f7ff f918 	bl	8001fec <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e1f3      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dca:	4b51      	ldr	r3, [pc, #324]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0xe8>
 8002dd6:	e000      	b.n	8002dda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d063      	beq.n	8002eae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002de6:	4b4a      	ldr	r3, [pc, #296]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00b      	beq.n	8002e0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002df2:	4b47      	ldr	r3, [pc, #284]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d11c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dfe:	4b44      	ldr	r3, [pc, #272]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d116      	bne.n	8002e38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0a:	4b41      	ldr	r3, [pc, #260]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <HAL_RCC_OscConfig+0x152>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e1c7      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e22:	4b3b      	ldr	r3, [pc, #236]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4937      	ldr	r1, [pc, #220]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e36:	e03a      	b.n	8002eae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d020      	beq.n	8002e82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e40:	4b34      	ldr	r3, [pc, #208]	; (8002f14 <HAL_RCC_OscConfig+0x244>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e46:	f7ff f8d1 	bl	8001fec <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4e:	f7ff f8cd 	bl	8001fec <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e1a8      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e60:	4b2b      	ldr	r3, [pc, #172]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6c:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4925      	ldr	r1, [pc, #148]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	600b      	str	r3, [r1, #0]
 8002e80:	e015      	b.n	8002eae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e82:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <HAL_RCC_OscConfig+0x244>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7ff f8b0 	bl	8001fec <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e90:	f7ff f8ac 	bl	8001fec <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e187      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea2:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d036      	beq.n	8002f28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d016      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec2:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <HAL_RCC_OscConfig+0x248>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec8:	f7ff f890 	bl	8001fec <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed0:	f7ff f88c 	bl	8001fec <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e167      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x200>
 8002eee:	e01b      	b.n	8002f28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <HAL_RCC_OscConfig+0x248>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef6:	f7ff f879 	bl	8001fec <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efc:	e00e      	b.n	8002f1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002efe:	f7ff f875 	bl	8001fec <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d907      	bls.n	8002f1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e150      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
 8002f10:	40023800 	.word	0x40023800
 8002f14:	42470000 	.word	0x42470000
 8002f18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1c:	4b88      	ldr	r3, [pc, #544]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1ea      	bne.n	8002efe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8097 	beq.w	8003064 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f3a:	4b81      	ldr	r3, [pc, #516]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10f      	bne.n	8002f66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	4b7d      	ldr	r3, [pc, #500]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	4a7c      	ldr	r2, [pc, #496]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f54:	6413      	str	r3, [r2, #64]	; 0x40
 8002f56:	4b7a      	ldr	r3, [pc, #488]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f62:	2301      	movs	r3, #1
 8002f64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f66:	4b77      	ldr	r3, [pc, #476]	; (8003144 <HAL_RCC_OscConfig+0x474>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d118      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f72:	4b74      	ldr	r3, [pc, #464]	; (8003144 <HAL_RCC_OscConfig+0x474>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a73      	ldr	r2, [pc, #460]	; (8003144 <HAL_RCC_OscConfig+0x474>)
 8002f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7e:	f7ff f835 	bl	8001fec <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f86:	f7ff f831 	bl	8001fec <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e10c      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	4b6a      	ldr	r3, [pc, #424]	; (8003144 <HAL_RCC_OscConfig+0x474>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d106      	bne.n	8002fba <HAL_RCC_OscConfig+0x2ea>
 8002fac:	4b64      	ldr	r3, [pc, #400]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	4a63      	ldr	r2, [pc, #396]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb8:	e01c      	b.n	8002ff4 <HAL_RCC_OscConfig+0x324>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b05      	cmp	r3, #5
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x30c>
 8002fc2:	4b5f      	ldr	r3, [pc, #380]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc6:	4a5e      	ldr	r2, [pc, #376]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fc8:	f043 0304 	orr.w	r3, r3, #4
 8002fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fce:	4b5c      	ldr	r3, [pc, #368]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	4a5b      	ldr	r2, [pc, #364]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fda:	e00b      	b.n	8002ff4 <HAL_RCC_OscConfig+0x324>
 8002fdc:	4b58      	ldr	r3, [pc, #352]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	4a57      	ldr	r2, [pc, #348]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe8:	4b55      	ldr	r3, [pc, #340]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	4a54      	ldr	r2, [pc, #336]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fee:	f023 0304 	bic.w	r3, r3, #4
 8002ff2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d015      	beq.n	8003028 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffc:	f7fe fff6 	bl	8001fec <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003002:	e00a      	b.n	800301a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7fe fff2 	bl	8001fec <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e0cb      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301a:	4b49      	ldr	r3, [pc, #292]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0ee      	beq.n	8003004 <HAL_RCC_OscConfig+0x334>
 8003026:	e014      	b.n	8003052 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003028:	f7fe ffe0 	bl	8001fec <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302e:	e00a      	b.n	8003046 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fe ffdc 	bl	8001fec <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e0b5      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003046:	4b3e      	ldr	r3, [pc, #248]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1ee      	bne.n	8003030 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003052:	7dfb      	ldrb	r3, [r7, #23]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d105      	bne.n	8003064 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003058:	4b39      	ldr	r3, [pc, #228]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	4a38      	ldr	r2, [pc, #224]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 800305e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003062:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80a1 	beq.w	80031b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800306e:	4b34      	ldr	r3, [pc, #208]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b08      	cmp	r3, #8
 8003078:	d05c      	beq.n	8003134 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d141      	bne.n	8003106 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003082:	4b31      	ldr	r3, [pc, #196]	; (8003148 <HAL_RCC_OscConfig+0x478>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7fe ffb0 	bl	8001fec <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003090:	f7fe ffac 	bl	8001fec <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e087      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	4b27      	ldr	r3, [pc, #156]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	019b      	lsls	r3, r3, #6
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	3b01      	subs	r3, #1
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	491b      	ldr	r1, [pc, #108]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d8:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <HAL_RCC_OscConfig+0x478>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7fe ff85 	bl	8001fec <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e6:	f7fe ff81 	bl	8001fec <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e05c      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f8:	4b11      	ldr	r3, [pc, #68]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x416>
 8003104:	e054      	b.n	80031b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <HAL_RCC_OscConfig+0x478>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310c:	f7fe ff6e 	bl	8001fec <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003114:	f7fe ff6a 	bl	8001fec <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e045      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x444>
 8003132:	e03d      	b.n	80031b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d107      	bne.n	800314c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e038      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
 8003140:	40023800 	.word	0x40023800
 8003144:	40007000 	.word	0x40007000
 8003148:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800314c:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <HAL_RCC_OscConfig+0x4ec>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d028      	beq.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d121      	bne.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003172:	429a      	cmp	r2, r3
 8003174:	d11a      	bne.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800317c:	4013      	ands	r3, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003182:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003184:	4293      	cmp	r3, r2
 8003186:	d111      	bne.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	3b01      	subs	r3, #1
 8003196:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d107      	bne.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800

080031c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0cc      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031d4:	4b68      	ldr	r3, [pc, #416]	; (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d90c      	bls.n	80031fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	4b65      	ldr	r3, [pc, #404]	; (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b63      	ldr	r3, [pc, #396]	; (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0b8      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d020      	beq.n	800324a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003214:	4b59      	ldr	r3, [pc, #356]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a58      	ldr	r2, [pc, #352]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800321e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800322c:	4b53      	ldr	r3, [pc, #332]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4a52      	ldr	r2, [pc, #328]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003238:	4b50      	ldr	r3, [pc, #320]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	494d      	ldr	r1, [pc, #308]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d044      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d107      	bne.n	800326e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	4b47      	ldr	r3, [pc, #284]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d119      	bne.n	800329e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e07f      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d003      	beq.n	800327e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800327a:	2b03      	cmp	r3, #3
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327e:	4b3f      	ldr	r3, [pc, #252]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e06f      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328e:	4b3b      	ldr	r3, [pc, #236]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e067      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800329e:	4b37      	ldr	r3, [pc, #220]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f023 0203 	bic.w	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4934      	ldr	r1, [pc, #208]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b0:	f7fe fe9c 	bl	8001fec <HAL_GetTick>
 80032b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b6:	e00a      	b.n	80032ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b8:	f7fe fe98 	bl	8001fec <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e04f      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	4b2b      	ldr	r3, [pc, #172]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 020c 	and.w	r2, r3, #12
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	429a      	cmp	r2, r3
 80032de:	d1eb      	bne.n	80032b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032e0:	4b25      	ldr	r3, [pc, #148]	; (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d20c      	bcs.n	8003308 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ee:	4b22      	ldr	r3, [pc, #136]	; (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b20      	ldr	r3, [pc, #128]	; (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e032      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003314:	4b19      	ldr	r3, [pc, #100]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4916      	ldr	r1, [pc, #88]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003332:	4b12      	ldr	r3, [pc, #72]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	490e      	ldr	r1, [pc, #56]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003346:	f000 f821 	bl	800338c <HAL_RCC_GetSysClockFreq>
 800334a:	4602      	mov	r2, r0
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	490a      	ldr	r1, [pc, #40]	; (8003380 <HAL_RCC_ClockConfig+0x1c0>)
 8003358:	5ccb      	ldrb	r3, [r1, r3]
 800335a:	fa22 f303 	lsr.w	r3, r2, r3
 800335e:	4a09      	ldr	r2, [pc, #36]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 8003360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fdfc 	bl	8001f64 <HAL_InitTick>

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40023c00 	.word	0x40023c00
 800337c:	40023800 	.word	0x40023800
 8003380:	08005eb0 	.word	0x08005eb0
 8003384:	20000000 	.word	0x20000000
 8003388:	20000004 	.word	0x20000004

0800338c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800338c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003390:	b094      	sub	sp, #80	; 0x50
 8003392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	647b      	str	r3, [r7, #68]	; 0x44
 8003398:	2300      	movs	r3, #0
 800339a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800339c:	2300      	movs	r3, #0
 800339e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033a4:	4b79      	ldr	r3, [pc, #484]	; (800358c <HAL_RCC_GetSysClockFreq+0x200>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d00d      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x40>
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	f200 80e1 	bhi.w	8003578 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x34>
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d003      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033be:	e0db      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033c0:	4b73      	ldr	r3, [pc, #460]	; (8003590 <HAL_RCC_GetSysClockFreq+0x204>)
 80033c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033c4:	e0db      	b.n	800357e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033c6:	4b73      	ldr	r3, [pc, #460]	; (8003594 <HAL_RCC_GetSysClockFreq+0x208>)
 80033c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033ca:	e0d8      	b.n	800357e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033cc:	4b6f      	ldr	r3, [pc, #444]	; (800358c <HAL_RCC_GetSysClockFreq+0x200>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033d6:	4b6d      	ldr	r3, [pc, #436]	; (800358c <HAL_RCC_GetSysClockFreq+0x200>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d063      	beq.n	80034aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e2:	4b6a      	ldr	r3, [pc, #424]	; (800358c <HAL_RCC_GetSysClockFreq+0x200>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	099b      	lsrs	r3, r3, #6
 80033e8:	2200      	movs	r2, #0
 80033ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f4:	633b      	str	r3, [r7, #48]	; 0x30
 80033f6:	2300      	movs	r3, #0
 80033f8:	637b      	str	r3, [r7, #52]	; 0x34
 80033fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033fe:	4622      	mov	r2, r4
 8003400:	462b      	mov	r3, r5
 8003402:	f04f 0000 	mov.w	r0, #0
 8003406:	f04f 0100 	mov.w	r1, #0
 800340a:	0159      	lsls	r1, r3, #5
 800340c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003410:	0150      	lsls	r0, r2, #5
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4621      	mov	r1, r4
 8003418:	1a51      	subs	r1, r2, r1
 800341a:	6139      	str	r1, [r7, #16]
 800341c:	4629      	mov	r1, r5
 800341e:	eb63 0301 	sbc.w	r3, r3, r1
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003430:	4659      	mov	r1, fp
 8003432:	018b      	lsls	r3, r1, #6
 8003434:	4651      	mov	r1, sl
 8003436:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800343a:	4651      	mov	r1, sl
 800343c:	018a      	lsls	r2, r1, #6
 800343e:	4651      	mov	r1, sl
 8003440:	ebb2 0801 	subs.w	r8, r2, r1
 8003444:	4659      	mov	r1, fp
 8003446:	eb63 0901 	sbc.w	r9, r3, r1
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003456:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800345a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800345e:	4690      	mov	r8, r2
 8003460:	4699      	mov	r9, r3
 8003462:	4623      	mov	r3, r4
 8003464:	eb18 0303 	adds.w	r3, r8, r3
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	462b      	mov	r3, r5
 800346c:	eb49 0303 	adc.w	r3, r9, r3
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800347e:	4629      	mov	r1, r5
 8003480:	024b      	lsls	r3, r1, #9
 8003482:	4621      	mov	r1, r4
 8003484:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003488:	4621      	mov	r1, r4
 800348a:	024a      	lsls	r2, r1, #9
 800348c:	4610      	mov	r0, r2
 800348e:	4619      	mov	r1, r3
 8003490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003492:	2200      	movs	r2, #0
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
 8003496:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003498:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800349c:	f7fc fef0 	bl	8000280 <__aeabi_uldivmod>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4613      	mov	r3, r2
 80034a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034a8:	e058      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034aa:	4b38      	ldr	r3, [pc, #224]	; (800358c <HAL_RCC_GetSysClockFreq+0x200>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	099b      	lsrs	r3, r3, #6
 80034b0:	2200      	movs	r2, #0
 80034b2:	4618      	mov	r0, r3
 80034b4:	4611      	mov	r1, r2
 80034b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034ba:	623b      	str	r3, [r7, #32]
 80034bc:	2300      	movs	r3, #0
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
 80034c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034c4:	4642      	mov	r2, r8
 80034c6:	464b      	mov	r3, r9
 80034c8:	f04f 0000 	mov.w	r0, #0
 80034cc:	f04f 0100 	mov.w	r1, #0
 80034d0:	0159      	lsls	r1, r3, #5
 80034d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034d6:	0150      	lsls	r0, r2, #5
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4641      	mov	r1, r8
 80034de:	ebb2 0a01 	subs.w	sl, r2, r1
 80034e2:	4649      	mov	r1, r9
 80034e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003500:	eb63 050b 	sbc.w	r5, r3, fp
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	00eb      	lsls	r3, r5, #3
 800350e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003512:	00e2      	lsls	r2, r4, #3
 8003514:	4614      	mov	r4, r2
 8003516:	461d      	mov	r5, r3
 8003518:	4643      	mov	r3, r8
 800351a:	18e3      	adds	r3, r4, r3
 800351c:	603b      	str	r3, [r7, #0]
 800351e:	464b      	mov	r3, r9
 8003520:	eb45 0303 	adc.w	r3, r5, r3
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003532:	4629      	mov	r1, r5
 8003534:	028b      	lsls	r3, r1, #10
 8003536:	4621      	mov	r1, r4
 8003538:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800353c:	4621      	mov	r1, r4
 800353e:	028a      	lsls	r2, r1, #10
 8003540:	4610      	mov	r0, r2
 8003542:	4619      	mov	r1, r3
 8003544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003546:	2200      	movs	r2, #0
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	61fa      	str	r2, [r7, #28]
 800354c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003550:	f7fc fe96 	bl	8000280 <__aeabi_uldivmod>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4613      	mov	r3, r2
 800355a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_RCC_GetSysClockFreq+0x200>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	3301      	adds	r3, #1
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800356c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800356e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003576:	e002      	b.n	800357e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <HAL_RCC_GetSysClockFreq+0x204>)
 800357a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800357c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800357e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003580:	4618      	mov	r0, r3
 8003582:	3750      	adds	r7, #80	; 0x50
 8003584:	46bd      	mov	sp, r7
 8003586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800358a:	bf00      	nop
 800358c:	40023800 	.word	0x40023800
 8003590:	00f42400 	.word	0x00f42400
 8003594:	007a1200 	.word	0x007a1200

08003598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <HAL_RCC_GetHCLKFreq+0x14>)
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000000 	.word	0x20000000

080035b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035b4:	f7ff fff0 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	0a9b      	lsrs	r3, r3, #10
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	4903      	ldr	r1, [pc, #12]	; (80035d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40023800 	.word	0x40023800
 80035d4:	08005ec0 	.word	0x08005ec0

080035d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035dc:	f7ff ffdc 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035e0:	4602      	mov	r2, r0
 80035e2:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	0b5b      	lsrs	r3, r3, #13
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	4903      	ldr	r1, [pc, #12]	; (80035fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ee:	5ccb      	ldrb	r3, [r1, r3]
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40023800 	.word	0x40023800
 80035fc:	08005ec0 	.word	0x08005ec0

08003600 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e07b      	b.n	800370a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	2b00      	cmp	r3, #0
 8003618:	d108      	bne.n	800362c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003622:	d009      	beq.n	8003638 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	61da      	str	r2, [r3, #28]
 800362a:	e005      	b.n	8003638 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fe f82c 	bl	80016b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800366e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036bc:	ea42 0103 	orr.w	r1, r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	f003 0104 	and.w	r1, r3, #4
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	f003 0210 	and.w	r2, r3, #16
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	4613      	mov	r3, r2
 8003720:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_SPI_Transmit_DMA+0x20>
 8003730:	2302      	movs	r3, #2
 8003732:	e09b      	b.n	800386c <HAL_SPI_Transmit_DMA+0x158>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b01      	cmp	r3, #1
 8003746:	d002      	beq.n	800374e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003748:	2302      	movs	r3, #2
 800374a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800374c:	e089      	b.n	8003862 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_SPI_Transmit_DMA+0x46>
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d102      	bne.n	8003760 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800375e:	e080      	b.n	8003862 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2203      	movs	r2, #3
 8003764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	88fa      	ldrh	r2, [r7, #6]
 8003778:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	88fa      	ldrh	r2, [r7, #6]
 800377e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037a6:	d10f      	bne.n	80037c8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037cc:	4a29      	ldr	r2, [pc, #164]	; (8003874 <HAL_SPI_Transmit_DMA+0x160>)
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d4:	4a28      	ldr	r2, [pc, #160]	; (8003878 <HAL_SPI_Transmit_DMA+0x164>)
 80037d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037dc:	4a27      	ldr	r2, [pc, #156]	; (800387c <HAL_SPI_Transmit_DMA+0x168>)
 80037de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e4:	2200      	movs	r2, #0
 80037e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	4619      	mov	r1, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	330c      	adds	r3, #12
 80037f8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037fe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003800:	f7fe fde4 	bl	80023cc <HAL_DMA_Start_IT>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00c      	beq.n	8003824 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	f043 0210 	orr.w	r2, r3, #16
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003822:	e01e      	b.n	8003862 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d007      	beq.n	8003842 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003840:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 0220 	orr.w	r2, r2, #32
 8003850:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0202 	orr.w	r2, r2, #2
 8003860:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800386a:	7dfb      	ldrb	r3, [r7, #23]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	08003b39 	.word	0x08003b39
 8003878:	08003a91 	.word	0x08003a91
 800387c:	08003b55 	.word	0x08003b55

08003880 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10e      	bne.n	80038c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d009      	beq.n	80038c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d004      	beq.n	80038c0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4798      	blx	r3
    return;
 80038be:	e0ce      	b.n	8003a5e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <HAL_SPI_IRQHandler+0x5e>
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d004      	beq.n	80038de <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	4798      	blx	r3
    return;
 80038dc:	e0bf      	b.n	8003a5e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <HAL_SPI_IRQHandler+0x7e>
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d105      	bne.n	80038fe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 80b0 	beq.w	8003a5e <HAL_SPI_IRQHandler+0x1de>
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80aa 	beq.w	8003a5e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d023      	beq.n	800395c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b03      	cmp	r3, #3
 800391e:	d011      	beq.n	8003944 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003924:	f043 0204 	orr.w	r2, r3, #4
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	e00b      	b.n	800395c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	693b      	ldr	r3, [r7, #16]
        return;
 800395a:	e080      	b.n	8003a5e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b00      	cmp	r3, #0
 8003964:	d014      	beq.n	8003990 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396a:	f043 0201 	orr.w	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00c      	beq.n	80039b4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399e:	f043 0208 	orr.w	r2, r3, #8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d04f      	beq.n	8003a5c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d104      	bne.n	80039e8 <HAL_SPI_IRQHandler+0x168>
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d034      	beq.n	8003a52 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0203 	bic.w	r2, r2, #3
 80039f6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d011      	beq.n	8003a24 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a04:	4a17      	ldr	r2, [pc, #92]	; (8003a64 <HAL_SPI_IRQHandler+0x1e4>)
 8003a06:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fe fd35 	bl	800247c <HAL_DMA_Abort_IT>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d016      	beq.n	8003a5a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a30:	4a0c      	ldr	r2, [pc, #48]	; (8003a64 <HAL_SPI_IRQHandler+0x1e4>)
 8003a32:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fe fd1f 	bl	800247c <HAL_DMA_Abort_IT>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003a50:	e003      	b.n	8003a5a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f812 	bl	8003a7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003a58:	e000      	b.n	8003a5c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003a5a:	bf00      	nop
    return;
 8003a5c:	bf00      	nop
  }
}
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	08003b95 	.word	0x08003b95

08003a68 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a9e:	f7fe faa5 	bl	8001fec <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab2:	d03b      	beq.n	8003b2c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0220 	bic.w	r2, r2, #32
 8003ac2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0202 	bic.w	r2, r2, #2
 8003ad2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	2164      	movs	r1, #100	; 0x64
 8003ad8:	6978      	ldr	r0, [r7, #20]
 8003ada:	f000 f8f7 	bl	8003ccc <SPI_EndRxTxTransaction>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae8:	f043 0220 	orr.w	r2, r3, #32
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10a      	bne.n	8003b0e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2200      	movs	r2, #0
 8003b12:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003b24:	6978      	ldr	r0, [r7, #20]
 8003b26:	f7ff ffa9 	bl	8003a7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003b2a:	e002      	b.n	8003b32 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003b2c:	6978      	ldr	r0, [r7, #20]
 8003b2e:	f7fe f997 	bl	8001e60 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f7ff ff8e 	bl	8003a68 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b4c:	bf00      	nop
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0203 	bic.w	r2, r2, #3
 8003b70:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	f043 0210 	orr.w	r2, r3, #16
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f7ff ff78 	bl	8003a7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b8c:	bf00      	nop
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff ff64 	bl	8003a7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bcc:	f7fe fa0e 	bl	8001fec <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	4413      	add	r3, r2
 8003bda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bdc:	f7fe fa06 	bl	8001fec <HAL_GetTick>
 8003be0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003be2:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	015b      	lsls	r3, r3, #5
 8003be8:	0d1b      	lsrs	r3, r3, #20
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	fb02 f303 	mul.w	r3, r2, r3
 8003bf0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bf2:	e054      	b.n	8003c9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bfa:	d050      	beq.n	8003c9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bfc:	f7fe f9f6 	bl	8001fec <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d902      	bls.n	8003c12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d13d      	bne.n	8003c8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c2a:	d111      	bne.n	8003c50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c34:	d004      	beq.n	8003c40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3e:	d107      	bne.n	8003c50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c58:	d10f      	bne.n	8003c7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e017      	b.n	8003cbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	bf0c      	ite	eq
 8003cae:	2301      	moveq	r3, #1
 8003cb0:	2300      	movne	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d19b      	bne.n	8003bf4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3720      	adds	r7, #32
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000000 	.word	0x20000000

08003ccc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003cd8:	4b1b      	ldr	r3, [pc, #108]	; (8003d48 <SPI_EndRxTxTransaction+0x7c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1b      	ldr	r2, [pc, #108]	; (8003d4c <SPI_EndRxTxTransaction+0x80>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	0d5b      	lsrs	r3, r3, #21
 8003ce4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ce8:	fb02 f303 	mul.w	r3, r2, r3
 8003cec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cf6:	d112      	bne.n	8003d1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2180      	movs	r1, #128	; 0x80
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f7ff ff5a 	bl	8003bbc <SPI_WaitFlagStateUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d016      	beq.n	8003d3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d12:	f043 0220 	orr.w	r2, r3, #32
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e00f      	b.n	8003d3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d34:	2b80      	cmp	r3, #128	; 0x80
 8003d36:	d0f2      	beq.n	8003d1e <SPI_EndRxTxTransaction+0x52>
 8003d38:	e000      	b.n	8003d3c <SPI_EndRxTxTransaction+0x70>
        break;
 8003d3a:	bf00      	nop
  }

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20000000 	.word	0x20000000
 8003d4c:	165e9f81 	.word	0x165e9f81

08003d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e041      	b.n	8003de6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fd fd3e 	bl	80017f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4610      	mov	r0, r2
 8003d90:	f000 fa10 	bl	80041b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e041      	b.n	8003e84 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d106      	bne.n	8003e1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f839 	bl	8003e8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f000 f9c1 	bl	80041b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e0ae      	b.n	800401c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b0c      	cmp	r3, #12
 8003eca:	f200 809f 	bhi.w	800400c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ece:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed4:	08003f09 	.word	0x08003f09
 8003ed8:	0800400d 	.word	0x0800400d
 8003edc:	0800400d 	.word	0x0800400d
 8003ee0:	0800400d 	.word	0x0800400d
 8003ee4:	08003f49 	.word	0x08003f49
 8003ee8:	0800400d 	.word	0x0800400d
 8003eec:	0800400d 	.word	0x0800400d
 8003ef0:	0800400d 	.word	0x0800400d
 8003ef4:	08003f8b 	.word	0x08003f8b
 8003ef8:	0800400d 	.word	0x0800400d
 8003efc:	0800400d 	.word	0x0800400d
 8003f00:	0800400d 	.word	0x0800400d
 8003f04:	08003fcb 	.word	0x08003fcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 f9d0 	bl	80042b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699a      	ldr	r2, [r3, #24]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0208 	orr.w	r2, r2, #8
 8003f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699a      	ldr	r2, [r3, #24]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0204 	bic.w	r2, r2, #4
 8003f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6999      	ldr	r1, [r3, #24]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	619a      	str	r2, [r3, #24]
      break;
 8003f46:	e064      	b.n	8004012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fa16 	bl	8004380 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699a      	ldr	r2, [r3, #24]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699a      	ldr	r2, [r3, #24]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6999      	ldr	r1, [r3, #24]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	021a      	lsls	r2, r3, #8
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	619a      	str	r2, [r3, #24]
      break;
 8003f88:	e043      	b.n	8004012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68b9      	ldr	r1, [r7, #8]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fa61 	bl	8004458 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0208 	orr.w	r2, r2, #8
 8003fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	69da      	ldr	r2, [r3, #28]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0204 	bic.w	r2, r2, #4
 8003fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69d9      	ldr	r1, [r3, #28]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	61da      	str	r2, [r3, #28]
      break;
 8003fc8:	e023      	b.n	8004012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68b9      	ldr	r1, [r7, #8]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 faab 	bl	800452c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69da      	ldr	r2, [r3, #28]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69da      	ldr	r2, [r3, #28]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69d9      	ldr	r1, [r3, #28]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	021a      	lsls	r2, r3, #8
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	61da      	str	r2, [r3, #28]
      break;
 800400a:	e002      	b.n	8004012 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	75fb      	strb	r3, [r7, #23]
      break;
 8004010:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800401a:	7dfb      	ldrb	r3, [r7, #23]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_TIM_ConfigClockSource+0x1c>
 800403c:	2302      	movs	r3, #2
 800403e:	e0b4      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x186>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800405e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004066:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004078:	d03e      	beq.n	80040f8 <HAL_TIM_ConfigClockSource+0xd4>
 800407a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800407e:	f200 8087 	bhi.w	8004190 <HAL_TIM_ConfigClockSource+0x16c>
 8004082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004086:	f000 8086 	beq.w	8004196 <HAL_TIM_ConfigClockSource+0x172>
 800408a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408e:	d87f      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x16c>
 8004090:	2b70      	cmp	r3, #112	; 0x70
 8004092:	d01a      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0xa6>
 8004094:	2b70      	cmp	r3, #112	; 0x70
 8004096:	d87b      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x16c>
 8004098:	2b60      	cmp	r3, #96	; 0x60
 800409a:	d050      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x11a>
 800409c:	2b60      	cmp	r3, #96	; 0x60
 800409e:	d877      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x16c>
 80040a0:	2b50      	cmp	r3, #80	; 0x50
 80040a2:	d03c      	beq.n	800411e <HAL_TIM_ConfigClockSource+0xfa>
 80040a4:	2b50      	cmp	r3, #80	; 0x50
 80040a6:	d873      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x16c>
 80040a8:	2b40      	cmp	r3, #64	; 0x40
 80040aa:	d058      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x13a>
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d86f      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x16c>
 80040b0:	2b30      	cmp	r3, #48	; 0x30
 80040b2:	d064      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x15a>
 80040b4:	2b30      	cmp	r3, #48	; 0x30
 80040b6:	d86b      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x16c>
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d060      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x15a>
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d867      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x16c>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d05c      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x15a>
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d05a      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x15a>
 80040c8:	e062      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6899      	ldr	r1, [r3, #8]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f000 faf1 	bl	80046c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	609a      	str	r2, [r3, #8]
      break;
 80040f6:	e04f      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6899      	ldr	r1, [r3, #8]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f000 fada 	bl	80046c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800411a:	609a      	str	r2, [r3, #8]
      break;
 800411c:	e03c      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6859      	ldr	r1, [r3, #4]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	461a      	mov	r2, r3
 800412c:	f000 fa4e 	bl	80045cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2150      	movs	r1, #80	; 0x50
 8004136:	4618      	mov	r0, r3
 8004138:	f000 faa7 	bl	800468a <TIM_ITRx_SetConfig>
      break;
 800413c:	e02c      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6859      	ldr	r1, [r3, #4]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	461a      	mov	r2, r3
 800414c:	f000 fa6d 	bl	800462a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2160      	movs	r1, #96	; 0x60
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fa97 	bl	800468a <TIM_ITRx_SetConfig>
      break;
 800415c:	e01c      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6859      	ldr	r1, [r3, #4]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	461a      	mov	r2, r3
 800416c:	f000 fa2e 	bl	80045cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2140      	movs	r1, #64	; 0x40
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fa87 	bl	800468a <TIM_ITRx_SetConfig>
      break;
 800417c:	e00c      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4619      	mov	r1, r3
 8004188:	4610      	mov	r0, r2
 800418a:	f000 fa7e 	bl	800468a <TIM_ITRx_SetConfig>
      break;
 800418e:	e003      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
      break;
 8004194:	e000      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004196:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a34      	ldr	r2, [pc, #208]	; (8004298 <TIM_Base_SetConfig+0xe4>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00f      	beq.n	80041ec <TIM_Base_SetConfig+0x38>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d2:	d00b      	beq.n	80041ec <TIM_Base_SetConfig+0x38>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a31      	ldr	r2, [pc, #196]	; (800429c <TIM_Base_SetConfig+0xe8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d007      	beq.n	80041ec <TIM_Base_SetConfig+0x38>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a30      	ldr	r2, [pc, #192]	; (80042a0 <TIM_Base_SetConfig+0xec>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d003      	beq.n	80041ec <TIM_Base_SetConfig+0x38>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a2f      	ldr	r2, [pc, #188]	; (80042a4 <TIM_Base_SetConfig+0xf0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d108      	bne.n	80041fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a25      	ldr	r2, [pc, #148]	; (8004298 <TIM_Base_SetConfig+0xe4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d01b      	beq.n	800423e <TIM_Base_SetConfig+0x8a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420c:	d017      	beq.n	800423e <TIM_Base_SetConfig+0x8a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a22      	ldr	r2, [pc, #136]	; (800429c <TIM_Base_SetConfig+0xe8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d013      	beq.n	800423e <TIM_Base_SetConfig+0x8a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a21      	ldr	r2, [pc, #132]	; (80042a0 <TIM_Base_SetConfig+0xec>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00f      	beq.n	800423e <TIM_Base_SetConfig+0x8a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a20      	ldr	r2, [pc, #128]	; (80042a4 <TIM_Base_SetConfig+0xf0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00b      	beq.n	800423e <TIM_Base_SetConfig+0x8a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a1f      	ldr	r2, [pc, #124]	; (80042a8 <TIM_Base_SetConfig+0xf4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d007      	beq.n	800423e <TIM_Base_SetConfig+0x8a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a1e      	ldr	r2, [pc, #120]	; (80042ac <TIM_Base_SetConfig+0xf8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d003      	beq.n	800423e <TIM_Base_SetConfig+0x8a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a1d      	ldr	r2, [pc, #116]	; (80042b0 <TIM_Base_SetConfig+0xfc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d108      	bne.n	8004250 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a08      	ldr	r2, [pc, #32]	; (8004298 <TIM_Base_SetConfig+0xe4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d103      	bne.n	8004284 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	615a      	str	r2, [r3, #20]
}
 800428a:	bf00      	nop
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40010000 	.word	0x40010000
 800429c:	40000400 	.word	0x40000400
 80042a0:	40000800 	.word	0x40000800
 80042a4:	40000c00 	.word	0x40000c00
 80042a8:	40014000 	.word	0x40014000
 80042ac:	40014400 	.word	0x40014400
 80042b0:	40014800 	.word	0x40014800

080042b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	f023 0201 	bic.w	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0303 	bic.w	r3, r3, #3
 80042ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f023 0302 	bic.w	r3, r3, #2
 80042fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a1c      	ldr	r2, [pc, #112]	; (800437c <TIM_OC1_SetConfig+0xc8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d10c      	bne.n	800432a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f023 0308 	bic.w	r3, r3, #8
 8004316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f023 0304 	bic.w	r3, r3, #4
 8004328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a13      	ldr	r2, [pc, #76]	; (800437c <TIM_OC1_SetConfig+0xc8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d111      	bne.n	8004356 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	621a      	str	r2, [r3, #32]
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	40010000 	.word	0x40010000

08004380 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f023 0210 	bic.w	r2, r3, #16
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f023 0320 	bic.w	r3, r3, #32
 80043ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a1e      	ldr	r2, [pc, #120]	; (8004454 <TIM_OC2_SetConfig+0xd4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d10d      	bne.n	80043fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a15      	ldr	r2, [pc, #84]	; (8004454 <TIM_OC2_SetConfig+0xd4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d113      	bne.n	800442c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800440a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	621a      	str	r2, [r3, #32]
}
 8004446:	bf00      	nop
 8004448:	371c      	adds	r7, #28
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40010000 	.word	0x40010000

08004458 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0303 	bic.w	r3, r3, #3
 800448e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a1d      	ldr	r2, [pc, #116]	; (8004528 <TIM_OC3_SetConfig+0xd0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d10d      	bne.n	80044d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	021b      	lsls	r3, r3, #8
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a14      	ldr	r2, [pc, #80]	; (8004528 <TIM_OC3_SetConfig+0xd0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d113      	bne.n	8004502 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	621a      	str	r2, [r3, #32]
}
 800451c:	bf00      	nop
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	40010000 	.word	0x40010000

0800452c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	021b      	lsls	r3, r3, #8
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	031b      	lsls	r3, r3, #12
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a10      	ldr	r2, [pc, #64]	; (80045c8 <TIM_OC4_SetConfig+0x9c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d109      	bne.n	80045a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004592:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	019b      	lsls	r3, r3, #6
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	621a      	str	r2, [r3, #32]
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40010000 	.word	0x40010000

080045cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	f023 0201 	bic.w	r2, r3, #1
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f023 030a 	bic.w	r3, r3, #10
 8004608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	621a      	str	r2, [r3, #32]
}
 800461e:	bf00      	nop
 8004620:	371c      	adds	r7, #28
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800462a:	b480      	push	{r7}
 800462c:	b087      	sub	sp, #28
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	f023 0210 	bic.w	r2, r3, #16
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	031b      	lsls	r3, r3, #12
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004666:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800468a:	b480      	push	{r7}
 800468c:	b085      	sub	sp, #20
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f043 0307 	orr.w	r3, r3, #7
 80046ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	609a      	str	r2, [r3, #8]
}
 80046b4:	bf00      	nop
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	021a      	lsls	r2, r3, #8
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	431a      	orrs	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	609a      	str	r2, [r3, #8]
}
 80046f4:	bf00      	nop
 80046f6:	371c      	adds	r7, #28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004714:	2302      	movs	r3, #2
 8004716:	e050      	b.n	80047ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d018      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004764:	d013      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a18      	ldr	r2, [pc, #96]	; (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00e      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a16      	ldr	r2, [pc, #88]	; (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d009      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a15      	ldr	r2, [pc, #84]	; (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a13      	ldr	r2, [pc, #76]	; (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d10c      	bne.n	80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	4313      	orrs	r3, r2
 800479e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40010000 	.word	0x40010000
 80047cc:	40000400 	.word	0x40000400
 80047d0:	40000800 	.word	0x40000800
 80047d4:	40000c00 	.word	0x40000c00
 80047d8:	40014000 	.word	0x40014000

080047dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e03f      	b.n	800486e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fd f8c8 	bl	8001998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2224      	movs	r2, #36	; 0x24
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800481e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f829 	bl	8004878 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800487c:	b0c0      	sub	sp, #256	; 0x100
 800487e:	af00      	add	r7, sp, #0
 8004880:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004894:	68d9      	ldr	r1, [r3, #12]
 8004896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	ea40 0301 	orr.w	r3, r0, r1
 80048a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048d0:	f021 010c 	bic.w	r1, r1, #12
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048de:	430b      	orrs	r3, r1
 80048e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f2:	6999      	ldr	r1, [r3, #24]
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	ea40 0301 	orr.w	r3, r0, r1
 80048fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4b8f      	ldr	r3, [pc, #572]	; (8004b44 <UART_SetConfig+0x2cc>)
 8004908:	429a      	cmp	r2, r3
 800490a:	d005      	beq.n	8004918 <UART_SetConfig+0xa0>
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4b8d      	ldr	r3, [pc, #564]	; (8004b48 <UART_SetConfig+0x2d0>)
 8004914:	429a      	cmp	r2, r3
 8004916:	d104      	bne.n	8004922 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004918:	f7fe fe5e 	bl	80035d8 <HAL_RCC_GetPCLK2Freq>
 800491c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004920:	e003      	b.n	800492a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004922:	f7fe fe45 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 8004926:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800492a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004934:	f040 810c 	bne.w	8004b50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800493c:	2200      	movs	r2, #0
 800493e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004942:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004946:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800494a:	4622      	mov	r2, r4
 800494c:	462b      	mov	r3, r5
 800494e:	1891      	adds	r1, r2, r2
 8004950:	65b9      	str	r1, [r7, #88]	; 0x58
 8004952:	415b      	adcs	r3, r3
 8004954:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004956:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800495a:	4621      	mov	r1, r4
 800495c:	eb12 0801 	adds.w	r8, r2, r1
 8004960:	4629      	mov	r1, r5
 8004962:	eb43 0901 	adc.w	r9, r3, r1
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800497a:	4690      	mov	r8, r2
 800497c:	4699      	mov	r9, r3
 800497e:	4623      	mov	r3, r4
 8004980:	eb18 0303 	adds.w	r3, r8, r3
 8004984:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004988:	462b      	mov	r3, r5
 800498a:	eb49 0303 	adc.w	r3, r9, r3
 800498e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800499e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049a6:	460b      	mov	r3, r1
 80049a8:	18db      	adds	r3, r3, r3
 80049aa:	653b      	str	r3, [r7, #80]	; 0x50
 80049ac:	4613      	mov	r3, r2
 80049ae:	eb42 0303 	adc.w	r3, r2, r3
 80049b2:	657b      	str	r3, [r7, #84]	; 0x54
 80049b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049bc:	f7fb fc60 	bl	8000280 <__aeabi_uldivmod>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4b61      	ldr	r3, [pc, #388]	; (8004b4c <UART_SetConfig+0x2d4>)
 80049c6:	fba3 2302 	umull	r2, r3, r3, r2
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	011c      	lsls	r4, r3, #4
 80049ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049e0:	4642      	mov	r2, r8
 80049e2:	464b      	mov	r3, r9
 80049e4:	1891      	adds	r1, r2, r2
 80049e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80049e8:	415b      	adcs	r3, r3
 80049ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049f0:	4641      	mov	r1, r8
 80049f2:	eb12 0a01 	adds.w	sl, r2, r1
 80049f6:	4649      	mov	r1, r9
 80049f8:	eb43 0b01 	adc.w	fp, r3, r1
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a10:	4692      	mov	sl, r2
 8004a12:	469b      	mov	fp, r3
 8004a14:	4643      	mov	r3, r8
 8004a16:	eb1a 0303 	adds.w	r3, sl, r3
 8004a1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a1e:	464b      	mov	r3, r9
 8004a20:	eb4b 0303 	adc.w	r3, fp, r3
 8004a24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	18db      	adds	r3, r3, r3
 8004a40:	643b      	str	r3, [r7, #64]	; 0x40
 8004a42:	4613      	mov	r3, r2
 8004a44:	eb42 0303 	adc.w	r3, r2, r3
 8004a48:	647b      	str	r3, [r7, #68]	; 0x44
 8004a4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a52:	f7fb fc15 	bl	8000280 <__aeabi_uldivmod>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	4b3b      	ldr	r3, [pc, #236]	; (8004b4c <UART_SetConfig+0x2d4>)
 8004a5e:	fba3 2301 	umull	r2, r3, r3, r1
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	2264      	movs	r2, #100	; 0x64
 8004a66:	fb02 f303 	mul.w	r3, r2, r3
 8004a6a:	1acb      	subs	r3, r1, r3
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a72:	4b36      	ldr	r3, [pc, #216]	; (8004b4c <UART_SetConfig+0x2d4>)
 8004a74:	fba3 2302 	umull	r2, r3, r3, r2
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a80:	441c      	add	r4, r3
 8004a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a94:	4642      	mov	r2, r8
 8004a96:	464b      	mov	r3, r9
 8004a98:	1891      	adds	r1, r2, r2
 8004a9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a9c:	415b      	adcs	r3, r3
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004aa4:	4641      	mov	r1, r8
 8004aa6:	1851      	adds	r1, r2, r1
 8004aa8:	6339      	str	r1, [r7, #48]	; 0x30
 8004aaa:	4649      	mov	r1, r9
 8004aac:	414b      	adcs	r3, r1
 8004aae:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004abc:	4659      	mov	r1, fp
 8004abe:	00cb      	lsls	r3, r1, #3
 8004ac0:	4651      	mov	r1, sl
 8004ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ac6:	4651      	mov	r1, sl
 8004ac8:	00ca      	lsls	r2, r1, #3
 8004aca:	4610      	mov	r0, r2
 8004acc:	4619      	mov	r1, r3
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	189b      	adds	r3, r3, r2
 8004ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ad8:	464b      	mov	r3, r9
 8004ada:	460a      	mov	r2, r1
 8004adc:	eb42 0303 	adc.w	r3, r2, r3
 8004ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004af0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004af4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004af8:	460b      	mov	r3, r1
 8004afa:	18db      	adds	r3, r3, r3
 8004afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004afe:	4613      	mov	r3, r2
 8004b00:	eb42 0303 	adc.w	r3, r2, r3
 8004b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b0e:	f7fb fbb7 	bl	8000280 <__aeabi_uldivmod>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4b0d      	ldr	r3, [pc, #52]	; (8004b4c <UART_SetConfig+0x2d4>)
 8004b18:	fba3 1302 	umull	r1, r3, r3, r2
 8004b1c:	095b      	lsrs	r3, r3, #5
 8004b1e:	2164      	movs	r1, #100	; 0x64
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	3332      	adds	r3, #50	; 0x32
 8004b2a:	4a08      	ldr	r2, [pc, #32]	; (8004b4c <UART_SetConfig+0x2d4>)
 8004b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b30:	095b      	lsrs	r3, r3, #5
 8004b32:	f003 0207 	and.w	r2, r3, #7
 8004b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4422      	add	r2, r4
 8004b3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b40:	e106      	b.n	8004d50 <UART_SetConfig+0x4d8>
 8004b42:	bf00      	nop
 8004b44:	40011000 	.word	0x40011000
 8004b48:	40011400 	.word	0x40011400
 8004b4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b54:	2200      	movs	r2, #0
 8004b56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b62:	4642      	mov	r2, r8
 8004b64:	464b      	mov	r3, r9
 8004b66:	1891      	adds	r1, r2, r2
 8004b68:	6239      	str	r1, [r7, #32]
 8004b6a:	415b      	adcs	r3, r3
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b72:	4641      	mov	r1, r8
 8004b74:	1854      	adds	r4, r2, r1
 8004b76:	4649      	mov	r1, r9
 8004b78:	eb43 0501 	adc.w	r5, r3, r1
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	00eb      	lsls	r3, r5, #3
 8004b86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b8a:	00e2      	lsls	r2, r4, #3
 8004b8c:	4614      	mov	r4, r2
 8004b8e:	461d      	mov	r5, r3
 8004b90:	4643      	mov	r3, r8
 8004b92:	18e3      	adds	r3, r4, r3
 8004b94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b98:	464b      	mov	r3, r9
 8004b9a:	eb45 0303 	adc.w	r3, r5, r3
 8004b9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	008b      	lsls	r3, r1, #2
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bc8:	4621      	mov	r1, r4
 8004bca:	008a      	lsls	r2, r1, #2
 8004bcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004bd0:	f7fb fb56 	bl	8000280 <__aeabi_uldivmod>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4b60      	ldr	r3, [pc, #384]	; (8004d5c <UART_SetConfig+0x4e4>)
 8004bda:	fba3 2302 	umull	r2, r3, r3, r2
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	011c      	lsls	r4, r3, #4
 8004be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004bf0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	464b      	mov	r3, r9
 8004bf8:	1891      	adds	r1, r2, r2
 8004bfa:	61b9      	str	r1, [r7, #24]
 8004bfc:	415b      	adcs	r3, r3
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c04:	4641      	mov	r1, r8
 8004c06:	1851      	adds	r1, r2, r1
 8004c08:	6139      	str	r1, [r7, #16]
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	414b      	adcs	r3, r1
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c1c:	4659      	mov	r1, fp
 8004c1e:	00cb      	lsls	r3, r1, #3
 8004c20:	4651      	mov	r1, sl
 8004c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c26:	4651      	mov	r1, sl
 8004c28:	00ca      	lsls	r2, r1, #3
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4642      	mov	r2, r8
 8004c32:	189b      	adds	r3, r3, r2
 8004c34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c38:	464b      	mov	r3, r9
 8004c3a:	460a      	mov	r2, r1
 8004c3c:	eb42 0303 	adc.w	r3, r2, r3
 8004c40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c5c:	4649      	mov	r1, r9
 8004c5e:	008b      	lsls	r3, r1, #2
 8004c60:	4641      	mov	r1, r8
 8004c62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c66:	4641      	mov	r1, r8
 8004c68:	008a      	lsls	r2, r1, #2
 8004c6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c6e:	f7fb fb07 	bl	8000280 <__aeabi_uldivmod>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	4611      	mov	r1, r2
 8004c78:	4b38      	ldr	r3, [pc, #224]	; (8004d5c <UART_SetConfig+0x4e4>)
 8004c7a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	2264      	movs	r2, #100	; 0x64
 8004c82:	fb02 f303 	mul.w	r3, r2, r3
 8004c86:	1acb      	subs	r3, r1, r3
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	3332      	adds	r3, #50	; 0x32
 8004c8c:	4a33      	ldr	r2, [pc, #204]	; (8004d5c <UART_SetConfig+0x4e4>)
 8004c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c98:	441c      	add	r4, r3
 8004c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	673b      	str	r3, [r7, #112]	; 0x70
 8004ca2:	677a      	str	r2, [r7, #116]	; 0x74
 8004ca4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ca8:	4642      	mov	r2, r8
 8004caa:	464b      	mov	r3, r9
 8004cac:	1891      	adds	r1, r2, r2
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	415b      	adcs	r3, r3
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cb8:	4641      	mov	r1, r8
 8004cba:	1851      	adds	r1, r2, r1
 8004cbc:	6039      	str	r1, [r7, #0]
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	414b      	adcs	r3, r1
 8004cc2:	607b      	str	r3, [r7, #4]
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cd0:	4659      	mov	r1, fp
 8004cd2:	00cb      	lsls	r3, r1, #3
 8004cd4:	4651      	mov	r1, sl
 8004cd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cda:	4651      	mov	r1, sl
 8004cdc:	00ca      	lsls	r2, r1, #3
 8004cde:	4610      	mov	r0, r2
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	4642      	mov	r2, r8
 8004ce6:	189b      	adds	r3, r3, r2
 8004ce8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cea:	464b      	mov	r3, r9
 8004cec:	460a      	mov	r2, r1
 8004cee:	eb42 0303 	adc.w	r3, r2, r3
 8004cf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	663b      	str	r3, [r7, #96]	; 0x60
 8004cfe:	667a      	str	r2, [r7, #100]	; 0x64
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d0c:	4649      	mov	r1, r9
 8004d0e:	008b      	lsls	r3, r1, #2
 8004d10:	4641      	mov	r1, r8
 8004d12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d16:	4641      	mov	r1, r8
 8004d18:	008a      	lsls	r2, r1, #2
 8004d1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d1e:	f7fb faaf 	bl	8000280 <__aeabi_uldivmod>
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	4b0d      	ldr	r3, [pc, #52]	; (8004d5c <UART_SetConfig+0x4e4>)
 8004d28:	fba3 1302 	umull	r1, r3, r3, r2
 8004d2c:	095b      	lsrs	r3, r3, #5
 8004d2e:	2164      	movs	r1, #100	; 0x64
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	3332      	adds	r3, #50	; 0x32
 8004d3a:	4a08      	ldr	r2, [pc, #32]	; (8004d5c <UART_SetConfig+0x4e4>)
 8004d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d40:	095b      	lsrs	r3, r3, #5
 8004d42:	f003 020f 	and.w	r2, r3, #15
 8004d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4422      	add	r2, r4
 8004d4e:	609a      	str	r2, [r3, #8]
}
 8004d50:	bf00      	nop
 8004d52:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d56:	46bd      	mov	sp, r7
 8004d58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d5c:	51eb851f 	.word	0x51eb851f

08004d60 <calloc>:
 8004d60:	4b02      	ldr	r3, [pc, #8]	; (8004d6c <calloc+0xc>)
 8004d62:	460a      	mov	r2, r1
 8004d64:	4601      	mov	r1, r0
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	f000 b802 	b.w	8004d70 <_calloc_r>
 8004d6c:	20000064 	.word	0x20000064

08004d70 <_calloc_r>:
 8004d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d72:	fba1 2402 	umull	r2, r4, r1, r2
 8004d76:	b94c      	cbnz	r4, 8004d8c <_calloc_r+0x1c>
 8004d78:	4611      	mov	r1, r2
 8004d7a:	9201      	str	r2, [sp, #4]
 8004d7c:	f000 f850 	bl	8004e20 <_malloc_r>
 8004d80:	9a01      	ldr	r2, [sp, #4]
 8004d82:	4605      	mov	r5, r0
 8004d84:	b930      	cbnz	r0, 8004d94 <_calloc_r+0x24>
 8004d86:	4628      	mov	r0, r5
 8004d88:	b003      	add	sp, #12
 8004d8a:	bd30      	pop	{r4, r5, pc}
 8004d8c:	220c      	movs	r2, #12
 8004d8e:	6002      	str	r2, [r0, #0]
 8004d90:	2500      	movs	r5, #0
 8004d92:	e7f8      	b.n	8004d86 <_calloc_r+0x16>
 8004d94:	4621      	mov	r1, r4
 8004d96:	f000 fa40 	bl	800521a <memset>
 8004d9a:	e7f4      	b.n	8004d86 <_calloc_r+0x16>

08004d9c <exit>:
 8004d9c:	b508      	push	{r3, lr}
 8004d9e:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <exit+0x1c>)
 8004da0:	4604      	mov	r4, r0
 8004da2:	b113      	cbz	r3, 8004daa <exit+0xe>
 8004da4:	2100      	movs	r1, #0
 8004da6:	f3af 8000 	nop.w
 8004daa:	4b04      	ldr	r3, [pc, #16]	; (8004dbc <exit+0x20>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	b103      	cbz	r3, 8004db2 <exit+0x16>
 8004db0:	4798      	blx	r3
 8004db2:	4620      	mov	r0, r4
 8004db4:	f7fc fe98 	bl	8001ae8 <_exit>
 8004db8:	00000000 	.word	0x00000000
 8004dbc:	20005e20 	.word	0x20005e20

08004dc0 <malloc>:
 8004dc0:	4b02      	ldr	r3, [pc, #8]	; (8004dcc <malloc+0xc>)
 8004dc2:	4601      	mov	r1, r0
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	f000 b82b 	b.w	8004e20 <_malloc_r>
 8004dca:	bf00      	nop
 8004dcc:	20000064 	.word	0x20000064

08004dd0 <free>:
 8004dd0:	4b02      	ldr	r3, [pc, #8]	; (8004ddc <free+0xc>)
 8004dd2:	4601      	mov	r1, r0
 8004dd4:	6818      	ldr	r0, [r3, #0]
 8004dd6:	f000 baf7 	b.w	80053c8 <_free_r>
 8004dda:	bf00      	nop
 8004ddc:	20000064 	.word	0x20000064

08004de0 <sbrk_aligned>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	4e0e      	ldr	r6, [pc, #56]	; (8004e1c <sbrk_aligned+0x3c>)
 8004de4:	460c      	mov	r4, r1
 8004de6:	6831      	ldr	r1, [r6, #0]
 8004de8:	4605      	mov	r5, r0
 8004dea:	b911      	cbnz	r1, 8004df2 <sbrk_aligned+0x12>
 8004dec:	f000 fa7e 	bl	80052ec <_sbrk_r>
 8004df0:	6030      	str	r0, [r6, #0]
 8004df2:	4621      	mov	r1, r4
 8004df4:	4628      	mov	r0, r5
 8004df6:	f000 fa79 	bl	80052ec <_sbrk_r>
 8004dfa:	1c43      	adds	r3, r0, #1
 8004dfc:	d00a      	beq.n	8004e14 <sbrk_aligned+0x34>
 8004dfe:	1cc4      	adds	r4, r0, #3
 8004e00:	f024 0403 	bic.w	r4, r4, #3
 8004e04:	42a0      	cmp	r0, r4
 8004e06:	d007      	beq.n	8004e18 <sbrk_aligned+0x38>
 8004e08:	1a21      	subs	r1, r4, r0
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	f000 fa6e 	bl	80052ec <_sbrk_r>
 8004e10:	3001      	adds	r0, #1
 8004e12:	d101      	bne.n	8004e18 <sbrk_aligned+0x38>
 8004e14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004e18:	4620      	mov	r0, r4
 8004e1a:	bd70      	pop	{r4, r5, r6, pc}
 8004e1c:	20005ce4 	.word	0x20005ce4

08004e20 <_malloc_r>:
 8004e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e24:	1ccd      	adds	r5, r1, #3
 8004e26:	f025 0503 	bic.w	r5, r5, #3
 8004e2a:	3508      	adds	r5, #8
 8004e2c:	2d0c      	cmp	r5, #12
 8004e2e:	bf38      	it	cc
 8004e30:	250c      	movcc	r5, #12
 8004e32:	2d00      	cmp	r5, #0
 8004e34:	4607      	mov	r7, r0
 8004e36:	db01      	blt.n	8004e3c <_malloc_r+0x1c>
 8004e38:	42a9      	cmp	r1, r5
 8004e3a:	d905      	bls.n	8004e48 <_malloc_r+0x28>
 8004e3c:	230c      	movs	r3, #12
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	2600      	movs	r6, #0
 8004e42:	4630      	mov	r0, r6
 8004e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f1c <_malloc_r+0xfc>
 8004e4c:	f000 f868 	bl	8004f20 <__malloc_lock>
 8004e50:	f8d8 3000 	ldr.w	r3, [r8]
 8004e54:	461c      	mov	r4, r3
 8004e56:	bb5c      	cbnz	r4, 8004eb0 <_malloc_r+0x90>
 8004e58:	4629      	mov	r1, r5
 8004e5a:	4638      	mov	r0, r7
 8004e5c:	f7ff ffc0 	bl	8004de0 <sbrk_aligned>
 8004e60:	1c43      	adds	r3, r0, #1
 8004e62:	4604      	mov	r4, r0
 8004e64:	d155      	bne.n	8004f12 <_malloc_r+0xf2>
 8004e66:	f8d8 4000 	ldr.w	r4, [r8]
 8004e6a:	4626      	mov	r6, r4
 8004e6c:	2e00      	cmp	r6, #0
 8004e6e:	d145      	bne.n	8004efc <_malloc_r+0xdc>
 8004e70:	2c00      	cmp	r4, #0
 8004e72:	d048      	beq.n	8004f06 <_malloc_r+0xe6>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	4631      	mov	r1, r6
 8004e78:	4638      	mov	r0, r7
 8004e7a:	eb04 0903 	add.w	r9, r4, r3
 8004e7e:	f000 fa35 	bl	80052ec <_sbrk_r>
 8004e82:	4581      	cmp	r9, r0
 8004e84:	d13f      	bne.n	8004f06 <_malloc_r+0xe6>
 8004e86:	6821      	ldr	r1, [r4, #0]
 8004e88:	1a6d      	subs	r5, r5, r1
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	4638      	mov	r0, r7
 8004e8e:	f7ff ffa7 	bl	8004de0 <sbrk_aligned>
 8004e92:	3001      	adds	r0, #1
 8004e94:	d037      	beq.n	8004f06 <_malloc_r+0xe6>
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	442b      	add	r3, r5
 8004e9a:	6023      	str	r3, [r4, #0]
 8004e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d038      	beq.n	8004f16 <_malloc_r+0xf6>
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	42a2      	cmp	r2, r4
 8004ea8:	d12b      	bne.n	8004f02 <_malloc_r+0xe2>
 8004eaa:	2200      	movs	r2, #0
 8004eac:	605a      	str	r2, [r3, #4]
 8004eae:	e00f      	b.n	8004ed0 <_malloc_r+0xb0>
 8004eb0:	6822      	ldr	r2, [r4, #0]
 8004eb2:	1b52      	subs	r2, r2, r5
 8004eb4:	d41f      	bmi.n	8004ef6 <_malloc_r+0xd6>
 8004eb6:	2a0b      	cmp	r2, #11
 8004eb8:	d917      	bls.n	8004eea <_malloc_r+0xca>
 8004eba:	1961      	adds	r1, r4, r5
 8004ebc:	42a3      	cmp	r3, r4
 8004ebe:	6025      	str	r5, [r4, #0]
 8004ec0:	bf18      	it	ne
 8004ec2:	6059      	strne	r1, [r3, #4]
 8004ec4:	6863      	ldr	r3, [r4, #4]
 8004ec6:	bf08      	it	eq
 8004ec8:	f8c8 1000 	streq.w	r1, [r8]
 8004ecc:	5162      	str	r2, [r4, r5]
 8004ece:	604b      	str	r3, [r1, #4]
 8004ed0:	4638      	mov	r0, r7
 8004ed2:	f104 060b 	add.w	r6, r4, #11
 8004ed6:	f000 f829 	bl	8004f2c <__malloc_unlock>
 8004eda:	f026 0607 	bic.w	r6, r6, #7
 8004ede:	1d23      	adds	r3, r4, #4
 8004ee0:	1af2      	subs	r2, r6, r3
 8004ee2:	d0ae      	beq.n	8004e42 <_malloc_r+0x22>
 8004ee4:	1b9b      	subs	r3, r3, r6
 8004ee6:	50a3      	str	r3, [r4, r2]
 8004ee8:	e7ab      	b.n	8004e42 <_malloc_r+0x22>
 8004eea:	42a3      	cmp	r3, r4
 8004eec:	6862      	ldr	r2, [r4, #4]
 8004eee:	d1dd      	bne.n	8004eac <_malloc_r+0x8c>
 8004ef0:	f8c8 2000 	str.w	r2, [r8]
 8004ef4:	e7ec      	b.n	8004ed0 <_malloc_r+0xb0>
 8004ef6:	4623      	mov	r3, r4
 8004ef8:	6864      	ldr	r4, [r4, #4]
 8004efa:	e7ac      	b.n	8004e56 <_malloc_r+0x36>
 8004efc:	4634      	mov	r4, r6
 8004efe:	6876      	ldr	r6, [r6, #4]
 8004f00:	e7b4      	b.n	8004e6c <_malloc_r+0x4c>
 8004f02:	4613      	mov	r3, r2
 8004f04:	e7cc      	b.n	8004ea0 <_malloc_r+0x80>
 8004f06:	230c      	movs	r3, #12
 8004f08:	603b      	str	r3, [r7, #0]
 8004f0a:	4638      	mov	r0, r7
 8004f0c:	f000 f80e 	bl	8004f2c <__malloc_unlock>
 8004f10:	e797      	b.n	8004e42 <_malloc_r+0x22>
 8004f12:	6025      	str	r5, [r4, #0]
 8004f14:	e7dc      	b.n	8004ed0 <_malloc_r+0xb0>
 8004f16:	605b      	str	r3, [r3, #4]
 8004f18:	deff      	udf	#255	; 0xff
 8004f1a:	bf00      	nop
 8004f1c:	20005ce0 	.word	0x20005ce0

08004f20 <__malloc_lock>:
 8004f20:	4801      	ldr	r0, [pc, #4]	; (8004f28 <__malloc_lock+0x8>)
 8004f22:	f000 ba30 	b.w	8005386 <__retarget_lock_acquire_recursive>
 8004f26:	bf00      	nop
 8004f28:	20005e28 	.word	0x20005e28

08004f2c <__malloc_unlock>:
 8004f2c:	4801      	ldr	r0, [pc, #4]	; (8004f34 <__malloc_unlock+0x8>)
 8004f2e:	f000 ba2b 	b.w	8005388 <__retarget_lock_release_recursive>
 8004f32:	bf00      	nop
 8004f34:	20005e28 	.word	0x20005e28

08004f38 <srand>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	4b10      	ldr	r3, [pc, #64]	; (8004f7c <srand+0x44>)
 8004f3c:	681d      	ldr	r5, [r3, #0]
 8004f3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004f40:	4604      	mov	r4, r0
 8004f42:	b9b3      	cbnz	r3, 8004f72 <srand+0x3a>
 8004f44:	2018      	movs	r0, #24
 8004f46:	f7ff ff3b 	bl	8004dc0 <malloc>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	6328      	str	r0, [r5, #48]	; 0x30
 8004f4e:	b920      	cbnz	r0, 8004f5a <srand+0x22>
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <srand+0x48>)
 8004f52:	480c      	ldr	r0, [pc, #48]	; (8004f84 <srand+0x4c>)
 8004f54:	2146      	movs	r1, #70	; 0x46
 8004f56:	f000 fa19 	bl	800538c <__assert_func>
 8004f5a:	490b      	ldr	r1, [pc, #44]	; (8004f88 <srand+0x50>)
 8004f5c:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <srand+0x54>)
 8004f5e:	e9c0 1300 	strd	r1, r3, [r0]
 8004f62:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <srand+0x58>)
 8004f64:	6083      	str	r3, [r0, #8]
 8004f66:	230b      	movs	r3, #11
 8004f68:	8183      	strh	r3, [r0, #12]
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	2001      	movs	r0, #1
 8004f6e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004f72:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004f74:	2200      	movs	r2, #0
 8004f76:	611c      	str	r4, [r3, #16]
 8004f78:	615a      	str	r2, [r3, #20]
 8004f7a:	bd38      	pop	{r3, r4, r5, pc}
 8004f7c:	20000064 	.word	0x20000064
 8004f80:	08006650 	.word	0x08006650
 8004f84:	08006667 	.word	0x08006667
 8004f88:	abcd330e 	.word	0xabcd330e
 8004f8c:	e66d1234 	.word	0xe66d1234
 8004f90:	0005deec 	.word	0x0005deec

08004f94 <rand>:
 8004f94:	4b16      	ldr	r3, [pc, #88]	; (8004ff0 <rand+0x5c>)
 8004f96:	b510      	push	{r4, lr}
 8004f98:	681c      	ldr	r4, [r3, #0]
 8004f9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f9c:	b9b3      	cbnz	r3, 8004fcc <rand+0x38>
 8004f9e:	2018      	movs	r0, #24
 8004fa0:	f7ff ff0e 	bl	8004dc0 <malloc>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	6320      	str	r0, [r4, #48]	; 0x30
 8004fa8:	b920      	cbnz	r0, 8004fb4 <rand+0x20>
 8004faa:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <rand+0x60>)
 8004fac:	4812      	ldr	r0, [pc, #72]	; (8004ff8 <rand+0x64>)
 8004fae:	2152      	movs	r1, #82	; 0x52
 8004fb0:	f000 f9ec 	bl	800538c <__assert_func>
 8004fb4:	4911      	ldr	r1, [pc, #68]	; (8004ffc <rand+0x68>)
 8004fb6:	4b12      	ldr	r3, [pc, #72]	; (8005000 <rand+0x6c>)
 8004fb8:	e9c0 1300 	strd	r1, r3, [r0]
 8004fbc:	4b11      	ldr	r3, [pc, #68]	; (8005004 <rand+0x70>)
 8004fbe:	6083      	str	r3, [r0, #8]
 8004fc0:	230b      	movs	r3, #11
 8004fc2:	8183      	strh	r3, [r0, #12]
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	2001      	movs	r0, #1
 8004fc8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004fcc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004fce:	480e      	ldr	r0, [pc, #56]	; (8005008 <rand+0x74>)
 8004fd0:	690b      	ldr	r3, [r1, #16]
 8004fd2:	694c      	ldr	r4, [r1, #20]
 8004fd4:	4a0d      	ldr	r2, [pc, #52]	; (800500c <rand+0x78>)
 8004fd6:	4358      	muls	r0, r3
 8004fd8:	fb02 0004 	mla	r0, r2, r4, r0
 8004fdc:	fba3 3202 	umull	r3, r2, r3, r2
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	eb40 0002 	adc.w	r0, r0, r2
 8004fe6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004fea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004fee:	bd10      	pop	{r4, pc}
 8004ff0:	20000064 	.word	0x20000064
 8004ff4:	08006650 	.word	0x08006650
 8004ff8:	08006667 	.word	0x08006667
 8004ffc:	abcd330e 	.word	0xabcd330e
 8005000:	e66d1234 	.word	0xe66d1234
 8005004:	0005deec 	.word	0x0005deec
 8005008:	5851f42d 	.word	0x5851f42d
 800500c:	4c957f2d 	.word	0x4c957f2d

08005010 <std>:
 8005010:	2300      	movs	r3, #0
 8005012:	b510      	push	{r4, lr}
 8005014:	4604      	mov	r4, r0
 8005016:	e9c0 3300 	strd	r3, r3, [r0]
 800501a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800501e:	6083      	str	r3, [r0, #8]
 8005020:	8181      	strh	r1, [r0, #12]
 8005022:	6643      	str	r3, [r0, #100]	; 0x64
 8005024:	81c2      	strh	r2, [r0, #14]
 8005026:	6183      	str	r3, [r0, #24]
 8005028:	4619      	mov	r1, r3
 800502a:	2208      	movs	r2, #8
 800502c:	305c      	adds	r0, #92	; 0x5c
 800502e:	f000 f8f4 	bl	800521a <memset>
 8005032:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <std+0x58>)
 8005034:	6263      	str	r3, [r4, #36]	; 0x24
 8005036:	4b0d      	ldr	r3, [pc, #52]	; (800506c <std+0x5c>)
 8005038:	62a3      	str	r3, [r4, #40]	; 0x28
 800503a:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <std+0x60>)
 800503c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800503e:	4b0d      	ldr	r3, [pc, #52]	; (8005074 <std+0x64>)
 8005040:	6323      	str	r3, [r4, #48]	; 0x30
 8005042:	4b0d      	ldr	r3, [pc, #52]	; (8005078 <std+0x68>)
 8005044:	6224      	str	r4, [r4, #32]
 8005046:	429c      	cmp	r4, r3
 8005048:	d006      	beq.n	8005058 <std+0x48>
 800504a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800504e:	4294      	cmp	r4, r2
 8005050:	d002      	beq.n	8005058 <std+0x48>
 8005052:	33d0      	adds	r3, #208	; 0xd0
 8005054:	429c      	cmp	r4, r3
 8005056:	d105      	bne.n	8005064 <std+0x54>
 8005058:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800505c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005060:	f000 b990 	b.w	8005384 <__retarget_lock_init_recursive>
 8005064:	bd10      	pop	{r4, pc}
 8005066:	bf00      	nop
 8005068:	08005195 	.word	0x08005195
 800506c:	080051b7 	.word	0x080051b7
 8005070:	080051ef 	.word	0x080051ef
 8005074:	08005213 	.word	0x08005213
 8005078:	20005ce8 	.word	0x20005ce8

0800507c <stdio_exit_handler>:
 800507c:	4a02      	ldr	r2, [pc, #8]	; (8005088 <stdio_exit_handler+0xc>)
 800507e:	4903      	ldr	r1, [pc, #12]	; (800508c <stdio_exit_handler+0x10>)
 8005080:	4803      	ldr	r0, [pc, #12]	; (8005090 <stdio_exit_handler+0x14>)
 8005082:	f000 b869 	b.w	8005158 <_fwalk_sglue>
 8005086:	bf00      	nop
 8005088:	2000000c 	.word	0x2000000c
 800508c:	0800556d 	.word	0x0800556d
 8005090:	20000018 	.word	0x20000018

08005094 <cleanup_stdio>:
 8005094:	6841      	ldr	r1, [r0, #4]
 8005096:	4b0c      	ldr	r3, [pc, #48]	; (80050c8 <cleanup_stdio+0x34>)
 8005098:	4299      	cmp	r1, r3
 800509a:	b510      	push	{r4, lr}
 800509c:	4604      	mov	r4, r0
 800509e:	d001      	beq.n	80050a4 <cleanup_stdio+0x10>
 80050a0:	f000 fa64 	bl	800556c <_fflush_r>
 80050a4:	68a1      	ldr	r1, [r4, #8]
 80050a6:	4b09      	ldr	r3, [pc, #36]	; (80050cc <cleanup_stdio+0x38>)
 80050a8:	4299      	cmp	r1, r3
 80050aa:	d002      	beq.n	80050b2 <cleanup_stdio+0x1e>
 80050ac:	4620      	mov	r0, r4
 80050ae:	f000 fa5d 	bl	800556c <_fflush_r>
 80050b2:	68e1      	ldr	r1, [r4, #12]
 80050b4:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <cleanup_stdio+0x3c>)
 80050b6:	4299      	cmp	r1, r3
 80050b8:	d004      	beq.n	80050c4 <cleanup_stdio+0x30>
 80050ba:	4620      	mov	r0, r4
 80050bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050c0:	f000 ba54 	b.w	800556c <_fflush_r>
 80050c4:	bd10      	pop	{r4, pc}
 80050c6:	bf00      	nop
 80050c8:	20005ce8 	.word	0x20005ce8
 80050cc:	20005d50 	.word	0x20005d50
 80050d0:	20005db8 	.word	0x20005db8

080050d4 <global_stdio_init.part.0>:
 80050d4:	b510      	push	{r4, lr}
 80050d6:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <global_stdio_init.part.0+0x30>)
 80050d8:	4c0b      	ldr	r4, [pc, #44]	; (8005108 <global_stdio_init.part.0+0x34>)
 80050da:	4a0c      	ldr	r2, [pc, #48]	; (800510c <global_stdio_init.part.0+0x38>)
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	4620      	mov	r0, r4
 80050e0:	2200      	movs	r2, #0
 80050e2:	2104      	movs	r1, #4
 80050e4:	f7ff ff94 	bl	8005010 <std>
 80050e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80050ec:	2201      	movs	r2, #1
 80050ee:	2109      	movs	r1, #9
 80050f0:	f7ff ff8e 	bl	8005010 <std>
 80050f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80050f8:	2202      	movs	r2, #2
 80050fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050fe:	2112      	movs	r1, #18
 8005100:	f7ff bf86 	b.w	8005010 <std>
 8005104:	20005e20 	.word	0x20005e20
 8005108:	20005ce8 	.word	0x20005ce8
 800510c:	0800507d 	.word	0x0800507d

08005110 <__sfp_lock_acquire>:
 8005110:	4801      	ldr	r0, [pc, #4]	; (8005118 <__sfp_lock_acquire+0x8>)
 8005112:	f000 b938 	b.w	8005386 <__retarget_lock_acquire_recursive>
 8005116:	bf00      	nop
 8005118:	20005e29 	.word	0x20005e29

0800511c <__sfp_lock_release>:
 800511c:	4801      	ldr	r0, [pc, #4]	; (8005124 <__sfp_lock_release+0x8>)
 800511e:	f000 b933 	b.w	8005388 <__retarget_lock_release_recursive>
 8005122:	bf00      	nop
 8005124:	20005e29 	.word	0x20005e29

08005128 <__sinit>:
 8005128:	b510      	push	{r4, lr}
 800512a:	4604      	mov	r4, r0
 800512c:	f7ff fff0 	bl	8005110 <__sfp_lock_acquire>
 8005130:	6a23      	ldr	r3, [r4, #32]
 8005132:	b11b      	cbz	r3, 800513c <__sinit+0x14>
 8005134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005138:	f7ff bff0 	b.w	800511c <__sfp_lock_release>
 800513c:	4b04      	ldr	r3, [pc, #16]	; (8005150 <__sinit+0x28>)
 800513e:	6223      	str	r3, [r4, #32]
 8005140:	4b04      	ldr	r3, [pc, #16]	; (8005154 <__sinit+0x2c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1f5      	bne.n	8005134 <__sinit+0xc>
 8005148:	f7ff ffc4 	bl	80050d4 <global_stdio_init.part.0>
 800514c:	e7f2      	b.n	8005134 <__sinit+0xc>
 800514e:	bf00      	nop
 8005150:	08005095 	.word	0x08005095
 8005154:	20005e20 	.word	0x20005e20

08005158 <_fwalk_sglue>:
 8005158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800515c:	4607      	mov	r7, r0
 800515e:	4688      	mov	r8, r1
 8005160:	4614      	mov	r4, r2
 8005162:	2600      	movs	r6, #0
 8005164:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005168:	f1b9 0901 	subs.w	r9, r9, #1
 800516c:	d505      	bpl.n	800517a <_fwalk_sglue+0x22>
 800516e:	6824      	ldr	r4, [r4, #0]
 8005170:	2c00      	cmp	r4, #0
 8005172:	d1f7      	bne.n	8005164 <_fwalk_sglue+0xc>
 8005174:	4630      	mov	r0, r6
 8005176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800517a:	89ab      	ldrh	r3, [r5, #12]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d907      	bls.n	8005190 <_fwalk_sglue+0x38>
 8005180:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005184:	3301      	adds	r3, #1
 8005186:	d003      	beq.n	8005190 <_fwalk_sglue+0x38>
 8005188:	4629      	mov	r1, r5
 800518a:	4638      	mov	r0, r7
 800518c:	47c0      	blx	r8
 800518e:	4306      	orrs	r6, r0
 8005190:	3568      	adds	r5, #104	; 0x68
 8005192:	e7e9      	b.n	8005168 <_fwalk_sglue+0x10>

08005194 <__sread>:
 8005194:	b510      	push	{r4, lr}
 8005196:	460c      	mov	r4, r1
 8005198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800519c:	f000 f894 	bl	80052c8 <_read_r>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	bfab      	itete	ge
 80051a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051a6:	89a3      	ldrhlt	r3, [r4, #12]
 80051a8:	181b      	addge	r3, r3, r0
 80051aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80051ae:	bfac      	ite	ge
 80051b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80051b2:	81a3      	strhlt	r3, [r4, #12]
 80051b4:	bd10      	pop	{r4, pc}

080051b6 <__swrite>:
 80051b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ba:	461f      	mov	r7, r3
 80051bc:	898b      	ldrh	r3, [r1, #12]
 80051be:	05db      	lsls	r3, r3, #23
 80051c0:	4605      	mov	r5, r0
 80051c2:	460c      	mov	r4, r1
 80051c4:	4616      	mov	r6, r2
 80051c6:	d505      	bpl.n	80051d4 <__swrite+0x1e>
 80051c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051cc:	2302      	movs	r3, #2
 80051ce:	2200      	movs	r2, #0
 80051d0:	f000 f868 	bl	80052a4 <_lseek_r>
 80051d4:	89a3      	ldrh	r3, [r4, #12]
 80051d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051de:	81a3      	strh	r3, [r4, #12]
 80051e0:	4632      	mov	r2, r6
 80051e2:	463b      	mov	r3, r7
 80051e4:	4628      	mov	r0, r5
 80051e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051ea:	f000 b88f 	b.w	800530c <_write_r>

080051ee <__sseek>:
 80051ee:	b510      	push	{r4, lr}
 80051f0:	460c      	mov	r4, r1
 80051f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f6:	f000 f855 	bl	80052a4 <_lseek_r>
 80051fa:	1c43      	adds	r3, r0, #1
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	bf15      	itete	ne
 8005200:	6560      	strne	r0, [r4, #84]	; 0x54
 8005202:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005206:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800520a:	81a3      	strheq	r3, [r4, #12]
 800520c:	bf18      	it	ne
 800520e:	81a3      	strhne	r3, [r4, #12]
 8005210:	bd10      	pop	{r4, pc}

08005212 <__sclose>:
 8005212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005216:	f000 b823 	b.w	8005260 <_close_r>

0800521a <memset>:
 800521a:	4402      	add	r2, r0
 800521c:	4603      	mov	r3, r0
 800521e:	4293      	cmp	r3, r2
 8005220:	d100      	bne.n	8005224 <memset+0xa>
 8005222:	4770      	bx	lr
 8005224:	f803 1b01 	strb.w	r1, [r3], #1
 8005228:	e7f9      	b.n	800521e <memset+0x4>
	...

0800522c <time>:
 800522c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800522e:	4b0b      	ldr	r3, [pc, #44]	; (800525c <time+0x30>)
 8005230:	2200      	movs	r2, #0
 8005232:	4669      	mov	r1, sp
 8005234:	4604      	mov	r4, r0
 8005236:	6818      	ldr	r0, [r3, #0]
 8005238:	f000 f822 	bl	8005280 <_gettimeofday_r>
 800523c:	2800      	cmp	r0, #0
 800523e:	bfbe      	ittt	lt
 8005240:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8005244:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005248:	e9cd 2300 	strdlt	r2, r3, [sp]
 800524c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005250:	b10c      	cbz	r4, 8005256 <time+0x2a>
 8005252:	e9c4 0100 	strd	r0, r1, [r4]
 8005256:	b004      	add	sp, #16
 8005258:	bd10      	pop	{r4, pc}
 800525a:	bf00      	nop
 800525c:	20000064 	.word	0x20000064

08005260 <_close_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	4d06      	ldr	r5, [pc, #24]	; (800527c <_close_r+0x1c>)
 8005264:	2300      	movs	r3, #0
 8005266:	4604      	mov	r4, r0
 8005268:	4608      	mov	r0, r1
 800526a:	602b      	str	r3, [r5, #0]
 800526c:	f7fc fc7f 	bl	8001b6e <_close>
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	d102      	bne.n	800527a <_close_r+0x1a>
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	b103      	cbz	r3, 800527a <_close_r+0x1a>
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	20005e24 	.word	0x20005e24

08005280 <_gettimeofday_r>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	4d07      	ldr	r5, [pc, #28]	; (80052a0 <_gettimeofday_r+0x20>)
 8005284:	2300      	movs	r3, #0
 8005286:	4604      	mov	r4, r0
 8005288:	4608      	mov	r0, r1
 800528a:	4611      	mov	r1, r2
 800528c:	602b      	str	r3, [r5, #0]
 800528e:	f000 fddf 	bl	8005e50 <_gettimeofday>
 8005292:	1c43      	adds	r3, r0, #1
 8005294:	d102      	bne.n	800529c <_gettimeofday_r+0x1c>
 8005296:	682b      	ldr	r3, [r5, #0]
 8005298:	b103      	cbz	r3, 800529c <_gettimeofday_r+0x1c>
 800529a:	6023      	str	r3, [r4, #0]
 800529c:	bd38      	pop	{r3, r4, r5, pc}
 800529e:	bf00      	nop
 80052a0:	20005e24 	.word	0x20005e24

080052a4 <_lseek_r>:
 80052a4:	b538      	push	{r3, r4, r5, lr}
 80052a6:	4d07      	ldr	r5, [pc, #28]	; (80052c4 <_lseek_r+0x20>)
 80052a8:	4604      	mov	r4, r0
 80052aa:	4608      	mov	r0, r1
 80052ac:	4611      	mov	r1, r2
 80052ae:	2200      	movs	r2, #0
 80052b0:	602a      	str	r2, [r5, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	f7fc fc82 	bl	8001bbc <_lseek>
 80052b8:	1c43      	adds	r3, r0, #1
 80052ba:	d102      	bne.n	80052c2 <_lseek_r+0x1e>
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	b103      	cbz	r3, 80052c2 <_lseek_r+0x1e>
 80052c0:	6023      	str	r3, [r4, #0]
 80052c2:	bd38      	pop	{r3, r4, r5, pc}
 80052c4:	20005e24 	.word	0x20005e24

080052c8 <_read_r>:
 80052c8:	b538      	push	{r3, r4, r5, lr}
 80052ca:	4d07      	ldr	r5, [pc, #28]	; (80052e8 <_read_r+0x20>)
 80052cc:	4604      	mov	r4, r0
 80052ce:	4608      	mov	r0, r1
 80052d0:	4611      	mov	r1, r2
 80052d2:	2200      	movs	r2, #0
 80052d4:	602a      	str	r2, [r5, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	f7fc fc10 	bl	8001afc <_read>
 80052dc:	1c43      	adds	r3, r0, #1
 80052de:	d102      	bne.n	80052e6 <_read_r+0x1e>
 80052e0:	682b      	ldr	r3, [r5, #0]
 80052e2:	b103      	cbz	r3, 80052e6 <_read_r+0x1e>
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	bd38      	pop	{r3, r4, r5, pc}
 80052e8:	20005e24 	.word	0x20005e24

080052ec <_sbrk_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4d06      	ldr	r5, [pc, #24]	; (8005308 <_sbrk_r+0x1c>)
 80052f0:	2300      	movs	r3, #0
 80052f2:	4604      	mov	r4, r0
 80052f4:	4608      	mov	r0, r1
 80052f6:	602b      	str	r3, [r5, #0]
 80052f8:	f7fc fc6e 	bl	8001bd8 <_sbrk>
 80052fc:	1c43      	adds	r3, r0, #1
 80052fe:	d102      	bne.n	8005306 <_sbrk_r+0x1a>
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	b103      	cbz	r3, 8005306 <_sbrk_r+0x1a>
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	bd38      	pop	{r3, r4, r5, pc}
 8005308:	20005e24 	.word	0x20005e24

0800530c <_write_r>:
 800530c:	b538      	push	{r3, r4, r5, lr}
 800530e:	4d07      	ldr	r5, [pc, #28]	; (800532c <_write_r+0x20>)
 8005310:	4604      	mov	r4, r0
 8005312:	4608      	mov	r0, r1
 8005314:	4611      	mov	r1, r2
 8005316:	2200      	movs	r2, #0
 8005318:	602a      	str	r2, [r5, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	f7fc fc0b 	bl	8001b36 <_write>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	d102      	bne.n	800532a <_write_r+0x1e>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	b103      	cbz	r3, 800532a <_write_r+0x1e>
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	bd38      	pop	{r3, r4, r5, pc}
 800532c:	20005e24 	.word	0x20005e24

08005330 <__errno>:
 8005330:	4b01      	ldr	r3, [pc, #4]	; (8005338 <__errno+0x8>)
 8005332:	6818      	ldr	r0, [r3, #0]
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	20000064 	.word	0x20000064

0800533c <__libc_init_array>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	4d0d      	ldr	r5, [pc, #52]	; (8005374 <__libc_init_array+0x38>)
 8005340:	4c0d      	ldr	r4, [pc, #52]	; (8005378 <__libc_init_array+0x3c>)
 8005342:	1b64      	subs	r4, r4, r5
 8005344:	10a4      	asrs	r4, r4, #2
 8005346:	2600      	movs	r6, #0
 8005348:	42a6      	cmp	r6, r4
 800534a:	d109      	bne.n	8005360 <__libc_init_array+0x24>
 800534c:	4d0b      	ldr	r5, [pc, #44]	; (800537c <__libc_init_array+0x40>)
 800534e:	4c0c      	ldr	r4, [pc, #48]	; (8005380 <__libc_init_array+0x44>)
 8005350:	f000 fd86 	bl	8005e60 <_init>
 8005354:	1b64      	subs	r4, r4, r5
 8005356:	10a4      	asrs	r4, r4, #2
 8005358:	2600      	movs	r6, #0
 800535a:	42a6      	cmp	r6, r4
 800535c:	d105      	bne.n	800536a <__libc_init_array+0x2e>
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	f855 3b04 	ldr.w	r3, [r5], #4
 8005364:	4798      	blx	r3
 8005366:	3601      	adds	r6, #1
 8005368:	e7ee      	b.n	8005348 <__libc_init_array+0xc>
 800536a:	f855 3b04 	ldr.w	r3, [r5], #4
 800536e:	4798      	blx	r3
 8005370:	3601      	adds	r6, #1
 8005372:	e7f2      	b.n	800535a <__libc_init_array+0x1e>
 8005374:	08006738 	.word	0x08006738
 8005378:	08006738 	.word	0x08006738
 800537c:	08006738 	.word	0x08006738
 8005380:	0800673c 	.word	0x0800673c

08005384 <__retarget_lock_init_recursive>:
 8005384:	4770      	bx	lr

08005386 <__retarget_lock_acquire_recursive>:
 8005386:	4770      	bx	lr

08005388 <__retarget_lock_release_recursive>:
 8005388:	4770      	bx	lr
	...

0800538c <__assert_func>:
 800538c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800538e:	4614      	mov	r4, r2
 8005390:	461a      	mov	r2, r3
 8005392:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <__assert_func+0x2c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4605      	mov	r5, r0
 8005398:	68d8      	ldr	r0, [r3, #12]
 800539a:	b14c      	cbz	r4, 80053b0 <__assert_func+0x24>
 800539c:	4b07      	ldr	r3, [pc, #28]	; (80053bc <__assert_func+0x30>)
 800539e:	9100      	str	r1, [sp, #0]
 80053a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80053a4:	4906      	ldr	r1, [pc, #24]	; (80053c0 <__assert_func+0x34>)
 80053a6:	462b      	mov	r3, r5
 80053a8:	f000 f908 	bl	80055bc <fiprintf>
 80053ac:	f000 f918 	bl	80055e0 <abort>
 80053b0:	4b04      	ldr	r3, [pc, #16]	; (80053c4 <__assert_func+0x38>)
 80053b2:	461c      	mov	r4, r3
 80053b4:	e7f3      	b.n	800539e <__assert_func+0x12>
 80053b6:	bf00      	nop
 80053b8:	20000064 	.word	0x20000064
 80053bc:	080066bf 	.word	0x080066bf
 80053c0:	080066cc 	.word	0x080066cc
 80053c4:	080066fa 	.word	0x080066fa

080053c8 <_free_r>:
 80053c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ca:	2900      	cmp	r1, #0
 80053cc:	d044      	beq.n	8005458 <_free_r+0x90>
 80053ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053d2:	9001      	str	r0, [sp, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f1a1 0404 	sub.w	r4, r1, #4
 80053da:	bfb8      	it	lt
 80053dc:	18e4      	addlt	r4, r4, r3
 80053de:	f7ff fd9f 	bl	8004f20 <__malloc_lock>
 80053e2:	4a1e      	ldr	r2, [pc, #120]	; (800545c <_free_r+0x94>)
 80053e4:	9801      	ldr	r0, [sp, #4]
 80053e6:	6813      	ldr	r3, [r2, #0]
 80053e8:	b933      	cbnz	r3, 80053f8 <_free_r+0x30>
 80053ea:	6063      	str	r3, [r4, #4]
 80053ec:	6014      	str	r4, [r2, #0]
 80053ee:	b003      	add	sp, #12
 80053f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053f4:	f7ff bd9a 	b.w	8004f2c <__malloc_unlock>
 80053f8:	42a3      	cmp	r3, r4
 80053fa:	d908      	bls.n	800540e <_free_r+0x46>
 80053fc:	6825      	ldr	r5, [r4, #0]
 80053fe:	1961      	adds	r1, r4, r5
 8005400:	428b      	cmp	r3, r1
 8005402:	bf01      	itttt	eq
 8005404:	6819      	ldreq	r1, [r3, #0]
 8005406:	685b      	ldreq	r3, [r3, #4]
 8005408:	1949      	addeq	r1, r1, r5
 800540a:	6021      	streq	r1, [r4, #0]
 800540c:	e7ed      	b.n	80053ea <_free_r+0x22>
 800540e:	461a      	mov	r2, r3
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	b10b      	cbz	r3, 8005418 <_free_r+0x50>
 8005414:	42a3      	cmp	r3, r4
 8005416:	d9fa      	bls.n	800540e <_free_r+0x46>
 8005418:	6811      	ldr	r1, [r2, #0]
 800541a:	1855      	adds	r5, r2, r1
 800541c:	42a5      	cmp	r5, r4
 800541e:	d10b      	bne.n	8005438 <_free_r+0x70>
 8005420:	6824      	ldr	r4, [r4, #0]
 8005422:	4421      	add	r1, r4
 8005424:	1854      	adds	r4, r2, r1
 8005426:	42a3      	cmp	r3, r4
 8005428:	6011      	str	r1, [r2, #0]
 800542a:	d1e0      	bne.n	80053ee <_free_r+0x26>
 800542c:	681c      	ldr	r4, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	6053      	str	r3, [r2, #4]
 8005432:	440c      	add	r4, r1
 8005434:	6014      	str	r4, [r2, #0]
 8005436:	e7da      	b.n	80053ee <_free_r+0x26>
 8005438:	d902      	bls.n	8005440 <_free_r+0x78>
 800543a:	230c      	movs	r3, #12
 800543c:	6003      	str	r3, [r0, #0]
 800543e:	e7d6      	b.n	80053ee <_free_r+0x26>
 8005440:	6825      	ldr	r5, [r4, #0]
 8005442:	1961      	adds	r1, r4, r5
 8005444:	428b      	cmp	r3, r1
 8005446:	bf04      	itt	eq
 8005448:	6819      	ldreq	r1, [r3, #0]
 800544a:	685b      	ldreq	r3, [r3, #4]
 800544c:	6063      	str	r3, [r4, #4]
 800544e:	bf04      	itt	eq
 8005450:	1949      	addeq	r1, r1, r5
 8005452:	6021      	streq	r1, [r4, #0]
 8005454:	6054      	str	r4, [r2, #4]
 8005456:	e7ca      	b.n	80053ee <_free_r+0x26>
 8005458:	b003      	add	sp, #12
 800545a:	bd30      	pop	{r4, r5, pc}
 800545c:	20005ce0 	.word	0x20005ce0

08005460 <__sflush_r>:
 8005460:	898a      	ldrh	r2, [r1, #12]
 8005462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005466:	4605      	mov	r5, r0
 8005468:	0710      	lsls	r0, r2, #28
 800546a:	460c      	mov	r4, r1
 800546c:	d458      	bmi.n	8005520 <__sflush_r+0xc0>
 800546e:	684b      	ldr	r3, [r1, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	dc05      	bgt.n	8005480 <__sflush_r+0x20>
 8005474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	dc02      	bgt.n	8005480 <__sflush_r+0x20>
 800547a:	2000      	movs	r0, #0
 800547c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005482:	2e00      	cmp	r6, #0
 8005484:	d0f9      	beq.n	800547a <__sflush_r+0x1a>
 8005486:	2300      	movs	r3, #0
 8005488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800548c:	682f      	ldr	r7, [r5, #0]
 800548e:	6a21      	ldr	r1, [r4, #32]
 8005490:	602b      	str	r3, [r5, #0]
 8005492:	d032      	beq.n	80054fa <__sflush_r+0x9a>
 8005494:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005496:	89a3      	ldrh	r3, [r4, #12]
 8005498:	075a      	lsls	r2, r3, #29
 800549a:	d505      	bpl.n	80054a8 <__sflush_r+0x48>
 800549c:	6863      	ldr	r3, [r4, #4]
 800549e:	1ac0      	subs	r0, r0, r3
 80054a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054a2:	b10b      	cbz	r3, 80054a8 <__sflush_r+0x48>
 80054a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054a6:	1ac0      	subs	r0, r0, r3
 80054a8:	2300      	movs	r3, #0
 80054aa:	4602      	mov	r2, r0
 80054ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054ae:	6a21      	ldr	r1, [r4, #32]
 80054b0:	4628      	mov	r0, r5
 80054b2:	47b0      	blx	r6
 80054b4:	1c43      	adds	r3, r0, #1
 80054b6:	89a3      	ldrh	r3, [r4, #12]
 80054b8:	d106      	bne.n	80054c8 <__sflush_r+0x68>
 80054ba:	6829      	ldr	r1, [r5, #0]
 80054bc:	291d      	cmp	r1, #29
 80054be:	d82b      	bhi.n	8005518 <__sflush_r+0xb8>
 80054c0:	4a29      	ldr	r2, [pc, #164]	; (8005568 <__sflush_r+0x108>)
 80054c2:	410a      	asrs	r2, r1
 80054c4:	07d6      	lsls	r6, r2, #31
 80054c6:	d427      	bmi.n	8005518 <__sflush_r+0xb8>
 80054c8:	2200      	movs	r2, #0
 80054ca:	6062      	str	r2, [r4, #4]
 80054cc:	04d9      	lsls	r1, r3, #19
 80054ce:	6922      	ldr	r2, [r4, #16]
 80054d0:	6022      	str	r2, [r4, #0]
 80054d2:	d504      	bpl.n	80054de <__sflush_r+0x7e>
 80054d4:	1c42      	adds	r2, r0, #1
 80054d6:	d101      	bne.n	80054dc <__sflush_r+0x7c>
 80054d8:	682b      	ldr	r3, [r5, #0]
 80054da:	b903      	cbnz	r3, 80054de <__sflush_r+0x7e>
 80054dc:	6560      	str	r0, [r4, #84]	; 0x54
 80054de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054e0:	602f      	str	r7, [r5, #0]
 80054e2:	2900      	cmp	r1, #0
 80054e4:	d0c9      	beq.n	800547a <__sflush_r+0x1a>
 80054e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054ea:	4299      	cmp	r1, r3
 80054ec:	d002      	beq.n	80054f4 <__sflush_r+0x94>
 80054ee:	4628      	mov	r0, r5
 80054f0:	f7ff ff6a 	bl	80053c8 <_free_r>
 80054f4:	2000      	movs	r0, #0
 80054f6:	6360      	str	r0, [r4, #52]	; 0x34
 80054f8:	e7c0      	b.n	800547c <__sflush_r+0x1c>
 80054fa:	2301      	movs	r3, #1
 80054fc:	4628      	mov	r0, r5
 80054fe:	47b0      	blx	r6
 8005500:	1c41      	adds	r1, r0, #1
 8005502:	d1c8      	bne.n	8005496 <__sflush_r+0x36>
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0c5      	beq.n	8005496 <__sflush_r+0x36>
 800550a:	2b1d      	cmp	r3, #29
 800550c:	d001      	beq.n	8005512 <__sflush_r+0xb2>
 800550e:	2b16      	cmp	r3, #22
 8005510:	d101      	bne.n	8005516 <__sflush_r+0xb6>
 8005512:	602f      	str	r7, [r5, #0]
 8005514:	e7b1      	b.n	800547a <__sflush_r+0x1a>
 8005516:	89a3      	ldrh	r3, [r4, #12]
 8005518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800551c:	81a3      	strh	r3, [r4, #12]
 800551e:	e7ad      	b.n	800547c <__sflush_r+0x1c>
 8005520:	690f      	ldr	r7, [r1, #16]
 8005522:	2f00      	cmp	r7, #0
 8005524:	d0a9      	beq.n	800547a <__sflush_r+0x1a>
 8005526:	0793      	lsls	r3, r2, #30
 8005528:	680e      	ldr	r6, [r1, #0]
 800552a:	bf08      	it	eq
 800552c:	694b      	ldreq	r3, [r1, #20]
 800552e:	600f      	str	r7, [r1, #0]
 8005530:	bf18      	it	ne
 8005532:	2300      	movne	r3, #0
 8005534:	eba6 0807 	sub.w	r8, r6, r7
 8005538:	608b      	str	r3, [r1, #8]
 800553a:	f1b8 0f00 	cmp.w	r8, #0
 800553e:	dd9c      	ble.n	800547a <__sflush_r+0x1a>
 8005540:	6a21      	ldr	r1, [r4, #32]
 8005542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005544:	4643      	mov	r3, r8
 8005546:	463a      	mov	r2, r7
 8005548:	4628      	mov	r0, r5
 800554a:	47b0      	blx	r6
 800554c:	2800      	cmp	r0, #0
 800554e:	dc06      	bgt.n	800555e <__sflush_r+0xfe>
 8005550:	89a3      	ldrh	r3, [r4, #12]
 8005552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005556:	81a3      	strh	r3, [r4, #12]
 8005558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800555c:	e78e      	b.n	800547c <__sflush_r+0x1c>
 800555e:	4407      	add	r7, r0
 8005560:	eba8 0800 	sub.w	r8, r8, r0
 8005564:	e7e9      	b.n	800553a <__sflush_r+0xda>
 8005566:	bf00      	nop
 8005568:	dfbffffe 	.word	0xdfbffffe

0800556c <_fflush_r>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	690b      	ldr	r3, [r1, #16]
 8005570:	4605      	mov	r5, r0
 8005572:	460c      	mov	r4, r1
 8005574:	b913      	cbnz	r3, 800557c <_fflush_r+0x10>
 8005576:	2500      	movs	r5, #0
 8005578:	4628      	mov	r0, r5
 800557a:	bd38      	pop	{r3, r4, r5, pc}
 800557c:	b118      	cbz	r0, 8005586 <_fflush_r+0x1a>
 800557e:	6a03      	ldr	r3, [r0, #32]
 8005580:	b90b      	cbnz	r3, 8005586 <_fflush_r+0x1a>
 8005582:	f7ff fdd1 	bl	8005128 <__sinit>
 8005586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f3      	beq.n	8005576 <_fflush_r+0xa>
 800558e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005590:	07d0      	lsls	r0, r2, #31
 8005592:	d404      	bmi.n	800559e <_fflush_r+0x32>
 8005594:	0599      	lsls	r1, r3, #22
 8005596:	d402      	bmi.n	800559e <_fflush_r+0x32>
 8005598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800559a:	f7ff fef4 	bl	8005386 <__retarget_lock_acquire_recursive>
 800559e:	4628      	mov	r0, r5
 80055a0:	4621      	mov	r1, r4
 80055a2:	f7ff ff5d 	bl	8005460 <__sflush_r>
 80055a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055a8:	07da      	lsls	r2, r3, #31
 80055aa:	4605      	mov	r5, r0
 80055ac:	d4e4      	bmi.n	8005578 <_fflush_r+0xc>
 80055ae:	89a3      	ldrh	r3, [r4, #12]
 80055b0:	059b      	lsls	r3, r3, #22
 80055b2:	d4e1      	bmi.n	8005578 <_fflush_r+0xc>
 80055b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055b6:	f7ff fee7 	bl	8005388 <__retarget_lock_release_recursive>
 80055ba:	e7dd      	b.n	8005578 <_fflush_r+0xc>

080055bc <fiprintf>:
 80055bc:	b40e      	push	{r1, r2, r3}
 80055be:	b503      	push	{r0, r1, lr}
 80055c0:	4601      	mov	r1, r0
 80055c2:	ab03      	add	r3, sp, #12
 80055c4:	4805      	ldr	r0, [pc, #20]	; (80055dc <fiprintf+0x20>)
 80055c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80055ca:	6800      	ldr	r0, [r0, #0]
 80055cc:	9301      	str	r3, [sp, #4]
 80055ce:	f000 f837 	bl	8005640 <_vfiprintf_r>
 80055d2:	b002      	add	sp, #8
 80055d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80055d8:	b003      	add	sp, #12
 80055da:	4770      	bx	lr
 80055dc:	20000064 	.word	0x20000064

080055e0 <abort>:
 80055e0:	b508      	push	{r3, lr}
 80055e2:	2006      	movs	r0, #6
 80055e4:	f000 fb94 	bl	8005d10 <raise>
 80055e8:	2001      	movs	r0, #1
 80055ea:	f7fc fa7d 	bl	8001ae8 <_exit>

080055ee <__sfputc_r>:
 80055ee:	6893      	ldr	r3, [r2, #8]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	b410      	push	{r4}
 80055f6:	6093      	str	r3, [r2, #8]
 80055f8:	da08      	bge.n	800560c <__sfputc_r+0x1e>
 80055fa:	6994      	ldr	r4, [r2, #24]
 80055fc:	42a3      	cmp	r3, r4
 80055fe:	db01      	blt.n	8005604 <__sfputc_r+0x16>
 8005600:	290a      	cmp	r1, #10
 8005602:	d103      	bne.n	800560c <__sfputc_r+0x1e>
 8005604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005608:	f000 bac4 	b.w	8005b94 <__swbuf_r>
 800560c:	6813      	ldr	r3, [r2, #0]
 800560e:	1c58      	adds	r0, r3, #1
 8005610:	6010      	str	r0, [r2, #0]
 8005612:	7019      	strb	r1, [r3, #0]
 8005614:	4608      	mov	r0, r1
 8005616:	f85d 4b04 	ldr.w	r4, [sp], #4
 800561a:	4770      	bx	lr

0800561c <__sfputs_r>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	4606      	mov	r6, r0
 8005620:	460f      	mov	r7, r1
 8005622:	4614      	mov	r4, r2
 8005624:	18d5      	adds	r5, r2, r3
 8005626:	42ac      	cmp	r4, r5
 8005628:	d101      	bne.n	800562e <__sfputs_r+0x12>
 800562a:	2000      	movs	r0, #0
 800562c:	e007      	b.n	800563e <__sfputs_r+0x22>
 800562e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005632:	463a      	mov	r2, r7
 8005634:	4630      	mov	r0, r6
 8005636:	f7ff ffda 	bl	80055ee <__sfputc_r>
 800563a:	1c43      	adds	r3, r0, #1
 800563c:	d1f3      	bne.n	8005626 <__sfputs_r+0xa>
 800563e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005640 <_vfiprintf_r>:
 8005640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005644:	460d      	mov	r5, r1
 8005646:	b09d      	sub	sp, #116	; 0x74
 8005648:	4614      	mov	r4, r2
 800564a:	4698      	mov	r8, r3
 800564c:	4606      	mov	r6, r0
 800564e:	b118      	cbz	r0, 8005658 <_vfiprintf_r+0x18>
 8005650:	6a03      	ldr	r3, [r0, #32]
 8005652:	b90b      	cbnz	r3, 8005658 <_vfiprintf_r+0x18>
 8005654:	f7ff fd68 	bl	8005128 <__sinit>
 8005658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800565a:	07d9      	lsls	r1, r3, #31
 800565c:	d405      	bmi.n	800566a <_vfiprintf_r+0x2a>
 800565e:	89ab      	ldrh	r3, [r5, #12]
 8005660:	059a      	lsls	r2, r3, #22
 8005662:	d402      	bmi.n	800566a <_vfiprintf_r+0x2a>
 8005664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005666:	f7ff fe8e 	bl	8005386 <__retarget_lock_acquire_recursive>
 800566a:	89ab      	ldrh	r3, [r5, #12]
 800566c:	071b      	lsls	r3, r3, #28
 800566e:	d501      	bpl.n	8005674 <_vfiprintf_r+0x34>
 8005670:	692b      	ldr	r3, [r5, #16]
 8005672:	b99b      	cbnz	r3, 800569c <_vfiprintf_r+0x5c>
 8005674:	4629      	mov	r1, r5
 8005676:	4630      	mov	r0, r6
 8005678:	f000 faca 	bl	8005c10 <__swsetup_r>
 800567c:	b170      	cbz	r0, 800569c <_vfiprintf_r+0x5c>
 800567e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005680:	07dc      	lsls	r4, r3, #31
 8005682:	d504      	bpl.n	800568e <_vfiprintf_r+0x4e>
 8005684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005688:	b01d      	add	sp, #116	; 0x74
 800568a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800568e:	89ab      	ldrh	r3, [r5, #12]
 8005690:	0598      	lsls	r0, r3, #22
 8005692:	d4f7      	bmi.n	8005684 <_vfiprintf_r+0x44>
 8005694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005696:	f7ff fe77 	bl	8005388 <__retarget_lock_release_recursive>
 800569a:	e7f3      	b.n	8005684 <_vfiprintf_r+0x44>
 800569c:	2300      	movs	r3, #0
 800569e:	9309      	str	r3, [sp, #36]	; 0x24
 80056a0:	2320      	movs	r3, #32
 80056a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80056aa:	2330      	movs	r3, #48	; 0x30
 80056ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005860 <_vfiprintf_r+0x220>
 80056b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056b4:	f04f 0901 	mov.w	r9, #1
 80056b8:	4623      	mov	r3, r4
 80056ba:	469a      	mov	sl, r3
 80056bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056c0:	b10a      	cbz	r2, 80056c6 <_vfiprintf_r+0x86>
 80056c2:	2a25      	cmp	r2, #37	; 0x25
 80056c4:	d1f9      	bne.n	80056ba <_vfiprintf_r+0x7a>
 80056c6:	ebba 0b04 	subs.w	fp, sl, r4
 80056ca:	d00b      	beq.n	80056e4 <_vfiprintf_r+0xa4>
 80056cc:	465b      	mov	r3, fp
 80056ce:	4622      	mov	r2, r4
 80056d0:	4629      	mov	r1, r5
 80056d2:	4630      	mov	r0, r6
 80056d4:	f7ff ffa2 	bl	800561c <__sfputs_r>
 80056d8:	3001      	adds	r0, #1
 80056da:	f000 80a9 	beq.w	8005830 <_vfiprintf_r+0x1f0>
 80056de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056e0:	445a      	add	r2, fp
 80056e2:	9209      	str	r2, [sp, #36]	; 0x24
 80056e4:	f89a 3000 	ldrb.w	r3, [sl]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 80a1 	beq.w	8005830 <_vfiprintf_r+0x1f0>
 80056ee:	2300      	movs	r3, #0
 80056f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056f8:	f10a 0a01 	add.w	sl, sl, #1
 80056fc:	9304      	str	r3, [sp, #16]
 80056fe:	9307      	str	r3, [sp, #28]
 8005700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005704:	931a      	str	r3, [sp, #104]	; 0x68
 8005706:	4654      	mov	r4, sl
 8005708:	2205      	movs	r2, #5
 800570a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800570e:	4854      	ldr	r0, [pc, #336]	; (8005860 <_vfiprintf_r+0x220>)
 8005710:	f7fa fd66 	bl	80001e0 <memchr>
 8005714:	9a04      	ldr	r2, [sp, #16]
 8005716:	b9d8      	cbnz	r0, 8005750 <_vfiprintf_r+0x110>
 8005718:	06d1      	lsls	r1, r2, #27
 800571a:	bf44      	itt	mi
 800571c:	2320      	movmi	r3, #32
 800571e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005722:	0713      	lsls	r3, r2, #28
 8005724:	bf44      	itt	mi
 8005726:	232b      	movmi	r3, #43	; 0x2b
 8005728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800572c:	f89a 3000 	ldrb.w	r3, [sl]
 8005730:	2b2a      	cmp	r3, #42	; 0x2a
 8005732:	d015      	beq.n	8005760 <_vfiprintf_r+0x120>
 8005734:	9a07      	ldr	r2, [sp, #28]
 8005736:	4654      	mov	r4, sl
 8005738:	2000      	movs	r0, #0
 800573a:	f04f 0c0a 	mov.w	ip, #10
 800573e:	4621      	mov	r1, r4
 8005740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005744:	3b30      	subs	r3, #48	; 0x30
 8005746:	2b09      	cmp	r3, #9
 8005748:	d94d      	bls.n	80057e6 <_vfiprintf_r+0x1a6>
 800574a:	b1b0      	cbz	r0, 800577a <_vfiprintf_r+0x13a>
 800574c:	9207      	str	r2, [sp, #28]
 800574e:	e014      	b.n	800577a <_vfiprintf_r+0x13a>
 8005750:	eba0 0308 	sub.w	r3, r0, r8
 8005754:	fa09 f303 	lsl.w	r3, r9, r3
 8005758:	4313      	orrs	r3, r2
 800575a:	9304      	str	r3, [sp, #16]
 800575c:	46a2      	mov	sl, r4
 800575e:	e7d2      	b.n	8005706 <_vfiprintf_r+0xc6>
 8005760:	9b03      	ldr	r3, [sp, #12]
 8005762:	1d19      	adds	r1, r3, #4
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	9103      	str	r1, [sp, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	bfbb      	ittet	lt
 800576c:	425b      	neglt	r3, r3
 800576e:	f042 0202 	orrlt.w	r2, r2, #2
 8005772:	9307      	strge	r3, [sp, #28]
 8005774:	9307      	strlt	r3, [sp, #28]
 8005776:	bfb8      	it	lt
 8005778:	9204      	strlt	r2, [sp, #16]
 800577a:	7823      	ldrb	r3, [r4, #0]
 800577c:	2b2e      	cmp	r3, #46	; 0x2e
 800577e:	d10c      	bne.n	800579a <_vfiprintf_r+0x15a>
 8005780:	7863      	ldrb	r3, [r4, #1]
 8005782:	2b2a      	cmp	r3, #42	; 0x2a
 8005784:	d134      	bne.n	80057f0 <_vfiprintf_r+0x1b0>
 8005786:	9b03      	ldr	r3, [sp, #12]
 8005788:	1d1a      	adds	r2, r3, #4
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	9203      	str	r2, [sp, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	bfb8      	it	lt
 8005792:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005796:	3402      	adds	r4, #2
 8005798:	9305      	str	r3, [sp, #20]
 800579a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005870 <_vfiprintf_r+0x230>
 800579e:	7821      	ldrb	r1, [r4, #0]
 80057a0:	2203      	movs	r2, #3
 80057a2:	4650      	mov	r0, sl
 80057a4:	f7fa fd1c 	bl	80001e0 <memchr>
 80057a8:	b138      	cbz	r0, 80057ba <_vfiprintf_r+0x17a>
 80057aa:	9b04      	ldr	r3, [sp, #16]
 80057ac:	eba0 000a 	sub.w	r0, r0, sl
 80057b0:	2240      	movs	r2, #64	; 0x40
 80057b2:	4082      	lsls	r2, r0
 80057b4:	4313      	orrs	r3, r2
 80057b6:	3401      	adds	r4, #1
 80057b8:	9304      	str	r3, [sp, #16]
 80057ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057be:	4829      	ldr	r0, [pc, #164]	; (8005864 <_vfiprintf_r+0x224>)
 80057c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057c4:	2206      	movs	r2, #6
 80057c6:	f7fa fd0b 	bl	80001e0 <memchr>
 80057ca:	2800      	cmp	r0, #0
 80057cc:	d03f      	beq.n	800584e <_vfiprintf_r+0x20e>
 80057ce:	4b26      	ldr	r3, [pc, #152]	; (8005868 <_vfiprintf_r+0x228>)
 80057d0:	bb1b      	cbnz	r3, 800581a <_vfiprintf_r+0x1da>
 80057d2:	9b03      	ldr	r3, [sp, #12]
 80057d4:	3307      	adds	r3, #7
 80057d6:	f023 0307 	bic.w	r3, r3, #7
 80057da:	3308      	adds	r3, #8
 80057dc:	9303      	str	r3, [sp, #12]
 80057de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e0:	443b      	add	r3, r7
 80057e2:	9309      	str	r3, [sp, #36]	; 0x24
 80057e4:	e768      	b.n	80056b8 <_vfiprintf_r+0x78>
 80057e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80057ea:	460c      	mov	r4, r1
 80057ec:	2001      	movs	r0, #1
 80057ee:	e7a6      	b.n	800573e <_vfiprintf_r+0xfe>
 80057f0:	2300      	movs	r3, #0
 80057f2:	3401      	adds	r4, #1
 80057f4:	9305      	str	r3, [sp, #20]
 80057f6:	4619      	mov	r1, r3
 80057f8:	f04f 0c0a 	mov.w	ip, #10
 80057fc:	4620      	mov	r0, r4
 80057fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005802:	3a30      	subs	r2, #48	; 0x30
 8005804:	2a09      	cmp	r2, #9
 8005806:	d903      	bls.n	8005810 <_vfiprintf_r+0x1d0>
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0c6      	beq.n	800579a <_vfiprintf_r+0x15a>
 800580c:	9105      	str	r1, [sp, #20]
 800580e:	e7c4      	b.n	800579a <_vfiprintf_r+0x15a>
 8005810:	fb0c 2101 	mla	r1, ip, r1, r2
 8005814:	4604      	mov	r4, r0
 8005816:	2301      	movs	r3, #1
 8005818:	e7f0      	b.n	80057fc <_vfiprintf_r+0x1bc>
 800581a:	ab03      	add	r3, sp, #12
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	462a      	mov	r2, r5
 8005820:	4b12      	ldr	r3, [pc, #72]	; (800586c <_vfiprintf_r+0x22c>)
 8005822:	a904      	add	r1, sp, #16
 8005824:	4630      	mov	r0, r6
 8005826:	f3af 8000 	nop.w
 800582a:	4607      	mov	r7, r0
 800582c:	1c78      	adds	r0, r7, #1
 800582e:	d1d6      	bne.n	80057de <_vfiprintf_r+0x19e>
 8005830:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005832:	07d9      	lsls	r1, r3, #31
 8005834:	d405      	bmi.n	8005842 <_vfiprintf_r+0x202>
 8005836:	89ab      	ldrh	r3, [r5, #12]
 8005838:	059a      	lsls	r2, r3, #22
 800583a:	d402      	bmi.n	8005842 <_vfiprintf_r+0x202>
 800583c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800583e:	f7ff fda3 	bl	8005388 <__retarget_lock_release_recursive>
 8005842:	89ab      	ldrh	r3, [r5, #12]
 8005844:	065b      	lsls	r3, r3, #25
 8005846:	f53f af1d 	bmi.w	8005684 <_vfiprintf_r+0x44>
 800584a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800584c:	e71c      	b.n	8005688 <_vfiprintf_r+0x48>
 800584e:	ab03      	add	r3, sp, #12
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	462a      	mov	r2, r5
 8005854:	4b05      	ldr	r3, [pc, #20]	; (800586c <_vfiprintf_r+0x22c>)
 8005856:	a904      	add	r1, sp, #16
 8005858:	4630      	mov	r0, r6
 800585a:	f000 f879 	bl	8005950 <_printf_i>
 800585e:	e7e4      	b.n	800582a <_vfiprintf_r+0x1ea>
 8005860:	080066fb 	.word	0x080066fb
 8005864:	08006705 	.word	0x08006705
 8005868:	00000000 	.word	0x00000000
 800586c:	0800561d 	.word	0x0800561d
 8005870:	08006701 	.word	0x08006701

08005874 <_printf_common>:
 8005874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005878:	4616      	mov	r6, r2
 800587a:	4699      	mov	r9, r3
 800587c:	688a      	ldr	r2, [r1, #8]
 800587e:	690b      	ldr	r3, [r1, #16]
 8005880:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005884:	4293      	cmp	r3, r2
 8005886:	bfb8      	it	lt
 8005888:	4613      	movlt	r3, r2
 800588a:	6033      	str	r3, [r6, #0]
 800588c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005890:	4607      	mov	r7, r0
 8005892:	460c      	mov	r4, r1
 8005894:	b10a      	cbz	r2, 800589a <_printf_common+0x26>
 8005896:	3301      	adds	r3, #1
 8005898:	6033      	str	r3, [r6, #0]
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	0699      	lsls	r1, r3, #26
 800589e:	bf42      	ittt	mi
 80058a0:	6833      	ldrmi	r3, [r6, #0]
 80058a2:	3302      	addmi	r3, #2
 80058a4:	6033      	strmi	r3, [r6, #0]
 80058a6:	6825      	ldr	r5, [r4, #0]
 80058a8:	f015 0506 	ands.w	r5, r5, #6
 80058ac:	d106      	bne.n	80058bc <_printf_common+0x48>
 80058ae:	f104 0a19 	add.w	sl, r4, #25
 80058b2:	68e3      	ldr	r3, [r4, #12]
 80058b4:	6832      	ldr	r2, [r6, #0]
 80058b6:	1a9b      	subs	r3, r3, r2
 80058b8:	42ab      	cmp	r3, r5
 80058ba:	dc26      	bgt.n	800590a <_printf_common+0x96>
 80058bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058c0:	1e13      	subs	r3, r2, #0
 80058c2:	6822      	ldr	r2, [r4, #0]
 80058c4:	bf18      	it	ne
 80058c6:	2301      	movne	r3, #1
 80058c8:	0692      	lsls	r2, r2, #26
 80058ca:	d42b      	bmi.n	8005924 <_printf_common+0xb0>
 80058cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058d0:	4649      	mov	r1, r9
 80058d2:	4638      	mov	r0, r7
 80058d4:	47c0      	blx	r8
 80058d6:	3001      	adds	r0, #1
 80058d8:	d01e      	beq.n	8005918 <_printf_common+0xa4>
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	6922      	ldr	r2, [r4, #16]
 80058de:	f003 0306 	and.w	r3, r3, #6
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	bf02      	ittt	eq
 80058e6:	68e5      	ldreq	r5, [r4, #12]
 80058e8:	6833      	ldreq	r3, [r6, #0]
 80058ea:	1aed      	subeq	r5, r5, r3
 80058ec:	68a3      	ldr	r3, [r4, #8]
 80058ee:	bf0c      	ite	eq
 80058f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058f4:	2500      	movne	r5, #0
 80058f6:	4293      	cmp	r3, r2
 80058f8:	bfc4      	itt	gt
 80058fa:	1a9b      	subgt	r3, r3, r2
 80058fc:	18ed      	addgt	r5, r5, r3
 80058fe:	2600      	movs	r6, #0
 8005900:	341a      	adds	r4, #26
 8005902:	42b5      	cmp	r5, r6
 8005904:	d11a      	bne.n	800593c <_printf_common+0xc8>
 8005906:	2000      	movs	r0, #0
 8005908:	e008      	b.n	800591c <_printf_common+0xa8>
 800590a:	2301      	movs	r3, #1
 800590c:	4652      	mov	r2, sl
 800590e:	4649      	mov	r1, r9
 8005910:	4638      	mov	r0, r7
 8005912:	47c0      	blx	r8
 8005914:	3001      	adds	r0, #1
 8005916:	d103      	bne.n	8005920 <_printf_common+0xac>
 8005918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800591c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005920:	3501      	adds	r5, #1
 8005922:	e7c6      	b.n	80058b2 <_printf_common+0x3e>
 8005924:	18e1      	adds	r1, r4, r3
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	2030      	movs	r0, #48	; 0x30
 800592a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800592e:	4422      	add	r2, r4
 8005930:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005934:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005938:	3302      	adds	r3, #2
 800593a:	e7c7      	b.n	80058cc <_printf_common+0x58>
 800593c:	2301      	movs	r3, #1
 800593e:	4622      	mov	r2, r4
 8005940:	4649      	mov	r1, r9
 8005942:	4638      	mov	r0, r7
 8005944:	47c0      	blx	r8
 8005946:	3001      	adds	r0, #1
 8005948:	d0e6      	beq.n	8005918 <_printf_common+0xa4>
 800594a:	3601      	adds	r6, #1
 800594c:	e7d9      	b.n	8005902 <_printf_common+0x8e>
	...

08005950 <_printf_i>:
 8005950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005954:	7e0f      	ldrb	r7, [r1, #24]
 8005956:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005958:	2f78      	cmp	r7, #120	; 0x78
 800595a:	4691      	mov	r9, r2
 800595c:	4680      	mov	r8, r0
 800595e:	460c      	mov	r4, r1
 8005960:	469a      	mov	sl, r3
 8005962:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005966:	d807      	bhi.n	8005978 <_printf_i+0x28>
 8005968:	2f62      	cmp	r7, #98	; 0x62
 800596a:	d80a      	bhi.n	8005982 <_printf_i+0x32>
 800596c:	2f00      	cmp	r7, #0
 800596e:	f000 80d4 	beq.w	8005b1a <_printf_i+0x1ca>
 8005972:	2f58      	cmp	r7, #88	; 0x58
 8005974:	f000 80c0 	beq.w	8005af8 <_printf_i+0x1a8>
 8005978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800597c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005980:	e03a      	b.n	80059f8 <_printf_i+0xa8>
 8005982:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005986:	2b15      	cmp	r3, #21
 8005988:	d8f6      	bhi.n	8005978 <_printf_i+0x28>
 800598a:	a101      	add	r1, pc, #4	; (adr r1, 8005990 <_printf_i+0x40>)
 800598c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005990:	080059e9 	.word	0x080059e9
 8005994:	080059fd 	.word	0x080059fd
 8005998:	08005979 	.word	0x08005979
 800599c:	08005979 	.word	0x08005979
 80059a0:	08005979 	.word	0x08005979
 80059a4:	08005979 	.word	0x08005979
 80059a8:	080059fd 	.word	0x080059fd
 80059ac:	08005979 	.word	0x08005979
 80059b0:	08005979 	.word	0x08005979
 80059b4:	08005979 	.word	0x08005979
 80059b8:	08005979 	.word	0x08005979
 80059bc:	08005b01 	.word	0x08005b01
 80059c0:	08005a29 	.word	0x08005a29
 80059c4:	08005abb 	.word	0x08005abb
 80059c8:	08005979 	.word	0x08005979
 80059cc:	08005979 	.word	0x08005979
 80059d0:	08005b23 	.word	0x08005b23
 80059d4:	08005979 	.word	0x08005979
 80059d8:	08005a29 	.word	0x08005a29
 80059dc:	08005979 	.word	0x08005979
 80059e0:	08005979 	.word	0x08005979
 80059e4:	08005ac3 	.word	0x08005ac3
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	1d1a      	adds	r2, r3, #4
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	602a      	str	r2, [r5, #0]
 80059f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059f8:	2301      	movs	r3, #1
 80059fa:	e09f      	b.n	8005b3c <_printf_i+0x1ec>
 80059fc:	6820      	ldr	r0, [r4, #0]
 80059fe:	682b      	ldr	r3, [r5, #0]
 8005a00:	0607      	lsls	r7, r0, #24
 8005a02:	f103 0104 	add.w	r1, r3, #4
 8005a06:	6029      	str	r1, [r5, #0]
 8005a08:	d501      	bpl.n	8005a0e <_printf_i+0xbe>
 8005a0a:	681e      	ldr	r6, [r3, #0]
 8005a0c:	e003      	b.n	8005a16 <_printf_i+0xc6>
 8005a0e:	0646      	lsls	r6, r0, #25
 8005a10:	d5fb      	bpl.n	8005a0a <_printf_i+0xba>
 8005a12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a16:	2e00      	cmp	r6, #0
 8005a18:	da03      	bge.n	8005a22 <_printf_i+0xd2>
 8005a1a:	232d      	movs	r3, #45	; 0x2d
 8005a1c:	4276      	negs	r6, r6
 8005a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a22:	485a      	ldr	r0, [pc, #360]	; (8005b8c <_printf_i+0x23c>)
 8005a24:	230a      	movs	r3, #10
 8005a26:	e012      	b.n	8005a4e <_printf_i+0xfe>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	6820      	ldr	r0, [r4, #0]
 8005a2c:	1d19      	adds	r1, r3, #4
 8005a2e:	6029      	str	r1, [r5, #0]
 8005a30:	0605      	lsls	r5, r0, #24
 8005a32:	d501      	bpl.n	8005a38 <_printf_i+0xe8>
 8005a34:	681e      	ldr	r6, [r3, #0]
 8005a36:	e002      	b.n	8005a3e <_printf_i+0xee>
 8005a38:	0641      	lsls	r1, r0, #25
 8005a3a:	d5fb      	bpl.n	8005a34 <_printf_i+0xe4>
 8005a3c:	881e      	ldrh	r6, [r3, #0]
 8005a3e:	4853      	ldr	r0, [pc, #332]	; (8005b8c <_printf_i+0x23c>)
 8005a40:	2f6f      	cmp	r7, #111	; 0x6f
 8005a42:	bf0c      	ite	eq
 8005a44:	2308      	moveq	r3, #8
 8005a46:	230a      	movne	r3, #10
 8005a48:	2100      	movs	r1, #0
 8005a4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a4e:	6865      	ldr	r5, [r4, #4]
 8005a50:	60a5      	str	r5, [r4, #8]
 8005a52:	2d00      	cmp	r5, #0
 8005a54:	bfa2      	ittt	ge
 8005a56:	6821      	ldrge	r1, [r4, #0]
 8005a58:	f021 0104 	bicge.w	r1, r1, #4
 8005a5c:	6021      	strge	r1, [r4, #0]
 8005a5e:	b90e      	cbnz	r6, 8005a64 <_printf_i+0x114>
 8005a60:	2d00      	cmp	r5, #0
 8005a62:	d04b      	beq.n	8005afc <_printf_i+0x1ac>
 8005a64:	4615      	mov	r5, r2
 8005a66:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a6a:	fb03 6711 	mls	r7, r3, r1, r6
 8005a6e:	5dc7      	ldrb	r7, [r0, r7]
 8005a70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a74:	4637      	mov	r7, r6
 8005a76:	42bb      	cmp	r3, r7
 8005a78:	460e      	mov	r6, r1
 8005a7a:	d9f4      	bls.n	8005a66 <_printf_i+0x116>
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d10b      	bne.n	8005a98 <_printf_i+0x148>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	07de      	lsls	r6, r3, #31
 8005a84:	d508      	bpl.n	8005a98 <_printf_i+0x148>
 8005a86:	6923      	ldr	r3, [r4, #16]
 8005a88:	6861      	ldr	r1, [r4, #4]
 8005a8a:	4299      	cmp	r1, r3
 8005a8c:	bfde      	ittt	le
 8005a8e:	2330      	movle	r3, #48	; 0x30
 8005a90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a94:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005a98:	1b52      	subs	r2, r2, r5
 8005a9a:	6122      	str	r2, [r4, #16]
 8005a9c:	f8cd a000 	str.w	sl, [sp]
 8005aa0:	464b      	mov	r3, r9
 8005aa2:	aa03      	add	r2, sp, #12
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	f7ff fee4 	bl	8005874 <_printf_common>
 8005aac:	3001      	adds	r0, #1
 8005aae:	d14a      	bne.n	8005b46 <_printf_i+0x1f6>
 8005ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ab4:	b004      	add	sp, #16
 8005ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	f043 0320 	orr.w	r3, r3, #32
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	4833      	ldr	r0, [pc, #204]	; (8005b90 <_printf_i+0x240>)
 8005ac4:	2778      	movs	r7, #120	; 0x78
 8005ac6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	6829      	ldr	r1, [r5, #0]
 8005ace:	061f      	lsls	r7, r3, #24
 8005ad0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ad4:	d402      	bmi.n	8005adc <_printf_i+0x18c>
 8005ad6:	065f      	lsls	r7, r3, #25
 8005ad8:	bf48      	it	mi
 8005ada:	b2b6      	uxthmi	r6, r6
 8005adc:	07df      	lsls	r7, r3, #31
 8005ade:	bf48      	it	mi
 8005ae0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ae4:	6029      	str	r1, [r5, #0]
 8005ae6:	bf48      	it	mi
 8005ae8:	6023      	strmi	r3, [r4, #0]
 8005aea:	b91e      	cbnz	r6, 8005af4 <_printf_i+0x1a4>
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	f023 0320 	bic.w	r3, r3, #32
 8005af2:	6023      	str	r3, [r4, #0]
 8005af4:	2310      	movs	r3, #16
 8005af6:	e7a7      	b.n	8005a48 <_printf_i+0xf8>
 8005af8:	4824      	ldr	r0, [pc, #144]	; (8005b8c <_printf_i+0x23c>)
 8005afa:	e7e4      	b.n	8005ac6 <_printf_i+0x176>
 8005afc:	4615      	mov	r5, r2
 8005afe:	e7bd      	b.n	8005a7c <_printf_i+0x12c>
 8005b00:	682b      	ldr	r3, [r5, #0]
 8005b02:	6826      	ldr	r6, [r4, #0]
 8005b04:	6961      	ldr	r1, [r4, #20]
 8005b06:	1d18      	adds	r0, r3, #4
 8005b08:	6028      	str	r0, [r5, #0]
 8005b0a:	0635      	lsls	r5, r6, #24
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	d501      	bpl.n	8005b14 <_printf_i+0x1c4>
 8005b10:	6019      	str	r1, [r3, #0]
 8005b12:	e002      	b.n	8005b1a <_printf_i+0x1ca>
 8005b14:	0670      	lsls	r0, r6, #25
 8005b16:	d5fb      	bpl.n	8005b10 <_printf_i+0x1c0>
 8005b18:	8019      	strh	r1, [r3, #0]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	6123      	str	r3, [r4, #16]
 8005b1e:	4615      	mov	r5, r2
 8005b20:	e7bc      	b.n	8005a9c <_printf_i+0x14c>
 8005b22:	682b      	ldr	r3, [r5, #0]
 8005b24:	1d1a      	adds	r2, r3, #4
 8005b26:	602a      	str	r2, [r5, #0]
 8005b28:	681d      	ldr	r5, [r3, #0]
 8005b2a:	6862      	ldr	r2, [r4, #4]
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4628      	mov	r0, r5
 8005b30:	f7fa fb56 	bl	80001e0 <memchr>
 8005b34:	b108      	cbz	r0, 8005b3a <_printf_i+0x1ea>
 8005b36:	1b40      	subs	r0, r0, r5
 8005b38:	6060      	str	r0, [r4, #4]
 8005b3a:	6863      	ldr	r3, [r4, #4]
 8005b3c:	6123      	str	r3, [r4, #16]
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b44:	e7aa      	b.n	8005a9c <_printf_i+0x14c>
 8005b46:	6923      	ldr	r3, [r4, #16]
 8005b48:	462a      	mov	r2, r5
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	4640      	mov	r0, r8
 8005b4e:	47d0      	blx	sl
 8005b50:	3001      	adds	r0, #1
 8005b52:	d0ad      	beq.n	8005ab0 <_printf_i+0x160>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	079b      	lsls	r3, r3, #30
 8005b58:	d413      	bmi.n	8005b82 <_printf_i+0x232>
 8005b5a:	68e0      	ldr	r0, [r4, #12]
 8005b5c:	9b03      	ldr	r3, [sp, #12]
 8005b5e:	4298      	cmp	r0, r3
 8005b60:	bfb8      	it	lt
 8005b62:	4618      	movlt	r0, r3
 8005b64:	e7a6      	b.n	8005ab4 <_printf_i+0x164>
 8005b66:	2301      	movs	r3, #1
 8005b68:	4632      	mov	r2, r6
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	4640      	mov	r0, r8
 8005b6e:	47d0      	blx	sl
 8005b70:	3001      	adds	r0, #1
 8005b72:	d09d      	beq.n	8005ab0 <_printf_i+0x160>
 8005b74:	3501      	adds	r5, #1
 8005b76:	68e3      	ldr	r3, [r4, #12]
 8005b78:	9903      	ldr	r1, [sp, #12]
 8005b7a:	1a5b      	subs	r3, r3, r1
 8005b7c:	42ab      	cmp	r3, r5
 8005b7e:	dcf2      	bgt.n	8005b66 <_printf_i+0x216>
 8005b80:	e7eb      	b.n	8005b5a <_printf_i+0x20a>
 8005b82:	2500      	movs	r5, #0
 8005b84:	f104 0619 	add.w	r6, r4, #25
 8005b88:	e7f5      	b.n	8005b76 <_printf_i+0x226>
 8005b8a:	bf00      	nop
 8005b8c:	0800670c 	.word	0x0800670c
 8005b90:	0800671d 	.word	0x0800671d

08005b94 <__swbuf_r>:
 8005b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b96:	460e      	mov	r6, r1
 8005b98:	4614      	mov	r4, r2
 8005b9a:	4605      	mov	r5, r0
 8005b9c:	b118      	cbz	r0, 8005ba6 <__swbuf_r+0x12>
 8005b9e:	6a03      	ldr	r3, [r0, #32]
 8005ba0:	b90b      	cbnz	r3, 8005ba6 <__swbuf_r+0x12>
 8005ba2:	f7ff fac1 	bl	8005128 <__sinit>
 8005ba6:	69a3      	ldr	r3, [r4, #24]
 8005ba8:	60a3      	str	r3, [r4, #8]
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	071a      	lsls	r2, r3, #28
 8005bae:	d525      	bpl.n	8005bfc <__swbuf_r+0x68>
 8005bb0:	6923      	ldr	r3, [r4, #16]
 8005bb2:	b31b      	cbz	r3, 8005bfc <__swbuf_r+0x68>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	6922      	ldr	r2, [r4, #16]
 8005bb8:	1a98      	subs	r0, r3, r2
 8005bba:	6963      	ldr	r3, [r4, #20]
 8005bbc:	b2f6      	uxtb	r6, r6
 8005bbe:	4283      	cmp	r3, r0
 8005bc0:	4637      	mov	r7, r6
 8005bc2:	dc04      	bgt.n	8005bce <__swbuf_r+0x3a>
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f7ff fcd0 	bl	800556c <_fflush_r>
 8005bcc:	b9e0      	cbnz	r0, 8005c08 <__swbuf_r+0x74>
 8005bce:	68a3      	ldr	r3, [r4, #8]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	60a3      	str	r3, [r4, #8]
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	1c5a      	adds	r2, r3, #1
 8005bd8:	6022      	str	r2, [r4, #0]
 8005bda:	701e      	strb	r6, [r3, #0]
 8005bdc:	6962      	ldr	r2, [r4, #20]
 8005bde:	1c43      	adds	r3, r0, #1
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d004      	beq.n	8005bee <__swbuf_r+0x5a>
 8005be4:	89a3      	ldrh	r3, [r4, #12]
 8005be6:	07db      	lsls	r3, r3, #31
 8005be8:	d506      	bpl.n	8005bf8 <__swbuf_r+0x64>
 8005bea:	2e0a      	cmp	r6, #10
 8005bec:	d104      	bne.n	8005bf8 <__swbuf_r+0x64>
 8005bee:	4621      	mov	r1, r4
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f7ff fcbb 	bl	800556c <_fflush_r>
 8005bf6:	b938      	cbnz	r0, 8005c08 <__swbuf_r+0x74>
 8005bf8:	4638      	mov	r0, r7
 8005bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 f806 	bl	8005c10 <__swsetup_r>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d0d5      	beq.n	8005bb4 <__swbuf_r+0x20>
 8005c08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005c0c:	e7f4      	b.n	8005bf8 <__swbuf_r+0x64>
	...

08005c10 <__swsetup_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4b2a      	ldr	r3, [pc, #168]	; (8005cbc <__swsetup_r+0xac>)
 8005c14:	4605      	mov	r5, r0
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	460c      	mov	r4, r1
 8005c1a:	b118      	cbz	r0, 8005c24 <__swsetup_r+0x14>
 8005c1c:	6a03      	ldr	r3, [r0, #32]
 8005c1e:	b90b      	cbnz	r3, 8005c24 <__swsetup_r+0x14>
 8005c20:	f7ff fa82 	bl	8005128 <__sinit>
 8005c24:	89a3      	ldrh	r3, [r4, #12]
 8005c26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c2a:	0718      	lsls	r0, r3, #28
 8005c2c:	d422      	bmi.n	8005c74 <__swsetup_r+0x64>
 8005c2e:	06d9      	lsls	r1, r3, #27
 8005c30:	d407      	bmi.n	8005c42 <__swsetup_r+0x32>
 8005c32:	2309      	movs	r3, #9
 8005c34:	602b      	str	r3, [r5, #0]
 8005c36:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c3a:	81a3      	strh	r3, [r4, #12]
 8005c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c40:	e034      	b.n	8005cac <__swsetup_r+0x9c>
 8005c42:	0758      	lsls	r0, r3, #29
 8005c44:	d512      	bpl.n	8005c6c <__swsetup_r+0x5c>
 8005c46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c48:	b141      	cbz	r1, 8005c5c <__swsetup_r+0x4c>
 8005c4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c4e:	4299      	cmp	r1, r3
 8005c50:	d002      	beq.n	8005c58 <__swsetup_r+0x48>
 8005c52:	4628      	mov	r0, r5
 8005c54:	f7ff fbb8 	bl	80053c8 <_free_r>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	6363      	str	r3, [r4, #52]	; 0x34
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c62:	81a3      	strh	r3, [r4, #12]
 8005c64:	2300      	movs	r3, #0
 8005c66:	6063      	str	r3, [r4, #4]
 8005c68:	6923      	ldr	r3, [r4, #16]
 8005c6a:	6023      	str	r3, [r4, #0]
 8005c6c:	89a3      	ldrh	r3, [r4, #12]
 8005c6e:	f043 0308 	orr.w	r3, r3, #8
 8005c72:	81a3      	strh	r3, [r4, #12]
 8005c74:	6923      	ldr	r3, [r4, #16]
 8005c76:	b94b      	cbnz	r3, 8005c8c <__swsetup_r+0x7c>
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c82:	d003      	beq.n	8005c8c <__swsetup_r+0x7c>
 8005c84:	4621      	mov	r1, r4
 8005c86:	4628      	mov	r0, r5
 8005c88:	f000 f884 	bl	8005d94 <__smakebuf_r>
 8005c8c:	89a0      	ldrh	r0, [r4, #12]
 8005c8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c92:	f010 0301 	ands.w	r3, r0, #1
 8005c96:	d00a      	beq.n	8005cae <__swsetup_r+0x9e>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60a3      	str	r3, [r4, #8]
 8005c9c:	6963      	ldr	r3, [r4, #20]
 8005c9e:	425b      	negs	r3, r3
 8005ca0:	61a3      	str	r3, [r4, #24]
 8005ca2:	6923      	ldr	r3, [r4, #16]
 8005ca4:	b943      	cbnz	r3, 8005cb8 <__swsetup_r+0xa8>
 8005ca6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005caa:	d1c4      	bne.n	8005c36 <__swsetup_r+0x26>
 8005cac:	bd38      	pop	{r3, r4, r5, pc}
 8005cae:	0781      	lsls	r1, r0, #30
 8005cb0:	bf58      	it	pl
 8005cb2:	6963      	ldrpl	r3, [r4, #20]
 8005cb4:	60a3      	str	r3, [r4, #8]
 8005cb6:	e7f4      	b.n	8005ca2 <__swsetup_r+0x92>
 8005cb8:	2000      	movs	r0, #0
 8005cba:	e7f7      	b.n	8005cac <__swsetup_r+0x9c>
 8005cbc:	20000064 	.word	0x20000064

08005cc0 <_raise_r>:
 8005cc0:	291f      	cmp	r1, #31
 8005cc2:	b538      	push	{r3, r4, r5, lr}
 8005cc4:	4604      	mov	r4, r0
 8005cc6:	460d      	mov	r5, r1
 8005cc8:	d904      	bls.n	8005cd4 <_raise_r+0x14>
 8005cca:	2316      	movs	r3, #22
 8005ccc:	6003      	str	r3, [r0, #0]
 8005cce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005cd6:	b112      	cbz	r2, 8005cde <_raise_r+0x1e>
 8005cd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005cdc:	b94b      	cbnz	r3, 8005cf2 <_raise_r+0x32>
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f000 f830 	bl	8005d44 <_getpid_r>
 8005ce4:	462a      	mov	r2, r5
 8005ce6:	4601      	mov	r1, r0
 8005ce8:	4620      	mov	r0, r4
 8005cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cee:	f000 b817 	b.w	8005d20 <_kill_r>
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d00a      	beq.n	8005d0c <_raise_r+0x4c>
 8005cf6:	1c59      	adds	r1, r3, #1
 8005cf8:	d103      	bne.n	8005d02 <_raise_r+0x42>
 8005cfa:	2316      	movs	r3, #22
 8005cfc:	6003      	str	r3, [r0, #0]
 8005cfe:	2001      	movs	r0, #1
 8005d00:	e7e7      	b.n	8005cd2 <_raise_r+0x12>
 8005d02:	2400      	movs	r4, #0
 8005d04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d08:	4628      	mov	r0, r5
 8005d0a:	4798      	blx	r3
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	e7e0      	b.n	8005cd2 <_raise_r+0x12>

08005d10 <raise>:
 8005d10:	4b02      	ldr	r3, [pc, #8]	; (8005d1c <raise+0xc>)
 8005d12:	4601      	mov	r1, r0
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	f7ff bfd3 	b.w	8005cc0 <_raise_r>
 8005d1a:	bf00      	nop
 8005d1c:	20000064 	.word	0x20000064

08005d20 <_kill_r>:
 8005d20:	b538      	push	{r3, r4, r5, lr}
 8005d22:	4d07      	ldr	r5, [pc, #28]	; (8005d40 <_kill_r+0x20>)
 8005d24:	2300      	movs	r3, #0
 8005d26:	4604      	mov	r4, r0
 8005d28:	4608      	mov	r0, r1
 8005d2a:	4611      	mov	r1, r2
 8005d2c:	602b      	str	r3, [r5, #0]
 8005d2e:	f7fb fecb 	bl	8001ac8 <_kill>
 8005d32:	1c43      	adds	r3, r0, #1
 8005d34:	d102      	bne.n	8005d3c <_kill_r+0x1c>
 8005d36:	682b      	ldr	r3, [r5, #0]
 8005d38:	b103      	cbz	r3, 8005d3c <_kill_r+0x1c>
 8005d3a:	6023      	str	r3, [r4, #0]
 8005d3c:	bd38      	pop	{r3, r4, r5, pc}
 8005d3e:	bf00      	nop
 8005d40:	20005e24 	.word	0x20005e24

08005d44 <_getpid_r>:
 8005d44:	f7fb beb8 	b.w	8001ab8 <_getpid>

08005d48 <__swhatbuf_r>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d50:	2900      	cmp	r1, #0
 8005d52:	b096      	sub	sp, #88	; 0x58
 8005d54:	4615      	mov	r5, r2
 8005d56:	461e      	mov	r6, r3
 8005d58:	da0d      	bge.n	8005d76 <__swhatbuf_r+0x2e>
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d60:	f04f 0100 	mov.w	r1, #0
 8005d64:	bf0c      	ite	eq
 8005d66:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005d6a:	2340      	movne	r3, #64	; 0x40
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	6031      	str	r1, [r6, #0]
 8005d70:	602b      	str	r3, [r5, #0]
 8005d72:	b016      	add	sp, #88	; 0x58
 8005d74:	bd70      	pop	{r4, r5, r6, pc}
 8005d76:	466a      	mov	r2, sp
 8005d78:	f000 f848 	bl	8005e0c <_fstat_r>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	dbec      	blt.n	8005d5a <__swhatbuf_r+0x12>
 8005d80:	9901      	ldr	r1, [sp, #4]
 8005d82:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005d86:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005d8a:	4259      	negs	r1, r3
 8005d8c:	4159      	adcs	r1, r3
 8005d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d92:	e7eb      	b.n	8005d6c <__swhatbuf_r+0x24>

08005d94 <__smakebuf_r>:
 8005d94:	898b      	ldrh	r3, [r1, #12]
 8005d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d98:	079d      	lsls	r5, r3, #30
 8005d9a:	4606      	mov	r6, r0
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	d507      	bpl.n	8005db0 <__smakebuf_r+0x1c>
 8005da0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	6123      	str	r3, [r4, #16]
 8005da8:	2301      	movs	r3, #1
 8005daa:	6163      	str	r3, [r4, #20]
 8005dac:	b002      	add	sp, #8
 8005dae:	bd70      	pop	{r4, r5, r6, pc}
 8005db0:	ab01      	add	r3, sp, #4
 8005db2:	466a      	mov	r2, sp
 8005db4:	f7ff ffc8 	bl	8005d48 <__swhatbuf_r>
 8005db8:	9900      	ldr	r1, [sp, #0]
 8005dba:	4605      	mov	r5, r0
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	f7ff f82f 	bl	8004e20 <_malloc_r>
 8005dc2:	b948      	cbnz	r0, 8005dd8 <__smakebuf_r+0x44>
 8005dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dc8:	059a      	lsls	r2, r3, #22
 8005dca:	d4ef      	bmi.n	8005dac <__smakebuf_r+0x18>
 8005dcc:	f023 0303 	bic.w	r3, r3, #3
 8005dd0:	f043 0302 	orr.w	r3, r3, #2
 8005dd4:	81a3      	strh	r3, [r4, #12]
 8005dd6:	e7e3      	b.n	8005da0 <__smakebuf_r+0xc>
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	6020      	str	r0, [r4, #0]
 8005ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de0:	81a3      	strh	r3, [r4, #12]
 8005de2:	9b00      	ldr	r3, [sp, #0]
 8005de4:	6163      	str	r3, [r4, #20]
 8005de6:	9b01      	ldr	r3, [sp, #4]
 8005de8:	6120      	str	r0, [r4, #16]
 8005dea:	b15b      	cbz	r3, 8005e04 <__smakebuf_r+0x70>
 8005dec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005df0:	4630      	mov	r0, r6
 8005df2:	f000 f81d 	bl	8005e30 <_isatty_r>
 8005df6:	b128      	cbz	r0, 8005e04 <__smakebuf_r+0x70>
 8005df8:	89a3      	ldrh	r3, [r4, #12]
 8005dfa:	f023 0303 	bic.w	r3, r3, #3
 8005dfe:	f043 0301 	orr.w	r3, r3, #1
 8005e02:	81a3      	strh	r3, [r4, #12]
 8005e04:	89a3      	ldrh	r3, [r4, #12]
 8005e06:	431d      	orrs	r5, r3
 8005e08:	81a5      	strh	r5, [r4, #12]
 8005e0a:	e7cf      	b.n	8005dac <__smakebuf_r+0x18>

08005e0c <_fstat_r>:
 8005e0c:	b538      	push	{r3, r4, r5, lr}
 8005e0e:	4d07      	ldr	r5, [pc, #28]	; (8005e2c <_fstat_r+0x20>)
 8005e10:	2300      	movs	r3, #0
 8005e12:	4604      	mov	r4, r0
 8005e14:	4608      	mov	r0, r1
 8005e16:	4611      	mov	r1, r2
 8005e18:	602b      	str	r3, [r5, #0]
 8005e1a:	f7fb feb4 	bl	8001b86 <_fstat>
 8005e1e:	1c43      	adds	r3, r0, #1
 8005e20:	d102      	bne.n	8005e28 <_fstat_r+0x1c>
 8005e22:	682b      	ldr	r3, [r5, #0]
 8005e24:	b103      	cbz	r3, 8005e28 <_fstat_r+0x1c>
 8005e26:	6023      	str	r3, [r4, #0]
 8005e28:	bd38      	pop	{r3, r4, r5, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20005e24 	.word	0x20005e24

08005e30 <_isatty_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4d06      	ldr	r5, [pc, #24]	; (8005e4c <_isatty_r+0x1c>)
 8005e34:	2300      	movs	r3, #0
 8005e36:	4604      	mov	r4, r0
 8005e38:	4608      	mov	r0, r1
 8005e3a:	602b      	str	r3, [r5, #0]
 8005e3c:	f7fb feb3 	bl	8001ba6 <_isatty>
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	d102      	bne.n	8005e4a <_isatty_r+0x1a>
 8005e44:	682b      	ldr	r3, [r5, #0]
 8005e46:	b103      	cbz	r3, 8005e4a <_isatty_r+0x1a>
 8005e48:	6023      	str	r3, [r4, #0]
 8005e4a:	bd38      	pop	{r3, r4, r5, pc}
 8005e4c:	20005e24 	.word	0x20005e24

08005e50 <_gettimeofday>:
 8005e50:	4b02      	ldr	r3, [pc, #8]	; (8005e5c <_gettimeofday+0xc>)
 8005e52:	2258      	movs	r2, #88	; 0x58
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e5a:	4770      	bx	lr
 8005e5c:	20005e24 	.word	0x20005e24

08005e60 <_init>:
 8005e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e62:	bf00      	nop
 8005e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e66:	bc08      	pop	{r3}
 8005e68:	469e      	mov	lr, r3
 8005e6a:	4770      	bx	lr

08005e6c <_fini>:
 8005e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6e:	bf00      	nop
 8005e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e72:	bc08      	pop	{r3}
 8005e74:	469e      	mov	lr, r3
 8005e76:	4770      	bx	lr
